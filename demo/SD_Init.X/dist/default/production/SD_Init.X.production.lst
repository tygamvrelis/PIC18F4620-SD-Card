

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Apr 17 02:43:48 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46  0000                     
    47                           ; Version 1.42
    48                           ; Generated 13/04/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4620 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	mediumconst
    83  00FE52                     __pmediumconst:
    84                           	opt stack 0
    85  00FE52  00                 	db	0
    86  00FE53                     _dpowers:
    87                           	opt stack 0
    88  00FE53  0001               	dw	1
    89  00FE55  0000               	dw	0
    90  00FE57  000A               	dw	10
    91  00FE59  0000               	dw	0
    92  00FE5B  0064               	dw	100
    93  00FE5D  0000               	dw	0
    94  00FE5F  03E8               	dw	1000
    95  00FE61  0000               	dw	0
    96  00FE63  2710               	dw	10000
    97  00FE65  0000               	dw	0
    98  00FE67  86A0               	dw	34464
    99  00FE69  0001               	dw	1
   100  00FE6B  4240               	dw	16960
   101  00FE6D  000F               	dw	15
   102  00FE6F  9680               	dw	38528
   103  00FE71  0098               	dw	152
   104  00FE73  E100               	dw	57600
   105  00FE75  05F5               	dw	1525
   106  00FE77  CA00               	dw	51712
   107  00FE79  3B9A               	dw	15258
   108  00FE7B                     __end_of_dpowers:
   109                           	opt stack 0
   110  00FE7B                     __powers_:
   111                           	opt stack 0
   112  00FE7B  00                 	db	0
   113  00FE7C  80                 	db	128
   114  00FE7D  3F                 	db	63
   115  00FE7E  00                 	db	0
   116  00FE7F  20                 	db	32
   117  00FE80  41                 	db	65
   118  00FE81  00                 	db	0
   119  00FE82  C8                 	db	200
   120  00FE83  42                 	db	66
   121  00FE84  00                 	db	0
   122  00FE85  7A                 	db	122
   123  00FE86  44                 	db	68
   124  00FE87  40                 	db	64
   125  00FE88  1C                 	db	28
   126  00FE89  46                 	db	70
   127  00FE8A  50                 	db	80
   128  00FE8B  C3                 	db	195
   129  00FE8C  47                 	db	71
   130  00FE8D  24                 	db	36
   131  00FE8E  74                 	db	116
   132  00FE8F  49                 	db	73
   133  00FE90  97                 	db	151
   134  00FE91  18                 	db	24
   135  00FE92  4B                 	db	75
   136  00FE93  BC                 	db	188
   137  00FE94  BE                 	db	190
   138  00FE95  4C                 	db	76
   139  00FE96  6B                 	db	107
   140  00FE97  6E                 	db	110
   141  00FE98  4E                 	db	78
   142  00FE99  03                 	db	3
   143  00FE9A  15                 	db	21
   144  00FE9B  50                 	db	80
   145  00FE9C  79                 	db	121
   146  00FE9D  AD                 	db	173
   147  00FE9E  60                 	db	96
   148  00FE9F  F3                 	db	243
   149  00FEA0  49                 	db	73
   150  00FEA1  71                 	db	113
   151  00FEA2                     __end_of__powers_:
   152                           	opt stack 0
   153  00FEA2                     __npowers_:
   154                           	opt stack 0
   155  00FEA2  00                 	db	0
   156  00FEA3  80                 	db	128
   157  00FEA4  3F                 	db	63
   158  00FEA5  CD                 	db	205
   159  00FEA6  CC                 	db	204
   160  00FEA7  3D                 	db	61
   161  00FEA8  D7                 	db	215
   162  00FEA9  23                 	db	35
   163  00FEAA  3C                 	db	60
   164  00FEAB  12                 	db	18
   165  00FEAC  83                 	db	131
   166  00FEAD  3A                 	db	58
   167  00FEAE  B7                 	db	183
   168  00FEAF  D1                 	db	209
   169  00FEB0  38                 	db	56
   170  00FEB1  C6                 	db	198
   171  00FEB2  27                 	db	39
   172  00FEB3  37                 	db	55
   173  00FEB4  38                 	db	56
   174  00FEB5  86                 	db	134
   175  00FEB6  35                 	db	53
   176  00FEB7  C0                 	db	192
   177  00FEB8  D6                 	db	214
   178  00FEB9  33                 	db	51
   179  00FEBA  CC                 	db	204
   180  00FEBB  2B                 	db	43
   181  00FEBC  32                 	db	50
   182  00FEBD  70                 	db	112
   183  00FEBE  89                 	db	137
   184  00FEBF  30                 	db	48
   185  00FEC0  E7                 	db	231
   186  00FEC1  DB                 	db	219
   187  00FEC2  2E                 	db	46
   188  00FEC3  E5                 	db	229
   189  00FEC4  3C                 	db	60
   190  00FEC5  1E                 	db	30
   191  00FEC6  42                 	db	66
   192  00FEC7  A2                 	db	162
   193  00FEC8  0D                 	db	13
   194  00FEC9                     __end_of__npowers_:
   195                           	opt stack 0
   196  00FEC9                     _hexpowers:
   197                           	opt stack 0
   198  00FEC9  0001               	dw	1
   199  00FECB  0000               	dw	0
   200  00FECD  0010               	dw	16
   201  00FECF  0000               	dw	0
   202  00FED1  0100               	dw	256
   203  00FED3  0000               	dw	0
   204  00FED5  1000               	dw	4096
   205  00FED7  0000               	dw	0
   206  00FED9  0000               	dw	0
   207  00FEDB  0001               	dw	1
   208  00FEDD  0000               	dw	0
   209  00FEDF  0010               	dw	16
   210  00FEE1  0000               	dw	0
   211  00FEE3  0100               	dw	256
   212  00FEE5  0000               	dw	0
   213  00FEE7  1000               	dw	4096
   214  00FEE9                     __end_of_hexpowers:
   215                           	opt stack 0
   216  00FEE9                     _LCD_LEFT:
   217                           	opt stack 0
   218  00FEE9  00                 	db	0
   219  00FEEA                     __end_of_LCD_LEFT:
   220                           	opt stack 0
   221  00FEEA                     _LCD_RIGHT:
   222                           	opt stack 0
   223  00FEEA  01                 	db	1
   224  00FEEB                     __end_of_LCD_RIGHT:
   225                           	opt stack 0
   226  00FEEB                     _LCD_SIZE_VERT:
   227                           	opt stack 0
   228  00FEEB  02                 	db	2
   229  00FEEC                     __end_of_LCD_SIZE_VERT:
   230                           	opt stack 0
   231  00FEEC                     _LCD_SIZE_HORZ:
   232                           	opt stack 0
   233  00FEEC  10                 	db	16
   234  00FEED                     __end_of_LCD_SIZE_HORZ:
   235                           	opt stack 0
   236  00FEED                     _LCD_VERT_LIMIT:
   237                           	opt stack 0
   238  00FEED  02                 	db	2
   239  00FEEE                     __end_of_LCD_VERT_LIMIT:
   240                           	opt stack 0
   241  00FEEE                     _LCD_HORZ_LIMIT:
   242                           	opt stack 0
   243  00FEEE  28                 	db	40
   244  00FEEF                     __end_of_LCD_HORZ_LIMIT:
   245                           	opt stack 0
   246  00FEEF                     _STOP_TRAN:
   247                           	opt stack 0
   248  00FEEF  FD                 	db	253
   249  00FEF0                     __end_of_STOP_TRAN:
   250                           	opt stack 0
   251  00FEF0                     _START_BLOCK_TOKEN:
   252                           	opt stack 0
   253  00FEF0  FC                 	db	252
   254  00FEF1                     __end_of_START_BLOCK_TOKEN:
   255                           	opt stack 0
   256  00FEF1                     _START_BLOCK:
   257                           	opt stack 0
   258  00FEF1  FE                 	db	254
   259  00FEF2                     __end_of_START_BLOCK:
   260                           	opt stack 0
   261  00FEF2                     _R1_ILLEGAL_COMMAND:
   262                           	opt stack 0
   263  00FEF2  04                 	db	4
   264  00FEF3                     __end_of_R1_ILLEGAL_COMMAND:
   265                           	opt stack 0
   266  00FEF3                     _R1_IDLE_STATE:
   267                           	opt stack 0
   268  00FEF3  01                 	db	1
   269  00FEF4                     __end_of_R1_IDLE_STATE:
   270                           	opt stack 0
   271  00FEF4                     _R1_READY_STATE:
   272                           	opt stack 0
   273  00FEF4  00                 	db	0
   274  00FEF5                     __end_of_R1_READY_STATE:
   275                           	opt stack 0
   276  00FEF5                     _ACMD41:
   277                           	opt stack 0
   278  00FEF5  29                 	db	41
   279  00FEF6                     __end_of_ACMD41:
   280                           	opt stack 0
   281  00FEF6                     _ACMD23:
   282                           	opt stack 0
   283  00FEF6  17                 	db	23
   284  00FEF7                     __end_of_ACMD23:
   285                           	opt stack 0
   286  00FEF7                     _ACMD22:
   287                           	opt stack 0
   288  00FEF7  16                 	db	22
   289  00FEF8                     __end_of_ACMD22:
   290                           	opt stack 0
   291  00FEF8                     _CMD58:
   292                           	opt stack 0
   293  00FEF8  3A                 	db	58
   294  00FEF9                     __end_of_CMD58:
   295                           	opt stack 0
   296  00FEF9                     _CMD55:
   297                           	opt stack 0
   298  00FEF9  37                 	db	55
   299  00FEFA                     __end_of_CMD55:
   300                           	opt stack 0
   301  00FEFA                     _CMD38:
   302                           	opt stack 0
   303  00FEFA  26                 	db	38
   304  00FEFB                     __end_of_CMD38:
   305                           	opt stack 0
   306  00FEFB                     _CMD33:
   307                           	opt stack 0
   308  00FEFB  21                 	db	33
   309  00FEFC                     __end_of_CMD33:
   310                           	opt stack 0
   311  00FEFC                     _CMD32:
   312                           	opt stack 0
   313  00FEFC  20                 	db	32
   314  00FEFD                     __end_of_CMD32:
   315                           	opt stack 0
   316  00FEFD                     _CMD25:
   317                           	opt stack 0
   318  00FEFD  19                 	db	25
   319  00FEFE                     __end_of_CMD25:
   320                           	opt stack 0
   321  00FEFE                     _CMD24:
   322                           	opt stack 0
   323  00FEFE  18                 	db	24
   324  00FEFF                     __end_of_CMD24:
   325                           	opt stack 0
   326  00FEFF                     _CMD18:
   327                           	opt stack 0
   328  00FEFF  12                 	db	18
   329  00FF00                     __end_of_CMD18:
   330                           	opt stack 0
   331  00FF00                     _CMD17:
   332                           	opt stack 0
   333  00FF00  11                 	db	17
   334  00FF01                     __end_of_CMD17:
   335                           	opt stack 0
   336  00FF01                     _CMD16:
   337                           	opt stack 0
   338  00FF01  10                 	db	16
   339  00FF02                     __end_of_CMD16:
   340                           	opt stack 0
   341  00FF02                     _CMD13:
   342                           	opt stack 0
   343  00FF02  0D                 	db	13
   344  00FF03                     __end_of_CMD13:
   345                           	opt stack 0
   346  00FF03                     _CMD12:
   347                           	opt stack 0
   348  00FF03  0C                 	db	12
   349  00FF04                     __end_of_CMD12:
   350                           	opt stack 0
   351  00FF04                     _CMD10:
   352                           	opt stack 0
   353  00FF04  0A                 	db	10
   354  00FF05                     __end_of_CMD10:
   355                           	opt stack 0
   356  00FF05                     _CMD9:
   357                           	opt stack 0
   358  00FF05  09                 	db	9
   359  00FF06                     __end_of_CMD9:
   360                           	opt stack 0
   361  00FF06                     _CMD8CRC:
   362                           	opt stack 0
   363  00FF06  87                 	db	135
   364  00FF07                     __end_of_CMD8CRC:
   365                           	opt stack 0
   366  00FF07                     _CMD8:
   367                           	opt stack 0
   368  00FF07  08                 	db	8
   369  00FF08                     __end_of_CMD8:
   370                           	opt stack 0
   371  00FF08                     _CMD1:
   372                           	opt stack 0
   373  00FF08  01                 	db	1
   374  00FF09                     __end_of_CMD1:
   375                           	opt stack 0
   376  00FF09                     _CMD0CRC:
   377                           	opt stack 0
   378  00FF09  95                 	db	149
   379  00FF0A                     __end_of_CMD0CRC:
   380                           	opt stack 0
   381  00FF0A                     _CMD0:
   382                           	opt stack 0
   383  00FF0A  00                 	db	0
   384  00FF0B                     __end_of_CMD0:
   385                           	opt stack 0
   386  0000                     _LATDbits	set	3980
   387  0000                     _TRISCbits	set	3988
   388  0000                     _SSPSTAT	set	4039
   389  0000                     _SSPSTATbits	set	4039
   390  0000                     _SSPBUF	set	4041
   391  0000                     _SSPCON1	set	4038
   392  0000                     _SSPCON1bits	set	4038
   393  0000                     _TRISEbits	set	3990
   394  0000                     _OSCCONbits	set	4051
   395  0000                     _OSCTUNEbits	set	3995
   396  0000                     _OSCTUNE	set	3995
   397  0000                     _OSCCON	set	4051
   398  0000                     _LATEbits	set	3981
   399  0000                     _INTCONbits	set	4082
   400  0000                     _ADCON2	set	4032
   401  0000                     _CMCONbits	set	4020
   402  0000                     _CVRCON	set	4021
   403  0000                     _ADCON1	set	4033
   404  0000                     _ADCON0	set	4034
   405  0000                     _TRISE	set	3990
   406  0000                     _TRISD	set	3989
   407  0000                     _TRISC	set	3988
   408  0000                     _TRISB	set	3987
   409  0000                     _TRISA	set	3986
   410  0000                     _LATE	set	3981
   411  0000                     _LATD	set	3980
   412  0000                     _LATC	set	3979
   413  0000                     _LATB	set	3978
   414  0000                     _LATA	set	3977
   415  0000                     _SSPIF	set	31987
   416  0000                     _PEIE	set	32662
   417  0000                     _INT1IE	set	32643
   418  0000                     _nRBPU	set	32655
   419  00FF0B                     STR_20:
   420  00FF0B  30                 	db	48	;'0'
   421  00FF0C  31                 	db	49	;'1'
   422  00FF0D  32                 	db	50	;'2'
   423  00FF0E  33                 	db	51	;'3'
   424  00FF0F  34                 	db	52	;'4'
   425  00FF10  35                 	db	53	;'5'
   426  00FF11  36                 	db	54	;'6'
   427  00FF12  37                 	db	55	;'7'
   428  00FF13  38                 	db	56	;'8'
   429  00FF14  39                 	db	57	;'9'
   430  00FF15  61                 	db	97	;'a'
   431  00FF16  62                 	db	98	;'b'
   432  00FF17  63                 	db	99	;'c'
   433  00FF18  64                 	db	100	;'d'
   434  00FF19  65                 	db	101	;'e'
   435  00FF1A  66                 	db	102	;'f'
   436  00FF1B  00                 	db	0
   437  00FF1C                     STR_1:
   438  00FF1C  53                 	db	83	;'S'
   439  00FF1D  44                 	db	68	;'D'
   440  00FF1E  20                 	db	32
   441  00FF1F  69                 	db	105	;'i'
   442  00FF20  6E                 	db	110	;'n'
   443  00FF21  69                 	db	105	;'i'
   444  00FF22  74                 	db	116	;'t'
   445  00FF23  20                 	db	32
   446  00FF24  73                 	db	115	;'s'
   447  00FF25  75                 	db	117	;'u'
   448  00FF26  63                 	db	99	;'c'
   449  00FF27  63                 	db	99	;'c'
   450  00FF28  65                 	db	101	;'e'
   451  00FF29  73                 	db	115	;'s'
   452  00FF2A  73                 	db	115	;'s'
   453  00FF2B  21                 	db	33
   454  00FF2C  00                 	db	0
   455  00FF2D                     STR_19:
   456  00FF2D  53                 	db	83	;'S'
   457  00FF2E  44                 	db	68	;'D'
   458  00FF2F  20                 	db	32
   459  00FF30  69                 	db	105	;'i'
   460  00FF31  6E                 	db	110	;'n'
   461  00FF32  69                 	db	105	;'i'
   462  00FF33  74                 	db	116	;'t'
   463  00FF34  20                 	db	32
   464  00FF35  66                 	db	102	;'f'
   465  00FF36  61                 	db	97	;'a'
   466  00FF37  69                 	db	105	;'i'
   467  00FF38  6C                 	db	108	;'l'
   468  00FF39  65                 	db	101	;'e'
   469  00FF3A  64                 	db	100	;'d'
   470  00FF3B  21                 	db	33
   471  00FF3C  00                 	db	0
   472  00FF3D                     STR_2:
   473  00FF3D  54                 	db	84	;'T'
   474  00FF3E  79                 	db	121	;'y'
   475  00FF3F  70                 	db	112	;'p'
   476  00FF40  65                 	db	101	;'e'
   477  00FF41  3A                 	db	58	;':'
   478  00FF42  20                 	db	32
   479  00FF43  53                 	db	83	;'S'
   480  00FF44  44                 	db	68	;'D'
   481  00FF45  48                 	db	72	;'H'
   482  00FF46  43                 	db	67	;'C'
   483  00FF47  2F                 	db	47
   484  00FF48  53                 	db	83	;'S'
   485  00FF49  44                 	db	68	;'D'
   486  00FF4A  58                 	db	88	;'X'
   487  00FF4B  43                 	db	67	;'C'
   488  00FF4C  00                 	db	0
   489  00FF4D                     STR_11:
   490  00FF4D  50                 	db	80	;'P'
   491  00FF4E  4E                 	db	78	;'N'
   492  00FF4F  4D                 	db	77	;'M'
   493  00FF50  3A                 	db	58	;':'
   494  00FF51  20                 	db	32
   495  00FF52  25                 	db	37
   496  00FF53  63                 	db	99	;'c'
   497  00FF54  25                 	db	37
   498  00FF55  63                 	db	99	;'c'
   499  00FF56  25                 	db	37
   500  00FF57  63                 	db	99	;'c'
   501  00FF58  25                 	db	37
   502  00FF59  63                 	db	99	;'c'
   503  00FF5A  25                 	db	37
   504  00FF5B  63                 	db	99	;'c'
   505  00FF5C  00                 	db	0
   506  00FF5D                     STR_8:
   507  00FF5D  53                 	db	83	;'S'
   508  00FF5E  44                 	db	68	;'D'
   509  00FF5F  20                 	db	32
   510  00FF60  56                 	db	86	;'V'
   511  00FF61  65                 	db	101	;'e'
   512  00FF62  72                 	db	114	;'r'
   513  00FF63  73                 	db	115	;'s'
   514  00FF64  69                 	db	105	;'i'
   515  00FF65  6F                 	db	111	;'o'
   516  00FF66  6E                 	db	110	;'n'
   517  00FF67  3A                 	db	58	;':'
   518  00FF68  20                 	db	32
   519  00FF69  25                 	db	37
   520  00FF6A  75                 	db	117	;'u'
   521  00FF6B  00                 	db	0
   522  00FF6C                     STR_17:
   523  00FF6C  4E                 	db	78	;'N'
   524  00FF6D  75                 	db	117	;'u'
   525  00FF6E  6D                 	db	109	;'m'
   526  00FF6F  62                 	db	98	;'b'
   527  00FF70  65                 	db	101	;'e'
   528  00FF71  72                 	db	114	;'r'
   529  00FF72  20                 	db	32
   530  00FF73  6F                 	db	111	;'o'
   531  00FF74  66                 	db	102	;'f'
   532  00FF75  20                 	db	32
   533  00FF76  4D                 	db	77	;'M'
   534  00FF77  42                 	db	66	;'B'
   535  00FF78  3A                 	db	58	;':'
   536  00FF79  00                 	db	0
   537  00FF7A                     STR_6:
   538  00FF7A  42                 	db	66	;'B'
   539  00FF7B  6C                 	db	108	;'l'
   540  00FF7C  6B                 	db	107	;'k'
   541  00FF7D  53                 	db	83	;'S'
   542  00FF7E  69                 	db	105	;'i'
   543  00FF7F  7A                 	db	122	;'z'
   544  00FF80  65                 	db	101	;'e'
   545  00FF81  3A                 	db	58	;':'
   546  00FF82  20                 	db	32
   547  00FF83  25                 	db	37
   548  00FF84  64                 	db	100	;'d'
   549  00FF85  20                 	db	32
   550  00FF86  62                 	db	98	;'b'
   551  00FF87  00                 	db	0
   552  00FF88                     STR_5:
   553  00FF88  54                 	db	84	;'T'
   554  00FF89  79                 	db	121	;'y'
   555  00FF8A  70                 	db	112	;'p'
   556  00FF8B  65                 	db	101	;'e'
   557  00FF8C  3A                 	db	58	;':'
   558  00FF8D  20                 	db	32
   559  00FF8E  55                 	db	85	;'U'
   560  00FF8F  6E                 	db	110	;'n'
   561  00FF90  6B                 	db	107	;'k'
   562  00FF91  6E                 	db	110	;'n'
   563  00FF92  6F                 	db	111	;'o'
   564  00FF93  77                 	db	119	;'w'
   565  00FF94  6E                 	db	110	;'n'
   566  00FF95  00                 	db	0
   567  00FF96                     STR_10:
   568  00FF96  4F                 	db	79	;'O'
   569  00FF97  45                 	db	69	;'E'
   570  00FF98  4D                 	db	77	;'M'
   571  00FF99  20                 	db	32
   572  00FF9A  49                 	db	73	;'I'
   573  00FF9B  44                 	db	68	;'D'
   574  00FF9C  3A                 	db	58	;':'
   575  00FF9D  20                 	db	32
   576  00FF9E  25                 	db	37
   577  00FF9F  63                 	db	99	;'c'
   578  00FFA0  25                 	db	37
   579  00FFA1  63                 	db	99	;'c'
   580  00FFA2  00                 	db	0
   581  00FFA3                     STR_9:
   582  00FFA3  4D                 	db	77	;'M'
   583  00FFA4  46                 	db	70	;'F'
   584  00FFA5  47                 	db	71	;'G'
   585  00FFA6  20                 	db	32
   586  00FFA7  49                 	db	73	;'I'
   587  00FFA8  44                 	db	68	;'D'
   588  00FFA9  3A                 	db	58	;':'
   589  00FFAA  20                 	db	32
   590  00FFAB  30                 	db	48	;'0'
   591  00FFAC  78                 	db	120	;'x'
   592  00FFAD  25                 	db	37
   593  00FFAE  78                 	db	120	;'x'
   594  00FFAF  00                 	db	0
   595  00FFB0                     STR_3:
   596  00FFB0  54                 	db	84	;'T'
   597  00FFB1  79                 	db	121	;'y'
   598  00FFB2  70                 	db	112	;'p'
   599  00FFB3  65                 	db	101	;'e'
   600  00FFB4  3A                 	db	58	;':'
   601  00FFB5  20                 	db	32
   602  00FFB6  53                 	db	83	;'S'
   603  00FFB7  44                 	db	68	;'D'
   604  00FFB8  53                 	db	83	;'S'
   605  00FFB9  43                 	db	67	;'C'
   606  00FFBA  00                 	db	0
   607  00FFBB                     STR_12:
   608  00FFBB  50                 	db	80	;'P'
   609  00FFBC  52                 	db	82	;'R'
   610  00FFBD  56                 	db	86	;'V'
   611  00FFBE  3A                 	db	58	;':'
   612  00FFBF  20                 	db	32
   613  00FFC0  25                 	db	37
   614  00FFC1  75                 	db	117	;'u'
   615  00FFC2  2E                 	db	46
   616  00FFC3  25                 	db	37
   617  00FFC4  75                 	db	117	;'u'
   618  00FFC5  00                 	db	0
   619  00FFC6                     STR_15:
   620  00FFC6  4D                 	db	77	;'M'
   621  00FFC7  44                 	db	68	;'D'
   622  00FFC8  54                 	db	84	;'T'
   623  00FFC9  3A                 	db	58	;':'
   624  00FFCA  20                 	db	32
   625  00FFCB  25                 	db	37
   626  00FFCC  75                 	db	117	;'u'
   627  00FFCD  2F                 	db	47
   628  00FFCE  25                 	db	37
   629  00FFCF  75                 	db	117	;'u'
   630  00FFD0  00                 	db	0
   631  00FFD1                     STR_7:
   632  00FFD1  23                 	db	35
   633  00FFD2  42                 	db	66	;'B'
   634  00FFD3  6C                 	db	108	;'l'
   635  00FFD4  6B                 	db	107	;'k'
   636  00FFD5  73                 	db	115	;'s'
   637  00FFD6  3A                 	db	58	;':'
   638  00FFD7  20                 	db	32
   639  00FFD8  25                 	db	37
   640  00FFD9  6C                 	db	108	;'l'
   641  00FFDA  75                 	db	117	;'u'
   642  00FFDB  00                 	db	0
   643  00FFDC                     STR_4:
   644  00FFDC  54                 	db	84	;'T'
   645  00FFDD  79                 	db	121	;'y'
   646  00FFDE  70                 	db	112	;'p'
   647  00FFDF  65                 	db	101	;'e'
   648  00FFE0  3A                 	db	58	;':'
   649  00FFE1  20                 	db	32
   650  00FFE2  4D                 	db	77	;'M'
   651  00FFE3  4D                 	db	77	;'M'
   652  00FFE4  43                 	db	67	;'C'
   653  00FFE5  00                 	db	0
   654  00FFE6                     STR_13:
   655  00FFE6  50                 	db	80	;'P'
   656  00FFE7  53                 	db	83	;'S'
   657  00FFE8  4E                 	db	78	;'N'
   658  00FFE9  3A                 	db	58	;':'
   659  00FFEA  20                 	db	32
   660  00FFEB  30                 	db	48	;'0'
   661  00FFEC  78                 	db	120	;'x'
   662  00FFED  25                 	db	37
   663  00FFEE  78                 	db	120	;'x'
   664  00FFEF  00                 	db	0
   665  00FFF0                     STR_16:
   666  00FFF0  43                 	db	67	;'C'
   667  00FFF1  52                 	db	82	;'R'
   668  00FFF2  43                 	db	67	;'C'
   669  00FFF3  37                 	db	55	;'7'
   670  00FFF4  3A                 	db	58	;':'
   671  00FFF5  20                 	db	32
   672  00FFF6  25                 	db	37
   673  00FFF7  75                 	db	117	;'u'
   674  00FFF8  00                 	db	0
   675  00FFF9                     STR_18:
   676  00FFF9  25                 	db	37
   677  00FFFA  2E                 	db	46
   678  00FFFB  32                 	db	50	;'2'
   679  00FFFC  66                 	db	102	;'f'
   680  00FFFD  20                 	db	32
   681  00FFFE  00                 	db	0
   682  0000                     
   683                           ; #config settings
   684  00FFFF  00                 	db	0	; dummy byte at the end
   685  0000                     
   686                           	psect	cinit
   687  00D4F4                     __pcinit:
   688                           	opt stack 0
   689  00D4F4                     start_initialization:
   690                           	opt stack 0
   691  00D4F4                     __initialization:
   692                           	opt stack 0
   693                           
   694                           ; Clear objects allocated to BANK0 (62 bytes)
   695  00D4F4  EE00  F080         	lfsr	0,__pbssBANK0
   696  00D4F8  0E3E               	movlw	62
   697  00D4FA                     clear_0:
   698  00D4FA  6AEE               	clrf	postinc0,c
   699  00D4FC  06E8               	decf	wreg,f,c
   700  00D4FE  E1FD               	bnz	clear_0
   701                           
   702                           ; Clear objects allocated to COMRAM (2 bytes)
   703  00D500  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   704  00D502  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   705  00D504                     end_of_initialization:
   706                           	opt stack 0
   707  00D504                     __end_of__initialization:
   708                           	opt stack 0
   709  00D504  0E00               	movlw	low (__Lmediumconst shr (0+16))
   710  00D506  6EF8               	movwf	tblptru,c
   711  00D508  0100               	movlb	0
   712  00D50A  EF47  F074         	goto	_main	;jump to C main() function
   713                           tblptru	equ	0xFF8
   714                           postinc0	equ	0xFEE
   715                           wreg	equ	0xFE8
   716                           
   717                           	psect	bssCOMRAM
   718  00007B                     __pbssCOMRAM:
   719                           	opt stack 0
   720  00007B                     lcd@LCDinterruptState:
   721                           	opt stack 0
   722  00007B                     	ds	1
   723  00007C                     	ds	1
   724                           tblptru	equ	0xFF8
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           
   728                           	psect	bssBANK0
   729  000080                     __pbssBANK0:
   730                           	opt stack 0
   731  000080                     _SDCard:
   732                           	opt stack 0
   733  000080                     	ds	46
   734  0000AE                     initSD@F3023:
   735                           	opt stack 0
   736  0000AE                     	ds	16
   737                           tblptru	equ	0xFF8
   738                           postinc0	equ	0xFEE
   739                           wreg	equ	0xFE8
   740                           
   741                           	psect	cstackCOMRAM
   742  000001                     __pcstackCOMRAM:
   743                           	opt stack 0
   744  000001                     ??_spiTransfer:
   745  000001                     ??_isdigit:
   746  000001                     ?___awmod:
   747                           	opt stack 0
   748  000001                     ?___ftpack:
   749                           	opt stack 0
   750  000001                     ?___ftneg:
   751                           	opt stack 0
   752  000001                     ?__tdiv_to_l_:
   753                           	opt stack 0
   754  000001                     ?__div_to_l_:
   755                           	opt stack 0
   756  000001                     ?___lldiv:
   757                           	opt stack 0
   758  000001                     spiInit@divider:
   759                           	opt stack 0
   760  000001                     lcdNibble@temp:
   761                           	opt stack 0
   762  000001                     ___awmod@dividend:
   763                           	opt stack 0
   764  000001                     __div_to_l_@f1:
   765                           	opt stack 0
   766  000001                     ___ftpack@arg:
   767                           	opt stack 0
   768  000001                     __tdiv_to_l_@f1:
   769                           	opt stack 0
   770  000001                     ___ftge@ff1:
   771                           	opt stack 0
   772  000001                     ___ftneg@f1:
   773                           	opt stack 0
   774  000001                     ___lldiv@dividend:
   775                           	opt stack 0
   776                           
   777                           ; 4 bytes @ 0x0
   778  000001                     	ds	1
   779  000002                     spiTransfer@byteToTransfer:
   780                           	opt stack 0
   781  000002                     lcdNibble@data:
   782                           	opt stack 0
   783  000002                     _isdigit$1176:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x1
   787  000002                     	ds	1
   788  000003                     spiSend@val:
   789                           	opt stack 0
   790  000003                     lcdInst@data:
   791                           	opt stack 0
   792  000003                     putch@data:
   793                           	opt stack 0
   794  000003                     isdigit@c:
   795                           	opt stack 0
   796  000003                     ___awmod@divisor:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x2
   800  000003                     	ds	1
   801  000004                     ??_initLCD:
   802  000004                     ___ftpack@exp:
   803                           	opt stack 0
   804  000004                     __div_to_l_@f2:
   805                           	opt stack 0
   806  000004                     __tdiv_to_l_@f2:
   807                           	opt stack 0
   808  000004                     ___ftge@ff2:
   809                           	opt stack 0
   810  000004                     SD_Command@arg:
   811                           	opt stack 0
   812                           
   813                           ; 4 bytes @ 0x3
   814  000004                     	ds	1
   815  000005                     ___awmod@counter:
   816                           	opt stack 0
   817  000005                     ___ftpack@sign:
   818                           	opt stack 0
   819  000005                     ___lldiv@divisor:
   820                           	opt stack 0
   821                           
   822                           ; 4 bytes @ 0x4
   823  000005                     	ds	1
   824  000006                     ??___ftpack:
   825  000006                     ___awmod@sign:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x5
   829  000006                     	ds	1
   830  000007                     ??__tdiv_to_l_:
   831  000007                     ??___ftge:
   832  000007                     ?___awdiv:
   833                           	opt stack 0
   834  000007                     ___awdiv@dividend:
   835                           	opt stack 0
   836  000007                     __div_to_l_@quot:
   837                           	opt stack 0
   838                           
   839                           ; 4 bytes @ 0x6
   840  000007                     	ds	1
   841  000008                     SD_Command@ptr:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x7
   845  000008                     	ds	1
   846  000009                     ?___lltoft:
   847                           	opt stack 0
   848  000009                     ?___lwtoft:
   849                           	opt stack 0
   850  000009                     ___awdiv@divisor:
   851                           	opt stack 0
   852  000009                     ___lwtoft@c:
   853                           	opt stack 0
   854  000009                     ___lldiv@quotient:
   855                           	opt stack 0
   856  000009                     ___lltoft@c:
   857                           	opt stack 0
   858                           
   859                           ; 4 bytes @ 0x8
   860  000009                     	ds	1
   861  00000A                     SD_Command@cmd:
   862                           	opt stack 0
   863  00000A                     __tdiv_to_l_@quot:
   864                           	opt stack 0
   865                           
   866                           ; 4 bytes @ 0x9
   867  00000A                     	ds	1
   868  00000B                     SD_Command@response:
   869                           	opt stack 0
   870  00000B                     ___awdiv@counter:
   871                           	opt stack 0
   872  00000B                     __div_to_l_@cntr:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0xA
   876  00000B                     	ds	1
   877  00000C                     ?___ftdiv:
   878                           	opt stack 0
   879  00000C                     SD_Command@n:
   880                           	opt stack 0
   881  00000C                     ___awdiv@sign:
   882                           	opt stack 0
   883  00000C                     __div_to_l_@exp1:
   884                           	opt stack 0
   885  00000C                     ___ftdiv@f1:
   886                           	opt stack 0
   887                           
   888                           ; 3 bytes @ 0xB
   889  00000C                     	ds	1
   890  00000D                     ??___lltoft:
   891  00000D                     ___lldiv@counter:
   892                           	opt stack 0
   893  00000D                     ___awdiv@quotient:
   894                           	opt stack 0
   895  00000D                     SD_ACMD@arg:
   896                           	opt stack 0
   897                           
   898                           ; 4 bytes @ 0xC
   899  00000D                     	ds	1
   900  00000E                     ?___llmod:
   901                           	opt stack 0
   902  00000E                     __tdiv_to_l_@cntr:
   903                           	opt stack 0
   904  00000E                     ___llmod@dividend:
   905                           	opt stack 0
   906                           
   907                           ; 4 bytes @ 0xD
   908  00000E                     	ds	1
   909  00000F                     ?___wmul:
   910                           	opt stack 0
   911  00000F                     __tdiv_to_l_@exp1:
   912                           	opt stack 0
   913  00000F                     ___wmul@multiplier:
   914                           	opt stack 0
   915  00000F                     ___ftdiv@f2:
   916                           	opt stack 0
   917                           
   918                           ; 3 bytes @ 0xE
   919  00000F                     	ds	2
   920  000011                     SD_ACMD@cmd:
   921                           	opt stack 0
   922  000011                     ___lltoft@exp:
   923                           	opt stack 0
   924  000011                     ___wmul@multiplicand:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x10
   928  000011                     	ds	1
   929  000012                     ??___ftdiv:
   930  000012                     ___llmod@divisor:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x11
   934  000012                     	ds	1
   935  000013                     ___wmul@product:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x12
   939  000013                     	ds	2
   940  000015                     ?___ftmul:
   941                           	opt stack 0
   942  000015                     ___ftdiv@cntr:
   943                           	opt stack 0
   944  000015                     ___ftmul@f1:
   945                           	opt stack 0
   946                           
   947                           ; 3 bytes @ 0x14
   948  000015                     	ds	1
   949  000016                     ___llmod@counter:
   950                           	opt stack 0
   951  000016                     ___ftdiv@f3:
   952                           	opt stack 0
   953                           
   954                           ; 3 bytes @ 0x15
   955  000016                     	ds	2
   956  000018                     ___ftmul@f2:
   957                           	opt stack 0
   958                           
   959                           ; 3 bytes @ 0x17
   960  000018                     	ds	1
   961  000019                     ___ftdiv@exp:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x18
   965  000019                     	ds	1
   966  00001A                     ___ftdiv@sign:
   967                           	opt stack 0
   968                           
   969                           ; 1 bytes @ 0x19
   970  00001A                     	ds	1
   971  00001B                     ??___ftmul:
   972                           
   973                           ; 1 bytes @ 0x1A
   974  00001B                     	ds	3
   975  00001E                     ___ftmul@exp:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x1D
   979  00001E                     	ds	1
   980  00001F                     ___ftmul@f3_as_product:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x1E
   984  00001F                     	ds	3
   985  000022                     ___ftmul@cntr:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0x21
   989  000022                     	ds	1
   990  000023                     ___ftmul@sign:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x22
   994  000023                     	ds	1
   995  000024                     ?_fround:
   996                           	opt stack 0
   997  000024                     ?_scale:
   998                           	opt stack 0
   999                           
  1000                           ; 3 bytes @ 0x23
  1001  000024                     	ds	3
  1002  000027                     _fround$1545:
  1003                           	opt stack 0
  1004  000027                     _scale$1546:
  1005                           	opt stack 0
  1006                           
  1007                           ; 3 bytes @ 0x26
  1008  000027                     	ds	3
  1009  00002A                     scale@scl:
  1010                           	opt stack 0
  1011  00002A                     _fround$1544:
  1012                           	opt stack 0
  1013                           
  1014                           ; 3 bytes @ 0x29
  1015  00002A                     	ds	1
  1016  00002B                     ?___fttol:
  1017                           	opt stack 0
  1018  00002B                     ___fttol@f1:
  1019                           	opt stack 0
  1020                           
  1021                           ; 3 bytes @ 0x2A
  1022  00002B                     	ds	2
  1023  00002D                     fround@prec:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x2C
  1027  00002D                     	ds	1
  1028  00002E                     ?___ftadd:
  1029                           	opt stack 0
  1030  00002E                     ___ftadd@f1:
  1031                           	opt stack 0
  1032                           
  1033                           ; 3 bytes @ 0x2D
  1034  00002E                     	ds	1
  1035  00002F                     ??___fttol:
  1036                           
  1037                           ; 1 bytes @ 0x2E
  1038  00002F                     	ds	2
  1039  000031                     ___ftadd@f2:
  1040                           	opt stack 0
  1041                           
  1042                           ; 3 bytes @ 0x30
  1043  000031                     	ds	3
  1044  000034                     ??___ftadd:
  1045  000034                     ___fttol@sign1:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x33
  1049  000034                     	ds	1
  1050  000035                     ___fttol@lval:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0x34
  1054  000035                     	ds	2
  1055  000037                     ___ftadd@sign:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x36
  1059  000037                     	ds	1
  1060  000038                     ___ftadd@exp2:
  1061                           	opt stack 0
  1062                           
  1063                           ; 1 bytes @ 0x37
  1064  000038                     	ds	1
  1065  000039                     ___ftadd@exp1:
  1066                           	opt stack 0
  1067  000039                     ___fttol@exp1:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x38
  1071  000039                     	ds	1
  1072  00003A                     ??_initSD:
  1073  00003A                     ?___ftsub:
  1074                           	opt stack 0
  1075  00003A                     ___ftsub@f1:
  1076                           	opt stack 0
  1077                           
  1078                           ; 3 bytes @ 0x39
  1079  00003A                     	ds	3
  1080  00003D                     ___ftsub@f2:
  1081                           	opt stack 0
  1082                           
  1083                           ; 3 bytes @ 0x3C
  1084  00003D                     	ds	3
  1085  000040                     ?_printf:
  1086                           	opt stack 0
  1087  000040                     printf@f:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x3F
  1091  000040                     	ds	1
  1092  000041                     initSD@argument:
  1093                           	opt stack 0
  1094                           
  1095                           ; 4 bytes @ 0x40
  1096  000041                     	ds	4
  1097  000045                     initSD@last_OSCCON:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x44
  1101  000045                     	ds	1
  1102  000046                     initSD@last_OSCTUNE:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x45
  1106  000046                     	ds	1
  1107  000047                     initSD@tempSize:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0x46
  1111  000047                     	ds	4
  1112  00004B                     initSD@arr_response:
  1113                           	opt stack 0
  1114                           
  1115                           ; 16 bytes @ 0x4A
  1116  00004B                     	ds	1
  1117  00004C                     ??_printf:
  1118                           
  1119                           ; 1 bytes @ 0x4B
  1120  00004C                     	ds	6
  1121  000052                     _printf$1547:
  1122                           	opt stack 0
  1123                           
  1124                           ; 3 bytes @ 0x51
  1125  000052                     	ds	3
  1126  000055                     printf@cp:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0x54
  1130  000055                     	ds	2
  1131  000057                     printf@idx:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0x56
  1135  000057                     	ds	1
  1136  000058                     printf@len:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x57
  1140  000058                     	ds	2
  1141  00005A                     printf@ap:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x59
  1145  00005A                     	ds	1
  1146  00005B                     initSD@tempSize_560:
  1147                           	opt stack 0
  1148                           
  1149                           ; 4 bytes @ 0x5A
  1150  00005B                     	ds	1
  1151  00005C                     printf@exp:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x5B
  1155  00005C                     	ds	2
  1156  00005E                     printf@flag:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x5D
  1160  00005E                     	ds	1
  1161  00005F                     initSD@response:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x5E
  1165  00005F                     	ds	1
  1166  000060                     initSD@i:
  1167                           	opt stack 0
  1168  000060                     printf@tmpval:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x5F
  1172  000060                     	ds	4
  1173  000064                     printf@val:
  1174                           	opt stack 0
  1175                           
  1176                           ; 4 bytes @ 0x63
  1177  000064                     	ds	4
  1178  000068                     printf@fval:
  1179                           	opt stack 0
  1180                           
  1181                           ; 3 bytes @ 0x67
  1182  000068                     	ds	3
  1183  00006B                     printf@prec:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x6A
  1187  00006B                     	ds	2
  1188  00006D                     printf@c:
  1189                           	opt stack 0
  1190                           
  1191                           ; 1 bytes @ 0x6C
  1192  00006D                     	ds	1
  1193  00006E                     ??_main:
  1194                           
  1195                           ; 1 bytes @ 0x6D
  1196  00006E                     	ds	5
  1197  000073                     main@year:
  1198                           	opt stack 0
  1199                           
  1200                           ; 2 bytes @ 0x72
  1201  000073                     	ds	2
  1202  000075                     main@month:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x74
  1206  000075                     	ds	1
  1207  000076                     main@PNM:
  1208                           	opt stack 0
  1209                           
  1210                           ; 5 bytes @ 0x75
  1211  000076                     	ds	5
  1212                           tblptru	equ	0xFF8
  1213                           postinc0	equ	0xFEE
  1214                           wreg	equ	0xFE8
  1215                           
  1216 ;;
  1217 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1218 ;;
  1219 ;; *************** function _main *****************
  1220 ;; Defined at:
  1221 ;;		line 24 in file "main.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;		None
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;  PNM             5  117[COMRAM] unsigned char [5]
  1226 ;;  year            2  114[COMRAM] unsigned short 
  1227 ;;  month           1  116[COMRAM] unsigned char 
  1228 ;; Return value:  Size  Location     Type
  1229 ;;                  1    wreg      void 
  1230 ;; Registers used:
  1231 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1232 ;; Tracked objects:
  1233 ;;		On entry : 0/0
  1234 ;;		On exit  : 0/0
  1235 ;;		Unchanged: 0/0
  1236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1238 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1239 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1240 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1241 ;;Total ram usage:       13 bytes
  1242 ;; Hardware stack levels required when called:    5
  1243 ;; This function calls:
  1244 ;;		_initLCD
  1245 ;;		_initSD
  1246 ;;		_lcdInst
  1247 ;;		_machineConfig
  1248 ;;		_printf
  1249 ;; This function is called by:
  1250 ;;		Startup code after reset
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text0
  1255  00E88E                     __ptext0:
  1256                           	opt stack 0
  1257  00E88E                     _main:
  1258                           	opt stack 26
  1259                           
  1260                           ;main.c: 26: machineConfig();
  1261                           
  1262                           ;incstack = 0
  1263  00E88E  EC38  F06B         	call	_machineConfig	;wreg free
  1264                           
  1265                           ;main.c: 29: initLCD();
  1266  00E892  EC5A  F06B         	call	_initLCD	;wreg free
  1267                           
  1268                           ;main.c: 30: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1269  00E896  0E0C               	movlw	12
  1270  00E898  EC66  F06A         	call	_lcdInst
  1271                           
  1272                           ;main.c: 33: initSD();
  1273  00E89C  EC5F  F076         	call	_initSD	;wreg free
  1274  00E8A0                     l4237:
  1275                           
  1276                           ;main.c: 37: if(SDCard.init){
  1277  00E8A0  0100               	movlb	0	; () banked
  1278  00E8A2  519B               	movf	(_SDCard+27)& (0+255),w,b
  1279  00E8A4  B4D8               	btfsc	status,2,c
  1280  00E8A6  D204               	goto	l4361
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 38: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1284  00E8A8  0E01               	movlw	1
  1285  00E8AA  EC66  F06A         	call	_lcdInst
  1286  00E8AE  0EC3               	movlw	195
  1287  00E8B0  6E6E               	movwf	??_main& (0+255),c
  1288  00E8B2  0ECD               	movlw	205
  1289  00E8B4                     u4697:
  1290  00E8B4  2EE8               	decfsz	wreg,f,c
  1291  00E8B6  D7FE               	bra	u4697
  1292  00E8B8  2E6E               	decfsz	??_main& (0+255),f,c
  1293  00E8BA  D7FC               	bra	u4697
  1294  00E8BC  F000               	nop	
  1295  00E8BE  0E80               	movlw	128
  1296  00E8C0  EC66  F06A         	call	_lcdInst
  1297  00E8C4  0E41               	movlw	65
  1298  00E8C6  6E6E               	movwf	??_main& (0+255),c
  1299  00E8C8  0EEE               	movlw	238
  1300  00E8CA                     u4707:
  1301  00E8CA  2EE8               	decfsz	wreg,f,c
  1302  00E8CC  D7FE               	bra	u4707
  1303  00E8CE  2E6E               	decfsz	??_main& (0+255),f,c
  1304  00E8D0  D7FC               	bra	u4707
  1305  00E8D2  D000               	nop2	
  1306                           
  1307                           ;main.c: 39: printf("SD init success!");
  1308  00E8D4  0E1C               	movlw	low STR_1
  1309  00E8D6  6E40               	movwf	printf@f,c
  1310  00E8D8  0EFF               	movlw	high STR_1
  1311  00E8DA  6E41               	movwf	printf@f+1,c
  1312  00E8DC  EC67  F07A         	call	_printf	;wreg free
  1313                           
  1314                           ;main.c: 40: lcdInst(0xC0);;
  1315  00E8E0  0EC0               	movlw	192
  1316  00E8E2  EC66  F06A         	call	_lcdInst
  1317                           
  1318                           ;main.c: 41: switch(SDCard.Type){
  1319  00E8E6  D01C               	goto	l4259
  1320  00E8E8                     l4249:
  1321  00E8E8  0E3D               	movlw	low STR_2
  1322  00E8EA  6E40               	movwf	printf@f,c
  1323  00E8EC  0EFF               	movlw	high STR_2
  1324  00E8EE  6E41               	movwf	printf@f+1,c
  1325  00E8F0  EC67  F07A         	call	_printf	;wreg free
  1326                           
  1327                           ;main.c: 43: break;
  1328  00E8F4  D021               	goto	l4261
  1329  00E8F6                     l4251:
  1330  00E8F6  0EB0               	movlw	low STR_3
  1331  00E8F8  6E40               	movwf	printf@f,c
  1332  00E8FA  0EFF               	movlw	high STR_3
  1333  00E8FC  6E41               	movwf	printf@f+1,c
  1334  00E8FE  EC67  F07A         	call	_printf	;wreg free
  1335                           
  1336                           ;main.c: 45: break;
  1337  00E902  D01A               	goto	l4261
  1338  00E904                     l4253:
  1339  00E904  0EDC               	movlw	low STR_4
  1340  00E906  6E40               	movwf	printf@f,c
  1341  00E908  0EFF               	movlw	high STR_4
  1342  00E90A  6E41               	movwf	printf@f+1,c
  1343  00E90C  EC67  F07A         	call	_printf	;wreg free
  1344                           
  1345                           ;main.c: 47: break;
  1346  00E910  D013               	goto	l4261
  1347  00E912                     l4255:
  1348                           
  1349                           ;main.c: 49: printf("Type: Unknown");
  1350  00E912  0E88               	movlw	low STR_5
  1351  00E914  6E40               	movwf	printf@f,c
  1352  00E916  0EFF               	movlw	high STR_5
  1353  00E918  6E41               	movwf	printf@f+1,c
  1354  00E91A  EC67  F07A         	call	_printf	;wreg free
  1355                           
  1356                           ;main.c: 51: }
  1357                           
  1358                           ;main.c: 50: break;
  1359  00E91E  D00C               	goto	l4261
  1360  00E920                     l4259:
  1361  00E920  0100               	movlb	0	; () banked
  1362  00E922  5181               	movf	(_SDCard+1)& (0+255),w,b
  1363                           
  1364                           ; Switch size 1, requested type "space"
  1365                           ; Number of cases is 3, Range of values is 0 to 2
  1366                           ; switch strategies available:
  1367                           ; Name         Instructions Cycles
  1368                           ; simple_byte           10     6 (average)
  1369                           ;	Chosen strategy is simple_byte
  1370  00E924  0A00               	xorlw	0	; case 0
  1371  00E926  B4D8               	btfsc	status,2,c
  1372  00E928  D7E6               	goto	l4251
  1373  00E92A  0A01               	xorlw	1	; case 1
  1374  00E92C  B4D8               	btfsc	status,2,c
  1375  00E92E  D7DC               	goto	l4249
  1376  00E930  0A03               	xorlw	3	; case 2
  1377  00E932  B4D8               	btfsc	status,2,c
  1378  00E934  D7E7               	goto	l4253
  1379  00E936  D7ED               	goto	l4255
  1380  00E938                     l4261:
  1381                           
  1382                           ;main.c: 52: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1383  00E938  0E66               	movlw	102
  1384  00E93A  6E6F               	movwf	(??_main+1)& (0+255),c
  1385  00E93C  0E76               	movlw	118
  1386  00E93E  6E6E               	movwf	??_main& (0+255),c
  1387  00E940  0EC1               	movlw	193
  1388  00E942                     u4717:
  1389  00E942  2EE8               	decfsz	wreg,f,c
  1390  00E944  D7FE               	bra	u4717
  1391  00E946  2E6E               	decfsz	??_main& (0+255),f,c
  1392  00E948  D7FC               	bra	u4717
  1393  00E94A  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1394  00E94C  D7FA               	bra	u4717
  1395  00E94E  F000               	nop	
  1396                           
  1397                           ;main.c: 54: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1398  00E950  0E01               	movlw	1
  1399  00E952  EC66  F06A         	call	_lcdInst
  1400  00E956  0EC3               	movlw	195
  1401  00E958  6E6E               	movwf	??_main& (0+255),c
  1402  00E95A  0ECD               	movlw	205
  1403  00E95C                     u4727:
  1404  00E95C  2EE8               	decfsz	wreg,f,c
  1405  00E95E  D7FE               	bra	u4727
  1406  00E960  2E6E               	decfsz	??_main& (0+255),f,c
  1407  00E962  D7FC               	bra	u4727
  1408  00E964  F000               	nop	
  1409  00E966  0E80               	movlw	128
  1410  00E968  EC66  F06A         	call	_lcdInst
  1411  00E96C  0E41               	movlw	65
  1412  00E96E  6E6E               	movwf	??_main& (0+255),c
  1413  00E970  0EEE               	movlw	238
  1414  00E972                     u4737:
  1415  00E972  2EE8               	decfsz	wreg,f,c
  1416  00E974  D7FE               	bra	u4737
  1417  00E976  2E6E               	decfsz	??_main& (0+255),f,c
  1418  00E978  D7FC               	bra	u4737
  1419  00E97A  D000               	nop2	
  1420                           
  1421                           ;main.c: 55: printf("BlkSize: %d b", SDCard.blockSize);
  1422  00E97C  0E7A               	movlw	low STR_6
  1423  00E97E  6E40               	movwf	printf@f,c
  1424  00E980  0EFF               	movlw	high STR_6
  1425  00E982  6E41               	movwf	printf@f+1,c
  1426  00E984  C092  F042         	movff	_SDCard+18,?_printf+2
  1427  00E988  C093  F043         	movff	_SDCard+19,?_printf+3
  1428  00E98C  EC67  F07A         	call	_printf	;wreg free
  1429                           
  1430                           ;main.c: 56: lcdInst(0xC0);;
  1431  00E990  0EC0               	movlw	192
  1432  00E992  EC66  F06A         	call	_lcdInst
  1433                           
  1434                           ;main.c: 57: printf("#Blks: %lu", SDCard.numBlocks);
  1435  00E996  0ED1               	movlw	low STR_7
  1436  00E998  6E40               	movwf	printf@f,c
  1437  00E99A  0EFF               	movlw	high STR_7
  1438  00E99C  6E41               	movwf	printf@f+1,c
  1439  00E99E  C094  F042         	movff	_SDCard+20,?_printf+2
  1440  00E9A2  C095  F043         	movff	_SDCard+21,?_printf+3
  1441  00E9A6  C096  F044         	movff	_SDCard+22,?_printf+4
  1442  00E9AA  C097  F045         	movff	_SDCard+23,?_printf+5
  1443  00E9AE  EC67  F07A         	call	_printf	;wreg free
  1444                           
  1445                           ;main.c: 58: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1446  00E9B2  0E66               	movlw	102
  1447  00E9B4  6E6F               	movwf	(??_main+1)& (0+255),c
  1448  00E9B6  0E76               	movlw	118
  1449  00E9B8  6E6E               	movwf	??_main& (0+255),c
  1450  00E9BA  0EC1               	movlw	193
  1451  00E9BC                     u4747:
  1452  00E9BC  2EE8               	decfsz	wreg,f,c
  1453  00E9BE  D7FE               	bra	u4747
  1454  00E9C0  2E6E               	decfsz	??_main& (0+255),f,c
  1455  00E9C2  D7FC               	bra	u4747
  1456  00E9C4  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1457  00E9C6  D7FA               	bra	u4747
  1458  00E9C8  F000               	nop	
  1459                           
  1460                           ;main.c: 60: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1461  00E9CA  0E01               	movlw	1
  1462  00E9CC  EC66  F06A         	call	_lcdInst
  1463  00E9D0  0EC3               	movlw	195
  1464  00E9D2  6E6E               	movwf	??_main& (0+255),c
  1465  00E9D4  0ECD               	movlw	205
  1466  00E9D6                     u4757:
  1467  00E9D6  2EE8               	decfsz	wreg,f,c
  1468  00E9D8  D7FE               	bra	u4757
  1469  00E9DA  2E6E               	decfsz	??_main& (0+255),f,c
  1470  00E9DC  D7FC               	bra	u4757
  1471  00E9DE  F000               	nop	
  1472  00E9E0  0E80               	movlw	128
  1473  00E9E2  EC66  F06A         	call	_lcdInst
  1474  00E9E6  0E41               	movlw	65
  1475  00E9E8  6E6E               	movwf	??_main& (0+255),c
  1476  00E9EA  0EEE               	movlw	238
  1477  00E9EC                     u4767:
  1478  00E9EC  2EE8               	decfsz	wreg,f,c
  1479  00E9EE  D7FE               	bra	u4767
  1480  00E9F0  2E6E               	decfsz	??_main& (0+255),f,c
  1481  00E9F2  D7FC               	bra	u4767
  1482  00E9F4  D000               	nop2	
  1483                           
  1484                           ;main.c: 61: printf("SD Version: %u", SDCard.SDversion);
  1485  00E9F6  0E5D               	movlw	low STR_8
  1486  00E9F8  6E40               	movwf	printf@f,c
  1487  00E9FA  0EFF               	movlw	high STR_8
  1488  00E9FC  6E41               	movwf	printf@f+1,c
  1489  00E9FE  C080  F042         	movff	_SDCard,?_printf+2
  1490  00EA02  6A43               	clrf	?_printf+3,c
  1491  00EA04  EC67  F07A         	call	_printf	;wreg free
  1492                           
  1493                           ;main.c: 62: lcdInst(0xC0);;
  1494  00EA08  0EC0               	movlw	192
  1495  00EA0A  EC66  F06A         	call	_lcdInst
  1496                           
  1497                           ;main.c: 63: printf("MFG ID: 0x%x", SDCard.MID);
  1498  00EA0E  0EA3               	movlw	low STR_9
  1499  00EA10  6E40               	movwf	printf@f,c
  1500  00EA12  0EFF               	movlw	high STR_9
  1501  00EA14  6E41               	movwf	printf@f+1,c
  1502  00EA16  C082  F042         	movff	_SDCard+2,?_printf+2
  1503  00EA1A  6A43               	clrf	?_printf+3,c
  1504  00EA1C  EC67  F07A         	call	_printf	;wreg free
  1505                           
  1506                           ;main.c: 64: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1507  00EA20  0E66               	movlw	102
  1508  00EA22  6E6F               	movwf	(??_main+1)& (0+255),c
  1509  00EA24  0E76               	movlw	118
  1510  00EA26  6E6E               	movwf	??_main& (0+255),c
  1511  00EA28  0EC1               	movlw	193
  1512  00EA2A                     u4777:
  1513  00EA2A  2EE8               	decfsz	wreg,f,c
  1514  00EA2C  D7FE               	bra	u4777
  1515  00EA2E  2E6E               	decfsz	??_main& (0+255),f,c
  1516  00EA30  D7FC               	bra	u4777
  1517  00EA32  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1518  00EA34  D7FA               	bra	u4777
  1519  00EA36  F000               	nop	
  1520                           
  1521                           ;main.c: 66: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1522  00EA38  0E01               	movlw	1
  1523  00EA3A  EC66  F06A         	call	_lcdInst
  1524  00EA3E  0EC3               	movlw	195
  1525  00EA40  6E6E               	movwf	??_main& (0+255),c
  1526  00EA42  0ECD               	movlw	205
  1527  00EA44                     u4787:
  1528  00EA44  2EE8               	decfsz	wreg,f,c
  1529  00EA46  D7FE               	bra	u4787
  1530  00EA48  2E6E               	decfsz	??_main& (0+255),f,c
  1531  00EA4A  D7FC               	bra	u4787
  1532  00EA4C  F000               	nop	
  1533  00EA4E  0E80               	movlw	128
  1534  00EA50  EC66  F06A         	call	_lcdInst
  1535  00EA54  0E41               	movlw	65
  1536  00EA56  6E6E               	movwf	??_main& (0+255),c
  1537  00EA58  0EEE               	movlw	238
  1538  00EA5A                     u4797:
  1539  00EA5A  2EE8               	decfsz	wreg,f,c
  1540  00EA5C  D7FE               	bra	u4797
  1541  00EA5E  2E6E               	decfsz	??_main& (0+255),f,c
  1542  00EA60  D7FC               	bra	u4797
  1543  00EA62  D000               	nop2	
  1544                           
  1545                           ;main.c: 67: printf("OEM ID: %c%c", SDCard.OID >> 8, SDCard.OID & 0xFF);
  1546  00EA64  0E96               	movlw	low STR_10
  1547  00EA66  6E40               	movwf	printf@f,c
  1548  00EA68  0EFF               	movlw	high STR_10
  1549  00EA6A  6E41               	movwf	printf@f+1,c
  1550  00EA6C  0100               	movlb	0	; () banked
  1551  00EA6E  5184               	movf	(_SDCard+4)& (0+255),w,b
  1552  00EA70  6E42               	movwf	?_printf+2,c
  1553  00EA72  6A43               	clrf	?_printf+3,c
  1554  00EA74  0100               	movlb	0	; () banked
  1555  00EA76  5183               	movf	(_SDCard+3)& (0+255),w,b
  1556  00EA78  6E44               	movwf	?_printf+4,c
  1557  00EA7A  6A45               	clrf	?_printf+5,c
  1558  00EA7C  EC67  F07A         	call	_printf	;wreg free
  1559                           
  1560                           ;main.c: 68: lcdInst(0xC0);;
  1561  00EA80  0EC0               	movlw	192
  1562  00EA82  EC66  F06A         	call	_lcdInst
  1563                           
  1564                           ;main.c: 69: unsigned char PNM[5];
  1565                           ;main.c: 70: PNM[0] = SDCard.PHML & 0xFF;
  1566  00EA86  C085  F076         	movff	_SDCard+5,main@PNM
  1567                           
  1568                           ;main.c: 71: PNM[1] = (SDCard.PHML >> 8) & 0xFF;
  1569  00EA8A  C086  F077         	movff	_SDCard+6,main@PNM+1
  1570                           
  1571                           ;main.c: 72: PNM[2] = (SDCard.PHML >> 16) & 0xFF;
  1572  00EA8E  C087  F078         	movff	_SDCard+7,main@PNM+2
  1573                           
  1574                           ;main.c: 73: PNM[3] = (SDCard.PHML >> 24) & 0xFF;
  1575  00EA92  C088  F079         	movff	_SDCard+8,main@PNM+3
  1576                           
  1577                           ;main.c: 74: PNM[4] = SDCard.PHMH;
  1578  00EA96  C089  F07A         	movff	_SDCard+9,main@PNM+4
  1579                           
  1580                           ;main.c: 75: printf("PNM: %c%c%c%c%c", PNM[4], PNM[3], PNM[2], PNM[1], PNM[0]);
  1581  00EA9A  0E4D               	movlw	low STR_11
  1582  00EA9C  6E40               	movwf	printf@f,c
  1583  00EA9E  0EFF               	movlw	high STR_11
  1584  00EAA0  6E41               	movwf	printf@f+1,c
  1585  00EAA2  C07A  F042         	movff	main@PNM+4,?_printf+2
  1586  00EAA6  6A43               	clrf	?_printf+3,c
  1587  00EAA8  C079  F044         	movff	main@PNM+3,?_printf+4
  1588  00EAAC  6A45               	clrf	?_printf+5,c
  1589  00EAAE  C078  F046         	movff	main@PNM+2,?_printf+6
  1590  00EAB2  6A47               	clrf	?_printf+7,c
  1591  00EAB4  C077  F048         	movff	main@PNM+1,?_printf+8
  1592  00EAB8  6A49               	clrf	?_printf+9,c
  1593  00EABA  C076  F04A         	movff	main@PNM,?_printf+10
  1594  00EABE  6A4B               	clrf	?_printf+11,c
  1595  00EAC0  EC67  F07A         	call	_printf	;wreg free
  1596                           
  1597                           ;main.c: 76: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1598  00EAC4  0E66               	movlw	102
  1599  00EAC6  6E6F               	movwf	(??_main+1)& (0+255),c
  1600  00EAC8  0E76               	movlw	118
  1601  00EACA  6E6E               	movwf	??_main& (0+255),c
  1602  00EACC  0EC1               	movlw	193
  1603  00EACE                     u4807:
  1604  00EACE  2EE8               	decfsz	wreg,f,c
  1605  00EAD0  D7FE               	bra	u4807
  1606  00EAD2  2E6E               	decfsz	??_main& (0+255),f,c
  1607  00EAD4  D7FC               	bra	u4807
  1608  00EAD6  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1609  00EAD8  D7FA               	bra	u4807
  1610  00EADA  F000               	nop	
  1611                           
  1612                           ;main.c: 78: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1613  00EADC  0E01               	movlw	1
  1614  00EADE  EC66  F06A         	call	_lcdInst
  1615  00EAE2  0EC3               	movlw	195
  1616  00EAE4  6E6E               	movwf	??_main& (0+255),c
  1617  00EAE6  0ECD               	movlw	205
  1618  00EAE8                     u4817:
  1619  00EAE8  2EE8               	decfsz	wreg,f,c
  1620  00EAEA  D7FE               	bra	u4817
  1621  00EAEC  2E6E               	decfsz	??_main& (0+255),f,c
  1622  00EAEE  D7FC               	bra	u4817
  1623  00EAF0  F000               	nop	
  1624  00EAF2  0E80               	movlw	128
  1625  00EAF4  EC66  F06A         	call	_lcdInst
  1626  00EAF8  0E41               	movlw	65
  1627  00EAFA  6E6E               	movwf	??_main& (0+255),c
  1628  00EAFC  0EEE               	movlw	238
  1629  00EAFE                     u4827:
  1630  00EAFE  2EE8               	decfsz	wreg,f,c
  1631  00EB00  D7FE               	bra	u4827
  1632  00EB02  2E6E               	decfsz	??_main& (0+255),f,c
  1633  00EB04  D7FC               	bra	u4827
  1634  00EB06  D000               	nop2	
  1635                           
  1636                           ;main.c: 79: printf("PRV: %u.%u", ((SDCard.PRV >> 4) & 0x0F), (SDCard.PRV & 0x0F));
  1637  00EB08  0EBB               	movlw	low STR_12
  1638  00EB0A  6E40               	movwf	printf@f,c
  1639  00EB0C  0EFF               	movlw	high STR_12
  1640  00EB0E  6E41               	movwf	printf@f+1,c
  1641  00EB10  C08A  F06E         	movff	_SDCard+10,??_main
  1642  00EB14  3A6E               	swapf	??_main,f,c
  1643  00EB16  0E0F               	movlw	15
  1644  00EB18  166E               	andwf	??_main,f,c
  1645  00EB1A  0E0F               	movlw	15
  1646  00EB1C  166E               	andwf	??_main,f,c
  1647  00EB1E  506E               	movf	??_main,w,c
  1648  00EB20  6E42               	movwf	?_printf+2,c
  1649  00EB22  6A43               	clrf	?_printf+3,c
  1650  00EB24  C08A  F06F         	movff	_SDCard+10,??_main+1
  1651  00EB28  0E0F               	movlw	15
  1652  00EB2A  166F               	andwf	??_main+1,f,c
  1653  00EB2C  506F               	movf	??_main+1,w,c
  1654  00EB2E  6E44               	movwf	?_printf+4,c
  1655  00EB30  6A45               	clrf	?_printf+5,c
  1656  00EB32  EC67  F07A         	call	_printf	;wreg free
  1657                           
  1658                           ;main.c: 80: lcdInst(0xC0);;
  1659  00EB36  0EC0               	movlw	192
  1660  00EB38  EC66  F06A         	call	_lcdInst
  1661                           
  1662                           ;main.c: 81: printf("PSN: 0x%x", (SDCard.PSN >> 16));
  1663  00EB3C  0EE6               	movlw	low STR_13
  1664  00EB3E  6E40               	movwf	printf@f,c
  1665  00EB40  0EFF               	movlw	high STR_13
  1666  00EB42  6E41               	movwf	printf@f+1,c
  1667  00EB44  C08D  F042         	movff	_SDCard+13,?_printf+2
  1668  00EB48  C08E  F043         	movff	_SDCard+14,?_printf+3
  1669  00EB4C  6A44               	clrf	?_printf+4,c
  1670  00EB4E  6A45               	clrf	?_printf+5,c
  1671  00EB50  EC67  F07A         	call	_printf	;wreg free
  1672                           
  1673                           ;main.c: 82: printf("%x",SDCard.PSN & 0xFFFF);
  1674  00EB54  0EAD               	movlw	low (STR_9+10)
  1675  00EB56  6E40               	movwf	printf@f,c
  1676  00EB58  0EFF               	movlw	high (STR_9+10)
  1677  00EB5A  6E41               	movwf	printf@f+1,c
  1678  00EB5C  EE20  F08B         	lfsr	2,_SDCard+11
  1679  00EB60  0EFF               	movlw	255
  1680  00EB62  14DE               	andwf	postinc2,w,c
  1681  00EB64  6E42               	movwf	?_printf+2,c
  1682  00EB66  0EFF               	movlw	255
  1683  00EB68  14DE               	andwf	postinc2,w,c
  1684  00EB6A  6E43               	movwf	?_printf+3,c
  1685  00EB6C  0E00               	movlw	0
  1686  00EB6E  14DE               	andwf	postinc2,w,c
  1687  00EB70  6E44               	movwf	?_printf+4,c
  1688  00EB72  0E00               	movlw	0
  1689  00EB74  14DE               	andwf	postinc2,w,c
  1690  00EB76  6E45               	movwf	?_printf+5,c
  1691  00EB78  EC67  F07A         	call	_printf	;wreg free
  1692                           
  1693                           ;main.c: 83: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1694  00EB7C  0E66               	movlw	102
  1695  00EB7E  6E6F               	movwf	(??_main+1)& (0+255),c
  1696  00EB80  0E76               	movlw	118
  1697  00EB82  6E6E               	movwf	??_main& (0+255),c
  1698  00EB84  0EC1               	movlw	193
  1699  00EB86                     u4837:
  1700  00EB86  2EE8               	decfsz	wreg,f,c
  1701  00EB88  D7FE               	bra	u4837
  1702  00EB8A  2E6E               	decfsz	??_main& (0+255),f,c
  1703  00EB8C  D7FC               	bra	u4837
  1704  00EB8E  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1705  00EB90  D7FA               	bra	u4837
  1706  00EB92  F000               	nop	
  1707                           
  1708                           ;main.c: 85: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1709  00EB94  0E01               	movlw	1
  1710  00EB96  EC66  F06A         	call	_lcdInst
  1711  00EB9A  0EC3               	movlw	195
  1712  00EB9C  6E6E               	movwf	??_main& (0+255),c
  1713  00EB9E  0ECD               	movlw	205
  1714  00EBA0                     u4847:
  1715  00EBA0  2EE8               	decfsz	wreg,f,c
  1716  00EBA2  D7FE               	bra	u4847
  1717  00EBA4  2E6E               	decfsz	??_main& (0+255),f,c
  1718  00EBA6  D7FC               	bra	u4847
  1719  00EBA8  F000               	nop	
  1720  00EBAA  0E80               	movlw	128
  1721  00EBAC  EC66  F06A         	call	_lcdInst
  1722  00EBB0  0E41               	movlw	65
  1723  00EBB2  6E6E               	movwf	??_main& (0+255),c
  1724  00EBB4  0EEE               	movlw	238
  1725  00EBB6                     u4857:
  1726  00EBB6  2EE8               	decfsz	wreg,f,c
  1727  00EBB8  D7FE               	bra	u4857
  1728  00EBBA  2E6E               	decfsz	??_main& (0+255),f,c
  1729  00EBBC  D7FC               	bra	u4857
  1730  00EBBE  D000               	nop2	
  1731                           
  1732                           ;main.c: 86: unsigned short year = 2000 + ((SDCard.MDT >> 4) & 0xFF);
  1733  00EBC0  0ED0               	movlw	208
  1734  00EBC2  6E6E               	movwf	??_main& (0+255),c
  1735  00EBC4  0E07               	movlw	7
  1736  00EBC6  6E6F               	movwf	(??_main+1)& (0+255),c
  1737  00EBC8  EE20  F08F         	lfsr	2,_SDCard+15
  1738  00EBCC  CFDE F070          	movff	postinc2,??_main+2
  1739  00EBD0  CFDD F071          	movff	postdec2,??_main+3
  1740  00EBD4  0E04               	movlw	4
  1741  00EBD6  6E72               	movwf	(??_main+4)& (0+255),c
  1742  00EBD8                     u4275:
  1743  00EBD8  90D8               	bcf	status,0,c
  1744  00EBDA  3271               	rrcf	??_main+3,f,c
  1745  00EBDC  3270               	rrcf	??_main+2,f,c
  1746  00EBDE  2E72               	decfsz	(??_main+4)& (0+255),f,c
  1747  00EBE0  D7FB               	goto	u4275
  1748  00EBE2  5070               	movf	??_main+2,w,c
  1749  00EBE4  246E               	addwf	??_main,w,c
  1750  00EBE6  6E73               	movwf	main@year,c
  1751  00EBE8  0E00               	movlw	0
  1752  00EBEA  206F               	addwfc	??_main+1,w,c
  1753  00EBEC  6E74               	movwf	main@year+1,c
  1754                           
  1755                           ;main.c: 87: unsigned char month = SDCard.MDT & 0xF;
  1756  00EBEE  0100               	movlb	0	; () banked
  1757  00EBF0  518F               	movf	(_SDCard+15)& (0+255),w,b
  1758  00EBF2  0B0F               	andlw	15
  1759  00EBF4  6E75               	movwf	main@month,c
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;main.c: 88: printf("MDT: %u/%u", month, year);
  1763  00EBF6  0EC6               	movlw	low STR_15
  1764  00EBF8  6E40               	movwf	printf@f,c
  1765  00EBFA  0EFF               	movlw	high STR_15
  1766  00EBFC  6E41               	movwf	printf@f+1,c
  1767  00EBFE  C075  F042         	movff	main@month,?_printf+2
  1768  00EC02  6A43               	clrf	?_printf+3,c
  1769  00EC04  C073  F044         	movff	main@year,?_printf+4
  1770  00EC08  C074  F045         	movff	main@year+1,?_printf+5
  1771  00EC0C  EC67  F07A         	call	_printf	;wreg free
  1772                           
  1773                           ;main.c: 89: lcdInst(0xC0);;
  1774  00EC10  0EC0               	movlw	192
  1775  00EC12  EC66  F06A         	call	_lcdInst
  1776                           
  1777                           ;main.c: 90: printf("CRC7: %u", SDCard.CRC);
  1778  00EC16  0EF0               	movlw	low STR_16
  1779  00EC18  6E40               	movwf	printf@f,c
  1780  00EC1A  0EFF               	movlw	high STR_16
  1781  00EC1C  6E41               	movwf	printf@f+1,c
  1782  00EC1E  C091  F042         	movff	_SDCard+17,?_printf+2
  1783  00EC22  6A43               	clrf	?_printf+3,c
  1784  00EC24  EC67  F07A         	call	_printf	;wreg free
  1785                           
  1786                           ;main.c: 91: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1787  00EC28  0E66               	movlw	102
  1788  00EC2A  6E6F               	movwf	(??_main+1)& (0+255),c
  1789  00EC2C  0E76               	movlw	118
  1790  00EC2E  6E6E               	movwf	??_main& (0+255),c
  1791  00EC30  0EC1               	movlw	193
  1792  00EC32                     u4867:
  1793  00EC32  2EE8               	decfsz	wreg,f,c
  1794  00EC34  D7FE               	bra	u4867
  1795  00EC36  2E6E               	decfsz	??_main& (0+255),f,c
  1796  00EC38  D7FC               	bra	u4867
  1797  00EC3A  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1798  00EC3C  D7FA               	bra	u4867
  1799  00EC3E  F000               	nop	
  1800                           
  1801                           ;main.c: 93: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1802  00EC40  0E01               	movlw	1
  1803  00EC42  EC66  F06A         	call	_lcdInst
  1804  00EC46  0EC3               	movlw	195
  1805  00EC48  6E6E               	movwf	??_main& (0+255),c
  1806  00EC4A  0ECD               	movlw	205
  1807  00EC4C                     u4877:
  1808  00EC4C  2EE8               	decfsz	wreg,f,c
  1809  00EC4E  D7FE               	bra	u4877
  1810  00EC50  2E6E               	decfsz	??_main& (0+255),f,c
  1811  00EC52  D7FC               	bra	u4877
  1812  00EC54  F000               	nop	
  1813  00EC56  0E80               	movlw	128
  1814  00EC58  EC66  F06A         	call	_lcdInst
  1815  00EC5C  0E41               	movlw	65
  1816  00EC5E  6E6E               	movwf	??_main& (0+255),c
  1817  00EC60  0EEE               	movlw	238
  1818  00EC62                     u4887:
  1819  00EC62  2EE8               	decfsz	wreg,f,c
  1820  00EC64  D7FE               	bra	u4887
  1821  00EC66  2E6E               	decfsz	??_main& (0+255),f,c
  1822  00EC68  D7FC               	bra	u4887
  1823  00EC6A  D000               	nop2	
  1824                           
  1825                           ;main.c: 94: printf("Number of MB:");
  1826  00EC6C  0E6C               	movlw	low STR_17
  1827  00EC6E  6E40               	movwf	printf@f,c
  1828  00EC70  0EFF               	movlw	high STR_17
  1829  00EC72  6E41               	movwf	printf@f+1,c
  1830  00EC74  EC67  F07A         	call	_printf	;wreg free
  1831                           
  1832                           ;main.c: 95: lcdInst(0xC0);;
  1833  00EC78  0EC0               	movlw	192
  1834  00EC7A  EC66  F06A         	call	_lcdInst
  1835                           
  1836                           ;main.c: 96: printf("%.2f ", SDCard.size);
  1837  00EC7E  0EF9               	movlw	low STR_18
  1838  00EC80  6E40               	movwf	printf@f,c
  1839  00EC82  0EFF               	movlw	high STR_18
  1840  00EC84  6E41               	movwf	printf@f+1,c
  1841  00EC86  C098  F042         	movff	_SDCard+24,?_printf+2
  1842  00EC8A  C099  F043         	movff	_SDCard+25,?_printf+3
  1843  00EC8E  C09A  F044         	movff	_SDCard+26,?_printf+4
  1844  00EC92  EC67  F07A         	call	_printf	;wreg free
  1845                           
  1846                           ;main.c: 97: _delay((unsigned long)((2000)*(40000000/4000.0)));
  1847  00EC96  0E66               	movlw	102
  1848  00EC98  6E6F               	movwf	(??_main+1)& (0+255),c
  1849  00EC9A  0E76               	movlw	118
  1850  00EC9C  6E6E               	movwf	??_main& (0+255),c
  1851  00EC9E  0EC1               	movlw	193
  1852  00ECA0                     u4897:
  1853  00ECA0  2EE8               	decfsz	wreg,f,c
  1854  00ECA2  D7FE               	bra	u4897
  1855  00ECA4  2E6E               	decfsz	??_main& (0+255),f,c
  1856  00ECA6  D7FC               	bra	u4897
  1857  00ECA8  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1858  00ECAA  D7FA               	bra	u4897
  1859  00ECAC  F000               	nop	
  1860                           
  1861                           ;main.c: 98: }
  1862  00ECAE  D5F8               	goto	l4237
  1863  00ECB0                     l4361:
  1864                           
  1865                           ;main.c: 99: else{
  1866                           ;main.c: 100: printf("SD init failed!");
  1867  00ECB0  0E2D               	movlw	low STR_19
  1868  00ECB2  6E40               	movwf	printf@f,c
  1869  00ECB4  0EFF               	movlw	high STR_19
  1870  00ECB6  6E41               	movwf	printf@f+1,c
  1871  00ECB8  EC67  F07A         	call	_printf	;wreg free
  1872  00ECBC                     l98:
  1873  00ECBC  D7FF               	goto	l98
  1874  00ECBE                     __end_of_main:
  1875                           	opt stack 0
  1876                           tblptru	equ	0xFF8
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           postinc2	equ	0xFDE
  1880                           postdec2	equ	0xFDD
  1881                           status	equ	0xFD8
  1882                           
  1883 ;; *************** function _printf *****************
  1884 ;; Defined at:
  1885 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;  f               2   63[COMRAM] PTR const unsigned char 
  1888 ;;		 -> STR_19(16), STR_18(6), STR_17(14), STR_16(9), 
  1889 ;;		 -> STR_15(11), STR_14(3), STR_13(10), STR_12(11), 
  1890 ;;		 -> STR_11(16), STR_10(13), STR_9(13), STR_8(15), 
  1891 ;;		 -> STR_7(11), STR_6(14), STR_5(14), STR_4(10), 
  1892 ;;		 -> STR_3(11), STR_2(16), STR_1(17), 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  idx             1   86[COMRAM] unsigned char 
  1895 ;;  val             4   99[COMRAM] unsigned long 
  1896 ;;  tmpval          4   95[COMRAM] struct .
  1897 ;;  fval            3  103[COMRAM] struct .
  1898 ;;  prec            2  106[COMRAM] int 
  1899 ;;  flag            2   93[COMRAM] unsigned short 
  1900 ;;  exp             2   91[COMRAM] int 
  1901 ;;  ap              2   89[COMRAM] PTR void [1]
  1902 ;;		 -> ?_printf(2), 
  1903 ;;  len             2   87[COMRAM] unsigned int 
  1904 ;;  cp              2   84[COMRAM] PTR const unsigned char 
  1905 ;;		 -> printf@c(1), 
  1906 ;;  width           2    0        int 
  1907 ;;  c               1  108[COMRAM] char 
  1908 ;;  d               1    0        unsigned char 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  2   63[COMRAM] int 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 0/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1918 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1919 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1920 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;      Totals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;Total ram usage:       46 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; Hardware stack levels required when called:    3
  1925 ;; This function calls:
  1926 ;;		___awdiv
  1927 ;;		___ftadd
  1928 ;;		___ftge
  1929 ;;		___ftmul
  1930 ;;		___ftneg
  1931 ;;		___ftsub
  1932 ;;		___fttol
  1933 ;;		___lldiv
  1934 ;;		___llmod
  1935 ;;		___lltoft
  1936 ;;		___wmul
  1937 ;;		__div_to_l_
  1938 ;;		__tdiv_to_l_
  1939 ;;		_fround
  1940 ;;		_isdigit
  1941 ;;		_putch
  1942 ;;		_scale
  1943 ;; This function is called by:
  1944 ;;		_main
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text1
  1949  00F4CE                     __ptext1:
  1950                           	opt stack 0
  1951  00F4CE                     _printf:
  1952                           	opt stack 27
  1953                           
  1954                           ;doprnt.c: 466: va_list ap;
  1955                           ;doprnt.c: 499: signed char c;
  1956                           ;doprnt.c: 501: int width;
  1957                           ;doprnt.c: 504: int prec;
  1958                           ;doprnt.c: 508: unsigned short flag;
  1959                           ;doprnt.c: 515: char d;
  1960                           ;doprnt.c: 516: double fval;
  1961                           ;doprnt.c: 517: int exp;
  1962                           ;doprnt.c: 523: union {
  1963                           ;doprnt.c: 524: unsigned long vd;
  1964                           ;doprnt.c: 525: double integ;
  1965                           ;doprnt.c: 526: } tmpval;
  1966                           ;doprnt.c: 528: unsigned long val;
  1967                           ;doprnt.c: 529: unsigned len;
  1968                           ;doprnt.c: 530: const char * cp;
  1969                           ;doprnt.c: 533: *ap = __va_start();
  1970                           
  1971                           ;incstack = 0
  1972  00F4CE  0E42               	movlw	low (?_printf+2)
  1973  00F4D0  6E5A               	movwf	printf@ap,c
  1974  00F4D2  0E00               	movlw	high (?_printf+2)
  1975  00F4D4  6E5B               	movwf	printf@ap+1,c
  1976                           
  1977                           ;doprnt.c: 536: while(c = *f++) {
  1978  00F4D6  EF1B  F07F         	goto	l4219
  1979  00F4DA                     l3941:
  1980                           
  1981                           ;doprnt.c: 538: if(c != '%')
  1982  00F4DA  0E25               	movlw	37
  1983  00F4DC  186D               	xorwf	printf@c,w,c
  1984  00F4DE  B4D8               	btfsc	status,2,c
  1985  00F4E0  D005               	goto	l3945
  1986                           
  1987                           ;doprnt.c: 540: {
  1988                           ;doprnt.c: 541: (putch(c) );
  1989  00F4E2  506D               	movf	printf@c,w,c
  1990  00F4E4  EC70  F06A         	call	_putch
  1991                           
  1992                           ;doprnt.c: 542: continue;
  1993  00F4E8  EF1B  F07F         	goto	l4219
  1994  00F4EC                     l3945:
  1995                           
  1996                           ;doprnt.c: 543: }
  1997                           ;doprnt.c: 548: flag = 0;
  1998  00F4EC  0E00               	movlw	0
  1999  00F4EE  6E5F               	movwf	printf@flag+1,c
  2000  00F4F0  0E00               	movlw	0
  2001  00F4F2  6E5E               	movwf	printf@flag,c
  2002                           
  2003                           ;doprnt.c: 611: if(*f == '.') {
  2004  00F4F4  C040  FFF6         	movff	printf@f,tblptrl
  2005  00F4F8  C041  FFF7         	movff	printf@f+1,tblptrh
  2006  00F4FC                     	if	0	;tblptru may be non-zero
  2007  00F4FC                     	endif
  2008  00F4FC                     	if	0	;tblptru may be non-zero
  2009  00F4FC                     	endif
  2010  00F4FC  0008               	tblrd		*
  2011  00F4FE  50F5               	movf	tablat,w,c
  2012  00F500  0A2E               	xorlw	46
  2013  00F502  A4D8               	btfss	status,2,c
  2014  00F504  D02E               	goto	l3959
  2015                           
  2016                           ;doprnt.c: 612: flag |= 0x4000;
  2017  00F506  8C5F               	bsf	printf@flag+1,6,c
  2018                           
  2019                           ;doprnt.c: 613: f++;
  2020  00F508  4A40               	infsnz	printf@f,f,c
  2021  00F50A  2A41               	incf	printf@f+1,f,c
  2022                           
  2023                           ;doprnt.c: 620: {
  2024                           ;doprnt.c: 621: prec = 0;
  2025  00F50C  0E00               	movlw	0
  2026  00F50E  6E6C               	movwf	printf@prec+1,c
  2027  00F510  0E00               	movlw	0
  2028  00F512  6E6B               	movwf	printf@prec,c
  2029                           
  2030                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2031  00F514  D01B               	goto	l3957
  2032  00F516                     l3953:
  2033                           
  2034                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2035  00F516  C06B  F00F         	movff	printf@prec,___wmul@multiplier
  2036  00F51A  C06C  F010         	movff	printf@prec+1,___wmul@multiplier+1
  2037  00F51E  0E00               	movlw	0
  2038  00F520  6E12               	movwf	___wmul@multiplicand+1,c
  2039  00F522  0E0A               	movlw	10
  2040  00F524  6E11               	movwf	___wmul@multiplicand,c
  2041  00F526  ECCC  F06A         	call	___wmul	;wreg free
  2042  00F52A  C040  FFF6         	movff	printf@f,tblptrl
  2043  00F52E  C041  FFF7         	movff	printf@f+1,tblptrh
  2044  00F532                     	if	0	;tblptru may be non-zero
  2045  00F532                     	endif
  2046  00F532                     	if	0	;tblptru may be non-zero
  2047  00F532                     	endif
  2048  00F532  0008               	tblrd		*
  2049  00F534  50F5               	movf	tablat,w,c
  2050  00F536  260F               	addwf	?___wmul,f,c
  2051  00F538  0E00               	movlw	0
  2052  00F53A  2210               	addwfc	?___wmul+1,f,c
  2053  00F53C  0ED0               	movlw	208
  2054  00F53E  240F               	addwf	?___wmul,w,c
  2055  00F540  6E6B               	movwf	printf@prec,c
  2056  00F542  0EFF               	movlw	255
  2057  00F544  2010               	addwfc	?___wmul+1,w,c
  2058  00F546  6E6C               	movwf	printf@prec+1,c
  2059  00F548  4A40               	infsnz	printf@f,f,c
  2060  00F54A  2A41               	incf	printf@f+1,f,c
  2061  00F54C                     l3957:
  2062  00F54C  C040  FFF6         	movff	printf@f,tblptrl
  2063  00F550  C041  FFF7         	movff	printf@f+1,tblptrh
  2064  00F554                     	if	0	;tblptru may be non-zero
  2065  00F554                     	endif
  2066  00F554                     	if	0	;tblptru may be non-zero
  2067  00F554                     	endif
  2068  00F554  0008               	tblrd		*
  2069  00F556  50F5               	movf	tablat,w,c
  2070  00F558  EC87  F06A         	call	_isdigit
  2071  00F55C  A0D8               	btfss	status,0,c
  2072  00F55E  D045               	goto	l3993
  2073  00F560  D7DA               	goto	l3953
  2074  00F562                     l3959:
  2075                           
  2076                           ;doprnt.c: 626: prec = 0;
  2077  00F562  0E00               	movlw	0
  2078  00F564  6E6C               	movwf	printf@prec+1,c
  2079  00F566  0E00               	movlw	0
  2080  00F568  6E6B               	movwf	printf@prec,c
  2081                           
  2082                           ;doprnt.c: 628: flag |= 0x1000;
  2083  00F56A  885F               	bsf	printf@flag+1,4,c
  2084                           
  2085                           ;doprnt.c: 635: switch(c = *f++) {
  2086                           
  2087                           ;doprnt.c: 630: }
  2088                           ;doprnt.c: 633: loop:
  2089  00F56C  D03E               	goto	l3993
  2090  00F56E                     l3963:
  2091                           
  2092                           ;doprnt.c: 643: flag |= 0x10;
  2093  00F56E  885E               	bsf	printf@flag,4,c
  2094                           
  2095                           ;doprnt.c: 644: goto loop;
  2096  00F570  D03C               	goto	l3993
  2097  00F572                     l3965:
  2098                           
  2099                           ;doprnt.c: 663: flag |= 0x400;
  2100  00F572  845F               	bsf	printf@flag+1,2,c
  2101                           
  2102                           ;doprnt.c: 698: case 'i':
  2103                           ;doprnt.c: 699: break;
  2104                           
  2105                           ;doprnt.c: 697: case 'd':
  2106                           
  2107                           ;doprnt.c: 664: break;
  2108  00F574  D05D               	goto	l3995
  2109  00F576                     l3967:
  2110                           
  2111                           ;doprnt.c: 721: flag |= 0x80;
  2112  00F576  8E5E               	bsf	printf@flag,7,c
  2113                           
  2114                           ;doprnt.c: 723: break;
  2115  00F578  D05B               	goto	l3995
  2116  00F57A                     l3969:
  2117                           
  2118                           ;doprnt.c: 753: if(prec && prec < len)
  2119  00F57A  506B               	movf	printf@prec,w,c
  2120  00F57C  106C               	iorwf	printf@prec+1,w,c
  2121  00F57E  B4D8               	btfsc	status,2,c
  2122  00F580  D014               	goto	l3979
  2123  00F582  5058               	movf	printf@len,w,c
  2124  00F584  5C6B               	subwf	printf@prec,w,c
  2125  00F586  5059               	movf	printf@len+1,w,c
  2126  00F588  586C               	subwfb	printf@prec+1,w,c
  2127  00F58A  B0D8               	btfsc	status,0,c
  2128  00F58C  D00E               	goto	l3979
  2129                           
  2130                           ;doprnt.c: 754: len = prec;
  2131  00F58E  C06B  F058         	movff	printf@prec,printf@len
  2132  00F592  C06C  F059         	movff	printf@prec+1,printf@len+1
  2133                           
  2134                           ;doprnt.c: 767: while(len--)
  2135  00F596  D009               	goto	l3979
  2136  00F598                     l3975:
  2137                           
  2138                           ;doprnt.c: 768: (putch(*cp++) );
  2139  00F598  C055  FFD9         	movff	printf@cp,fsr2l
  2140  00F59C  C056  FFDA         	movff	printf@cp+1,fsr2h
  2141  00F5A0  50DF               	movf	indf2,w,c
  2142  00F5A2  EC70  F06A         	call	_putch
  2143  00F5A6  4A55               	infsnz	printf@cp,f,c
  2144  00F5A8  2A56               	incf	printf@cp+1,f,c
  2145  00F5AA                     l3979:
  2146  00F5AA  0658               	decf	printf@len,f,c
  2147  00F5AC  A0D8               	btfss	status,0,c
  2148  00F5AE  0659               	decf	printf@len+1,f,c
  2149  00F5B0  2858               	incf	printf@len,w,c
  2150  00F5B2  E1F2               	bnz	l3975
  2151  00F5B4  2859               	incf	printf@len+1,w,c
  2152  00F5B6  B4D8               	btfsc	status,2,c
  2153  00F5B8  EF1B  F07F         	goto	l4219
  2154  00F5BC  D7ED               	goto	l3975
  2155  00F5BE                     l3981:
  2156                           
  2157                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2158  00F5BE  C05A  FFD9         	movff	printf@ap,fsr2l
  2159  00F5C2  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2160  00F5C6  50DF               	movf	indf2,w,c
  2161  00F5C8  6E6D               	movwf	printf@c,c
  2162  00F5CA  0E02               	movlw	2
  2163  00F5CC  265A               	addwf	printf@ap,f,c
  2164  00F5CE  0E00               	movlw	0
  2165  00F5D0  225B               	addwfc	printf@ap+1,f,c
  2166  00F5D2                     l3985:
  2167                           
  2168                           ;doprnt.c: 805: cp = (char *)&c;
  2169  00F5D2  0E6D               	movlw	low printf@c
  2170  00F5D4  6E55               	movwf	printf@cp,c
  2171  00F5D6  0E00               	movlw	high printf@c
  2172  00F5D8  6E56               	movwf	printf@cp+1,c
  2173                           
  2174                           ;doprnt.c: 806: len = 1;
  2175  00F5DA  0E00               	movlw	0
  2176  00F5DC  6E59               	movwf	printf@len+1,c
  2177  00F5DE  0E01               	movlw	1
  2178  00F5E0  6E58               	movwf	printf@len,c
  2179                           
  2180                           ;doprnt.c: 807: goto dostring;
  2181  00F5E2  D7CB               	goto	l3969
  2182  00F5E4                     l3989:
  2183                           
  2184                           ;doprnt.c: 818: flag |= 0xC0;
  2185  00F5E4  0EC0               	movlw	192
  2186  00F5E6  125E               	iorwf	printf@flag,f,c
  2187                           
  2188                           ;doprnt.c: 822: }
  2189                           
  2190                           ;doprnt.c: 819: break;
  2191  00F5E8  D023               	goto	l3995
  2192  00F5EA                     l3993:
  2193  00F5EA  C040  FFF6         	movff	printf@f,tblptrl
  2194  00F5EE  C041  FFF7         	movff	printf@f+1,tblptrh
  2195  00F5F2  4A40               	infsnz	printf@f,f,c
  2196  00F5F4  2A41               	incf	printf@f+1,f,c
  2197  00F5F6                     	if	0	;tblptru may be non-zero
  2198  00F5F6                     	endif
  2199  00F5F6                     	if	0	;tblptru may be non-zero
  2200  00F5F6                     	endif
  2201  00F5F6  0008               	tblrd		*
  2202  00F5F8  CFF5 F06D          	movff	tablat,printf@c
  2203  00F5FC  506D               	movf	printf@c,w,c
  2204                           
  2205                           ; Switch size 1, requested type "space"
  2206                           ; Number of cases is 8, Range of values is 0 to 120
  2207                           ; switch strategies available:
  2208                           ; Name         Instructions Cycles
  2209                           ; simple_byte           25    13 (average)
  2210                           ;	Chosen strategy is simple_byte
  2211  00F5FE  0A00               	xorlw	0	; case 0
  2212  00F600  B4D8               	btfsc	status,2,c
  2213  00F602  0012               	return	
  2214  00F604  0A63               	xorlw	99	; case 99
  2215  00F606  B4D8               	btfsc	status,2,c
  2216  00F608  D7DA               	goto	l3981
  2217  00F60A  0A07               	xorlw	7	; case 100
  2218  00F60C  B4D8               	btfsc	status,2,c
  2219  00F60E  D010               	goto	l3995
  2220  00F610  0A02               	xorlw	2	; case 102
  2221  00F612  B4D8               	btfsc	status,2,c
  2222  00F614  D7AE               	goto	l3965
  2223  00F616  0A0F               	xorlw	15	; case 105
  2224  00F618  B4D8               	btfsc	status,2,c
  2225  00F61A  D00A               	goto	l3995
  2226  00F61C  0A05               	xorlw	5	; case 108
  2227  00F61E  B4D8               	btfsc	status,2,c
  2228  00F620  D7A6               	goto	l3963
  2229  00F622  0A19               	xorlw	25	; case 117
  2230  00F624  B4D8               	btfsc	status,2,c
  2231  00F626  D7DE               	goto	l3989
  2232  00F628  0A0D               	xorlw	13	; case 120
  2233  00F62A  B4D8               	btfsc	status,2,c
  2234  00F62C  D7A4               	goto	l3967
  2235  00F62E  D7D1               	goto	l3985
  2236  00F630                     l3995:
  2237                           
  2238                           ;doprnt.c: 825: if(flag & (0x700)) {
  2239  00F630  0E07               	movlw	7
  2240  00F632  145F               	andwf	printf@flag+1,w,c
  2241  00F634  B4D8               	btfsc	status,2,c
  2242  00F636  D29E               	goto	l4129
  2243                           
  2244                           ;doprnt.c: 827: if(flag & 0x1000)
  2245  00F638  A85F               	btfss	printf@flag+1,4,c
  2246  00F63A  D004               	goto	l4001
  2247                           
  2248                           ;doprnt.c: 829: prec = 6;
  2249  00F63C  0E00               	movlw	0
  2250  00F63E  6E6C               	movwf	printf@prec+1,c
  2251  00F640  0E06               	movlw	6
  2252  00F642  6E6B               	movwf	printf@prec,c
  2253  00F644                     l4001:
  2254                           
  2255                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2256  00F644  C05A  FFD9         	movff	printf@ap,fsr2l
  2257  00F648  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2258  00F64C  CFDE F068          	movff	postinc2,printf@fval
  2259  00F650  CFDE F069          	movff	postinc2,printf@fval+1
  2260  00F654  CFDD F06A          	movff	postdec2,printf@fval+2
  2261  00F658  0E03               	movlw	3
  2262  00F65A  265A               	addwf	printf@ap,f,c
  2263  00F65C  0E00               	movlw	0
  2264  00F65E  225B               	addwfc	printf@ap+1,f,c
  2265                           
  2266                           ;doprnt.c: 831: if(fval < 0.0) {
  2267  00F660  AE6A               	btfss	printf@fval+2,7,c
  2268  00F662  D010               	goto	l4011
  2269                           
  2270                           ;doprnt.c: 832: fval = -fval;
  2271  00F664  C068  F001         	movff	printf@fval,___ftneg@f1
  2272  00F668  C069  F002         	movff	printf@fval+1,___ftneg@f1+1
  2273  00F66C  C06A  F003         	movff	printf@fval+2,___ftneg@f1+2
  2274  00F670  ECBA  F06A         	call	___ftneg	;wreg free
  2275  00F674  C001  F068         	movff	?___ftneg,printf@fval
  2276  00F678  C002  F069         	movff	?___ftneg+1,printf@fval+1
  2277  00F67C  C003  F06A         	movff	?___ftneg+2,printf@fval+2
  2278                           
  2279                           ;doprnt.c: 833: flag |= 0x03;
  2280  00F680  0E03               	movlw	3
  2281  00F682  125E               	iorwf	printf@flag,f,c
  2282  00F684                     l4011:
  2283                           
  2284                           ;doprnt.c: 834: }
  2285                           ;doprnt.c: 835: exp = 0;
  2286  00F684  0E00               	movlw	0
  2287  00F686  6E5D               	movwf	printf@exp+1,c
  2288  00F688  0E00               	movlw	0
  2289  00F68A  6E5C               	movwf	printf@exp,c
  2290                           
  2291                           ;doprnt.c: 836: if( fval!=0) {
  2292  00F68C  5068               	movf	printf@fval,w,c
  2293  00F68E  1069               	iorwf	printf@fval+1,w,c
  2294  00F690  106A               	iorwf	printf@fval+2,w,c
  2295  00F692  B4D8               	btfsc	status,2,c
  2296  00F694  D083               	goto	l4039
  2297                           
  2298                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2299  00F696  0E82               	movlw	130
  2300  00F698  6E4C               	movwf	??_printf& (0+255),c
  2301  00F69A  0EFF               	movlw	255
  2302  00F69C  6E4D               	movwf	(??_printf+1)& (0+255),c
  2303  00F69E  C068  F04E         	movff	printf@fval,??_printf+2
  2304  00F6A2  C069  F04F         	movff	printf@fval+1,??_printf+3
  2305  00F6A6  C06A  F050         	movff	printf@fval+2,??_printf+4
  2306  00F6AA  C06B  F051         	movff	printf@fval+3,??_printf+5
  2307  00F6AE  0E10               	movlw	16
  2308  00F6B0  D005               	goto	u3880
  2309  00F6B2                     u3885:
  2310  00F6B2  90D8               	bcf	status,0,c
  2311  00F6B4  3251               	rrcf	??_printf+5,f,c
  2312  00F6B6  3250               	rrcf	??_printf+4,f,c
  2313  00F6B8  324F               	rrcf	??_printf+3,f,c
  2314  00F6BA  324E               	rrcf	??_printf+2,f,c
  2315  00F6BC                     u3880:
  2316  00F6BC  2EE8               	decfsz	wreg,f,c
  2317  00F6BE  D7F9               	goto	u3885
  2318  00F6C0  504E               	movf	??_printf+2,w,c
  2319  00F6C2  244C               	addwf	??_printf,w,c
  2320  00F6C4  6E5C               	movwf	printf@exp,c
  2321  00F6C6  0E00               	movlw	0
  2322  00F6C8  204D               	addwfc	??_printf+1,w,c
  2323  00F6CA  6E5D               	movwf	printf@exp+1,c
  2324                           
  2325                           ;doprnt.c: 838: exp--;
  2326  00F6CC  065C               	decf	printf@exp,f,c
  2327  00F6CE  A0D8               	btfss	status,0,c
  2328  00F6D0  065D               	decf	printf@exp+1,f,c
  2329                           
  2330                           ;doprnt.c: 839: exp *= 3;
  2331  00F6D2  C05C  F00F         	movff	printf@exp,___wmul@multiplier
  2332  00F6D6  C05D  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2333  00F6DA  0E00               	movlw	0
  2334  00F6DC  6E12               	movwf	___wmul@multiplicand+1,c
  2335  00F6DE  0E03               	movlw	3
  2336  00F6E0  6E11               	movwf	___wmul@multiplicand,c
  2337  00F6E2  ECCC  F06A         	call	___wmul	;wreg free
  2338  00F6E6  C00F  F05C         	movff	?___wmul,printf@exp
  2339  00F6EA  C010  F05D         	movff	?___wmul+1,printf@exp+1
  2340                           
  2341                           ;doprnt.c: 840: exp /= 10;
  2342  00F6EE  C05C  F007         	movff	printf@exp,___awdiv@dividend
  2343  00F6F2  C05D  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2344  00F6F6  0E00               	movlw	0
  2345  00F6F8  6E0A               	movwf	___awdiv@divisor+1,c
  2346  00F6FA  0E0A               	movlw	10
  2347  00F6FC  6E09               	movwf	___awdiv@divisor,c
  2348  00F6FE  EC99  F06C         	call	___awdiv	;wreg free
  2349  00F702  C007  F05C         	movff	?___awdiv,printf@exp
  2350  00F706  C008  F05D         	movff	?___awdiv+1,printf@exp+1
  2351                           
  2352                           ;doprnt.c: 841: if(exp < 0)
  2353  00F70A  AE5D               	btfss	printf@exp+1,7,c
  2354  00F70C  D003               	goto	l4027
  2355                           
  2356                           ;doprnt.c: 842: exp--;
  2357  00F70E  065C               	decf	printf@exp,f,c
  2358  00F710  A0D8               	btfss	status,0,c
  2359  00F712  065D               	decf	printf@exp+1,f,c
  2360  00F714                     l4027:
  2361                           
  2362                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2363  00F714  505C               	movf	printf@exp,w,c
  2364  00F716  0800               	sublw	0
  2365  00F718  EC4F  F072         	call	_scale
  2366  00F71C  C024  F060         	movff	?_scale,printf@tmpval
  2367  00F720  C025  F061         	movff	?_scale+1,printf@tmpval+1
  2368  00F724  C026  F062         	movff	?_scale+2,printf@tmpval+2
  2369                           
  2370                           ;doprnt.c: 847: tmpval.integ *= fval;
  2371  00F728  C060  F015         	movff	printf@tmpval,___ftmul@f1
  2372  00F72C  C061  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  2373  00F730  C062  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  2374  00F734  C068  F018         	movff	printf@fval,___ftmul@f2
  2375  00F738  C069  F019         	movff	printf@fval+1,___ftmul@f2+1
  2376  00F73C  C06A  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2377  00F740  EC35  F06E         	call	___ftmul	;wreg free
  2378  00F744  C015  F060         	movff	?___ftmul,printf@tmpval
  2379  00F748  C016  F061         	movff	?___ftmul+1,printf@tmpval+1
  2380  00F74C  C017  F062         	movff	?___ftmul+2,printf@tmpval+2
  2381                           
  2382                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2383  00F750  C060  F001         	movff	printf@tmpval,___ftge@ff1
  2384  00F754  C061  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2385  00F758  C062  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2386  00F75C  0E00               	movlw	0
  2387  00F75E  6E04               	movwf	___ftge@ff2,c
  2388  00F760  0E80               	movlw	128
  2389  00F762  6E05               	movwf	___ftge@ff2+1,c
  2390  00F764  0E3F               	movlw	63
  2391  00F766  6E06               	movwf	___ftge@ff2+2,c
  2392  00F768  EC23  F06D         	call	___ftge	;wreg free
  2393  00F76C  B0D8               	btfsc	status,0,c
  2394  00F76E  D004               	goto	l4035
  2395                           
  2396                           ;doprnt.c: 849: exp--;
  2397  00F770  065C               	decf	printf@exp,f,c
  2398  00F772  A0D8               	btfss	status,0,c
  2399  00F774  065D               	decf	printf@exp+1,f,c
  2400  00F776  D012               	goto	l4039
  2401  00F778                     l4035:
  2402                           
  2403                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2404  00F778  C060  F001         	movff	printf@tmpval,___ftge@ff1
  2405  00F77C  C061  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2406  00F780  C062  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2407  00F784  0E00               	movlw	0
  2408  00F786  6E04               	movwf	___ftge@ff2,c
  2409  00F788  0E20               	movlw	32
  2410  00F78A  6E05               	movwf	___ftge@ff2+1,c
  2411  00F78C  0E41               	movlw	65
  2412  00F78E  6E06               	movwf	___ftge@ff2+2,c
  2413  00F790  EC23  F06D         	call	___ftge	;wreg free
  2414  00F794  A0D8               	btfss	status,0,c
  2415  00F796  D002               	goto	l4039
  2416                           
  2417                           ;doprnt.c: 851: exp++;
  2418  00F798  4A5C               	infsnz	printf@exp,f,c
  2419  00F79A  2A5D               	incf	printf@exp+1,f,c
  2420  00F79C                     l4039:
  2421                           
  2422                           ;doprnt.c: 852: }
  2423                           ;doprnt.c: 1112: if(prec <= 12)
  2424  00F79C  BE6C               	btfsc	printf@prec+1,7,c
  2425  00F79E  D006               	goto	l4041
  2426  00F7A0  506C               	movf	printf@prec+1,w,c
  2427  00F7A2  E11B               	bnz	l4043
  2428  00F7A4  0E0D               	movlw	13
  2429  00F7A6  5C6B               	subwf	printf@prec,w,c
  2430  00F7A8  B0D8               	btfsc	status,0,c
  2431  00F7AA  D017               	goto	l4043
  2432  00F7AC                     l4041:
  2433                           
  2434                           ;doprnt.c: 1113: fval += fround(prec);
  2435  00F7AC  C068  F02E         	movff	printf@fval,___ftadd@f1
  2436  00F7B0  C069  F02F         	movff	printf@fval+1,___ftadd@f1+1
  2437  00F7B4  C06A  F030         	movff	printf@fval+2,___ftadd@f1+2
  2438  00F7B8  506B               	movf	printf@prec,w,c
  2439  00F7BA  EC2C  F071         	call	_fround
  2440  00F7BE  C024  F031         	movff	?_fround,___ftadd@f2
  2441  00F7C2  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2442  00F7C6  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2443  00F7CA  EC56  F070         	call	___ftadd	;wreg free
  2444  00F7CE  C02E  F068         	movff	?___ftadd,printf@fval
  2445  00F7D2  C02F  F069         	movff	?___ftadd+1,printf@fval+1
  2446  00F7D6  C030  F06A         	movff	?___ftadd+2,printf@fval+2
  2447  00F7DA                     l4043:
  2448                           
  2449                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2450  00F7DA  BE5D               	btfsc	printf@exp+1,7,c
  2451  00F7DC  D006               	goto	l4045
  2452  00F7DE  505D               	movf	printf@exp+1,w,c
  2453  00F7E0  E11E               	bnz	l4051
  2454  00F7E2  0E0A               	movlw	10
  2455  00F7E4  5C5C               	subwf	printf@exp,w,c
  2456  00F7E6  B0D8               	btfsc	status,0,c
  2457  00F7E8  D01A               	goto	l4051
  2458  00F7EA                     l4045:
  2459  00F7EA  5068               	movf	printf@fval,w,c
  2460  00F7EC  1069               	iorwf	printf@fval+1,w,c
  2461  00F7EE  106A               	iorwf	printf@fval+2,w,c
  2462  00F7F0  B4D8               	btfsc	status,2,c
  2463  00F7F2  D051               	goto	l4065
  2464  00F7F4  C068  F02B         	movff	printf@fval,___fttol@f1
  2465  00F7F8  C069  F02C         	movff	printf@fval+1,___fttol@f1+1
  2466  00F7FC  C06A  F02D         	movff	printf@fval+2,___fttol@f1+2
  2467  00F800  ECAF  F06E         	call	___fttol	;wreg free
  2468  00F804  502B               	movf	?___fttol,w,c
  2469  00F806  102C               	iorwf	?___fttol+1,w,c
  2470  00F808  102D               	iorwf	?___fttol+2,w,c
  2471  00F80A  102E               	iorwf	?___fttol+3,w,c
  2472  00F80C  B4D8               	btfsc	status,2,c
  2473  00F80E  BE5D               	btfsc	printf@exp+1,7,c
  2474  00F810  D042               	goto	l4065
  2475  00F812  505D               	movf	printf@exp+1,w,c
  2476  00F814  E104               	bnz	l4051
  2477  00F816  0E02               	movlw	2
  2478  00F818  5C5C               	subwf	printf@exp,w,c
  2479  00F81A  A0D8               	btfss	status,0,c
  2480  00F81C  D03C               	goto	l4065
  2481  00F81E                     l4051:
  2482                           
  2483                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2484  00F81E  C060  F001         	movff	printf@tmpval,___ftge@ff1
  2485  00F822  C061  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2486  00F826  C062  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2487  00F82A  0E70               	movlw	112
  2488  00F82C  6E04               	movwf	___ftge@ff2,c
  2489  00F82E  0E89               	movlw	137
  2490  00F830  6E05               	movwf	___ftge@ff2+1,c
  2491  00F832  0E40               	movlw	64
  2492  00F834  6E06               	movwf	___ftge@ff2+2,c
  2493  00F836  EC23  F06D         	call	___ftge	;wreg free
  2494  00F83A  B0D8               	btfsc	status,0,c
  2495  00F83C  D002               	goto	l4055
  2496                           
  2497                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2498  00F83E  0EF7               	movlw	247
  2499  00F840  D001               	goto	L1
  2500  00F842                     l4055:
  2501                           
  2502                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2503  00F842  0EF8               	movlw	248
  2504  00F844                     L1:
  2505  00F844  265C               	addwf	printf@exp,f,c
  2506  00F846  0EFF               	movlw	255
  2507  00F848  225D               	addwfc	printf@exp+1,f,c
  2508                           
  2509                           ;doprnt.c: 1124: }
  2510                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2511  00F84A  505C               	movf	printf@exp,w,c
  2512  00F84C  EC4F  F072         	call	_scale
  2513  00F850  C024  F060         	movff	?_scale,printf@tmpval
  2514  00F854  C025  F061         	movff	?_scale+1,printf@tmpval+1
  2515  00F858  C026  F062         	movff	?_scale+2,printf@tmpval+2
  2516                           
  2517                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2518  00F85C  C068  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2519  00F860  C069  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2520  00F864  C06A  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2521  00F868  C060  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2522  00F86C  C061  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2523  00F870  C062  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2524  00F874  ECBD  F06F         	call	__tdiv_to_l_	;wreg free
  2525  00F878  C001  F064         	movff	?__tdiv_to_l_,printf@val
  2526  00F87C  C002  F065         	movff	?__tdiv_to_l_+1,printf@val+1
  2527  00F880  C003  F066         	movff	?__tdiv_to_l_+2,printf@val+2
  2528  00F884  C004  F067         	movff	?__tdiv_to_l_+3,printf@val+3
  2529                           
  2530                           ;doprnt.c: 1129: fval = 0.0;
  2531  00F888  0E00               	movlw	0
  2532  00F88A  6E68               	movwf	printf@fval,c
  2533  00F88C  0E00               	movlw	0
  2534  00F88E  6E69               	movwf	printf@fval+1,c
  2535  00F890  0E00               	movlw	0
  2536  00F892  6E6A               	movwf	printf@fval+2,c
  2537                           
  2538                           ;doprnt.c: 1130: } else {
  2539  00F894  D032               	goto	l4069
  2540  00F896                     l4065:
  2541                           
  2542                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2543  00F896  C068  F02B         	movff	printf@fval,___fttol@f1
  2544  00F89A  C069  F02C         	movff	printf@fval+1,___fttol@f1+1
  2545  00F89E  C06A  F02D         	movff	printf@fval+2,___fttol@f1+2
  2546  00F8A2  ECAF  F06E         	call	___fttol	;wreg free
  2547  00F8A6  C02B  F064         	movff	?___fttol,printf@val
  2548  00F8AA  C02C  F065         	movff	?___fttol+1,printf@val+1
  2549  00F8AE  C02D  F066         	movff	?___fttol+2,printf@val+2
  2550  00F8B2  C02E  F067         	movff	?___fttol+3,printf@val+3
  2551                           
  2552                           ;doprnt.c: 1132: fval -= (double)val;
  2553  00F8B6  C068  F03A         	movff	printf@fval,___ftsub@f1
  2554  00F8BA  C069  F03B         	movff	printf@fval+1,___ftsub@f1+1
  2555  00F8BE  C06A  F03C         	movff	printf@fval+2,___ftsub@f1+2
  2556  00F8C2  C064  F009         	movff	printf@val,___lltoft@c
  2557  00F8C6  C065  F00A         	movff	printf@val+1,___lltoft@c+1
  2558  00F8CA  C066  F00B         	movff	printf@val+2,___lltoft@c+2
  2559  00F8CE  C067  F00C         	movff	printf@val+3,___lltoft@c+3
  2560  00F8D2  EC80  F06B         	call	___lltoft	;wreg free
  2561  00F8D6  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2562  00F8DA  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2563  00F8DE  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2564  00F8E2  EC18  F06B         	call	___ftsub	;wreg free
  2565  00F8E6  C03A  F068         	movff	?___ftsub,printf@fval
  2566  00F8EA  C03B  F069         	movff	?___ftsub+1,printf@fval+1
  2567  00F8EE  C03C  F06A         	movff	?___ftsub+2,printf@fval+2
  2568                           
  2569                           ;doprnt.c: 1133: exp = 0;
  2570  00F8F2  0E00               	movlw	0
  2571  00F8F4  6E5D               	movwf	printf@exp+1,c
  2572  00F8F6  0E00               	movlw	0
  2573  00F8F8  6E5C               	movwf	printf@exp,c
  2574  00F8FA                     l4069:
  2575                           
  2576                           ;doprnt.c: 1134: }
  2577                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2578  00F8FA  0E01               	movlw	1
  2579  00F8FC  6E6D               	movwf	printf@c,c
  2580  00F8FE                     l4071:
  2581  00F8FE  0E0A               	movlw	10
  2582  00F900  186D               	xorwf	printf@c,w,c
  2583  00F902  B4D8               	btfsc	status,2,c
  2584  00F904  D018               	goto	l4083
  2585                           
  2586                           ;doprnt.c: 1137: if(val < dpowers[c])
  2587  00F906  506D               	movf	printf@c,w,c
  2588  00F908  0D04               	mullw	4
  2589  00F90A  0E53               	movlw	low _dpowers
  2590  00F90C  24F3               	addwf	prodl,w,c
  2591  00F90E  6EF6               	movwf	tblptrl,c
  2592  00F910  0EFE               	movlw	high _dpowers
  2593  00F912  20F4               	addwfc	prodh,w,c
  2594  00F914  6EF7               	movwf	tblptrh,c
  2595  00F916                     	if	0	;There are less than 3 active tblptr bytes
  2596  00F916                     	endif
  2597  00F916  0009               	tblrd		*+
  2598  00F918  50F5               	movf	tablat,w,c
  2599  00F91A  5C64               	subwf	printf@val,w,c
  2600  00F91C  0009               	tblrd		*+
  2601  00F91E  50F5               	movf	tablat,w,c
  2602  00F920  5865               	subwfb	printf@val+1,w,c
  2603  00F922  0009               	tblrd		*+
  2604  00F924  50F5               	movf	tablat,w,c
  2605  00F926  5866               	subwfb	printf@val+2,w,c
  2606  00F928  0009               	tblrd		*+
  2607  00F92A  50F5               	movf	tablat,w,c
  2608  00F92C  5867               	subwfb	printf@val+3,w,c
  2609  00F92E  A0D8               	btfss	status,0,c
  2610  00F930  D002               	goto	l4083
  2611                           
  2612                           ;doprnt.c: 1138: break;
  2613  00F932  2A6D               	incf	printf@c,f,c
  2614  00F934  D7E4               	goto	l4071
  2615  00F936                     l4083:
  2616                           
  2617                           ;doprnt.c: 1175: {
  2618                           ;doprnt.c: 1188: if(flag & 0x03)
  2619  00F936  0E03               	movlw	3
  2620  00F938  145E               	andwf	printf@flag,w,c
  2621  00F93A  6E4C               	movwf	??_printf& (0+255),c
  2622  00F93C  0E00               	movlw	0
  2623  00F93E  145F               	andwf	printf@flag+1,w,c
  2624  00F940  6E4D               	movwf	(??_printf+1)& (0+255),c
  2625  00F942  504C               	movf	??_printf,w,c
  2626  00F944  104D               	iorwf	??_printf+1,w,c
  2627  00F946  B4D8               	btfsc	status,2,c
  2628  00F948  D048               	goto	l4093
  2629                           
  2630                           ;doprnt.c: 1190: (putch('-') );
  2631  00F94A  0E2D               	movlw	45
  2632  00F94C  EC70  F06A         	call	_putch
  2633                           
  2634                           ;doprnt.c: 1195: }
  2635                           ;doprnt.c: 1196: while(c--) {
  2636  00F950  D044               	goto	l4093
  2637  00F952                     l4087:
  2638                           
  2639                           ;doprnt.c: 1200: {
  2640                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2641  00F952  C064  F001         	movff	printf@val,___lldiv@dividend
  2642  00F956  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  2643  00F95A  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  2644  00F95E  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  2645  00F962  506D               	movf	printf@c,w,c
  2646  00F964  0D04               	mullw	4
  2647  00F966  0E53               	movlw	low _dpowers
  2648  00F968  24F3               	addwf	prodl,w,c
  2649  00F96A  6EF6               	movwf	tblptrl,c
  2650  00F96C  0EFE               	movlw	high _dpowers
  2651  00F96E  20F4               	addwfc	prodh,w,c
  2652  00F970  6EF7               	movwf	tblptrh,c
  2653  00F972                     	if	0	;There are less than 3 active tblptr bytes
  2654  00F972                     	endif
  2655  00F972  0009               	tblrd		*+
  2656  00F974  CFF5 F005          	movff	tablat,___lldiv@divisor
  2657  00F978  0009               	tblrd		*+
  2658  00F97A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2659  00F97E  0009               	tblrd		*+
  2660  00F980  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2661  00F984  000A               	tblrd		*-
  2662  00F986  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2663  00F98A  EC58  F06C         	call	___lldiv	;wreg free
  2664  00F98E  C001  F060         	movff	?___lldiv,printf@tmpval
  2665  00F992  C002  F061         	movff	?___lldiv+1,printf@tmpval+1
  2666  00F996  C003  F062         	movff	?___lldiv+2,printf@tmpval+2
  2667  00F99A  C004  F063         	movff	?___lldiv+3,printf@tmpval+3
  2668                           
  2669                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2670  00F99E  C060  F00E         	movff	printf@tmpval,___llmod@dividend
  2671  00F9A2  C061  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2672  00F9A6  C062  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2673  00F9AA  C063  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2674  00F9AE  0E0A               	movlw	10
  2675  00F9B0  6E12               	movwf	___llmod@divisor,c
  2676  00F9B2  0E00               	movlw	0
  2677  00F9B4  6E13               	movwf	___llmod@divisor+1,c
  2678  00F9B6  0E00               	movlw	0
  2679  00F9B8  6E14               	movwf	___llmod@divisor+2,c
  2680  00F9BA  0E00               	movlw	0
  2681  00F9BC  6E15               	movwf	___llmod@divisor+3,c
  2682  00F9BE  ECAE  F06B         	call	___llmod	;wreg free
  2683  00F9C2  C00E  F060         	movff	?___llmod,printf@tmpval
  2684  00F9C6  C00F  F061         	movff	?___llmod+1,printf@tmpval+1
  2685  00F9CA  C010  F062         	movff	?___llmod+2,printf@tmpval+2
  2686  00F9CE  C011  F063         	movff	?___llmod+3,printf@tmpval+3
  2687                           
  2688                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2689  00F9D2  5060               	movf	printf@tmpval,w,c
  2690  00F9D4  0F30               	addlw	48
  2691  00F9D6  EC70  F06A         	call	_putch
  2692  00F9DA                     l4093:
  2693  00F9DA  066D               	decf	printf@c,f,c
  2694  00F9DC  286D               	incf	printf@c,w,c
  2695  00F9DE  B4D8               	btfsc	status,2,c
  2696  00F9E0  D007               	goto	l4099
  2697  00F9E2  D7B7               	goto	l4087
  2698  00F9E4                     l4095:
  2699                           
  2700                           ;doprnt.c: 1208: (putch('0') );
  2701  00F9E4  0E30               	movlw	48
  2702  00F9E6  EC70  F06A         	call	_putch
  2703                           
  2704                           ;doprnt.c: 1209: exp--;
  2705  00F9EA  065C               	decf	printf@exp,f,c
  2706  00F9EC  A0D8               	btfss	status,0,c
  2707  00F9EE  065D               	decf	printf@exp+1,f,c
  2708  00F9F0                     l4099:
  2709  00F9F0  BE5D               	btfsc	printf@exp+1,7,c
  2710  00F9F2  D005               	goto	l4101
  2711  00F9F4  505D               	movf	printf@exp+1,w,c
  2712  00F9F6  E1F6               	bnz	l4095
  2713  00F9F8  045C               	decf	printf@exp,w,c
  2714  00F9FA  B0D8               	btfsc	status,0,c
  2715  00F9FC  D7F3               	goto	l4095
  2716  00F9FE                     l4101:
  2717                           
  2718                           ;doprnt.c: 1210: }
  2719                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2720  00F9FE  BE6C               	btfsc	printf@prec+1,7,c
  2721  00FA00  D009               	goto	l583
  2722  00FA02  506C               	movf	printf@prec+1,w,c
  2723  00FA04  E104               	bnz	u4040
  2724  00FA06  0E09               	movlw	9
  2725  00FA08  5C6B               	subwf	printf@prec,w,c
  2726  00FA0A  A0D8               	btfss	status,0,c
  2727  00FA0C  D003               	goto	l583
  2728  00FA0E                     u4040:
  2729                           
  2730                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2731  00FA0E  0E08               	movlw	8
  2732  00FA10  6E6D               	movwf	printf@c,c
  2733  00FA12  D002               	goto	l4105
  2734  00FA14                     l583:
  2735                           
  2736                           ;doprnt.c: 1213: else
  2737                           ;doprnt.c: 1214: c = prec;
  2738  00FA14  C06B  F06D         	movff	printf@prec,printf@c
  2739  00FA18                     l4105:
  2740                           
  2741                           ;doprnt.c: 1215: prec -= c;
  2742  00FA18  506D               	movf	printf@c,w,c
  2743  00FA1A  5E6B               	subwf	printf@prec,f,c
  2744  00FA1C  0E00               	movlw	0
  2745  00FA1E  BE6D               	btfsc	printf@c,7,c
  2746  00FA20  0EFF               	movlw	255
  2747  00FA22  5A6C               	subwfb	printf@prec+1,f,c
  2748                           
  2749                           ;doprnt.c: 1219: if(c)
  2750  00FA24  506D               	movf	printf@c,w,c
  2751  00FA26  B4D8               	btfsc	status,2,c
  2752  00FA28  D003               	goto	l4111
  2753                           
  2754                           ;doprnt.c: 1221: (putch('.') );
  2755  00FA2A  0E2E               	movlw	46
  2756  00FA2C  EC70  F06A         	call	_putch
  2757  00FA30                     l4111:
  2758                           
  2759                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2760  00FA30  506D               	movf	printf@c,w,c
  2761  00FA32  EC4F  F072         	call	_scale
  2762  00FA36  C024  F052         	movff	?_scale,_printf$1547
  2763  00FA3A  C025  F053         	movff	?_scale+1,_printf$1547+1
  2764  00FA3E  C026  F054         	movff	?_scale+2,_printf$1547+2
  2765                           
  2766                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2767  00FA42  C068  F018         	movff	printf@fval,___ftmul@f2
  2768  00FA46  C069  F019         	movff	printf@fval+1,___ftmul@f2+1
  2769  00FA4A  C06A  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2770  00FA4E  C052  F015         	movff	_printf$1547,___ftmul@f1
  2771  00FA52  C053  F016         	movff	_printf$1547+1,___ftmul@f1+1
  2772  00FA56  C054  F017         	movff	_printf$1547+2,___ftmul@f1+2
  2773  00FA5A  EC35  F06E         	call	___ftmul	;wreg free
  2774  00FA5E  C015  F02B         	movff	?___ftmul,___fttol@f1
  2775  00FA62  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2776  00FA66  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2777  00FA6A  ECAF  F06E         	call	___fttol	;wreg free
  2778  00FA6E  C02B  F064         	movff	?___fttol,printf@val
  2779  00FA72  C02C  F065         	movff	?___fttol+1,printf@val+1
  2780  00FA76  C02D  F066         	movff	?___fttol+2,printf@val+2
  2781  00FA7A  C02E  F067         	movff	?___fttol+3,printf@val+3
  2782                           
  2783                           ;doprnt.c: 1228: while(c--) {
  2784  00FA7E  D06A               	goto	l4121
  2785  00FA80                     l4115:
  2786                           
  2787                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2788  00FA80  C064  F001         	movff	printf@val,___lldiv@dividend
  2789  00FA84  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  2790  00FA88  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  2791  00FA8C  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  2792  00FA90  506D               	movf	printf@c,w,c
  2793  00FA92  0D04               	mullw	4
  2794  00FA94  0E53               	movlw	low _dpowers
  2795  00FA96  24F3               	addwf	prodl,w,c
  2796  00FA98  6EF6               	movwf	tblptrl,c
  2797  00FA9A  0EFE               	movlw	high _dpowers
  2798  00FA9C  20F4               	addwfc	prodh,w,c
  2799  00FA9E  6EF7               	movwf	tblptrh,c
  2800  00FAA0                     	if	0	;There are less than 3 active tblptr bytes
  2801  00FAA0                     	endif
  2802  00FAA0  0009               	tblrd		*+
  2803  00FAA2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2804  00FAA6  0009               	tblrd		*+
  2805  00FAA8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2806  00FAAC  0009               	tblrd		*+
  2807  00FAAE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2808  00FAB2  000A               	tblrd		*-
  2809  00FAB4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2810  00FAB8  EC58  F06C         	call	___lldiv	;wreg free
  2811  00FABC  C001  F060         	movff	?___lldiv,printf@tmpval
  2812  00FAC0  C002  F061         	movff	?___lldiv+1,printf@tmpval+1
  2813  00FAC4  C003  F062         	movff	?___lldiv+2,printf@tmpval+2
  2814  00FAC8  C004  F063         	movff	?___lldiv+3,printf@tmpval+3
  2815                           
  2816                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2817  00FACC  C060  F00E         	movff	printf@tmpval,___llmod@dividend
  2818  00FAD0  C061  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2819  00FAD4  C062  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2820  00FAD8  C063  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2821  00FADC  0E0A               	movlw	10
  2822  00FADE  6E12               	movwf	___llmod@divisor,c
  2823  00FAE0  0E00               	movlw	0
  2824  00FAE2  6E13               	movwf	___llmod@divisor+1,c
  2825  00FAE4  0E00               	movlw	0
  2826  00FAE6  6E14               	movwf	___llmod@divisor+2,c
  2827  00FAE8  0E00               	movlw	0
  2828  00FAEA  6E15               	movwf	___llmod@divisor+3,c
  2829  00FAEC  ECAE  F06B         	call	___llmod	;wreg free
  2830  00FAF0  C00E  F060         	movff	?___llmod,printf@tmpval
  2831  00FAF4  C00F  F061         	movff	?___llmod+1,printf@tmpval+1
  2832  00FAF8  C010  F062         	movff	?___llmod+2,printf@tmpval+2
  2833  00FAFC  C011  F063         	movff	?___llmod+3,printf@tmpval+3
  2834                           
  2835                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2836  00FB00  5060               	movf	printf@tmpval,w,c
  2837  00FB02  0F30               	addlw	48
  2838  00FB04  EC70  F06A         	call	_putch
  2839                           
  2840                           ;doprnt.c: 1232: val %= dpowers[c];
  2841  00FB08  C064  F00E         	movff	printf@val,___llmod@dividend
  2842  00FB0C  C065  F00F         	movff	printf@val+1,___llmod@dividend+1
  2843  00FB10  C066  F010         	movff	printf@val+2,___llmod@dividend+2
  2844  00FB14  C067  F011         	movff	printf@val+3,___llmod@dividend+3
  2845  00FB18  506D               	movf	printf@c,w,c
  2846  00FB1A  0D04               	mullw	4
  2847  00FB1C  0E53               	movlw	low _dpowers
  2848  00FB1E  24F3               	addwf	prodl,w,c
  2849  00FB20  6EF6               	movwf	tblptrl,c
  2850  00FB22  0EFE               	movlw	high _dpowers
  2851  00FB24  20F4               	addwfc	prodh,w,c
  2852  00FB26  6EF7               	movwf	tblptrh,c
  2853  00FB28                     	if	0	;There are less than 3 active tblptr bytes
  2854  00FB28                     	endif
  2855  00FB28  0009               	tblrd		*+
  2856  00FB2A  CFF5 F012          	movff	tablat,___llmod@divisor
  2857  00FB2E  0009               	tblrd		*+
  2858  00FB30  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2859  00FB34  0009               	tblrd		*+
  2860  00FB36  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2861  00FB3A  000A               	tblrd		*-
  2862  00FB3C  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2863  00FB40  ECAE  F06B         	call	___llmod	;wreg free
  2864  00FB44  C00E  F064         	movff	?___llmod,printf@val
  2865  00FB48  C00F  F065         	movff	?___llmod+1,printf@val+1
  2866  00FB4C  C010  F066         	movff	?___llmod+2,printf@val+2
  2867  00FB50  C011  F067         	movff	?___llmod+3,printf@val+3
  2868  00FB54                     l4121:
  2869  00FB54  066D               	decf	printf@c,f,c
  2870  00FB56  286D               	incf	printf@c,w,c
  2871  00FB58  B4D8               	btfsc	status,2,c
  2872  00FB5A  D007               	goto	l4127
  2873  00FB5C  D791               	goto	l4115
  2874  00FB5E                     l4123:
  2875                           
  2876                           ;doprnt.c: 1236: (putch('0') );
  2877  00FB5E  0E30               	movlw	48
  2878  00FB60  EC70  F06A         	call	_putch
  2879                           
  2880                           ;doprnt.c: 1237: prec--;
  2881  00FB64  066B               	decf	printf@prec,f,c
  2882  00FB66  A0D8               	btfss	status,0,c
  2883  00FB68  066C               	decf	printf@prec+1,f,c
  2884  00FB6A                     l4127:
  2885  00FB6A  506B               	movf	printf@prec,w,c
  2886  00FB6C  106C               	iorwf	printf@prec+1,w,c
  2887  00FB6E  B4D8               	btfsc	status,2,c
  2888  00FB70  D162               	goto	l4219
  2889  00FB72  D7F5               	goto	l4123
  2890  00FB74                     l4129:
  2891                           
  2892                           ;doprnt.c: 1246: }
  2893                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2894  00FB74  0EC0               	movlw	192
  2895  00FB76  145E               	andwf	printf@flag,w,c
  2896  00FB78  6E4C               	movwf	??_printf& (0+255),c
  2897  00FB7A  0E00               	movlw	0
  2898  00FB7C  145F               	andwf	printf@flag+1,w,c
  2899  00FB7E  6E4D               	movwf	(??_printf+1)& (0+255),c
  2900  00FB80  504C               	movf	??_printf,w,c
  2901  00FB82  104D               	iorwf	??_printf+1,w,c
  2902  00FB84  A4D8               	btfss	status,2,c
  2903  00FB86  D02E               	goto	l592
  2904                           
  2905                           ;doprnt.c: 1253: {
  2906                           ;doprnt.c: 1255: if(flag & 0x10)
  2907  00FB88  A85E               	btfss	printf@flag,4,c
  2908  00FB8A  D00E               	goto	l4137
  2909                           
  2910                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2911  00FB8C  C05A  FFD9         	movff	printf@ap,fsr2l
  2912  00FB90  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2913  00FB94  CFDE F064          	movff	postinc2,printf@val
  2914  00FB98  CFDE F065          	movff	postinc2,printf@val+1
  2915  00FB9C  CFDE F066          	movff	postinc2,printf@val+2
  2916  00FBA0  CFDE F067          	movff	postinc2,printf@val+3
  2917  00FBA4  0E04               	movlw	4
  2918  00FBA6  D00E               	goto	L2
  2919  00FBA8                     l4137:
  2920                           
  2921                           ;doprnt.c: 1257: else
  2922                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2923  00FBA8  C05A  FFD9         	movff	printf@ap,fsr2l
  2924  00FBAC  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2925  00FBB0  CFDE F064          	movff	postinc2,printf@val
  2926  00FBB4  CFDD F065          	movff	postdec2,printf@val+1
  2927  00FBB8  0E00               	movlw	0
  2928  00FBBA  BE65               	btfsc	printf@val+1,7,c
  2929  00FBBC  0EFF               	movlw	-1
  2930  00FBBE  6E66               	movwf	printf@val+2,c
  2931  00FBC0  6E67               	movwf	printf@val+3,c
  2932  00FBC2  0E02               	movlw	2
  2933  00FBC4                     L2:
  2934  00FBC4  265A               	addwf	printf@ap,f,c
  2935  00FBC6  0E00               	movlw	0
  2936  00FBC8  225B               	addwfc	printf@ap+1,f,c
  2937                           
  2938                           ;doprnt.c: 1261: if((long)val < 0) {
  2939  00FBCA  AE67               	btfss	printf@val+3,7,c
  2940  00FBCC  D02D               	goto	l4155
  2941                           
  2942                           ;doprnt.c: 1262: flag |= 0x03;
  2943  00FBCE  0E03               	movlw	3
  2944  00FBD0  125E               	iorwf	printf@flag,f,c
  2945                           
  2946                           ;doprnt.c: 1263: val = -val;
  2947  00FBD2  1E67               	comf	printf@val+3,f,c
  2948  00FBD4  1E66               	comf	printf@val+2,f,c
  2949  00FBD6  1E65               	comf	printf@val+1,f,c
  2950  00FBD8  6C64               	negf	printf@val,c
  2951  00FBDA  0E00               	movlw	0
  2952  00FBDC  2265               	addwfc	printf@val+1,f,c
  2953  00FBDE  2266               	addwfc	printf@val+2,f,c
  2954  00FBE0  2267               	addwfc	printf@val+3,f,c
  2955                           
  2956                           ;doprnt.c: 1264: }
  2957                           ;doprnt.c: 1266: }
  2958  00FBE2  D022               	goto	l4155
  2959  00FBE4                     l592:
  2960                           
  2961                           ;doprnt.c: 1268: else
  2962                           ;doprnt.c: 1273: {
  2963                           ;doprnt.c: 1281: if(flag & 0x10)
  2964  00FBE4  A85E               	btfss	printf@flag,4,c
  2965  00FBE6  D00E               	goto	l4151
  2966                           
  2967                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2968  00FBE8  C05A  FFD9         	movff	printf@ap,fsr2l
  2969  00FBEC  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2970  00FBF0  CFDE F064          	movff	postinc2,printf@val
  2971  00FBF4  CFDE F065          	movff	postinc2,printf@val+1
  2972  00FBF8  CFDE F066          	movff	postinc2,printf@val+2
  2973  00FBFC  CFDE F067          	movff	postinc2,printf@val+3
  2974  00FC00  0E04               	movlw	4
  2975  00FC02  D00F               	goto	L3
  2976  00FC04                     l4151:
  2977                           
  2978                           ;doprnt.c: 1283: else
  2979                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2980  00FC04  C05A  FFD9         	movff	printf@ap,fsr2l
  2981  00FC08  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2982  00FC0C  CFDE F04C          	movff	postinc2,??_printf
  2983  00FC10  CFDD F04D          	movff	postdec2,??_printf+1
  2984  00FC14  C04C  F064         	movff	??_printf,printf@val
  2985  00FC18  C04D  F065         	movff	??_printf+1,printf@val+1
  2986  00FC1C  6A66               	clrf	printf@val+2,c
  2987  00FC1E  6A67               	clrf	printf@val+3,c
  2988  00FC20  0E02               	movlw	2
  2989  00FC22                     L3:
  2990  00FC22  265A               	addwf	printf@ap,f,c
  2991  00FC24  0E00               	movlw	0
  2992  00FC26  225B               	addwfc	printf@ap+1,f,c
  2993  00FC28                     l4155:
  2994                           
  2995                           ;doprnt.c: 1287: }
  2996                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2997  00FC28  506B               	movf	printf@prec,w,c
  2998  00FC2A  106C               	iorwf	printf@prec+1,w,c
  2999  00FC2C  A4D8               	btfss	status,2,c
  3000  00FC2E  D045               	goto	l4191
  3001  00FC30  5064               	movf	printf@val,w,c
  3002  00FC32  1065               	iorwf	printf@val+1,w,c
  3003  00FC34  1066               	iorwf	printf@val+2,w,c
  3004  00FC36  1067               	iorwf	printf@val+3,w,c
  3005  00FC38  A4D8               	btfss	status,2,c
  3006  00FC3A  D03F               	goto	l4191
  3007                           
  3008                           ;doprnt.c: 1291: prec++;
  3009  00FC3C  4A6B               	infsnz	printf@prec,f,c
  3010  00FC3E  2A6C               	incf	printf@prec+1,f,c
  3011                           
  3012                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3013  00FC40  D03C               	goto	l4191
  3014  00FC42                     l4161:
  3015                           
  3016                           ;doprnt.c: 1302: case 0xC0:
  3017                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3018  00FC42  0E01               	movlw	1
  3019  00FC44  6E6D               	movwf	printf@c,c
  3020  00FC46                     l4163:
  3021  00FC46  0E0A               	movlw	10
  3022  00FC48  186D               	xorwf	printf@c,w,c
  3023  00FC4A  B4D8               	btfsc	status,2,c
  3024  00FC4C  D041               	goto	l4193
  3025                           
  3026                           ;doprnt.c: 1306: if(val < dpowers[c])
  3027  00FC4E  506D               	movf	printf@c,w,c
  3028  00FC50  0D04               	mullw	4
  3029  00FC52  0E53               	movlw	low _dpowers
  3030  00FC54  24F3               	addwf	prodl,w,c
  3031  00FC56  6EF6               	movwf	tblptrl,c
  3032  00FC58  0EFE               	movlw	high _dpowers
  3033  00FC5A  20F4               	addwfc	prodh,w,c
  3034  00FC5C  6EF7               	movwf	tblptrh,c
  3035  00FC5E                     	if	0	;There are less than 3 active tblptr bytes
  3036  00FC5E                     	endif
  3037  00FC5E  0009               	tblrd		*+
  3038  00FC60  50F5               	movf	tablat,w,c
  3039  00FC62  5C64               	subwf	printf@val,w,c
  3040  00FC64  0009               	tblrd		*+
  3041  00FC66  50F5               	movf	tablat,w,c
  3042  00FC68  5865               	subwfb	printf@val+1,w,c
  3043  00FC6A  0009               	tblrd		*+
  3044  00FC6C  50F5               	movf	tablat,w,c
  3045  00FC6E  5866               	subwfb	printf@val+2,w,c
  3046  00FC70  0009               	tblrd		*+
  3047  00FC72  50F5               	movf	tablat,w,c
  3048  00FC74  5867               	subwfb	printf@val+3,w,c
  3049  00FC76  A0D8               	btfss	status,0,c
  3050  00FC78  D02B               	goto	l4193
  3051                           
  3052                           ;doprnt.c: 1307: break;
  3053  00FC7A  2A6D               	incf	printf@c,f,c
  3054  00FC7C  D7E4               	goto	l4163
  3055  00FC7E                     l4175:
  3056                           
  3057                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3058  00FC7E  0E01               	movlw	1
  3059  00FC80  6E6D               	movwf	printf@c,c
  3060  00FC82                     l4177:
  3061  00FC82  0E08               	movlw	8
  3062  00FC84  186D               	xorwf	printf@c,w,c
  3063  00FC86  B4D8               	btfsc	status,2,c
  3064  00FC88  D023               	goto	l4193
  3065                           
  3066                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3067  00FC8A  506D               	movf	printf@c,w,c
  3068  00FC8C  0D04               	mullw	4
  3069  00FC8E  0EC9               	movlw	low _hexpowers
  3070  00FC90  24F3               	addwf	prodl,w,c
  3071  00FC92  6EF6               	movwf	tblptrl,c
  3072  00FC94  0EFE               	movlw	high _hexpowers
  3073  00FC96  20F4               	addwfc	prodh,w,c
  3074  00FC98  6EF7               	movwf	tblptrh,c
  3075  00FC9A                     	if	0	;There are less than 3 active tblptr bytes
  3076  00FC9A                     	endif
  3077  00FC9A  0009               	tblrd		*+
  3078  00FC9C  50F5               	movf	tablat,w,c
  3079  00FC9E  5C64               	subwf	printf@val,w,c
  3080  00FCA0  0009               	tblrd		*+
  3081  00FCA2  50F5               	movf	tablat,w,c
  3082  00FCA4  5865               	subwfb	printf@val+1,w,c
  3083  00FCA6  0009               	tblrd		*+
  3084  00FCA8  50F5               	movf	tablat,w,c
  3085  00FCAA  5866               	subwfb	printf@val+2,w,c
  3086  00FCAC  0009               	tblrd		*+
  3087  00FCAE  50F5               	movf	tablat,w,c
  3088  00FCB0  5867               	subwfb	printf@val+3,w,c
  3089  00FCB2  A0D8               	btfss	status,0,c
  3090  00FCB4  D00D               	goto	l4193
  3091                           
  3092                           ;doprnt.c: 1318: break;
  3093  00FCB6  2A6D               	incf	printf@c,f,c
  3094  00FCB8  D7E4               	goto	l4177
  3095  00FCBA                     l4191:
  3096  00FCBA  505E               	movf	printf@flag,w,c
  3097  00FCBC  0BC0               	andlw	192
  3098                           
  3099                           ; Switch size 1, requested type "space"
  3100                           ; Number of cases is 3, Range of values is 0 to 192
  3101                           ; switch strategies available:
  3102                           ; Name         Instructions Cycles
  3103                           ; simple_byte           10     6 (average)
  3104                           ;	Chosen strategy is simple_byte
  3105  00FCBE  0A00               	xorlw	0	; case 0
  3106  00FCC0  B4D8               	btfsc	status,2,c
  3107  00FCC2  D7BF               	goto	l4161
  3108  00FCC4  0A80               	xorlw	128	; case 128
  3109  00FCC6  B4D8               	btfsc	status,2,c
  3110  00FCC8  D7DA               	goto	l4175
  3111  00FCCA  0A40               	xorlw	64	; case 192
  3112  00FCCC  B4D8               	btfsc	status,2,c
  3113  00FCCE  D7B9               	goto	l4161
  3114  00FCD0                     l4193:
  3115                           
  3116                           ;doprnt.c: 1339: if(c < prec)
  3117  00FCD0  0E80               	movlw	128
  3118  00FCD2  BE6D               	btfsc	printf@c,7,c
  3119  00FCD4  0E7F               	movlw	127
  3120  00FCD6  6E4C               	movwf	??_printf& (0+255),c
  3121  00FCD8  506B               	movf	printf@prec,w,c
  3122  00FCDA  5C6D               	subwf	printf@c,w,c
  3123  00FCDC  506C               	movf	printf@prec+1,w,c
  3124  00FCDE  0A80               	xorlw	128
  3125  00FCE0  584C               	subwfb	??_printf& (0+255),w,c
  3126  00FCE2  B0D8               	btfsc	status,0,c
  3127  00FCE4  D003               	goto	l4197
  3128                           
  3129                           ;doprnt.c: 1340: c = prec;
  3130  00FCE6  C06B  F06D         	movff	printf@prec,printf@c
  3131  00FCEA  D010               	goto	l4201
  3132  00FCEC                     l4197:
  3133                           
  3134                           ;doprnt.c: 1341: else if(prec < c)
  3135  00FCEC  506C               	movf	printf@prec+1,w,c
  3136  00FCEE  0A80               	xorlw	128
  3137  00FCF0  6E4C               	movwf	??_printf& (0+255),c
  3138  00FCF2  506D               	movf	printf@c,w,c
  3139  00FCF4  5C6B               	subwf	printf@prec,w,c
  3140  00FCF6  0E80               	movlw	128
  3141  00FCF8  BE6D               	btfsc	printf@c,7,c
  3142  00FCFA  0E7F               	movlw	127
  3143  00FCFC  584C               	subwfb	??_printf& (0+255),w,c
  3144  00FCFE  B0D8               	btfsc	status,0,c
  3145  00FD00  D005               	goto	l4201
  3146                           
  3147                           ;doprnt.c: 1342: prec = c;
  3148  00FD02  506D               	movf	printf@c,w,c
  3149  00FD04  6E6B               	movwf	printf@prec,c
  3150  00FD06  6A6C               	clrf	printf@prec+1,c
  3151  00FD08  BE6B               	btfsc	printf@prec,7,c
  3152  00FD0A  066C               	decf	printf@prec+1,f,c
  3153  00FD0C                     l4201:
  3154                           
  3155                           ;doprnt.c: 1422: {
  3156                           ;doprnt.c: 1438: if(flag & 0x03)
  3157  00FD0C  0E03               	movlw	3
  3158  00FD0E  145E               	andwf	printf@flag,w,c
  3159  00FD10  6E4C               	movwf	??_printf& (0+255),c
  3160  00FD12  0E00               	movlw	0
  3161  00FD14  145F               	andwf	printf@flag+1,w,c
  3162  00FD16  6E4D               	movwf	(??_printf+1)& (0+255),c
  3163  00FD18  504C               	movf	??_printf,w,c
  3164  00FD1A  104D               	iorwf	??_printf+1,w,c
  3165  00FD1C  B4D8               	btfsc	status,2,c
  3166  00FD1E  D083               	goto	l4217
  3167                           
  3168                           ;doprnt.c: 1439: (putch('-') );
  3169  00FD20  0E2D               	movlw	45
  3170  00FD22  EC70  F06A         	call	_putch
  3171                           
  3172                           ;doprnt.c: 1469: }
  3173                           ;doprnt.c: 1474: while(prec--) {
  3174  00FD26  D07F               	goto	l4217
  3175  00FD28                     l4205:
  3176                           
  3177                           ;doprnt.c: 1486: case 0xC0:
  3178                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3179  00FD28  C06B  F04C         	movff	printf@prec,??_printf
  3180  00FD2C  C06C  F04D         	movff	printf@prec+1,??_printf+1
  3181  00FD30  90D8               	bcf	status,0,c
  3182  00FD32  364C               	rlcf	??_printf,f,c
  3183  00FD34  364D               	rlcf	??_printf+1,f,c
  3184  00FD36  90D8               	bcf	status,0,c
  3185  00FD38  364C               	rlcf	??_printf,f,c
  3186  00FD3A  364D               	rlcf	??_printf+1,f,c
  3187  00FD3C  0E53               	movlw	low _dpowers
  3188  00FD3E  244C               	addwf	??_printf,w,c
  3189  00FD40  6EF6               	movwf	tblptrl,c
  3190  00FD42  0EFE               	movlw	high _dpowers
  3191  00FD44  204D               	addwfc	??_printf+1,w,c
  3192  00FD46  6EF7               	movwf	tblptrh,c
  3193  00FD48                     	if	0	;There are less than 3 active tblptr bytes
  3194  00FD48                     	endif
  3195  00FD48  0009               	tblrd		*+
  3196  00FD4A  CFF5 F005          	movff	tablat,___lldiv@divisor
  3197  00FD4E  0009               	tblrd		*+
  3198  00FD50  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3199  00FD54  0009               	tblrd		*+
  3200  00FD56  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3201  00FD5A  000A               	tblrd		*-
  3202  00FD5C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3203  00FD60  C064  F001         	movff	printf@val,___lldiv@dividend
  3204  00FD64  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  3205  00FD68  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  3206  00FD6C  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  3207  00FD70  EC58  F06C         	call	___lldiv	;wreg free
  3208  00FD74  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3209  00FD78  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3210  00FD7C  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3211  00FD80  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3212  00FD84  0E0A               	movlw	10
  3213  00FD86  6E12               	movwf	___llmod@divisor,c
  3214  00FD88  0E00               	movlw	0
  3215  00FD8A  6E13               	movwf	___llmod@divisor+1,c
  3216  00FD8C  0E00               	movlw	0
  3217  00FD8E  6E14               	movwf	___llmod@divisor+2,c
  3218  00FD90  0E00               	movlw	0
  3219  00FD92  6E15               	movwf	___llmod@divisor+3,c
  3220  00FD94  ECAE  F06B         	call	___llmod	;wreg free
  3221  00FD98  500E               	movf	?___llmod,w,c
  3222  00FD9A  0F30               	addlw	48
  3223  00FD9C  6E6D               	movwf	printf@c,c
  3224                           
  3225                           ;doprnt.c: 1491: break;
  3226  00FD9E  D040               	goto	l4215
  3227  00FDA0                     l4207:
  3228                           
  3229                           ;doprnt.c: 1499: {
  3230                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3231  00FDA0  C064  F001         	movff	printf@val,___lldiv@dividend
  3232  00FDA4  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  3233  00FDA8  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  3234  00FDAC  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  3235  00FDB0  C06B  F04C         	movff	printf@prec,??_printf
  3236  00FDB4  C06C  F04D         	movff	printf@prec+1,??_printf+1
  3237  00FDB8  90D8               	bcf	status,0,c
  3238  00FDBA  364C               	rlcf	??_printf,f,c
  3239  00FDBC  364D               	rlcf	??_printf+1,f,c
  3240  00FDBE  90D8               	bcf	status,0,c
  3241  00FDC0  364C               	rlcf	??_printf,f,c
  3242  00FDC2  364D               	rlcf	??_printf+1,f,c
  3243  00FDC4  0EC9               	movlw	low _hexpowers
  3244  00FDC6  244C               	addwf	??_printf,w,c
  3245  00FDC8  6EF6               	movwf	tblptrl,c
  3246  00FDCA  0EFE               	movlw	high _hexpowers
  3247  00FDCC  204D               	addwfc	??_printf+1,w,c
  3248  00FDCE  6EF7               	movwf	tblptrh,c
  3249  00FDD0                     	if	0	;There are less than 3 active tblptr bytes
  3250  00FDD0                     	endif
  3251  00FDD0  0009               	tblrd		*+
  3252  00FDD2  CFF5 F005          	movff	tablat,___lldiv@divisor
  3253  00FDD6  0009               	tblrd		*+
  3254  00FDD8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3255  00FDDC  0009               	tblrd		*+
  3256  00FDDE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3257  00FDE2  000A               	tblrd		*-
  3258  00FDE4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3259  00FDE8  EC58  F06C         	call	___lldiv	;wreg free
  3260  00FDEC  5001               	movf	?___lldiv,w,c
  3261  00FDEE  0B0F               	andlw	15
  3262  00FDF0  6E57               	movwf	printf@idx,c
  3263                           
  3264                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3265  00FDF2  5057               	movf	printf@idx,w,c
  3266  00FDF4  0D01               	mullw	1
  3267  00FDF6  0E0B               	movlw	low STR_20
  3268  00FDF8  24F3               	addwf	prodl,w,c
  3269  00FDFA  6EF6               	movwf	tblptrl,c
  3270  00FDFC  0EFF               	movlw	high STR_20
  3271  00FDFE  20F4               	addwfc	prodh,w,c
  3272  00FE00  6EF7               	movwf	tblptrh,c
  3273  00FE02                     	if	0	;There are less than 3 active tblptr bytes
  3274  00FE02                     	endif
  3275  00FE02  0008               	tblrd		*
  3276  00FE04  CFF5 F06D          	movff	tablat,printf@c
  3277                           
  3278                           ;doprnt.c: 1523: }
  3279                           
  3280                           ;doprnt.c: 1508: }
  3281                           ;doprnt.c: 1510: break;
  3282  00FE08  D00B               	goto	l4215
  3283  00FE0A                     l4213:
  3284  00FE0A  505E               	movf	printf@flag,w,c
  3285  00FE0C  0BC0               	andlw	192
  3286                           
  3287                           ; Switch size 1, requested type "space"
  3288                           ; Number of cases is 3, Range of values is 0 to 192
  3289                           ; switch strategies available:
  3290                           ; Name         Instructions Cycles
  3291                           ; simple_byte           10     6 (average)
  3292                           ;	Chosen strategy is simple_byte
  3293  00FE0E  0A00               	xorlw	0	; case 0
  3294  00FE10  B4D8               	btfsc	status,2,c
  3295  00FE12  D78A               	goto	l4205
  3296  00FE14  0A80               	xorlw	128	; case 128
  3297  00FE16  B4D8               	btfsc	status,2,c
  3298  00FE18  D7C3               	goto	l4207
  3299  00FE1A  0A40               	xorlw	64	; case 192
  3300  00FE1C  B4D8               	btfsc	status,2,c
  3301  00FE1E  D784               	goto	l4205
  3302  00FE20                     l4215:
  3303                           
  3304                           ;doprnt.c: 1524: (putch(c) );
  3305  00FE20  506D               	movf	printf@c,w,c
  3306  00FE22  EC70  F06A         	call	_putch
  3307  00FE26                     l4217:
  3308  00FE26  066B               	decf	printf@prec,f,c
  3309  00FE28  A0D8               	btfss	status,0,c
  3310  00FE2A  066C               	decf	printf@prec+1,f,c
  3311  00FE2C  286B               	incf	printf@prec,w,c
  3312  00FE2E  E1ED               	bnz	l4213
  3313  00FE30  286C               	incf	printf@prec+1,w,c
  3314  00FE32  A4D8               	btfss	status,2,c
  3315  00FE34  D7EA               	goto	l4213
  3316  00FE36                     l4219:
  3317  00FE36  C040  FFF6         	movff	printf@f,tblptrl
  3318  00FE3A  C041  FFF7         	movff	printf@f+1,tblptrh
  3319  00FE3E  4A40               	infsnz	printf@f,f,c
  3320  00FE40  2A41               	incf	printf@f+1,f,c
  3321  00FE42                     	if	0	;tblptru may be non-zero
  3322  00FE42                     	endif
  3323  00FE42                     	if	0	;tblptru may be non-zero
  3324  00FE42                     	endif
  3325  00FE42  0008               	tblrd		*
  3326  00FE44  CFF5 F06D          	movff	tablat,printf@c
  3327  00FE48  506D               	movf	printf@c,w,c
  3328  00FE4A  B4D8               	btfsc	status,2,c
  3329  00FE4C  0012               	return	
  3330  00FE4E  EF6D  F07A         	goto	l3941
  3331  00FE52                     __end_of_printf:
  3332                           	opt stack 0
  3333                           tblptru	equ	0xFF8
  3334                           tblptrh	equ	0xFF7
  3335                           tblptrl	equ	0xFF6
  3336                           tablat	equ	0xFF5
  3337                           prodh	equ	0xFF4
  3338                           prodl	equ	0xFF3
  3339                           postinc0	equ	0xFEE
  3340                           wreg	equ	0xFE8
  3341                           indf2	equ	0xFDF
  3342                           postinc2	equ	0xFDE
  3343                           postdec2	equ	0xFDD
  3344                           fsr2h	equ	0xFDA
  3345                           fsr2l	equ	0xFD9
  3346                           status	equ	0xFD8
  3347                           
  3348 ;; *************** function _scale *****************
  3349 ;; Defined at:
  3350 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;  scl             1    wreg     char 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;  scl             1   41[COMRAM] char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  3   35[COMRAM] char 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3364 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;Total ram usage:        7 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    2
  3371 ;; This function calls:
  3372 ;;		___awdiv
  3373 ;;		___awmod
  3374 ;;		___ftmul
  3375 ;;		___wmul
  3376 ;; This function is called by:
  3377 ;;		_printf
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text2
  3382  00E49E                     __ptext2:
  3383                           	opt stack 0
  3384  00E49E                     _scale:
  3385                           	opt stack 27
  3386                           
  3387                           ;incstack = 0
  3388                           ;scale@scl stored from wreg
  3389  00E49E  6E2A               	movwf	scale@scl,c
  3390                           
  3391                           ;doprnt.c: 428: if(scl < 0) {
  3392  00E4A0  AE2A               	btfss	scale@scl,7,c
  3393  00E4A2  D0FB               	goto	l3349
  3394                           
  3395                           ;doprnt.c: 429: scl = -scl;
  3396  00E4A4  6C2A               	negf	scale@scl,c
  3397                           
  3398                           ;doprnt.c: 430: if(scl>=110)
  3399  00E4A6  502A               	movf	scale@scl,w,c
  3400  00E4A8  0A80               	xorlw	128
  3401  00E4AA  0F12               	addlw	-238
  3402  00E4AC  A0D8               	btfss	status,0,c
  3403  00E4AE  D091               	goto	l3339
  3404                           
  3405                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3406  00E4B0  0E00               	movlw	0
  3407  00E4B2  6E12               	movwf	___wmul@multiplicand+1,c
  3408  00E4B4  0E03               	movlw	3
  3409  00E4B6  6E11               	movwf	___wmul@multiplicand,c
  3410  00E4B8  0E00               	movlw	0
  3411  00E4BA  6E0A               	movwf	___awdiv@divisor+1,c
  3412  00E4BC  0E0A               	movlw	10
  3413  00E4BE  6E09               	movwf	___awdiv@divisor,c
  3414  00E4C0  0E00               	movlw	0
  3415  00E4C2  6E04               	movwf	___awmod@divisor+1,c
  3416  00E4C4  0E64               	movlw	100
  3417  00E4C6  6E03               	movwf	___awmod@divisor,c
  3418  00E4C8  502A               	movf	scale@scl,w,c
  3419  00E4CA  6E01               	movwf	___awmod@dividend,c
  3420  00E4CC  6A02               	clrf	___awmod@dividend+1,c
  3421  00E4CE  BE01               	btfsc	___awmod@dividend,7,c
  3422  00E4D0  0602               	decf	___awmod@dividend+1,f,c
  3423  00E4D2  ECE1  F06B         	call	___awmod	;wreg free
  3424  00E4D6  C001  F007         	movff	?___awmod,___awdiv@dividend
  3425  00E4DA  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3426  00E4DE  EC99  F06C         	call	___awdiv	;wreg free
  3427  00E4E2  0E09               	movlw	9
  3428  00E4E4  2407               	addwf	?___awdiv,w,c
  3429  00E4E6  6E0F               	movwf	___wmul@multiplier,c
  3430  00E4E8  0E00               	movlw	0
  3431  00E4EA  2008               	addwfc	?___awdiv+1,w,c
  3432  00E4EC  6E10               	movwf	___wmul@multiplier+1,c
  3433  00E4EE  ECCC  F06A         	call	___wmul	;wreg free
  3434  00E4F2  0EA2               	movlw	low __npowers_
  3435  00E4F4  240F               	addwf	?___wmul,w,c
  3436  00E4F6  6EF6               	movwf	tblptrl,c
  3437  00E4F8  0EFE               	movlw	high __npowers_
  3438  00E4FA  2010               	addwfc	?___wmul+1,w,c
  3439  00E4FC  6EF7               	movwf	tblptrh,c
  3440  00E4FE                     	if	0	;There are less than 3 active tblptr bytes
  3441  00E4FE                     	endif
  3442  00E4FE  0009               	tblrd		*+
  3443  00E500  CFF5 F018          	movff	tablat,___ftmul@f2
  3444  00E504  0009               	tblrd		*+
  3445  00E506  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3446  00E50A  000A               	tblrd		*-
  3447  00E50C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3448  00E510  0E00               	movlw	0
  3449  00E512  6E0A               	movwf	___awdiv@divisor+1,c
  3450  00E514  0E64               	movlw	100
  3451  00E516  6E09               	movwf	___awdiv@divisor,c
  3452  00E518  502A               	movf	scale@scl,w,c
  3453  00E51A  6E07               	movwf	___awdiv@dividend,c
  3454  00E51C  6A08               	clrf	___awdiv@dividend+1,c
  3455  00E51E  BE07               	btfsc	___awdiv@dividend,7,c
  3456  00E520  0608               	decf	___awdiv@dividend+1,f,c
  3457  00E522  EC99  F06C         	call	___awdiv	;wreg free
  3458  00E526  0E12               	movlw	18
  3459  00E528  2407               	addwf	?___awdiv,w,c
  3460  00E52A  6E0F               	movwf	___wmul@multiplier,c
  3461  00E52C  0E00               	movlw	0
  3462  00E52E  2008               	addwfc	?___awdiv+1,w,c
  3463  00E530  6E10               	movwf	___wmul@multiplier+1,c
  3464  00E532  0E00               	movlw	0
  3465  00E534  6E12               	movwf	___wmul@multiplicand+1,c
  3466  00E536  0E03               	movlw	3
  3467  00E538  6E11               	movwf	___wmul@multiplicand,c
  3468  00E53A  ECCC  F06A         	call	___wmul	;wreg free
  3469  00E53E  0EA2               	movlw	low __npowers_
  3470  00E540  240F               	addwf	?___wmul,w,c
  3471  00E542  6EF6               	movwf	tblptrl,c
  3472  00E544  0EFE               	movlw	high __npowers_
  3473  00E546  2010               	addwfc	?___wmul+1,w,c
  3474  00E548  6EF7               	movwf	tblptrh,c
  3475  00E54A                     	if	0	;There are less than 3 active tblptr bytes
  3476  00E54A                     	endif
  3477  00E54A  0009               	tblrd		*+
  3478  00E54C  CFF5 F015          	movff	tablat,___ftmul@f1
  3479  00E550  0009               	tblrd		*+
  3480  00E552  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3481  00E556  000A               	tblrd		*-
  3482  00E558  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3483  00E55C  EC35  F06E         	call	___ftmul	;wreg free
  3484  00E560  C015  F027         	movff	?___ftmul,_scale$1546
  3485  00E564  C016  F028         	movff	?___ftmul+1,_scale$1546+1
  3486  00E568  C017  F029         	movff	?___ftmul+2,_scale$1546+2
  3487                           
  3488                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3489  00E56C  C027  F015         	movff	_scale$1546,___ftmul@f1
  3490  00E570  C028  F016         	movff	_scale$1546+1,___ftmul@f1+1
  3491  00E574  C029  F017         	movff	_scale$1546+2,___ftmul@f1+2
  3492  00E578  0E00               	movlw	0
  3493  00E57A  6E12               	movwf	___wmul@multiplicand+1,c
  3494  00E57C  0E03               	movlw	3
  3495  00E57E  6E11               	movwf	___wmul@multiplicand,c
  3496  00E580  0E00               	movlw	0
  3497  00E582  6E04               	movwf	___awmod@divisor+1,c
  3498  00E584  0E0A               	movlw	10
  3499  00E586  6E03               	movwf	___awmod@divisor,c
  3500  00E588  502A               	movf	scale@scl,w,c
  3501  00E58A  6E01               	movwf	___awmod@dividend,c
  3502  00E58C  6A02               	clrf	___awmod@dividend+1,c
  3503  00E58E  BE01               	btfsc	___awmod@dividend,7,c
  3504  00E590  0602               	decf	___awmod@dividend+1,f,c
  3505  00E592  ECE1  F06B         	call	___awmod	;wreg free
  3506  00E596  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3507  00E59A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3508  00E59E  ECCC  F06A         	call	___wmul	;wreg free
  3509  00E5A2  0EA2               	movlw	low __npowers_
  3510  00E5A4  240F               	addwf	?___wmul,w,c
  3511  00E5A6  6EF6               	movwf	tblptrl,c
  3512  00E5A8  0EFE               	movlw	high __npowers_
  3513  00E5AA  2010               	addwfc	?___wmul+1,w,c
  3514  00E5AC  6EF7               	movwf	tblptrh,c
  3515  00E5AE                     	if	0	;There are less than 3 active tblptr bytes
  3516  00E5AE                     	endif
  3517  00E5AE  0009               	tblrd		*+
  3518  00E5B0  CFF5 F018          	movff	tablat,___ftmul@f2
  3519  00E5B4  0009               	tblrd		*+
  3520  00E5B6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3521  00E5BA  000A               	tblrd		*-
  3522  00E5BC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3523  00E5C0  EC35  F06E         	call	___ftmul	;wreg free
  3524  00E5C4  C015  F024         	movff	?___ftmul,?_scale
  3525  00E5C8  C016  F025         	movff	?___ftmul+1,?_scale+1
  3526  00E5CC  C017  F026         	movff	?___ftmul+2,?_scale+2
  3527  00E5D0  0012               	return	
  3528  00E5D2                     l3339:
  3529                           
  3530                           ;doprnt.c: 432: else if(scl > 10)
  3531  00E5D2  502A               	movf	scale@scl,w,c
  3532  00E5D4  0A80               	xorlw	128
  3533  00E5D6  0F75               	addlw	-139
  3534  00E5D8  A0D8               	btfss	status,0,c
  3535  00E5DA  D04D               	goto	l3345
  3536                           
  3537                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3538  00E5DC  0E00               	movlw	0
  3539  00E5DE  6E0A               	movwf	___awdiv@divisor+1,c
  3540  00E5E0  0E0A               	movlw	10
  3541  00E5E2  6E09               	movwf	___awdiv@divisor,c
  3542  00E5E4  502A               	movf	scale@scl,w,c
  3543  00E5E6  6E07               	movwf	___awdiv@dividend,c
  3544  00E5E8  6A08               	clrf	___awdiv@dividend+1,c
  3545  00E5EA  BE07               	btfsc	___awdiv@dividend,7,c
  3546  00E5EC  0608               	decf	___awdiv@dividend+1,f,c
  3547  00E5EE  EC99  F06C         	call	___awdiv	;wreg free
  3548  00E5F2  0E09               	movlw	9
  3549  00E5F4  2407               	addwf	?___awdiv,w,c
  3550  00E5F6  6E0F               	movwf	___wmul@multiplier,c
  3551  00E5F8  0E00               	movlw	0
  3552  00E5FA  2008               	addwfc	?___awdiv+1,w,c
  3553  00E5FC  6E10               	movwf	___wmul@multiplier+1,c
  3554  00E5FE  0E00               	movlw	0
  3555  00E600  6E12               	movwf	___wmul@multiplicand+1,c
  3556  00E602  0E03               	movlw	3
  3557  00E604  6E11               	movwf	___wmul@multiplicand,c
  3558  00E606  ECCC  F06A         	call	___wmul	;wreg free
  3559  00E60A  0EA2               	movlw	low __npowers_
  3560  00E60C  240F               	addwf	?___wmul,w,c
  3561  00E60E  6EF6               	movwf	tblptrl,c
  3562  00E610  0EFE               	movlw	high __npowers_
  3563  00E612  2010               	addwfc	?___wmul+1,w,c
  3564  00E614  6EF7               	movwf	tblptrh,c
  3565  00E616                     	if	0	;There are less than 3 active tblptr bytes
  3566  00E616                     	endif
  3567  00E616  0009               	tblrd		*+
  3568  00E618  CFF5 F015          	movff	tablat,___ftmul@f1
  3569  00E61C  0009               	tblrd		*+
  3570  00E61E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3571  00E622  000A               	tblrd		*-
  3572  00E624  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3573  00E628  0E00               	movlw	0
  3574  00E62A  6E12               	movwf	___wmul@multiplicand+1,c
  3575  00E62C  0E03               	movlw	3
  3576  00E62E  6E11               	movwf	___wmul@multiplicand,c
  3577  00E630  0E00               	movlw	0
  3578  00E632  6E04               	movwf	___awmod@divisor+1,c
  3579  00E634  0E0A               	movlw	10
  3580  00E636  6E03               	movwf	___awmod@divisor,c
  3581  00E638  502A               	movf	scale@scl,w,c
  3582  00E63A  6E01               	movwf	___awmod@dividend,c
  3583  00E63C  6A02               	clrf	___awmod@dividend+1,c
  3584  00E63E  BE01               	btfsc	___awmod@dividend,7,c
  3585  00E640  0602               	decf	___awmod@dividend+1,f,c
  3586  00E642  ECE1  F06B         	call	___awmod	;wreg free
  3587  00E646  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3588  00E64A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3589  00E64E  ECCC  F06A         	call	___wmul	;wreg free
  3590  00E652  0EA2               	movlw	low __npowers_
  3591  00E654  240F               	addwf	?___wmul,w,c
  3592  00E656  6EF6               	movwf	tblptrl,c
  3593  00E658  0EFE               	movlw	high __npowers_
  3594  00E65A  2010               	addwfc	?___wmul+1,w,c
  3595  00E65C  6EF7               	movwf	tblptrh,c
  3596  00E65E                     	if	0	;There are less than 3 active tblptr bytes
  3597  00E65E                     	endif
  3598  00E65E  0009               	tblrd		*+
  3599  00E660  CFF5 F018          	movff	tablat,___ftmul@f2
  3600  00E664  0009               	tblrd		*+
  3601  00E666  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3602  00E66A  000A               	tblrd		*-
  3603  00E66C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3604  00E670  EC35  F06E         	call	___ftmul	;wreg free
  3605  00E674  D7A7               	goto	L4
  3606  00E676                     l3345:
  3607                           
  3608                           ;doprnt.c: 434: return _npowers_[scl];
  3609  00E676  502A               	movf	scale@scl,w,c
  3610  00E678  0D03               	mullw	3
  3611  00E67A  0EA2               	movlw	low __npowers_
  3612  00E67C  24F3               	addwf	prodl,w,c
  3613  00E67E  6EF6               	movwf	tblptrl,c
  3614  00E680  0EFE               	movlw	high __npowers_
  3615  00E682  20F4               	addwfc	prodh,w,c
  3616  00E684  6EF7               	movwf	tblptrh,c
  3617  00E686                     	if	0	;There are less than 3 active tblptr bytes
  3618  00E686                     	endif
  3619  00E686  0009               	tblrd		*+
  3620  00E688  CFF5 F024          	movff	tablat,?_scale
  3621  00E68C  0009               	tblrd		*+
  3622  00E68E  CFF5 F025          	movff	tablat,?_scale+1
  3623  00E692  000A               	tblrd		*-
  3624  00E694  CFF5 F026          	movff	tablat,?_scale+2
  3625  00E698  0012               	return	
  3626  00E69A                     l3349:
  3627                           
  3628                           ;doprnt.c: 435: }
  3629                           ;doprnt.c: 436: if(scl>=110)
  3630  00E69A  502A               	movf	scale@scl,w,c
  3631  00E69C  0A80               	xorlw	128
  3632  00E69E  0F12               	addlw	-238
  3633  00E6A0  A0D8               	btfss	status,0,c
  3634  00E6A2  D091               	goto	l3357
  3635                           
  3636                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3637  00E6A4  0E00               	movlw	0
  3638  00E6A6  6E12               	movwf	___wmul@multiplicand+1,c
  3639  00E6A8  0E03               	movlw	3
  3640  00E6AA  6E11               	movwf	___wmul@multiplicand,c
  3641  00E6AC  0E00               	movlw	0
  3642  00E6AE  6E0A               	movwf	___awdiv@divisor+1,c
  3643  00E6B0  0E0A               	movlw	10
  3644  00E6B2  6E09               	movwf	___awdiv@divisor,c
  3645  00E6B4  0E00               	movlw	0
  3646  00E6B6  6E04               	movwf	___awmod@divisor+1,c
  3647  00E6B8  0E64               	movlw	100
  3648  00E6BA  6E03               	movwf	___awmod@divisor,c
  3649  00E6BC  502A               	movf	scale@scl,w,c
  3650  00E6BE  6E01               	movwf	___awmod@dividend,c
  3651  00E6C0  6A02               	clrf	___awmod@dividend+1,c
  3652  00E6C2  BE01               	btfsc	___awmod@dividend,7,c
  3653  00E6C4  0602               	decf	___awmod@dividend+1,f,c
  3654  00E6C6  ECE1  F06B         	call	___awmod	;wreg free
  3655  00E6CA  C001  F007         	movff	?___awmod,___awdiv@dividend
  3656  00E6CE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3657  00E6D2  EC99  F06C         	call	___awdiv	;wreg free
  3658  00E6D6  0E09               	movlw	9
  3659  00E6D8  2407               	addwf	?___awdiv,w,c
  3660  00E6DA  6E0F               	movwf	___wmul@multiplier,c
  3661  00E6DC  0E00               	movlw	0
  3662  00E6DE  2008               	addwfc	?___awdiv+1,w,c
  3663  00E6E0  6E10               	movwf	___wmul@multiplier+1,c
  3664  00E6E2  ECCC  F06A         	call	___wmul	;wreg free
  3665  00E6E6  0E7B               	movlw	low __powers_
  3666  00E6E8  240F               	addwf	?___wmul,w,c
  3667  00E6EA  6EF6               	movwf	tblptrl,c
  3668  00E6EC  0EFE               	movlw	high __powers_
  3669  00E6EE  2010               	addwfc	?___wmul+1,w,c
  3670  00E6F0  6EF7               	movwf	tblptrh,c
  3671  00E6F2                     	if	0	;There are less than 3 active tblptr bytes
  3672  00E6F2                     	endif
  3673  00E6F2  0009               	tblrd		*+
  3674  00E6F4  CFF5 F018          	movff	tablat,___ftmul@f2
  3675  00E6F8  0009               	tblrd		*+
  3676  00E6FA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3677  00E6FE  000A               	tblrd		*-
  3678  00E700  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3679  00E704  0E00               	movlw	0
  3680  00E706  6E0A               	movwf	___awdiv@divisor+1,c
  3681  00E708  0E64               	movlw	100
  3682  00E70A  6E09               	movwf	___awdiv@divisor,c
  3683  00E70C  502A               	movf	scale@scl,w,c
  3684  00E70E  6E07               	movwf	___awdiv@dividend,c
  3685  00E710  6A08               	clrf	___awdiv@dividend+1,c
  3686  00E712  BE07               	btfsc	___awdiv@dividend,7,c
  3687  00E714  0608               	decf	___awdiv@dividend+1,f,c
  3688  00E716  EC99  F06C         	call	___awdiv	;wreg free
  3689  00E71A  0E12               	movlw	18
  3690  00E71C  2407               	addwf	?___awdiv,w,c
  3691  00E71E  6E0F               	movwf	___wmul@multiplier,c
  3692  00E720  0E00               	movlw	0
  3693  00E722  2008               	addwfc	?___awdiv+1,w,c
  3694  00E724  6E10               	movwf	___wmul@multiplier+1,c
  3695  00E726  0E00               	movlw	0
  3696  00E728  6E12               	movwf	___wmul@multiplicand+1,c
  3697  00E72A  0E03               	movlw	3
  3698  00E72C  6E11               	movwf	___wmul@multiplicand,c
  3699  00E72E  ECCC  F06A         	call	___wmul	;wreg free
  3700  00E732  0E7B               	movlw	low __powers_
  3701  00E734  240F               	addwf	?___wmul,w,c
  3702  00E736  6EF6               	movwf	tblptrl,c
  3703  00E738  0EFE               	movlw	high __powers_
  3704  00E73A  2010               	addwfc	?___wmul+1,w,c
  3705  00E73C  6EF7               	movwf	tblptrh,c
  3706  00E73E                     	if	0	;There are less than 3 active tblptr bytes
  3707  00E73E                     	endif
  3708  00E73E  0009               	tblrd		*+
  3709  00E740  CFF5 F015          	movff	tablat,___ftmul@f1
  3710  00E744  0009               	tblrd		*+
  3711  00E746  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3712  00E74A  000A               	tblrd		*-
  3713  00E74C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3714  00E750  EC35  F06E         	call	___ftmul	;wreg free
  3715  00E754  C015  F027         	movff	?___ftmul,_scale$1546
  3716  00E758  C016  F028         	movff	?___ftmul+1,_scale$1546+1
  3717  00E75C  C017  F029         	movff	?___ftmul+2,_scale$1546+2
  3718                           
  3719                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3720  00E760  C027  F015         	movff	_scale$1546,___ftmul@f1
  3721  00E764  C028  F016         	movff	_scale$1546+1,___ftmul@f1+1
  3722  00E768  C029  F017         	movff	_scale$1546+2,___ftmul@f1+2
  3723  00E76C  0E00               	movlw	0
  3724  00E76E  6E12               	movwf	___wmul@multiplicand+1,c
  3725  00E770  0E03               	movlw	3
  3726  00E772  6E11               	movwf	___wmul@multiplicand,c
  3727  00E774  0E00               	movlw	0
  3728  00E776  6E04               	movwf	___awmod@divisor+1,c
  3729  00E778  0E0A               	movlw	10
  3730  00E77A  6E03               	movwf	___awmod@divisor,c
  3731  00E77C  502A               	movf	scale@scl,w,c
  3732  00E77E  6E01               	movwf	___awmod@dividend,c
  3733  00E780  6A02               	clrf	___awmod@dividend+1,c
  3734  00E782  BE01               	btfsc	___awmod@dividend,7,c
  3735  00E784  0602               	decf	___awmod@dividend+1,f,c
  3736  00E786  ECE1  F06B         	call	___awmod	;wreg free
  3737  00E78A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3738  00E78E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3739  00E792  ECCC  F06A         	call	___wmul	;wreg free
  3740  00E796  0E7B               	movlw	low __powers_
  3741  00E798  240F               	addwf	?___wmul,w,c
  3742  00E79A  6EF6               	movwf	tblptrl,c
  3743  00E79C  0EFE               	movlw	high __powers_
  3744  00E79E  2010               	addwfc	?___wmul+1,w,c
  3745  00E7A0  6EF7               	movwf	tblptrh,c
  3746  00E7A2                     	if	0	;There are less than 3 active tblptr bytes
  3747  00E7A2                     	endif
  3748  00E7A2  0009               	tblrd		*+
  3749  00E7A4  CFF5 F018          	movff	tablat,___ftmul@f2
  3750  00E7A8  0009               	tblrd		*+
  3751  00E7AA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3752  00E7AE  000A               	tblrd		*-
  3753  00E7B0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3754  00E7B4  EC35  F06E         	call	___ftmul	;wreg free
  3755  00E7B8  C015  F024         	movff	?___ftmul,?_scale
  3756  00E7BC  C016  F025         	movff	?___ftmul+1,?_scale+1
  3757  00E7C0  C017  F026         	movff	?___ftmul+2,?_scale+2
  3758  00E7C4  0012               	return	
  3759  00E7C6                     l3357:
  3760                           
  3761                           ;doprnt.c: 438: else if(scl > 10)
  3762  00E7C6  502A               	movf	scale@scl,w,c
  3763  00E7C8  0A80               	xorlw	128
  3764  00E7CA  0F75               	addlw	-139
  3765  00E7CC  A0D8               	btfss	status,0,c
  3766  00E7CE  D04D               	goto	l3363
  3767                           
  3768                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3769  00E7D0  0E00               	movlw	0
  3770  00E7D2  6E0A               	movwf	___awdiv@divisor+1,c
  3771  00E7D4  0E0A               	movlw	10
  3772  00E7D6  6E09               	movwf	___awdiv@divisor,c
  3773  00E7D8  502A               	movf	scale@scl,w,c
  3774  00E7DA  6E07               	movwf	___awdiv@dividend,c
  3775  00E7DC  6A08               	clrf	___awdiv@dividend+1,c
  3776  00E7DE  BE07               	btfsc	___awdiv@dividend,7,c
  3777  00E7E0  0608               	decf	___awdiv@dividend+1,f,c
  3778  00E7E2  EC99  F06C         	call	___awdiv	;wreg free
  3779  00E7E6  0E09               	movlw	9
  3780  00E7E8  2407               	addwf	?___awdiv,w,c
  3781  00E7EA  6E0F               	movwf	___wmul@multiplier,c
  3782  00E7EC  0E00               	movlw	0
  3783  00E7EE  2008               	addwfc	?___awdiv+1,w,c
  3784  00E7F0  6E10               	movwf	___wmul@multiplier+1,c
  3785  00E7F2  0E00               	movlw	0
  3786  00E7F4  6E12               	movwf	___wmul@multiplicand+1,c
  3787  00E7F6  0E03               	movlw	3
  3788  00E7F8  6E11               	movwf	___wmul@multiplicand,c
  3789  00E7FA  ECCC  F06A         	call	___wmul	;wreg free
  3790  00E7FE  0E7B               	movlw	low __powers_
  3791  00E800  240F               	addwf	?___wmul,w,c
  3792  00E802  6EF6               	movwf	tblptrl,c
  3793  00E804  0EFE               	movlw	high __powers_
  3794  00E806  2010               	addwfc	?___wmul+1,w,c
  3795  00E808  6EF7               	movwf	tblptrh,c
  3796  00E80A                     	if	0	;There are less than 3 active tblptr bytes
  3797  00E80A                     	endif
  3798  00E80A  0009               	tblrd		*+
  3799  00E80C  CFF5 F015          	movff	tablat,___ftmul@f1
  3800  00E810  0009               	tblrd		*+
  3801  00E812  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3802  00E816  000A               	tblrd		*-
  3803  00E818  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3804  00E81C  0E00               	movlw	0
  3805  00E81E  6E12               	movwf	___wmul@multiplicand+1,c
  3806  00E820  0E03               	movlw	3
  3807  00E822  6E11               	movwf	___wmul@multiplicand,c
  3808  00E824  0E00               	movlw	0
  3809  00E826  6E04               	movwf	___awmod@divisor+1,c
  3810  00E828  0E0A               	movlw	10
  3811  00E82A  6E03               	movwf	___awmod@divisor,c
  3812  00E82C  502A               	movf	scale@scl,w,c
  3813  00E82E  6E01               	movwf	___awmod@dividend,c
  3814  00E830  6A02               	clrf	___awmod@dividend+1,c
  3815  00E832  BE01               	btfsc	___awmod@dividend,7,c
  3816  00E834  0602               	decf	___awmod@dividend+1,f,c
  3817  00E836  ECE1  F06B         	call	___awmod	;wreg free
  3818  00E83A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3819  00E83E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3820  00E842  ECCC  F06A         	call	___wmul	;wreg free
  3821  00E846  0E7B               	movlw	low __powers_
  3822  00E848  240F               	addwf	?___wmul,w,c
  3823  00E84A  6EF6               	movwf	tblptrl,c
  3824  00E84C  0EFE               	movlw	high __powers_
  3825  00E84E  2010               	addwfc	?___wmul+1,w,c
  3826  00E850  6EF7               	movwf	tblptrh,c
  3827  00E852                     	if	0	;There are less than 3 active tblptr bytes
  3828  00E852                     	endif
  3829  00E852  0009               	tblrd		*+
  3830  00E854  CFF5 F018          	movff	tablat,___ftmul@f2
  3831  00E858  0009               	tblrd		*+
  3832  00E85A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3833  00E85E  000A               	tblrd		*-
  3834  00E860  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3835  00E864  EC35  F06E         	call	___ftmul	;wreg free
  3836  00E868  D7A7               	goto	L5
  3837  00E86A                     l3363:
  3838                           
  3839                           ;doprnt.c: 440: return _powers_[scl];
  3840  00E86A  502A               	movf	scale@scl,w,c
  3841  00E86C  0D03               	mullw	3
  3842  00E86E  0E7B               	movlw	low __powers_
  3843  00E870  24F3               	addwf	prodl,w,c
  3844  00E872  6EF6               	movwf	tblptrl,c
  3845  00E874  0EFE               	movlw	high __powers_
  3846  00E876  20F4               	addwfc	prodh,w,c
  3847  00E878  6EF7               	movwf	tblptrh,c
  3848  00E87A                     	if	0	;There are less than 3 active tblptr bytes
  3849  00E87A                     	endif
  3850  00E87A  0009               	tblrd		*+
  3851  00E87C  CFF5 F024          	movff	tablat,?_scale
  3852  00E880  0009               	tblrd		*+
  3853  00E882  CFF5 F025          	movff	tablat,?_scale+1
  3854  00E886  000A               	tblrd		*-
  3855  00E888  CFF5 F026          	movff	tablat,?_scale+2
  3856  00E88C  0012               	return	
  3857  00E88E                     __end_of_scale:
  3858                           	opt stack 0
  3859                           tblptru	equ	0xFF8
  3860                           tblptrh	equ	0xFF7
  3861                           tblptrl	equ	0xFF6
  3862                           tablat	equ	0xFF5
  3863                           prodh	equ	0xFF4
  3864                           prodl	equ	0xFF3
  3865                           postinc0	equ	0xFEE
  3866                           wreg	equ	0xFE8
  3867                           indf2	equ	0xFDF
  3868                           postinc2	equ	0xFDE
  3869                           postdec2	equ	0xFDD
  3870                           fsr2h	equ	0xFDA
  3871                           fsr2l	equ	0xFD9
  3872                           status	equ	0xFD8
  3873                           
  3874 ;; *************** function _putch *****************
  3875 ;; Defined at:
  3876 ;;		line 24 in file "../../src/CharacterLCD/lcd.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;  data            1    wreg     unsigned char 
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;  data            1    2[COMRAM] unsigned char 
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      void 
  3883 ;; Registers used:
  3884 ;;		wreg, status,2, status,0, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;Total ram usage:        1 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    1
  3897 ;; This function calls:
  3898 ;;		_lcdNibble
  3899 ;; This function is called by:
  3900 ;;		_printf
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text3
  3905  00D4E0                     __ptext3:
  3906                           	opt stack 0
  3907  00D4E0                     _putch:
  3908                           	opt stack 28
  3909                           
  3910                           ;incstack = 0
  3911                           ;putch@data stored from wreg
  3912  00D4E0  6E03               	movwf	putch@data,c
  3913                           
  3914                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  3915  00D4E2  848C               	bsf	3980,2,c	;volatile
  3916                           
  3917                           ;lcd.c: 33: lcdNibble(data);
  3918  00D4E4  5003               	movf	putch@data,w,c
  3919  00D4E6  EC19  F06C         	call	_lcdNibble
  3920                           
  3921                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3922  00D4EA  0EC8               	movlw	200
  3923  00D4EC                     u4907:
  3924  00D4EC  D000               	nop2	
  3925  00D4EE  2EE8               	decfsz	wreg,f,c
  3926  00D4F0  D7FD               	bra	u4907
  3927  00D4F2  0012               	return		;funcret
  3928  00D4F4                     __end_of_putch:
  3929                           	opt stack 0
  3930                           tblptru	equ	0xFF8
  3931                           tblptrh	equ	0xFF7
  3932                           tblptrl	equ	0xFF6
  3933                           tablat	equ	0xFF5
  3934                           prodh	equ	0xFF4
  3935                           prodl	equ	0xFF3
  3936                           postinc0	equ	0xFEE
  3937                           wreg	equ	0xFE8
  3938                           indf2	equ	0xFDF
  3939                           postinc2	equ	0xFDE
  3940                           postdec2	equ	0xFDD
  3941                           fsr2h	equ	0xFDA
  3942                           fsr2l	equ	0xFD9
  3943                           status	equ	0xFD8
  3944                           
  3945 ;; *************** function _isdigit *****************
  3946 ;; Defined at:
  3947 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  c               1    wreg     unsigned char 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  c               1    2[COMRAM] unsigned char 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;		None               void
  3954 ;; Registers used:
  3955 ;;		wreg, status,2, status,0
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;Total ram usage:        3 bytes
  3966 ;; Hardware stack levels used:    1
  3967 ;; This function calls:
  3968 ;;		Nothing
  3969 ;; This function is called by:
  3970 ;;		_printf
  3971 ;; This function uses a non-reentrant model
  3972 ;;
  3973                           
  3974                           	psect	text4
  3975  00D50E                     __ptext4:
  3976                           	opt stack 0
  3977  00D50E                     _isdigit:
  3978                           	opt stack 29
  3979                           
  3980                           ;incstack = 0
  3981                           ;isdigit@c stored from wreg
  3982  00D50E  6E03               	movwf	isdigit@c,c
  3983  00D510  0E00               	movlw	0
  3984  00D512  6E02               	movwf	_isdigit$1176,c
  3985  00D514  0E3A               	movlw	58
  3986  00D516  6003               	cpfslt	isdigit@c,c
  3987  00D518  D005               	goto	l3375
  3988  00D51A  0E2F               	movlw	47
  3989  00D51C  6403               	cpfsgt	isdigit@c,c
  3990  00D51E  D002               	goto	l3375
  3991  00D520  0E01               	movlw	1
  3992  00D522  6E02               	movwf	_isdigit$1176,c
  3993  00D524                     l3375:
  3994  00D524  C002  F001         	movff	_isdigit$1176,??_isdigit
  3995  00D528  3001               	rrcf	??_isdigit,w,c
  3996  00D52A  0012               	return	
  3997  00D52C                     __end_of_isdigit:
  3998                           	opt stack 0
  3999                           tblptru	equ	0xFF8
  4000                           tblptrh	equ	0xFF7
  4001                           tblptrl	equ	0xFF6
  4002                           tablat	equ	0xFF5
  4003                           prodh	equ	0xFF4
  4004                           prodl	equ	0xFF3
  4005                           postinc0	equ	0xFEE
  4006                           wreg	equ	0xFE8
  4007                           indf2	equ	0xFDF
  4008                           postinc2	equ	0xFDE
  4009                           postdec2	equ	0xFDD
  4010                           fsr2h	equ	0xFDA
  4011                           fsr2l	equ	0xFD9
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function _fround *****************
  4015 ;; Defined at:
  4016 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  prec            1    wreg     unsigned char 
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  prec            1   44[COMRAM] unsigned char 
  4021 ;; Return value:  Size  Location     Type
  4022 ;;                  3   35[COMRAM] unsigned char 
  4023 ;; Registers used:
  4024 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4025 ;; Tracked objects:
  4026 ;;		On entry : 0/0
  4027 ;;		On exit  : 0/0
  4028 ;;		Unchanged: 0/0
  4029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4030 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4031 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4033 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;Total ram usage:       10 bytes
  4035 ;; Hardware stack levels used:    1
  4036 ;; Hardware stack levels required when called:    2
  4037 ;; This function calls:
  4038 ;;		___awdiv
  4039 ;;		___awmod
  4040 ;;		___ftmul
  4041 ;;		___wmul
  4042 ;; This function is called by:
  4043 ;;		_printf
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           	psect	text5
  4048  00E258                     __ptext5:
  4049                           	opt stack 0
  4050  00E258                     _fround:
  4051                           	opt stack 27
  4052                           
  4053                           ;incstack = 0
  4054                           ;fround@prec stored from wreg
  4055  00E258  6E2D               	movwf	fround@prec,c
  4056                           
  4057                           ;doprnt.c: 413: if(prec>=110)
  4058  00E25A  0E6D               	movlw	109
  4059  00E25C  642D               	cpfsgt	fround@prec,c
  4060  00E25E  D09F               	goto	l3317
  4061                           
  4062                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4063  00E260  0E00               	movlw	0
  4064  00E262  6E12               	movwf	___wmul@multiplicand+1,c
  4065  00E264  0E03               	movlw	3
  4066  00E266  6E11               	movwf	___wmul@multiplicand,c
  4067  00E268  0E00               	movlw	0
  4068  00E26A  6E0A               	movwf	___awdiv@divisor+1,c
  4069  00E26C  0E0A               	movlw	10
  4070  00E26E  6E09               	movwf	___awdiv@divisor,c
  4071  00E270  0E00               	movlw	0
  4072  00E272  6E04               	movwf	___awmod@divisor+1,c
  4073  00E274  0E64               	movlw	100
  4074  00E276  6E03               	movwf	___awmod@divisor,c
  4075  00E278  C02D  F001         	movff	fround@prec,___awmod@dividend
  4076  00E27C  6A02               	clrf	___awmod@dividend+1,c
  4077  00E27E  ECE1  F06B         	call	___awmod	;wreg free
  4078  00E282  C001  F007         	movff	?___awmod,___awdiv@dividend
  4079  00E286  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4080  00E28A  EC99  F06C         	call	___awdiv	;wreg free
  4081  00E28E  0E09               	movlw	9
  4082  00E290  2407               	addwf	?___awdiv,w,c
  4083  00E292  6E0F               	movwf	___wmul@multiplier,c
  4084  00E294  0E00               	movlw	0
  4085  00E296  2008               	addwfc	?___awdiv+1,w,c
  4086  00E298  6E10               	movwf	___wmul@multiplier+1,c
  4087  00E29A  ECCC  F06A         	call	___wmul	;wreg free
  4088  00E29E  0EA2               	movlw	low __npowers_
  4089  00E2A0  240F               	addwf	?___wmul,w,c
  4090  00E2A2  6EF6               	movwf	tblptrl,c
  4091  00E2A4  0EFE               	movlw	high __npowers_
  4092  00E2A6  2010               	addwfc	?___wmul+1,w,c
  4093  00E2A8  6EF7               	movwf	tblptrh,c
  4094  00E2AA                     	if	0	;There are less than 3 active tblptr bytes
  4095  00E2AA                     	endif
  4096  00E2AA  0009               	tblrd		*+
  4097  00E2AC  CFF5 F018          	movff	tablat,___ftmul@f2
  4098  00E2B0  0009               	tblrd		*+
  4099  00E2B2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4100  00E2B6  000A               	tblrd		*-
  4101  00E2B8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4102  00E2BC  0E00               	movlw	0
  4103  00E2BE  6E0A               	movwf	___awdiv@divisor+1,c
  4104  00E2C0  0E64               	movlw	100
  4105  00E2C2  6E09               	movwf	___awdiv@divisor,c
  4106  00E2C4  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4107  00E2C8  6A08               	clrf	___awdiv@dividend+1,c
  4108  00E2CA  EC99  F06C         	call	___awdiv	;wreg free
  4109  00E2CE  0E12               	movlw	18
  4110  00E2D0  2407               	addwf	?___awdiv,w,c
  4111  00E2D2  6E0F               	movwf	___wmul@multiplier,c
  4112  00E2D4  0E00               	movlw	0
  4113  00E2D6  2008               	addwfc	?___awdiv+1,w,c
  4114  00E2D8  6E10               	movwf	___wmul@multiplier+1,c
  4115  00E2DA  0E00               	movlw	0
  4116  00E2DC  6E12               	movwf	___wmul@multiplicand+1,c
  4117  00E2DE  0E03               	movlw	3
  4118  00E2E0  6E11               	movwf	___wmul@multiplicand,c
  4119  00E2E2  ECCC  F06A         	call	___wmul	;wreg free
  4120  00E2E6  0EA2               	movlw	low __npowers_
  4121  00E2E8  240F               	addwf	?___wmul,w,c
  4122  00E2EA  6EF6               	movwf	tblptrl,c
  4123  00E2EC  0EFE               	movlw	high __npowers_
  4124  00E2EE  2010               	addwfc	?___wmul+1,w,c
  4125  00E2F0  6EF7               	movwf	tblptrh,c
  4126  00E2F2                     	if	0	;There are less than 3 active tblptr bytes
  4127  00E2F2                     	endif
  4128  00E2F2  0009               	tblrd		*+
  4129  00E2F4  CFF5 F015          	movff	tablat,___ftmul@f1
  4130  00E2F8  0009               	tblrd		*+
  4131  00E2FA  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4132  00E2FE  000A               	tblrd		*-
  4133  00E300  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4134  00E304  EC35  F06E         	call	___ftmul	;wreg free
  4135  00E308  C015  F02A         	movff	?___ftmul,_fround$1544
  4136  00E30C  C016  F02B         	movff	?___ftmul+1,_fround$1544+1
  4137  00E310  C017  F02C         	movff	?___ftmul+2,_fround$1544+2
  4138                           
  4139                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4140  00E314  0E00               	movlw	0
  4141  00E316  6E12               	movwf	___wmul@multiplicand+1,c
  4142  00E318  0E03               	movlw	3
  4143  00E31A  6E11               	movwf	___wmul@multiplicand,c
  4144  00E31C  0E00               	movlw	0
  4145  00E31E  6E04               	movwf	___awmod@divisor+1,c
  4146  00E320  0E0A               	movlw	10
  4147  00E322  6E03               	movwf	___awmod@divisor,c
  4148  00E324  C02D  F001         	movff	fround@prec,___awmod@dividend
  4149  00E328  6A02               	clrf	___awmod@dividend+1,c
  4150  00E32A  ECE1  F06B         	call	___awmod	;wreg free
  4151  00E32E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4152  00E332  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4153  00E336  ECCC  F06A         	call	___wmul	;wreg free
  4154  00E33A  0EA2               	movlw	low __npowers_
  4155  00E33C  240F               	addwf	?___wmul,w,c
  4156  00E33E  6EF6               	movwf	tblptrl,c
  4157  00E340  0EFE               	movlw	high __npowers_
  4158  00E342  2010               	addwfc	?___wmul+1,w,c
  4159  00E344  6EF7               	movwf	tblptrh,c
  4160  00E346                     	if	0	;There are less than 3 active tblptr bytes
  4161  00E346                     	endif
  4162  00E346  0009               	tblrd		*+
  4163  00E348  CFF5 F018          	movff	tablat,___ftmul@f2
  4164  00E34C  0009               	tblrd		*+
  4165  00E34E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4166  00E352  000A               	tblrd		*-
  4167  00E354  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4168  00E358  C02A  F015         	movff	_fround$1544,___ftmul@f1
  4169  00E35C  C02B  F016         	movff	_fround$1544+1,___ftmul@f1+1
  4170  00E360  C02C  F017         	movff	_fround$1544+2,___ftmul@f1+2
  4171  00E364  EC35  F06E         	call	___ftmul	;wreg free
  4172  00E368  C015  F027         	movff	?___ftmul,_fround$1545
  4173  00E36C  C016  F028         	movff	?___ftmul+1,_fround$1545+1
  4174  00E370  C017  F029         	movff	?___ftmul+2,_fround$1545+2
  4175                           
  4176                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4177  00E374  C027  F015         	movff	_fround$1545,___ftmul@f1
  4178  00E378  C028  F016         	movff	_fround$1545+1,___ftmul@f1+1
  4179  00E37C  C029  F017         	movff	_fround$1545+2,___ftmul@f1+2
  4180  00E380  0E00               	movlw	0
  4181  00E382  6E18               	movwf	___ftmul@f2,c
  4182  00E384  0E00               	movlw	0
  4183  00E386  6E19               	movwf	___ftmul@f2+1,c
  4184  00E388  0E3F               	movlw	63
  4185  00E38A  6E1A               	movwf	___ftmul@f2+2,c
  4186  00E38C  EC35  F06E         	call	___ftmul	;wreg free
  4187  00E390  C015  F024         	movff	?___ftmul,?_fround
  4188  00E394  C016  F025         	movff	?___ftmul+1,?_fround+1
  4189  00E398  C017  F026         	movff	?___ftmul+2,?_fround+2
  4190  00E39C  0012               	return	
  4191  00E39E                     l3317:
  4192                           
  4193                           ;doprnt.c: 415: else if(prec > 10)
  4194  00E39E  0E0A               	movlw	10
  4195  00E3A0  642D               	cpfsgt	fround@prec,c
  4196  00E3A2  D05D               	goto	l3325
  4197                           
  4198                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4199  00E3A4  0E00               	movlw	0
  4200  00E3A6  6E12               	movwf	___wmul@multiplicand+1,c
  4201  00E3A8  0E03               	movlw	3
  4202  00E3AA  6E11               	movwf	___wmul@multiplicand,c
  4203  00E3AC  0E00               	movlw	0
  4204  00E3AE  6E04               	movwf	___awmod@divisor+1,c
  4205  00E3B0  0E0A               	movlw	10
  4206  00E3B2  6E03               	movwf	___awmod@divisor,c
  4207  00E3B4  C02D  F001         	movff	fround@prec,___awmod@dividend
  4208  00E3B8  6A02               	clrf	___awmod@dividend+1,c
  4209  00E3BA  ECE1  F06B         	call	___awmod	;wreg free
  4210  00E3BE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4211  00E3C2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4212  00E3C6  ECCC  F06A         	call	___wmul	;wreg free
  4213  00E3CA  0EA2               	movlw	low __npowers_
  4214  00E3CC  240F               	addwf	?___wmul,w,c
  4215  00E3CE  6EF6               	movwf	tblptrl,c
  4216  00E3D0  0EFE               	movlw	high __npowers_
  4217  00E3D2  2010               	addwfc	?___wmul+1,w,c
  4218  00E3D4  6EF7               	movwf	tblptrh,c
  4219  00E3D6                     	if	0	;There are less than 3 active tblptr bytes
  4220  00E3D6                     	endif
  4221  00E3D6  0009               	tblrd		*+
  4222  00E3D8  CFF5 F018          	movff	tablat,___ftmul@f2
  4223  00E3DC  0009               	tblrd		*+
  4224  00E3DE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4225  00E3E2  000A               	tblrd		*-
  4226  00E3E4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4227  00E3E8  0E00               	movlw	0
  4228  00E3EA  6E0A               	movwf	___awdiv@divisor+1,c
  4229  00E3EC  0E0A               	movlw	10
  4230  00E3EE  6E09               	movwf	___awdiv@divisor,c
  4231  00E3F0  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4232  00E3F4  6A08               	clrf	___awdiv@dividend+1,c
  4233  00E3F6  EC99  F06C         	call	___awdiv	;wreg free
  4234  00E3FA  0E09               	movlw	9
  4235  00E3FC  2407               	addwf	?___awdiv,w,c
  4236  00E3FE  6E0F               	movwf	___wmul@multiplier,c
  4237  00E400  0E00               	movlw	0
  4238  00E402  2008               	addwfc	?___awdiv+1,w,c
  4239  00E404  6E10               	movwf	___wmul@multiplier+1,c
  4240  00E406  0E00               	movlw	0
  4241  00E408  6E12               	movwf	___wmul@multiplicand+1,c
  4242  00E40A  0E03               	movlw	3
  4243  00E40C  6E11               	movwf	___wmul@multiplicand,c
  4244  00E40E  ECCC  F06A         	call	___wmul	;wreg free
  4245  00E412  0EA2               	movlw	low __npowers_
  4246  00E414  240F               	addwf	?___wmul,w,c
  4247  00E416  6EF6               	movwf	tblptrl,c
  4248  00E418  0EFE               	movlw	high __npowers_
  4249  00E41A  2010               	addwfc	?___wmul+1,w,c
  4250  00E41C  6EF7               	movwf	tblptrh,c
  4251  00E41E                     	if	0	;There are less than 3 active tblptr bytes
  4252  00E41E                     	endif
  4253  00E41E  0009               	tblrd		*+
  4254  00E420  CFF5 F015          	movff	tablat,___ftmul@f1
  4255  00E424  0009               	tblrd		*+
  4256  00E426  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4257  00E42A  000A               	tblrd		*-
  4258  00E42C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4259  00E430  EC35  F06E         	call	___ftmul	;wreg free
  4260  00E434  C015  F02A         	movff	?___ftmul,_fround$1544
  4261  00E438  C016  F02B         	movff	?___ftmul+1,_fround$1544+1
  4262  00E43C  C017  F02C         	movff	?___ftmul+2,_fround$1544+2
  4263                           
  4264                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4265  00E440  C02A  F015         	movff	_fround$1544,___ftmul@f1
  4266  00E444  C02B  F016         	movff	_fround$1544+1,___ftmul@f1+1
  4267  00E448  C02C  F017         	movff	_fround$1544+2,___ftmul@f1+2
  4268  00E44C  0E00               	movlw	0
  4269  00E44E  6E18               	movwf	___ftmul@f2,c
  4270  00E450  0E00               	movlw	0
  4271  00E452  6E19               	movwf	___ftmul@f2+1,c
  4272  00E454  0E3F               	movlw	63
  4273  00E456  6E1A               	movwf	___ftmul@f2+2,c
  4274  00E458  EC35  F06E         	call	___ftmul	;wreg free
  4275  00E45C  D799               	goto	L6
  4276  00E45E                     l3325:
  4277                           
  4278                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4279  00E45E  502D               	movf	fround@prec,w,c
  4280  00E460  0D03               	mullw	3
  4281  00E462  0EA2               	movlw	low __npowers_
  4282  00E464  24F3               	addwf	prodl,w,c
  4283  00E466  6EF6               	movwf	tblptrl,c
  4284  00E468  0EFE               	movlw	high __npowers_
  4285  00E46A  20F4               	addwfc	prodh,w,c
  4286  00E46C  6EF7               	movwf	tblptrh,c
  4287  00E46E                     	if	0	;There are less than 3 active tblptr bytes
  4288  00E46E                     	endif
  4289  00E46E  0009               	tblrd		*+
  4290  00E470  CFF5 F015          	movff	tablat,___ftmul@f1
  4291  00E474  0009               	tblrd		*+
  4292  00E476  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4293  00E47A  000A               	tblrd		*-
  4294  00E47C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4295  00E480  0E00               	movlw	0
  4296  00E482  6E18               	movwf	___ftmul@f2,c
  4297  00E484  0E00               	movlw	0
  4298  00E486  6E19               	movwf	___ftmul@f2+1,c
  4299  00E488  0E3F               	movlw	63
  4300  00E48A  6E1A               	movwf	___ftmul@f2+2,c
  4301  00E48C  EC35  F06E         	call	___ftmul	;wreg free
  4302  00E490  C015  F024         	movff	?___ftmul,?_fround
  4303  00E494  C016  F025         	movff	?___ftmul+1,?_fround+1
  4304  00E498  C017  F026         	movff	?___ftmul+2,?_fround+2
  4305  00E49C  0012               	return	
  4306  00E49E                     __end_of_fround:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           postinc0	equ	0xFEE
  4315                           wreg	equ	0xFE8
  4316                           indf2	equ	0xFDF
  4317                           postinc2	equ	0xFDE
  4318                           postdec2	equ	0xFDD
  4319                           fsr2h	equ	0xFDA
  4320                           fsr2l	equ	0xFD9
  4321                           status	equ	0xFD8
  4322                           
  4323 ;; *************** function ___wmul *****************
  4324 ;; Defined at:
  4325 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  multiplier      2   14[COMRAM] unsigned int 
  4328 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  product         2   18[COMRAM] unsigned int 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  2   14[COMRAM] unsigned int 
  4333 ;; Registers used:
  4334 ;;		wreg, status,2, status,0, prodl, prodh
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4340 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;Total ram usage:        6 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; This function calls:
  4347 ;;		Nothing
  4348 ;; This function is called by:
  4349 ;;		_fround
  4350 ;;		_scale
  4351 ;;		_printf
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text6
  4356  00D598                     __ptext6:
  4357                           	opt stack 0
  4358  00D598                     ___wmul:
  4359                           	opt stack 28
  4360                           
  4361                           ;incstack = 0
  4362  00D598  500F               	movf	___wmul@multiplier,w,c
  4363  00D59A  0211               	mulwf	___wmul@multiplicand,c
  4364  00D59C  CFF3 F013          	movff	prodl,___wmul@product
  4365  00D5A0  CFF4 F014          	movff	prodh,___wmul@product+1
  4366  00D5A4  500F               	movf	___wmul@multiplier,w,c
  4367  00D5A6  0212               	mulwf	___wmul@multiplicand+1,c
  4368  00D5A8  50F3               	movf	prodl,w,c
  4369  00D5AA  2614               	addwf	___wmul@product+1,f,c
  4370  00D5AC  5010               	movf	___wmul@multiplier+1,w,c
  4371  00D5AE  0211               	mulwf	___wmul@multiplicand,c
  4372  00D5B0  50F3               	movf	prodl,w,c
  4373  00D5B2  2614               	addwf	___wmul@product+1,f,c
  4374  00D5B4  C013  F00F         	movff	___wmul@product,?___wmul
  4375  00D5B8  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4376  00D5BC  0012               	return	
  4377  00D5BE                     __end_of___wmul:
  4378                           	opt stack 0
  4379                           tblptru	equ	0xFF8
  4380                           tblptrh	equ	0xFF7
  4381                           tblptrl	equ	0xFF6
  4382                           tablat	equ	0xFF5
  4383                           prodh	equ	0xFF4
  4384                           prodl	equ	0xFF3
  4385                           postinc0	equ	0xFEE
  4386                           wreg	equ	0xFE8
  4387                           indf2	equ	0xFDF
  4388                           postinc2	equ	0xFDE
  4389                           postdec2	equ	0xFDD
  4390                           fsr2h	equ	0xFDA
  4391                           fsr2l	equ	0xFD9
  4392                           status	equ	0xFD8
  4393                           
  4394 ;; *************** function ___awmod *****************
  4395 ;; Defined at:
  4396 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  4397 ;; Parameters:    Size  Location     Type
  4398 ;;  dividend        2    0[COMRAM] int 
  4399 ;;  divisor         2    2[COMRAM] int 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  sign            1    5[COMRAM] unsigned char 
  4402 ;;  counter         1    4[COMRAM] unsigned char 
  4403 ;; Return value:  Size  Location     Type
  4404 ;;                  2    0[COMRAM] int 
  4405 ;; Registers used:
  4406 ;;		wreg, status,2, status,0
  4407 ;; Tracked objects:
  4408 ;;		On entry : 0/0
  4409 ;;		On exit  : 0/0
  4410 ;;		Unchanged: 0/0
  4411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4412 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;Total ram usage:        6 bytes
  4417 ;; Hardware stack levels used:    1
  4418 ;; This function calls:
  4419 ;;		Nothing
  4420 ;; This function is called by:
  4421 ;;		_fround
  4422 ;;		_scale
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text7
  4427  00D7C2                     __ptext7:
  4428                           	opt stack 0
  4429  00D7C2                     ___awmod:
  4430                           	opt stack 28
  4431                           
  4432                           ;incstack = 0
  4433  00D7C2  0E00               	movlw	0
  4434  00D7C4  6E06               	movwf	___awmod@sign,c
  4435  00D7C6  AE02               	btfss	___awmod@dividend+1,7,c
  4436  00D7C8  D006               	goto	l3249
  4437  00D7CA  6C01               	negf	___awmod@dividend,c
  4438  00D7CC  1E02               	comf	___awmod@dividend+1,f,c
  4439  00D7CE  B0D8               	btfsc	status,0,c
  4440  00D7D0  2A02               	incf	___awmod@dividend+1,f,c
  4441  00D7D2  0E01               	movlw	1
  4442  00D7D4  6E06               	movwf	___awmod@sign,c
  4443  00D7D6                     l3249:
  4444  00D7D6  AE04               	btfss	___awmod@divisor+1,7,c
  4445  00D7D8  D004               	goto	l3253
  4446  00D7DA  6C03               	negf	___awmod@divisor,c
  4447  00D7DC  1E04               	comf	___awmod@divisor+1,f,c
  4448  00D7DE  B0D8               	btfsc	status,0,c
  4449  00D7E0  2A04               	incf	___awmod@divisor+1,f,c
  4450  00D7E2                     l3253:
  4451  00D7E2  5003               	movf	___awmod@divisor,w,c
  4452  00D7E4  1004               	iorwf	___awmod@divisor+1,w,c
  4453  00D7E6  B4D8               	btfsc	status,2,c
  4454  00D7E8  D018               	goto	l3269
  4455  00D7EA  0E01               	movlw	1
  4456  00D7EC  6E05               	movwf	___awmod@counter,c
  4457  00D7EE  D004               	goto	l3259
  4458  00D7F0                     l3257:
  4459  00D7F0  90D8               	bcf	status,0,c
  4460  00D7F2  3603               	rlcf	___awmod@divisor,f,c
  4461  00D7F4  3604               	rlcf	___awmod@divisor+1,f,c
  4462  00D7F6  2A05               	incf	___awmod@counter,f,c
  4463  00D7F8                     l3259:
  4464  00D7F8  AE04               	btfss	___awmod@divisor+1,7,c
  4465  00D7FA  D7FA               	goto	l3257
  4466  00D7FC                     l3261:
  4467  00D7FC  5003               	movf	___awmod@divisor,w,c
  4468  00D7FE  5C01               	subwf	___awmod@dividend,w,c
  4469  00D800  5004               	movf	___awmod@divisor+1,w,c
  4470  00D802  5802               	subwfb	___awmod@dividend+1,w,c
  4471  00D804  A0D8               	btfss	status,0,c
  4472  00D806  D004               	goto	l3265
  4473  00D808  5003               	movf	___awmod@divisor,w,c
  4474  00D80A  5E01               	subwf	___awmod@dividend,f,c
  4475  00D80C  5004               	movf	___awmod@divisor+1,w,c
  4476  00D80E  5A02               	subwfb	___awmod@dividend+1,f,c
  4477  00D810                     l3265:
  4478  00D810  90D8               	bcf	status,0,c
  4479  00D812  3204               	rrcf	___awmod@divisor+1,f,c
  4480  00D814  3203               	rrcf	___awmod@divisor,f,c
  4481  00D816  2E05               	decfsz	___awmod@counter,f,c
  4482  00D818  D7F1               	goto	l3261
  4483  00D81A                     l3269:
  4484  00D81A  5006               	movf	___awmod@sign,w,c
  4485  00D81C  B4D8               	btfsc	status,2,c
  4486  00D81E  D004               	goto	l3273
  4487  00D820  6C01               	negf	___awmod@dividend,c
  4488  00D822  1E02               	comf	___awmod@dividend+1,f,c
  4489  00D824  B0D8               	btfsc	status,0,c
  4490  00D826  2A02               	incf	___awmod@dividend+1,f,c
  4491  00D828                     l3273:
  4492  00D828  C001  F001         	movff	___awmod@dividend,?___awmod
  4493  00D82C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4494  00D830  0012               	return	
  4495  00D832                     __end_of___awmod:
  4496                           	opt stack 0
  4497                           tblptru	equ	0xFF8
  4498                           tblptrh	equ	0xFF7
  4499                           tblptrl	equ	0xFF6
  4500                           tablat	equ	0xFF5
  4501                           prodh	equ	0xFF4
  4502                           prodl	equ	0xFF3
  4503                           postinc0	equ	0xFEE
  4504                           wreg	equ	0xFE8
  4505                           indf2	equ	0xFDF
  4506                           postinc2	equ	0xFDE
  4507                           postdec2	equ	0xFDD
  4508                           fsr2h	equ	0xFDA
  4509                           fsr2l	equ	0xFD9
  4510                           status	equ	0xFD8
  4511                           
  4512 ;; *************** function ___awdiv *****************
  4513 ;; Defined at:
  4514 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  dividend        2    6[COMRAM] int 
  4517 ;;  divisor         2    8[COMRAM] int 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  quotient        2   12[COMRAM] int 
  4520 ;;  sign            1   11[COMRAM] unsigned char 
  4521 ;;  counter         1   10[COMRAM] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;                  2    6[COMRAM] int 
  4524 ;; Registers used:
  4525 ;;		wreg, status,2, status,0
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4531 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4535 ;;Total ram usage:        8 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; This function calls:
  4538 ;;		Nothing
  4539 ;; This function is called by:
  4540 ;;		_fround
  4541 ;;		_scale
  4542 ;;		_printf
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           	psect	text8
  4547  00D932                     __ptext8:
  4548                           	opt stack 0
  4549  00D932                     ___awdiv:
  4550                           	opt stack 28
  4551                           
  4552                           ;incstack = 0
  4553  00D932  0E00               	movlw	0
  4554  00D934  6E0C               	movwf	___awdiv@sign,c
  4555  00D936  AE0A               	btfss	___awdiv@divisor+1,7,c
  4556  00D938  D006               	goto	l3205
  4557  00D93A  6C09               	negf	___awdiv@divisor,c
  4558  00D93C  1E0A               	comf	___awdiv@divisor+1,f,c
  4559  00D93E  B0D8               	btfsc	status,0,c
  4560  00D940  2A0A               	incf	___awdiv@divisor+1,f,c
  4561  00D942  0E01               	movlw	1
  4562  00D944  6E0C               	movwf	___awdiv@sign,c
  4563  00D946                     l3205:
  4564  00D946  AE08               	btfss	___awdiv@dividend+1,7,c
  4565  00D948  D006               	goto	l3211
  4566  00D94A  6C07               	negf	___awdiv@dividend,c
  4567  00D94C  1E08               	comf	___awdiv@dividend+1,f,c
  4568  00D94E  B0D8               	btfsc	status,0,c
  4569  00D950  2A08               	incf	___awdiv@dividend+1,f,c
  4570  00D952  0E01               	movlw	1
  4571  00D954  1A0C               	xorwf	___awdiv@sign,f,c
  4572  00D956                     l3211:
  4573  00D956  0E00               	movlw	0
  4574  00D958  6E0E               	movwf	___awdiv@quotient+1,c
  4575  00D95A  0E00               	movlw	0
  4576  00D95C  6E0D               	movwf	___awdiv@quotient,c
  4577  00D95E  5009               	movf	___awdiv@divisor,w,c
  4578  00D960  100A               	iorwf	___awdiv@divisor+1,w,c
  4579  00D962  B4D8               	btfsc	status,2,c
  4580  00D964  D01C               	goto	l3233
  4581  00D966  0E01               	movlw	1
  4582  00D968  6E0B               	movwf	___awdiv@counter,c
  4583  00D96A  D004               	goto	l3219
  4584  00D96C                     l3217:
  4585  00D96C  90D8               	bcf	status,0,c
  4586  00D96E  3609               	rlcf	___awdiv@divisor,f,c
  4587  00D970  360A               	rlcf	___awdiv@divisor+1,f,c
  4588  00D972  2A0B               	incf	___awdiv@counter,f,c
  4589  00D974                     l3219:
  4590  00D974  AE0A               	btfss	___awdiv@divisor+1,7,c
  4591  00D976  D7FA               	goto	l3217
  4592  00D978                     l3221:
  4593  00D978  90D8               	bcf	status,0,c
  4594  00D97A  360D               	rlcf	___awdiv@quotient,f,c
  4595  00D97C  360E               	rlcf	___awdiv@quotient+1,f,c
  4596  00D97E  5009               	movf	___awdiv@divisor,w,c
  4597  00D980  5C07               	subwf	___awdiv@dividend,w,c
  4598  00D982  500A               	movf	___awdiv@divisor+1,w,c
  4599  00D984  5808               	subwfb	___awdiv@dividend+1,w,c
  4600  00D986  A0D8               	btfss	status,0,c
  4601  00D988  D005               	goto	l3229
  4602  00D98A  5009               	movf	___awdiv@divisor,w,c
  4603  00D98C  5E07               	subwf	___awdiv@dividend,f,c
  4604  00D98E  500A               	movf	___awdiv@divisor+1,w,c
  4605  00D990  5A08               	subwfb	___awdiv@dividend+1,f,c
  4606  00D992  800D               	bsf	___awdiv@quotient,0,c
  4607  00D994                     l3229:
  4608  00D994  90D8               	bcf	status,0,c
  4609  00D996  320A               	rrcf	___awdiv@divisor+1,f,c
  4610  00D998  3209               	rrcf	___awdiv@divisor,f,c
  4611  00D99A  2E0B               	decfsz	___awdiv@counter,f,c
  4612  00D99C  D7ED               	goto	l3221
  4613  00D99E                     l3233:
  4614  00D99E  500C               	movf	___awdiv@sign,w,c
  4615  00D9A0  B4D8               	btfsc	status,2,c
  4616  00D9A2  D004               	goto	l3237
  4617  00D9A4  6C0D               	negf	___awdiv@quotient,c
  4618  00D9A6  1E0E               	comf	___awdiv@quotient+1,f,c
  4619  00D9A8  B0D8               	btfsc	status,0,c
  4620  00D9AA  2A0E               	incf	___awdiv@quotient+1,f,c
  4621  00D9AC                     l3237:
  4622  00D9AC  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4623  00D9B0  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4624  00D9B4  0012               	return	
  4625  00D9B6                     __end_of___awdiv:
  4626                           	opt stack 0
  4627                           tblptru	equ	0xFF8
  4628                           tblptrh	equ	0xFF7
  4629                           tblptrl	equ	0xFF6
  4630                           tablat	equ	0xFF5
  4631                           prodh	equ	0xFF4
  4632                           prodl	equ	0xFF3
  4633                           postinc0	equ	0xFEE
  4634                           wreg	equ	0xFE8
  4635                           indf2	equ	0xFDF
  4636                           postinc2	equ	0xFDE
  4637                           postdec2	equ	0xFDD
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function __tdiv_to_l_ *****************
  4643 ;; Defined at:
  4644 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdivl.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  f1              3    0[COMRAM] float 
  4647 ;;  f2              3    3[COMRAM] float 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  quot            4    9[COMRAM] unsigned long 
  4650 ;;  exp1            1   14[COMRAM] unsigned char 
  4651 ;;  cntr            1   13[COMRAM] unsigned char 
  4652 ;; Return value:  Size  Location     Type
  4653 ;;                  4    0[COMRAM] unsigned long 
  4654 ;; Registers used:
  4655 ;;		wreg, status,2, status,0
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4661 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;Total ram usage:       15 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; This function calls:
  4668 ;;		Nothing
  4669 ;; This function is called by:
  4670 ;;		_printf
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           	psect	text9
  4675  00DF7A                     __ptext9:
  4676                           	opt stack 0
  4677  00DF7A                     __tdiv_to_l_:
  4678                           	opt stack 29
  4679                           
  4680                           ;incstack = 0
  4681  00DF7A  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4682  00DF7E  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4683  00DF80  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4684  00DF82  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4685  00DF84  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4686  00DF86  E301               	bnc	u3001
  4687  00DF88  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4688  00DF8A                     u3001:
  4689  00DF8A  5007               	movf	??__tdiv_to_l_,w,c
  4690  00DF8C  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4691  00DF8E  500F               	movf	__tdiv_to_l_@exp1,w,c
  4692  00DF90  A4D8               	btfss	status,2,c
  4693  00DF92  D009               	goto	l3385
  4694  00DF94  0E00               	movlw	0
  4695  00DF96  6E01               	movwf	?__tdiv_to_l_,c
  4696  00DF98  0E00               	movlw	0
  4697  00DF9A  6E02               	movwf	?__tdiv_to_l_+1,c
  4698  00DF9C  0E00               	movlw	0
  4699  00DF9E  6E03               	movwf	?__tdiv_to_l_+2,c
  4700  00DFA0  0E00               	movlw	0
  4701  00DFA2  6E04               	movwf	?__tdiv_to_l_+3,c
  4702  00DFA4  0012               	return	
  4703  00DFA6                     l3385:
  4704  00DFA6  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4705  00DFAA  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4706  00DFAC  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4707  00DFAE  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4708  00DFB0  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4709  00DFB2  E301               	bnc	u3021
  4710  00DFB4  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4711  00DFB6                     u3021:
  4712  00DFB6  5007               	movf	??__tdiv_to_l_,w,c
  4713  00DFB8  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4714  00DFBA  500E               	movf	__tdiv_to_l_@cntr,w,c
  4715  00DFBC  A4D8               	btfss	status,2,c
  4716  00DFBE  D009               	goto	l3391
  4717  00DFC0  0E00               	movlw	0
  4718  00DFC2  6E01               	movwf	?__tdiv_to_l_,c
  4719  00DFC4  0E00               	movlw	0
  4720  00DFC6  6E02               	movwf	?__tdiv_to_l_+1,c
  4721  00DFC8  0E00               	movlw	0
  4722  00DFCA  6E03               	movwf	?__tdiv_to_l_+2,c
  4723  00DFCC  0E00               	movlw	0
  4724  00DFCE  6E04               	movwf	?__tdiv_to_l_+3,c
  4725  00DFD0  0012               	return	
  4726  00DFD2                     l3391:
  4727  00DFD2  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4728  00DFD4  0EFF               	movlw	255
  4729  00DFD6  1601               	andwf	__tdiv_to_l_@f1,f,c
  4730  00DFD8  0EFF               	movlw	255
  4731  00DFDA  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4732  00DFDC  0E00               	movlw	0
  4733  00DFDE  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4734  00DFE0  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4735  00DFE2  0EFF               	movlw	255
  4736  00DFE4  1604               	andwf	__tdiv_to_l_@f2,f,c
  4737  00DFE6  0EFF               	movlw	255
  4738  00DFE8  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4739  00DFEA  0E00               	movlw	0
  4740  00DFEC  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4741  00DFEE  0E00               	movlw	0
  4742  00DFF0  6E0A               	movwf	__tdiv_to_l_@quot,c
  4743  00DFF2  0E00               	movlw	0
  4744  00DFF4  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4745  00DFF6  0E00               	movlw	0
  4746  00DFF8  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4747  00DFFA  0E00               	movlw	0
  4748  00DFFC  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4749  00DFFE  0E7F               	movlw	127
  4750  00E000  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4751  00E002  500E               	movf	__tdiv_to_l_@cntr,w,c
  4752  00E004  0F98               	addlw	152
  4753  00E006  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4754  00E008  0E18               	movlw	24
  4755  00E00A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4756  00E00C                     l931:
  4757  00E00C  90D8               	bcf	status,0,c
  4758  00E00E  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4759  00E010  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4760  00E012  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4761  00E014  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4762  00E016  5004               	movf	__tdiv_to_l_@f2,w,c
  4763  00E018  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4764  00E01A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4765  00E01C  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4766  00E01E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4767  00E020  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4768  00E022  A0D8               	btfss	status,0,c
  4769  00E024  D007               	goto	l932
  4770  00E026  5004               	movf	__tdiv_to_l_@f2,w,c
  4771  00E028  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4772  00E02A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4773  00E02C  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4774  00E02E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4775  00E030  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4776  00E032  800A               	bsf	__tdiv_to_l_@quot,0,c
  4777  00E034                     l932:
  4778  00E034  90D8               	bcf	status,0,c
  4779  00E036  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4780  00E038  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4781  00E03A  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4782  00E03C  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4783  00E03E  D7E6               	goto	l931
  4784  00E040  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4785  00E042  D016               	goto	l3425
  4786  00E044  500F               	movf	__tdiv_to_l_@exp1,w,c
  4787  00E046  0A80               	xorlw	128
  4788  00E048  0F97               	addlw	151
  4789  00E04A  B0D8               	btfsc	status,0,c
  4790  00E04C  D009               	goto	l3421
  4791  00E04E  0E00               	movlw	0
  4792  00E050  6E01               	movwf	?__tdiv_to_l_,c
  4793  00E052  0E00               	movlw	0
  4794  00E054  6E02               	movwf	?__tdiv_to_l_+1,c
  4795  00E056  0E00               	movlw	0
  4796  00E058  6E03               	movwf	?__tdiv_to_l_+2,c
  4797  00E05A  0E00               	movlw	0
  4798  00E05C  6E04               	movwf	?__tdiv_to_l_+3,c
  4799  00E05E  0012               	return	
  4800  00E060                     l3421:
  4801  00E060  90D8               	bcf	status,0,c
  4802  00E062  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4803  00E064  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4804  00E066  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4805  00E068  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4806  00E06A  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4807  00E06C  D7F9               	goto	l3421
  4808  00E06E  D015               	goto	l938
  4809  00E070                     l3425:
  4810  00E070  0E17               	movlw	23
  4811  00E072  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4812  00E074  D00F               	goto	l3433
  4813  00E076  0E00               	movlw	0
  4814  00E078  6E01               	movwf	?__tdiv_to_l_,c
  4815  00E07A  0E00               	movlw	0
  4816  00E07C  6E02               	movwf	?__tdiv_to_l_+1,c
  4817  00E07E  0E00               	movlw	0
  4818  00E080  6E03               	movwf	?__tdiv_to_l_+2,c
  4819  00E082  0E00               	movlw	0
  4820  00E084  6E04               	movwf	?__tdiv_to_l_+3,c
  4821  00E086  0012               	return	
  4822  00E088                     l3431:
  4823  00E088  90D8               	bcf	status,0,c
  4824  00E08A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4825  00E08C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4826  00E08E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4827  00E090  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4828  00E092  060F               	decf	__tdiv_to_l_@exp1,f,c
  4829  00E094                     l3433:
  4830  00E094  500F               	movf	__tdiv_to_l_@exp1,w,c
  4831  00E096  A4D8               	btfss	status,2,c
  4832  00E098  D7F7               	goto	l3431
  4833  00E09A                     l938:
  4834  00E09A  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4835  00E09E  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4836  00E0A2  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4837  00E0A6  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4838  00E0AA  0012               	return		;funcret
  4839  00E0AC                     __end_of__tdiv_to_l_:
  4840                           	opt stack 0
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           postinc0	equ	0xFEE
  4848                           wreg	equ	0xFE8
  4849                           indf2	equ	0xFDF
  4850                           postinc2	equ	0xFDE
  4851                           postdec2	equ	0xFDD
  4852                           fsr2h	equ	0xFDA
  4853                           fsr2l	equ	0xFD9
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function __div_to_l_ *****************
  4857 ;; Defined at:
  4858 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fldivl.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  f1              3    0[COMRAM] unsigned long 
  4861 ;;  f2              3    3[COMRAM] unsigned long 
  4862 ;; Auto vars:     Size  Location     Type
  4863 ;;  quot            4    6[COMRAM] unsigned long 
  4864 ;;  exp1            1   11[COMRAM] unsigned char 
  4865 ;;  cntr            1   10[COMRAM] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  4    0[COMRAM] unsigned long 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4875 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4879 ;;Total ram usage:       12 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; This function calls:
  4882 ;;		Nothing
  4883 ;; This function is called by:
  4884 ;;		_printf
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           	psect	text10
  4889  00DE52                     __ptext10:
  4890                           	opt stack 0
  4891  00DE52                     __div_to_l_:
  4892                           	opt stack 29
  4893                           
  4894                           ;incstack = 0
  4895  00DE52  3403               	rlcf	__div_to_l_@f1+2,w,c
  4896  00DE54  3404               	rlcf	__div_to_l_@f1+3,w,c
  4897  00DE56  6E0C               	movwf	__div_to_l_@exp1,c
  4898  00DE58  500C               	movf	__div_to_l_@exp1,w,c
  4899  00DE5A  A4D8               	btfss	status,2,c
  4900  00DE5C  D009               	goto	l3441
  4901  00DE5E  0E00               	movlw	0
  4902  00DE60  6E01               	movwf	?__div_to_l_,c
  4903  00DE62  0E00               	movlw	0
  4904  00DE64  6E02               	movwf	?__div_to_l_+1,c
  4905  00DE66  0E00               	movlw	0
  4906  00DE68  6E03               	movwf	?__div_to_l_+2,c
  4907  00DE6A  0E00               	movlw	0
  4908  00DE6C  6E04               	movwf	?__div_to_l_+3,c
  4909  00DE6E  0012               	return	
  4910  00DE70                     l3441:
  4911  00DE70  3406               	rlcf	__div_to_l_@f2+2,w,c
  4912  00DE72  3407               	rlcf	__div_to_l_@f2+3,w,c
  4913  00DE74  6E0B               	movwf	__div_to_l_@cntr,c
  4914  00DE76  500B               	movf	__div_to_l_@cntr,w,c
  4915  00DE78  A4D8               	btfss	status,2,c
  4916  00DE7A  D009               	goto	l3447
  4917  00DE7C  0E00               	movlw	0
  4918  00DE7E  6E01               	movwf	?__div_to_l_,c
  4919  00DE80  0E00               	movlw	0
  4920  00DE82  6E02               	movwf	?__div_to_l_+1,c
  4921  00DE84  0E00               	movlw	0
  4922  00DE86  6E03               	movwf	?__div_to_l_+2,c
  4923  00DE88  0E00               	movlw	0
  4924  00DE8A  6E04               	movwf	?__div_to_l_+3,c
  4925  00DE8C  0012               	return	
  4926  00DE8E                     l3447:
  4927  00DE8E  8E03               	bsf	__div_to_l_@f1+2,7,c
  4928  00DE90  0EFF               	movlw	255
  4929  00DE92  1601               	andwf	__div_to_l_@f1,f,c
  4930  00DE94  0EFF               	movlw	255
  4931  00DE96  1602               	andwf	__div_to_l_@f1+1,f,c
  4932  00DE98  0EFF               	movlw	255
  4933  00DE9A  1603               	andwf	__div_to_l_@f1+2,f,c
  4934  00DE9C  0E00               	movlw	0
  4935  00DE9E  1604               	andwf	__div_to_l_@f1+3,f,c
  4936  00DEA0  8E06               	bsf	__div_to_l_@f2+2,7,c
  4937  00DEA2  0EFF               	movlw	255
  4938  00DEA4  1604               	andwf	__div_to_l_@f2,f,c
  4939  00DEA6  0EFF               	movlw	255
  4940  00DEA8  1605               	andwf	__div_to_l_@f2+1,f,c
  4941  00DEAA  0EFF               	movlw	255
  4942  00DEAC  1606               	andwf	__div_to_l_@f2+2,f,c
  4943  00DEAE  0E00               	movlw	0
  4944  00DEB0  1607               	andwf	__div_to_l_@f2+3,f,c
  4945  00DEB2  0E00               	movlw	0
  4946  00DEB4  6E07               	movwf	__div_to_l_@quot,c
  4947  00DEB6  0E00               	movlw	0
  4948  00DEB8  6E08               	movwf	__div_to_l_@quot+1,c
  4949  00DEBA  0E00               	movlw	0
  4950  00DEBC  6E09               	movwf	__div_to_l_@quot+2,c
  4951  00DEBE  0E00               	movlw	0
  4952  00DEC0  6E0A               	movwf	__div_to_l_@quot+3,c
  4953  00DEC2  0E7F               	movlw	127
  4954  00DEC4  5E0C               	subwf	__div_to_l_@exp1,f,c
  4955  00DEC6  500B               	movf	__div_to_l_@cntr,w,c
  4956  00DEC8  0FA0               	addlw	160
  4957  00DECA  5E0C               	subwf	__div_to_l_@exp1,f,c
  4958  00DECC  0E20               	movlw	32
  4959  00DECE  6E0B               	movwf	__div_to_l_@cntr,c
  4960  00DED0                     l3461:
  4961  00DED0  90D8               	bcf	status,0,c
  4962  00DED2  3607               	rlcf	__div_to_l_@quot,f,c
  4963  00DED4  3608               	rlcf	__div_to_l_@quot+1,f,c
  4964  00DED6  3609               	rlcf	__div_to_l_@quot+2,f,c
  4965  00DED8  360A               	rlcf	__div_to_l_@quot+3,f,c
  4966  00DEDA  5004               	movf	__div_to_l_@f2,w,c
  4967  00DEDC  5C01               	subwf	__div_to_l_@f1,w,c
  4968  00DEDE  5005               	movf	__div_to_l_@f2+1,w,c
  4969  00DEE0  5802               	subwfb	__div_to_l_@f1+1,w,c
  4970  00DEE2  5006               	movf	__div_to_l_@f2+2,w,c
  4971  00DEE4  5803               	subwfb	__div_to_l_@f1+2,w,c
  4972  00DEE6  5007               	movf	__div_to_l_@f2+3,w,c
  4973  00DEE8  5804               	subwfb	__div_to_l_@f1+3,w,c
  4974  00DEEA  A0D8               	btfss	status,0,c
  4975  00DEEC  D009               	goto	l3469
  4976  00DEEE  5004               	movf	__div_to_l_@f2,w,c
  4977  00DEF0  5E01               	subwf	__div_to_l_@f1,f,c
  4978  00DEF2  5005               	movf	__div_to_l_@f2+1,w,c
  4979  00DEF4  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4980  00DEF6  5006               	movf	__div_to_l_@f2+2,w,c
  4981  00DEF8  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4982  00DEFA  5007               	movf	__div_to_l_@f2+3,w,c
  4983  00DEFC  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4984  00DEFE  8007               	bsf	__div_to_l_@quot,0,c
  4985  00DF00                     l3469:
  4986  00DF00  90D8               	bcf	status,0,c
  4987  00DF02  3601               	rlcf	__div_to_l_@f1,f,c
  4988  00DF04  3602               	rlcf	__div_to_l_@f1+1,f,c
  4989  00DF06  3603               	rlcf	__div_to_l_@f1+2,f,c
  4990  00DF08  3604               	rlcf	__div_to_l_@f1+3,f,c
  4991  00DF0A  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4992  00DF0C  D7E1               	goto	l3461
  4993  00DF0E  AE0C               	btfss	__div_to_l_@exp1,7,c
  4994  00DF10  D016               	goto	l3485
  4995  00DF12  500C               	movf	__div_to_l_@exp1,w,c
  4996  00DF14  0A80               	xorlw	128
  4997  00DF16  0F9F               	addlw	159
  4998  00DF18  B0D8               	btfsc	status,0,c
  4999  00DF1A  D009               	goto	l3481
  5000  00DF1C  0E00               	movlw	0
  5001  00DF1E  6E01               	movwf	?__div_to_l_,c
  5002  00DF20  0E00               	movlw	0
  5003  00DF22  6E02               	movwf	?__div_to_l_+1,c
  5004  00DF24  0E00               	movlw	0
  5005  00DF26  6E03               	movwf	?__div_to_l_+2,c
  5006  00DF28  0E00               	movlw	0
  5007  00DF2A  6E04               	movwf	?__div_to_l_+3,c
  5008  00DF2C  0012               	return	
  5009  00DF2E                     l3481:
  5010  00DF2E  90D8               	bcf	status,0,c
  5011  00DF30  320A               	rrcf	__div_to_l_@quot+3,f,c
  5012  00DF32  3209               	rrcf	__div_to_l_@quot+2,f,c
  5013  00DF34  3208               	rrcf	__div_to_l_@quot+1,f,c
  5014  00DF36  3207               	rrcf	__div_to_l_@quot,f,c
  5015  00DF38  3E0C               	incfsz	__div_to_l_@exp1,f,c
  5016  00DF3A  D7F9               	goto	l3481
  5017  00DF3C  D015               	goto	l834
  5018  00DF3E                     l3485:
  5019  00DF3E  0E1F               	movlw	31
  5020  00DF40  640C               	cpfsgt	__div_to_l_@exp1,c
  5021  00DF42  D00F               	goto	l3493
  5022  00DF44  0E00               	movlw	0
  5023  00DF46  6E01               	movwf	?__div_to_l_,c
  5024  00DF48  0E00               	movlw	0
  5025  00DF4A  6E02               	movwf	?__div_to_l_+1,c
  5026  00DF4C  0E00               	movlw	0
  5027  00DF4E  6E03               	movwf	?__div_to_l_+2,c
  5028  00DF50  0E00               	movlw	0
  5029  00DF52  6E04               	movwf	?__div_to_l_+3,c
  5030  00DF54  0012               	return	
  5031  00DF56                     l3491:
  5032  00DF56  90D8               	bcf	status,0,c
  5033  00DF58  3607               	rlcf	__div_to_l_@quot,f,c
  5034  00DF5A  3608               	rlcf	__div_to_l_@quot+1,f,c
  5035  00DF5C  3609               	rlcf	__div_to_l_@quot+2,f,c
  5036  00DF5E  360A               	rlcf	__div_to_l_@quot+3,f,c
  5037  00DF60  060C               	decf	__div_to_l_@exp1,f,c
  5038  00DF62                     l3493:
  5039  00DF62  500C               	movf	__div_to_l_@exp1,w,c
  5040  00DF64  A4D8               	btfss	status,2,c
  5041  00DF66  D7F7               	goto	l3491
  5042  00DF68                     l834:
  5043  00DF68  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5044  00DF6C  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5045  00DF70  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5046  00DF74  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5047  00DF78  0012               	return		;funcret
  5048  00DF7A                     __end_of__div_to_l_:
  5049                           	opt stack 0
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           postinc0	equ	0xFEE
  5057                           wreg	equ	0xFE8
  5058                           indf2	equ	0xFDF
  5059                           postinc2	equ	0xFDE
  5060                           postdec2	equ	0xFDD
  5061                           fsr2h	equ	0xFDA
  5062                           fsr2l	equ	0xFD9
  5063                           status	equ	0xFD8
  5064                           
  5065 ;; *************** function ___llmod *****************
  5066 ;; Defined at:
  5067 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;  dividend        4   13[COMRAM] unsigned long 
  5070 ;;  divisor         4   17[COMRAM] unsigned long 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  counter         1   21[COMRAM] unsigned char 
  5073 ;; Return value:  Size  Location     Type
  5074 ;;                  4   13[COMRAM] unsigned long 
  5075 ;; Registers used:
  5076 ;;		wreg, status,2, status,0
  5077 ;; Tracked objects:
  5078 ;;		On entry : 0/0
  5079 ;;		On exit  : 0/0
  5080 ;;		Unchanged: 0/0
  5081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5082 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5086 ;;Total ram usage:        9 bytes
  5087 ;; Hardware stack levels used:    1
  5088 ;; This function calls:
  5089 ;;		Nothing
  5090 ;; This function is called by:
  5091 ;;		_printf
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text11
  5096  00D75C                     __ptext11:
  5097                           	opt stack 0
  5098  00D75C                     ___llmod:
  5099                           	opt stack 29
  5100                           
  5101                           ;incstack = 0
  5102  00D75C  5012               	movf	___llmod@divisor,w,c
  5103  00D75E  1013               	iorwf	___llmod@divisor+1,w,c
  5104  00D760  1014               	iorwf	___llmod@divisor+2,w,c
  5105  00D762  1015               	iorwf	___llmod@divisor+3,w,c
  5106  00D764  B4D8               	btfsc	status,2,c
  5107  00D766  D024               	goto	l1023
  5108  00D768  0E01               	movlw	1
  5109  00D76A  6E16               	movwf	___llmod@counter,c
  5110  00D76C  D006               	goto	l3645
  5111  00D76E                     l3643:
  5112  00D76E  90D8               	bcf	status,0,c
  5113  00D770  3612               	rlcf	___llmod@divisor,f,c
  5114  00D772  3613               	rlcf	___llmod@divisor+1,f,c
  5115  00D774  3614               	rlcf	___llmod@divisor+2,f,c
  5116  00D776  3615               	rlcf	___llmod@divisor+3,f,c
  5117  00D778  2A16               	incf	___llmod@counter,f,c
  5118  00D77A                     l3645:
  5119  00D77A  AE15               	btfss	___llmod@divisor+3,7,c
  5120  00D77C  D7F8               	goto	l3643
  5121  00D77E                     l3647:
  5122  00D77E  5012               	movf	___llmod@divisor,w,c
  5123  00D780  5C0E               	subwf	___llmod@dividend,w,c
  5124  00D782  5013               	movf	___llmod@divisor+1,w,c
  5125  00D784  580F               	subwfb	___llmod@dividend+1,w,c
  5126  00D786  5014               	movf	___llmod@divisor+2,w,c
  5127  00D788  5810               	subwfb	___llmod@dividend+2,w,c
  5128  00D78A  5015               	movf	___llmod@divisor+3,w,c
  5129  00D78C  5811               	subwfb	___llmod@dividend+3,w,c
  5130  00D78E  A0D8               	btfss	status,0,c
  5131  00D790  D008               	goto	l3651
  5132  00D792  5012               	movf	___llmod@divisor,w,c
  5133  00D794  5E0E               	subwf	___llmod@dividend,f,c
  5134  00D796  5013               	movf	___llmod@divisor+1,w,c
  5135  00D798  5A0F               	subwfb	___llmod@dividend+1,f,c
  5136  00D79A  5014               	movf	___llmod@divisor+2,w,c
  5137  00D79C  5A10               	subwfb	___llmod@dividend+2,f,c
  5138  00D79E  5015               	movf	___llmod@divisor+3,w,c
  5139  00D7A0  5A11               	subwfb	___llmod@dividend+3,f,c
  5140  00D7A2                     l3651:
  5141  00D7A2  90D8               	bcf	status,0,c
  5142  00D7A4  3215               	rrcf	___llmod@divisor+3,f,c
  5143  00D7A6  3214               	rrcf	___llmod@divisor+2,f,c
  5144  00D7A8  3213               	rrcf	___llmod@divisor+1,f,c
  5145  00D7AA  3212               	rrcf	___llmod@divisor,f,c
  5146  00D7AC  2E16               	decfsz	___llmod@counter,f,c
  5147  00D7AE  D7E7               	goto	l3647
  5148  00D7B0                     l1023:
  5149  00D7B0  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5150  00D7B4  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5151  00D7B8  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5152  00D7BC  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5153  00D7C0  0012               	return		;funcret
  5154  00D7C2                     __end_of___llmod:
  5155                           	opt stack 0
  5156                           tblptru	equ	0xFF8
  5157                           tblptrh	equ	0xFF7
  5158                           tblptrl	equ	0xFF6
  5159                           tablat	equ	0xFF5
  5160                           prodh	equ	0xFF4
  5161                           prodl	equ	0xFF3
  5162                           postinc0	equ	0xFEE
  5163                           wreg	equ	0xFE8
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function ___lldiv *****************
  5172 ;; Defined at:
  5173 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  dividend        4    0[COMRAM] unsigned long 
  5176 ;;  divisor         4    4[COMRAM] unsigned long 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  quotient        4    8[COMRAM] unsigned long 
  5179 ;;  counter         1   12[COMRAM] unsigned char 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  4    0[COMRAM] unsigned long 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5189 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;Total ram usage:       13 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; This function calls:
  5196 ;;		Nothing
  5197 ;; This function is called by:
  5198 ;;		_printf
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text12
  5203  00D8B0                     __ptext12:
  5204                           	opt stack 0
  5205  00D8B0                     ___lldiv:
  5206                           	opt stack 29
  5207                           
  5208                           ;incstack = 0
  5209  00D8B0  0E00               	movlw	0
  5210  00D8B2  6E09               	movwf	___lldiv@quotient,c
  5211  00D8B4  0E00               	movlw	0
  5212  00D8B6  6E0A               	movwf	___lldiv@quotient+1,c
  5213  00D8B8  0E00               	movlw	0
  5214  00D8BA  6E0B               	movwf	___lldiv@quotient+2,c
  5215  00D8BC  0E00               	movlw	0
  5216  00D8BE  6E0C               	movwf	___lldiv@quotient+3,c
  5217  00D8C0  5005               	movf	___lldiv@divisor,w,c
  5218  00D8C2  1006               	iorwf	___lldiv@divisor+1,w,c
  5219  00D8C4  1007               	iorwf	___lldiv@divisor+2,w,c
  5220  00D8C6  1008               	iorwf	___lldiv@divisor+3,w,c
  5221  00D8C8  B4D8               	btfsc	status,2,c
  5222  00D8CA  D02A               	goto	l1013
  5223  00D8CC  0E01               	movlw	1
  5224  00D8CE  6E0D               	movwf	___lldiv@counter,c
  5225  00D8D0  D006               	goto	l3625
  5226  00D8D2                     l3623:
  5227  00D8D2  90D8               	bcf	status,0,c
  5228  00D8D4  3605               	rlcf	___lldiv@divisor,f,c
  5229  00D8D6  3606               	rlcf	___lldiv@divisor+1,f,c
  5230  00D8D8  3607               	rlcf	___lldiv@divisor+2,f,c
  5231  00D8DA  3608               	rlcf	___lldiv@divisor+3,f,c
  5232  00D8DC  2A0D               	incf	___lldiv@counter,f,c
  5233  00D8DE                     l3625:
  5234  00D8DE  AE08               	btfss	___lldiv@divisor+3,7,c
  5235  00D8E0  D7F8               	goto	l3623
  5236  00D8E2                     l3627:
  5237  00D8E2  90D8               	bcf	status,0,c
  5238  00D8E4  3609               	rlcf	___lldiv@quotient,f,c
  5239  00D8E6  360A               	rlcf	___lldiv@quotient+1,f,c
  5240  00D8E8  360B               	rlcf	___lldiv@quotient+2,f,c
  5241  00D8EA  360C               	rlcf	___lldiv@quotient+3,f,c
  5242  00D8EC  5005               	movf	___lldiv@divisor,w,c
  5243  00D8EE  5C01               	subwf	___lldiv@dividend,w,c
  5244  00D8F0  5006               	movf	___lldiv@divisor+1,w,c
  5245  00D8F2  5802               	subwfb	___lldiv@dividend+1,w,c
  5246  00D8F4  5007               	movf	___lldiv@divisor+2,w,c
  5247  00D8F6  5803               	subwfb	___lldiv@dividend+2,w,c
  5248  00D8F8  5008               	movf	___lldiv@divisor+3,w,c
  5249  00D8FA  5804               	subwfb	___lldiv@dividend+3,w,c
  5250  00D8FC  A0D8               	btfss	status,0,c
  5251  00D8FE  D009               	goto	l3635
  5252  00D900  5005               	movf	___lldiv@divisor,w,c
  5253  00D902  5E01               	subwf	___lldiv@dividend,f,c
  5254  00D904  5006               	movf	___lldiv@divisor+1,w,c
  5255  00D906  5A02               	subwfb	___lldiv@dividend+1,f,c
  5256  00D908  5007               	movf	___lldiv@divisor+2,w,c
  5257  00D90A  5A03               	subwfb	___lldiv@dividend+2,f,c
  5258  00D90C  5008               	movf	___lldiv@divisor+3,w,c
  5259  00D90E  5A04               	subwfb	___lldiv@dividend+3,f,c
  5260  00D910  8009               	bsf	___lldiv@quotient,0,c
  5261  00D912                     l3635:
  5262  00D912  90D8               	bcf	status,0,c
  5263  00D914  3208               	rrcf	___lldiv@divisor+3,f,c
  5264  00D916  3207               	rrcf	___lldiv@divisor+2,f,c
  5265  00D918  3206               	rrcf	___lldiv@divisor+1,f,c
  5266  00D91A  3205               	rrcf	___lldiv@divisor,f,c
  5267  00D91C  2E0D               	decfsz	___lldiv@counter,f,c
  5268  00D91E  D7E1               	goto	l3627
  5269  00D920                     l1013:
  5270  00D920  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5271  00D924  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5272  00D928  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5273  00D92C  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5274  00D930  0012               	return		;funcret
  5275  00D932                     __end_of___lldiv:
  5276                           	opt stack 0
  5277                           tblptru	equ	0xFF8
  5278                           tblptrh	equ	0xFF7
  5279                           tblptrl	equ	0xFF6
  5280                           tablat	equ	0xFF5
  5281                           prodh	equ	0xFF4
  5282                           prodl	equ	0xFF3
  5283                           postinc0	equ	0xFEE
  5284                           wreg	equ	0xFE8
  5285                           indf2	equ	0xFDF
  5286                           postinc2	equ	0xFDE
  5287                           postdec2	equ	0xFDD
  5288                           fsr2h	equ	0xFDA
  5289                           fsr2l	equ	0xFD9
  5290                           status	equ	0xFD8
  5291                           
  5292 ;; *************** function ___ftsub *****************
  5293 ;; Defined at:
  5294 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftsub.c"
  5295 ;; Parameters:    Size  Location     Type
  5296 ;;  f1              3   57[COMRAM] float 
  5297 ;;  f2              3   60[COMRAM] float 
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;		None
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  3   57[COMRAM] float 
  5302 ;; Registers used:
  5303 ;;		wreg, status,2, status,0, cstack
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5309 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5312 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;Total ram usage:        6 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; Hardware stack levels required when called:    2
  5316 ;; This function calls:
  5317 ;;		___ftadd
  5318 ;; This function is called by:
  5319 ;;		_printf
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           	psect	text13
  5324  00D630                     __ptext13:
  5325                           	opt stack 0
  5326  00D630                     ___ftsub:
  5327                           	opt stack 27
  5328                           
  5329                           ;incstack = 0
  5330  00D630  503D               	movf	___ftsub@f2,w,c
  5331  00D632  103E               	iorwf	___ftsub@f2+1,w,c
  5332  00D634  103F               	iorwf	___ftsub@f2+2,w,c
  5333  00D636  B4D8               	btfsc	status,2,c
  5334  00D638  D006               	goto	l3545
  5335  00D63A  0E00               	movlw	0
  5336  00D63C  1A3D               	xorwf	___ftsub@f2,f,c
  5337  00D63E  0E00               	movlw	0
  5338  00D640  1A3E               	xorwf	___ftsub@f2+1,f,c
  5339  00D642  0E80               	movlw	128
  5340  00D644  1A3F               	xorwf	___ftsub@f2+2,f,c
  5341  00D646                     l3545:
  5342  00D646  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5343  00D64A  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5344  00D64E  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5345  00D652  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5346  00D656  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5347  00D65A  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5348  00D65E  EC56  F070         	call	___ftadd	;wreg free
  5349  00D662  C02E  F03A         	movff	?___ftadd,?___ftsub
  5350  00D666  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5351  00D66A  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5352  00D66E  0012               	return	
  5353  00D670                     __end_of___ftsub:
  5354                           	opt stack 0
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           prodh	equ	0xFF4
  5360                           prodl	equ	0xFF3
  5361                           postinc0	equ	0xFEE
  5362                           wreg	equ	0xFE8
  5363                           indf2	equ	0xFDF
  5364                           postinc2	equ	0xFDE
  5365                           postdec2	equ	0xFDD
  5366                           fsr2h	equ	0xFDA
  5367                           fsr2l	equ	0xFD9
  5368                           status	equ	0xFD8
  5369                           
  5370 ;; *************** function ___ftadd *****************
  5371 ;; Defined at:
  5372 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;  f1              3   45[COMRAM] float 
  5375 ;;  f2              3   48[COMRAM] float 
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  exp1            1   56[COMRAM] unsigned char 
  5378 ;;  exp2            1   55[COMRAM] unsigned char 
  5379 ;;  sign            1   54[COMRAM] unsigned char 
  5380 ;; Return value:  Size  Location     Type
  5381 ;;                  3   45[COMRAM] float 
  5382 ;; Registers used:
  5383 ;;		wreg, status,2, status,0, cstack
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5389 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5391 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5393 ;;Total ram usage:       12 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    1
  5396 ;; This function calls:
  5397 ;;		___ftpack
  5398 ;; This function is called by:
  5399 ;;		_printf
  5400 ;;		___ftsub
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           	psect	text14
  5405  00E0AC                     __ptext14:
  5406                           	opt stack 0
  5407  00E0AC                     ___ftadd:
  5408                           	opt stack 27
  5409                           
  5410                           ;incstack = 0
  5411  00E0AC  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5412  00E0B0  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5413  00E0B2  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5414  00E0B4  342F               	rlcf	___ftadd@f1+1,w,c
  5415  00E0B6  3634               	rlcf	??___ftadd& (0+255),f,c
  5416  00E0B8  E301               	bnc	u2521
  5417  00E0BA  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5418  00E0BC                     u2521:
  5419  00E0BC  5034               	movf	??___ftadd,w,c
  5420  00E0BE  6E39               	movwf	___ftadd@exp1,c
  5421  00E0C0  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5422  00E0C4  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5423  00E0C6  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5424  00E0C8  3432               	rlcf	___ftadd@f2+1,w,c
  5425  00E0CA  3634               	rlcf	??___ftadd& (0+255),f,c
  5426  00E0CC  E301               	bnc	u2531
  5427  00E0CE  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5428  00E0D0                     u2531:
  5429  00E0D0  5034               	movf	??___ftadd,w,c
  5430  00E0D2  6E38               	movwf	___ftadd@exp2,c
  5431  00E0D4  5039               	movf	___ftadd@exp1,w,c
  5432  00E0D6  B4D8               	btfsc	status,2,c
  5433  00E0D8  D00B               	goto	l889
  5434  00E0DA  5038               	movf	___ftadd@exp2,w,c
  5435  00E0DC  5C39               	subwf	___ftadd@exp1,w,c
  5436  00E0DE  B0D8               	btfsc	status,0,c
  5437  00E0E0  D00E               	goto	l3087
  5438  00E0E2  5039               	movf	___ftadd@exp1,w,c
  5439  00E0E4  0800               	sublw	0
  5440  00E0E6  2438               	addwf	___ftadd@exp2,w,c
  5441  00E0E8  6E34               	movwf	??___ftadd& (0+255),c
  5442  00E0EA  0E18               	movlw	24
  5443  00E0EC  6434               	cpfsgt	??___ftadd,c
  5444  00E0EE  D007               	goto	l3087
  5445  00E0F0                     l889:
  5446  00E0F0  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5447  00E0F4  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5448  00E0F8  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5449  00E0FC  0012               	return	
  5450  00E0FE                     l3087:
  5451  00E0FE  5038               	movf	___ftadd@exp2,w,c
  5452  00E100  B4D8               	btfsc	status,2,c
  5453  00E102  D00B               	goto	l893
  5454  00E104  5039               	movf	___ftadd@exp1,w,c
  5455  00E106  5C38               	subwf	___ftadd@exp2,w,c
  5456  00E108  B0D8               	btfsc	status,0,c
  5457  00E10A  D00E               	goto	l3093
  5458  00E10C  5038               	movf	___ftadd@exp2,w,c
  5459  00E10E  0800               	sublw	0
  5460  00E110  2439               	addwf	___ftadd@exp1,w,c
  5461  00E112  6E34               	movwf	??___ftadd& (0+255),c
  5462  00E114  0E18               	movlw	24
  5463  00E116  6434               	cpfsgt	??___ftadd,c
  5464  00E118  D007               	goto	l3093
  5465  00E11A                     l893:
  5466  00E11A  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5467  00E11E  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5468  00E122  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5469  00E126  0012               	return	
  5470  00E128                     l3093:
  5471  00E128  0E06               	movlw	6
  5472  00E12A  6E37               	movwf	___ftadd@sign,c
  5473  00E12C  BE30               	btfsc	___ftadd@f1+2,7,c
  5474  00E12E  8E37               	bsf	___ftadd@sign,7,c
  5475  00E130  BE33               	btfsc	___ftadd@f2+2,7,c
  5476  00E132  8C37               	bsf	___ftadd@sign,6,c
  5477  00E134  8E2F               	bsf	___ftadd@f1+1,7,c
  5478  00E136  0EFF               	movlw	255
  5479  00E138  162E               	andwf	___ftadd@f1,f,c
  5480  00E13A  0EFF               	movlw	255
  5481  00E13C  162F               	andwf	___ftadd@f1+1,f,c
  5482  00E13E  0E00               	movlw	0
  5483  00E140  1630               	andwf	___ftadd@f1+2,f,c
  5484  00E142  8E32               	bsf	___ftadd@f2+1,7,c
  5485  00E144  0EFF               	movlw	255
  5486  00E146  1631               	andwf	___ftadd@f2,f,c
  5487  00E148  0EFF               	movlw	255
  5488  00E14A  1632               	andwf	___ftadd@f2+1,f,c
  5489  00E14C  0E00               	movlw	0
  5490  00E14E  1633               	andwf	___ftadd@f2+2,f,c
  5491  00E150  5038               	movf	___ftadd@exp2,w,c
  5492  00E152  5C39               	subwf	___ftadd@exp1,w,c
  5493  00E154  B0D8               	btfsc	status,0,c
  5494  00E156  D01B               	goto	l3119
  5495  00E158                     l3109:
  5496  00E158  90D8               	bcf	status,0,c
  5497  00E15A  3631               	rlcf	___ftadd@f2,f,c
  5498  00E15C  3632               	rlcf	___ftadd@f2+1,f,c
  5499  00E15E  3633               	rlcf	___ftadd@f2+2,f,c
  5500  00E160  0638               	decf	___ftadd@exp2,f,c
  5501  00E162  5039               	movf	___ftadd@exp1,w,c
  5502  00E164  1838               	xorwf	___ftadd@exp2,w,c
  5503  00E166  B4D8               	btfsc	status,2,c
  5504  00E168  D00D               	goto	l3117
  5505  00E16A  0637               	decf	___ftadd@sign,f,c
  5506  00E16C  C037  F034         	movff	___ftadd@sign,??___ftadd
  5507  00E170  0E07               	movlw	7
  5508  00E172  1634               	andwf	??___ftadd,f,c
  5509  00E174  B4D8               	btfsc	status,2,c
  5510  00E176  D006               	goto	l3117
  5511  00E178  D7EF               	goto	l3109
  5512  00E17A                     l3115:
  5513  00E17A  90D8               	bcf	status,0,c
  5514  00E17C  3230               	rrcf	___ftadd@f1+2,f,c
  5515  00E17E  322F               	rrcf	___ftadd@f1+1,f,c
  5516  00E180  322E               	rrcf	___ftadd@f1,f,c
  5517  00E182  2A39               	incf	___ftadd@exp1,f,c
  5518  00E184                     l3117:
  5519  00E184  5038               	movf	___ftadd@exp2,w,c
  5520  00E186  1839               	xorwf	___ftadd@exp1,w,c
  5521  00E188  B4D8               	btfsc	status,2,c
  5522  00E18A  D01F               	goto	l904
  5523  00E18C  D7F6               	goto	l3115
  5524  00E18E                     l3119:
  5525  00E18E  5039               	movf	___ftadd@exp1,w,c
  5526  00E190  5C38               	subwf	___ftadd@exp2,w,c
  5527  00E192  B0D8               	btfsc	status,0,c
  5528  00E194  D01A               	goto	l904
  5529  00E196                     l3121:
  5530  00E196  90D8               	bcf	status,0,c
  5531  00E198  362E               	rlcf	___ftadd@f1,f,c
  5532  00E19A  362F               	rlcf	___ftadd@f1+1,f,c
  5533  00E19C  3630               	rlcf	___ftadd@f1+2,f,c
  5534  00E19E  0639               	decf	___ftadd@exp1,f,c
  5535  00E1A0  5039               	movf	___ftadd@exp1,w,c
  5536  00E1A2  1838               	xorwf	___ftadd@exp2,w,c
  5537  00E1A4  B4D8               	btfsc	status,2,c
  5538  00E1A6  D00D               	goto	l3129
  5539  00E1A8  0637               	decf	___ftadd@sign,f,c
  5540  00E1AA  C037  F034         	movff	___ftadd@sign,??___ftadd
  5541  00E1AE  0E07               	movlw	7
  5542  00E1B0  1634               	andwf	??___ftadd,f,c
  5543  00E1B2  B4D8               	btfsc	status,2,c
  5544  00E1B4  D006               	goto	l3129
  5545  00E1B6  D7EF               	goto	l3121
  5546  00E1B8                     l3127:
  5547  00E1B8  90D8               	bcf	status,0,c
  5548  00E1BA  3233               	rrcf	___ftadd@f2+2,f,c
  5549  00E1BC  3232               	rrcf	___ftadd@f2+1,f,c
  5550  00E1BE  3231               	rrcf	___ftadd@f2,f,c
  5551  00E1C0  2A38               	incf	___ftadd@exp2,f,c
  5552  00E1C2                     l3129:
  5553  00E1C2  5038               	movf	___ftadd@exp2,w,c
  5554  00E1C4  1839               	xorwf	___ftadd@exp1,w,c
  5555  00E1C6  A4D8               	btfss	status,2,c
  5556  00E1C8  D7F7               	goto	l3127
  5557  00E1CA                     l904:
  5558  00E1CA  AE37               	btfss	___ftadd@sign,7,c
  5559  00E1CC  D00C               	goto	l913
  5560  00E1CE  0EFF               	movlw	255
  5561  00E1D0  1A2E               	xorwf	___ftadd@f1,f,c
  5562  00E1D2  0EFF               	movlw	255
  5563  00E1D4  1A2F               	xorwf	___ftadd@f1+1,f,c
  5564  00E1D6  0EFF               	movlw	255
  5565  00E1D8  1A30               	xorwf	___ftadd@f1+2,f,c
  5566  00E1DA  0E01               	movlw	1
  5567  00E1DC  262E               	addwf	___ftadd@f1,f,c
  5568  00E1DE  0E00               	movlw	0
  5569  00E1E0  222F               	addwfc	___ftadd@f1+1,f,c
  5570  00E1E2  0E00               	movlw	0
  5571  00E1E4  2230               	addwfc	___ftadd@f1+2,f,c
  5572  00E1E6                     l913:
  5573  00E1E6  AC37               	btfss	___ftadd@sign,6,c
  5574  00E1E8  D00C               	goto	l3135
  5575  00E1EA  0EFF               	movlw	255
  5576  00E1EC  1A31               	xorwf	___ftadd@f2,f,c
  5577  00E1EE  0EFF               	movlw	255
  5578  00E1F0  1A32               	xorwf	___ftadd@f2+1,f,c
  5579  00E1F2  0EFF               	movlw	255
  5580  00E1F4  1A33               	xorwf	___ftadd@f2+2,f,c
  5581  00E1F6  0E01               	movlw	1
  5582  00E1F8  2631               	addwf	___ftadd@f2,f,c
  5583  00E1FA  0E00               	movlw	0
  5584  00E1FC  2232               	addwfc	___ftadd@f2+1,f,c
  5585  00E1FE  0E00               	movlw	0
  5586  00E200  2233               	addwfc	___ftadd@f2+2,f,c
  5587  00E202                     l3135:
  5588  00E202  0E00               	movlw	0
  5589  00E204  6E37               	movwf	___ftadd@sign,c
  5590  00E206  502E               	movf	___ftadd@f1,w,c
  5591  00E208  2631               	addwf	___ftadd@f2,f,c
  5592  00E20A  502F               	movf	___ftadd@f1+1,w,c
  5593  00E20C  2232               	addwfc	___ftadd@f2+1,f,c
  5594  00E20E  5030               	movf	___ftadd@f1+2,w,c
  5595  00E210  2233               	addwfc	___ftadd@f2+2,f,c
  5596  00E212  AE33               	btfss	___ftadd@f2+2,7,c
  5597  00E214  D00E               	goto	l3145
  5598  00E216  0EFF               	movlw	255
  5599  00E218  1A31               	xorwf	___ftadd@f2,f,c
  5600  00E21A  0EFF               	movlw	255
  5601  00E21C  1A32               	xorwf	___ftadd@f2+1,f,c
  5602  00E21E  0EFF               	movlw	255
  5603  00E220  1A33               	xorwf	___ftadd@f2+2,f,c
  5604  00E222  0E01               	movlw	1
  5605  00E224  2631               	addwf	___ftadd@f2,f,c
  5606  00E226  0E00               	movlw	0
  5607  00E228  2232               	addwfc	___ftadd@f2+1,f,c
  5608  00E22A  0E00               	movlw	0
  5609  00E22C  2233               	addwfc	___ftadd@f2+2,f,c
  5610  00E22E  0E01               	movlw	1
  5611  00E230  6E37               	movwf	___ftadd@sign,c
  5612  00E232                     l3145:
  5613  00E232  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5614  00E236  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5615  00E23A  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5616  00E23E  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5617  00E242  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5618  00E246  EC6B  F06D         	call	___ftpack	;wreg free
  5619  00E24A  C001  F02E         	movff	?___ftpack,?___ftadd
  5620  00E24E  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5621  00E252  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5622  00E256  0012               	return	
  5623  00E258                     __end_of___ftadd:
  5624                           	opt stack 0
  5625                           tblptru	equ	0xFF8
  5626                           tblptrh	equ	0xFF7
  5627                           tblptrl	equ	0xFF6
  5628                           tablat	equ	0xFF5
  5629                           prodh	equ	0xFF4
  5630                           prodl	equ	0xFF3
  5631                           postinc0	equ	0xFEE
  5632                           wreg	equ	0xFE8
  5633                           indf2	equ	0xFDF
  5634                           postinc2	equ	0xFDE
  5635                           postdec2	equ	0xFDD
  5636                           fsr2h	equ	0xFDA
  5637                           fsr2l	equ	0xFD9
  5638                           status	equ	0xFD8
  5639                           
  5640 ;; *************** function ___ftneg *****************
  5641 ;; Defined at:
  5642 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;  f1              3    0[COMRAM] float 
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;                  3    0[COMRAM] float 
  5649 ;; Registers used:
  5650 ;;		wreg, status,2, status,0
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5656 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5659 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5660 ;;Total ram usage:        3 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; This function calls:
  5663 ;;		Nothing
  5664 ;; This function is called by:
  5665 ;;		_printf
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669                           	psect	text15
  5670  00D574                     __ptext15:
  5671                           	opt stack 0
  5672  00D574                     ___ftneg:
  5673                           	opt stack 29
  5674                           
  5675                           ;incstack = 0
  5676  00D574  5001               	movf	___ftneg@f1,w,c
  5677  00D576  1002               	iorwf	___ftneg@f1+1,w,c
  5678  00D578  1003               	iorwf	___ftneg@f1+2,w,c
  5679  00D57A  B4D8               	btfsc	status,2,c
  5680  00D57C  D006               	goto	l963
  5681  00D57E  0E00               	movlw	0
  5682  00D580  1A01               	xorwf	___ftneg@f1,f,c
  5683  00D582  0E00               	movlw	0
  5684  00D584  1A02               	xorwf	___ftneg@f1+1,f,c
  5685  00D586  0E80               	movlw	128
  5686  00D588  1A03               	xorwf	___ftneg@f1+2,f,c
  5687  00D58A                     l963:
  5688  00D58A  C001  F001         	movff	___ftneg@f1,?___ftneg
  5689  00D58E  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5690  00D592  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5691  00D596  0012               	return		;funcret
  5692  00D598                     __end_of___ftneg:
  5693                           	opt stack 0
  5694                           tblptru	equ	0xFF8
  5695                           tblptrh	equ	0xFF7
  5696                           tblptrl	equ	0xFF6
  5697                           tablat	equ	0xFF5
  5698                           prodh	equ	0xFF4
  5699                           prodl	equ	0xFF3
  5700                           postinc0	equ	0xFEE
  5701                           wreg	equ	0xFE8
  5702                           indf2	equ	0xFDF
  5703                           postinc2	equ	0xFDE
  5704                           postdec2	equ	0xFDD
  5705                           fsr2h	equ	0xFDA
  5706                           fsr2l	equ	0xFD9
  5707                           status	equ	0xFD8
  5708                           
  5709 ;; *************** function ___ftge *****************
  5710 ;; Defined at:
  5711 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;  ff1             3    0[COMRAM] float 
  5714 ;;  ff2             3    3[COMRAM] float 
  5715 ;; Auto vars:     Size  Location     Type
  5716 ;;		None
  5717 ;; Return value:  Size  Location     Type
  5718 ;;		None               void
  5719 ;; Registers used:
  5720 ;;		wreg, status,2, status,0
  5721 ;; Tracked objects:
  5722 ;;		On entry : 0/0
  5723 ;;		On exit  : 0/0
  5724 ;;		Unchanged: 0/0
  5725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5726 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5730 ;;Total ram usage:        9 bytes
  5731 ;; Hardware stack levels used:    1
  5732 ;; This function calls:
  5733 ;;		Nothing
  5734 ;; This function is called by:
  5735 ;;		_printf
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text16
  5740  00DA46                     __ptext16:
  5741                           	opt stack 0
  5742  00DA46                     ___ftge:
  5743                           	opt stack 29
  5744                           
  5745                           ;incstack = 0
  5746  00DA46  AE03               	btfss	___ftge@ff1+2,7,c
  5747  00DA48  D016               	goto	l3553
  5748  00DA4A  C001  F007         	movff	___ftge@ff1,??___ftge
  5749  00DA4E  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5750  00DA52  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5751  00DA56  1E07               	comf	??___ftge,f,c
  5752  00DA58  1E08               	comf	??___ftge+1,f,c
  5753  00DA5A  1E09               	comf	??___ftge+2,f,c
  5754  00DA5C  2A07               	incf	??___ftge,f,c
  5755  00DA5E  0E00               	movlw	0
  5756  00DA60  2208               	addwfc	??___ftge+1,f,c
  5757  00DA62  2209               	addwfc	??___ftge+2,f,c
  5758  00DA64  0E00               	movlw	0
  5759  00DA66  2407               	addwf	??___ftge,w,c
  5760  00DA68  6E01               	movwf	___ftge@ff1,c
  5761  00DA6A  0E00               	movlw	0
  5762  00DA6C  2008               	addwfc	??___ftge+1,w,c
  5763  00DA6E  6E02               	movwf	___ftge@ff1+1,c
  5764  00DA70  0E80               	movlw	128
  5765  00DA72  2009               	addwfc	??___ftge+2,w,c
  5766  00DA74  6E03               	movwf	___ftge@ff1+2,c
  5767  00DA76                     l3553:
  5768  00DA76  AE06               	btfss	___ftge@ff2+2,7,c
  5769  00DA78  D016               	goto	l3557
  5770  00DA7A  C004  F007         	movff	___ftge@ff2,??___ftge
  5771  00DA7E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5772  00DA82  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5773  00DA86  1E07               	comf	??___ftge,f,c
  5774  00DA88  1E08               	comf	??___ftge+1,f,c
  5775  00DA8A  1E09               	comf	??___ftge+2,f,c
  5776  00DA8C  2A07               	incf	??___ftge,f,c
  5777  00DA8E  0E00               	movlw	0
  5778  00DA90  2208               	addwfc	??___ftge+1,f,c
  5779  00DA92  2209               	addwfc	??___ftge+2,f,c
  5780  00DA94  0E00               	movlw	0
  5781  00DA96  2407               	addwf	??___ftge,w,c
  5782  00DA98  6E04               	movwf	___ftge@ff2,c
  5783  00DA9A  0E00               	movlw	0
  5784  00DA9C  2008               	addwfc	??___ftge+1,w,c
  5785  00DA9E  6E05               	movwf	___ftge@ff2+1,c
  5786  00DAA0  0E80               	movlw	128
  5787  00DAA2  2009               	addwfc	??___ftge+2,w,c
  5788  00DAA4  6E06               	movwf	___ftge@ff2+2,c
  5789  00DAA6                     l3557:
  5790  00DAA6  0E00               	movlw	0
  5791  00DAA8  1A01               	xorwf	___ftge@ff1,f,c
  5792  00DAAA  0E00               	movlw	0
  5793  00DAAC  1A02               	xorwf	___ftge@ff1+1,f,c
  5794  00DAAE  0E80               	movlw	128
  5795  00DAB0  1A03               	xorwf	___ftge@ff1+2,f,c
  5796  00DAB2  0E00               	movlw	0
  5797  00DAB4  1A04               	xorwf	___ftge@ff2,f,c
  5798  00DAB6  0E00               	movlw	0
  5799  00DAB8  1A05               	xorwf	___ftge@ff2+1,f,c
  5800  00DABA  0E80               	movlw	128
  5801  00DABC  1A06               	xorwf	___ftge@ff2+2,f,c
  5802  00DABE  5004               	movf	___ftge@ff2,w,c
  5803  00DAC0  5C01               	subwf	___ftge@ff1,w,c
  5804  00DAC2  5005               	movf	___ftge@ff2+1,w,c
  5805  00DAC4  5802               	subwfb	___ftge@ff1+1,w,c
  5806  00DAC6  5006               	movf	___ftge@ff2+2,w,c
  5807  00DAC8  5803               	subwfb	___ftge@ff1+2,w,c
  5808  00DACA  B0D8               	btfsc	status,0,c
  5809  00DACC  D002               	goto	l3563
  5810  00DACE  90D8               	bcf	status,0,c
  5811  00DAD0  0012               	return	
  5812  00DAD2                     l3563:
  5813  00DAD2  80D8               	bsf	status,0,c
  5814  00DAD4  0012               	return	
  5815  00DAD6                     __end_of___ftge:
  5816                           	opt stack 0
  5817                           tblptru	equ	0xFF8
  5818                           tblptrh	equ	0xFF7
  5819                           tblptrl	equ	0xFF6
  5820                           tablat	equ	0xFF5
  5821                           prodh	equ	0xFF4
  5822                           prodl	equ	0xFF3
  5823                           postinc0	equ	0xFEE
  5824                           wreg	equ	0xFE8
  5825                           indf2	equ	0xFDF
  5826                           postinc2	equ	0xFDE
  5827                           postdec2	equ	0xFDD
  5828                           fsr2h	equ	0xFDA
  5829                           fsr2l	equ	0xFD9
  5830                           status	equ	0xFD8
  5831                           
  5832 ;; *************** function _machineConfig *****************
  5833 ;; Defined at:
  5834 ;;		line 4 in file "../../src/PIC18F4620/machineConfig.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;		None
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;		None
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5852 ;;Total ram usage:        0 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_main
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text17
  5862  00D670                     __ptext17:
  5863                           	opt stack 0
  5864  00D670                     _machineConfig:
  5865                           	opt stack 30
  5866                           
  5867                           ;machineConfig.c: 15: LATA = 0x00;
  5868                           
  5869                           ;incstack = 0
  5870  00D670  0E00               	movlw	0
  5871  00D672  6E89               	movwf	3977,c	;volatile
  5872                           
  5873                           ;machineConfig.c: 16: LATB = 0x00;
  5874  00D674  0E00               	movlw	0
  5875  00D676  6E8A               	movwf	3978,c	;volatile
  5876                           
  5877                           ;machineConfig.c: 17: LATC = 0x00;
  5878  00D678  0E00               	movlw	0
  5879  00D67A  6E8B               	movwf	3979,c	;volatile
  5880                           
  5881                           ;machineConfig.c: 18: LATD = 0x00;
  5882  00D67C  0E00               	movlw	0
  5883  00D67E  6E8C               	movwf	3980,c	;volatile
  5884                           
  5885                           ;machineConfig.c: 19: LATE = 0x00;
  5886  00D680  0E00               	movlw	0
  5887  00D682  6E8D               	movwf	3981,c	;volatile
  5888                           
  5889                           ;machineConfig.c: 22: TRISA = 0b00000000;
  5890  00D684  0E00               	movlw	0
  5891  00D686  6E92               	movwf	3986,c	;volatile
  5892                           
  5893                           ;machineConfig.c: 23: TRISB = 0b11110010;
  5894  00D688  0EF2               	movlw	242
  5895  00D68A  6E93               	movwf	3987,c	;volatile
  5896                           
  5897                           ;machineConfig.c: 24: TRISC = 0b10000000;
  5898  00D68C  0E80               	movlw	128
  5899  00D68E  6E94               	movwf	3988,c	;volatile
  5900                           
  5901                           ;machineConfig.c: 28: TRISD = 0b00000001;
  5902  00D690  0E01               	movlw	1
  5903  00D692  6E95               	movwf	3989,c	;volatile
  5904                           
  5905                           ;machineConfig.c: 34: TRISE = 0b00000100;
  5906  00D694  0E04               	movlw	4
  5907  00D696  6E96               	movwf	3990,c	;volatile
  5908                           
  5909                           ;machineConfig.c: 40: nRBPU = 1;
  5910  00D698  8EF1               	bsf	intcon2,7,c	;volatile
  5911                           
  5912                           ;machineConfig.c: 43: ADCON0 = 0x00;
  5913  00D69A  0E00               	movlw	0
  5914  00D69C  6EC2               	movwf	4034,c	;volatile
  5915                           
  5916                           ;machineConfig.c: 44: ADCON1 = 0b00001111;
  5917  00D69E  0E0F               	movlw	15
  5918  00D6A0  6EC1               	movwf	4033,c	;volatile
  5919                           
  5920                           ;machineConfig.c: 45: CVRCON = 0x00;
  5921  00D6A2  0E00               	movlw	0
  5922  00D6A4  6EB5               	movwf	4021,c	;volatile
  5923                           
  5924                           ;machineConfig.c: 46: CMCONbits.CIS = 0;
  5925  00D6A6  96B4               	bcf	4020,3,c	;volatile
  5926                           
  5927                           ;machineConfig.c: 47: ADCON2 = 0b10110001;
  5928  00D6A8  0EB1               	movlw	177
  5929  00D6AA  6EC0               	movwf	4032,c	;volatile
  5930                           
  5931                           ;machineConfig.c: 50: INT1IE = 0;
  5932  00D6AC  96F0               	bcf	intcon3,3,c	;volatile
  5933                           
  5934                           ;machineConfig.c: 51: PEIE = 1;
  5935  00D6AE  8CF2               	bsf	intcon,6,c	;volatile
  5936                           
  5937                           ;machineConfig.c: 52: (INTCONbits.GIE = 0);
  5938  00D6B0  9EF2               	bcf	intcon,7,c	;volatile
  5939  00D6B2  0012               	return		;funcret
  5940  00D6B4                     __end_of_machineConfig:
  5941                           	opt stack 0
  5942                           tblptru	equ	0xFF8
  5943                           tblptrh	equ	0xFF7
  5944                           tblptrl	equ	0xFF6
  5945                           tablat	equ	0xFF5
  5946                           prodh	equ	0xFF4
  5947                           prodl	equ	0xFF3
  5948                           intcon	equ	0xFF2
  5949                           intcon2	equ	0xFF1
  5950                           intcon3	equ	0xFF0
  5951                           postinc0	equ	0xFEE
  5952                           wreg	equ	0xFE8
  5953                           indf2	equ	0xFDF
  5954                           postinc2	equ	0xFDE
  5955                           postdec2	equ	0xFDD
  5956                           fsr2h	equ	0xFDA
  5957                           fsr2l	equ	0xFD9
  5958                           status	equ	0xFD8
  5959                           
  5960 ;; *************** function _initSD *****************
  5961 ;; Defined at:
  5962 ;;		line 458 in file "../../src/SD/SD_PIC.c"
  5963 ;; Parameters:    Size  Location     Type
  5964 ;;		None
  5965 ;; Auto vars:     Size  Location     Type
  5966 ;;  tempSize        4   90[COMRAM] unsigned long 
  5967 ;;  tempSize        4   70[COMRAM] unsigned long 
  5968 ;;  arr_response   16   74[COMRAM] unsigned char [16]
  5969 ;;  argument        4   64[COMRAM] unsigned long 
  5970 ;;  i               1   95[COMRAM] unsigned char 
  5971 ;;  response        1   94[COMRAM] unsigned char 
  5972 ;;  last_OSCTUNE    1   69[COMRAM] unsigned char 
  5973 ;;  last_OSCCON     1   68[COMRAM] unsigned char 
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  1    wreg      void 
  5976 ;; Registers used:
  5977 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Locals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5986 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5987 ;;Total ram usage:       39 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    4
  5990 ;; This function calls:
  5991 ;;		_SD_ACMD
  5992 ;;		_SD_Command
  5993 ;;		___ftdiv
  5994 ;;		___ftmul
  5995 ;;		___fttol
  5996 ;;		___lltoft
  5997 ;;		___lwtoft
  5998 ;;		_spiInit
  5999 ;;		_spiReceive
  6000 ;;		_spiSend
  6001 ;; This function is called by:
  6002 ;;		_main
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text18
  6007  00ECBE                     __ptext18:
  6008                           	opt stack 0
  6009  00ECBE                     _initSD:
  6010                           	opt stack 26
  6011                           
  6012                           ;SD_PIC.c: 467: unsigned char last_OSCCON = OSCCON;
  6013                           
  6014                           ;incstack = 0
  6015  00ECBE  CFD3 F045          	movff	4051,initSD@last_OSCCON	;volatile
  6016                           
  6017                           ;SD_PIC.c: 468: unsigned char last_OSCTUNE = OSCTUNE;
  6018  00ECC2  CF9B F046          	movff	3995,initSD@last_OSCTUNE	;volatile
  6019                           
  6020                           ;SD_PIC.c: 469: unsigned char response;
  6021                           ;SD_PIC.c: 470: unsigned char i;
  6022                           ;SD_PIC.c: 471: unsigned char arr_response[16] = {0};
  6023  00ECC6  EE20  F0AE         	lfsr	2,initSD@F3023
  6024  00ECCA  EE10  F04B         	lfsr	1,initSD@arr_response
  6025  00ECCE  0E0F               	movlw	15
  6026  00ECD0                     u3411:
  6027  00ECD0  CFDB FFE3          	movff	plusw2,plusw1
  6028  00ECD4  06E8               	decf	wreg,f,c
  6029  00ECD6  E2FC               	bc	u3411
  6030                           
  6031                           ;SD_PIC.c: 478: OSCTUNEbits.TUN = 0b000000;
  6032  00ECD8  909B               	bcf	3995,0,c	;volatile
  6033  00ECDA  929B               	bcf	3995,1,c	;volatile
  6034  00ECDC  949B               	bcf	3995,2,c	;volatile
  6035  00ECDE  969B               	bcf	3995,3,c	;volatile
  6036  00ECE0  989B               	bcf	3995,4,c	;volatile
  6037                           
  6038                           ;SD_PIC.c: 479: OSCCONbits.IRCF = 0b110;
  6039  00ECE2  50D3               	movf	4051,w,c	;volatile
  6040  00ECE4  0B8F               	andlw	-113
  6041  00ECE6  0960               	iorlw	96
  6042  00ECE8  6ED3               	movwf	4051,c	;volatile
  6043                           
  6044                           ;SD_PIC.c: 480: OSCCONbits.SCS = 0b11;
  6045  00ECEA  0E03               	movlw	3
  6046  00ECEC  12D3               	iorwf	4051,f,c	;volatile
  6047                           
  6048                           ;SD_PIC.c: 481: OSCTUNEbits.PLLEN = 1;
  6049  00ECEE  8C9B               	bsf	3995,6,c	;volatile
  6050                           
  6051                           ;SD_PIC.c: 484: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  6052  00ECF0  D004               	goto	l3711
  6053  00ECF2                     l3709:
  6054  00ECF2  0E42               	movlw	66
  6055  00ECF4                     u4917:
  6056  00ECF4  2EE8               	decfsz	wreg,f,c
  6057  00ECF6  D7FE               	bra	u4917
  6058  00ECF8  D000               	nop2	
  6059  00ECFA                     l3711:
  6060  00ECFA  A4D3               	btfss	4051,2,c	;volatile
  6061  00ECFC  D7FA               	goto	l3709
  6062                           
  6063                           ;SD_PIC.c: 487: spiInit(64);
  6064  00ECFE  0E40               	movlw	64
  6065  00ED00  ECDF  F06A         	call	_spiInit
  6066                           
  6067                           ;SD_PIC.c: 491: _delay((unsigned long)((20)*(40000000/4000.0)));
  6068  00ED04  0E02               	movlw	2
  6069  00ED06  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6070  00ED08  0E04               	movlw	4
  6071  00ED0A  6E3A               	movwf	??_initSD& (0+255),c
  6072  00ED0C  0EBA               	movlw	186
  6073  00ED0E                     u4927:
  6074  00ED0E  2EE8               	decfsz	wreg,f,c
  6075  00ED10  D7FE               	bra	u4927
  6076  00ED12  2E3A               	decfsz	??_initSD& (0+255),f,c
  6077  00ED14  D7FC               	bra	u4927
  6078  00ED16  2E3B               	decfsz	(??_initSD+1)& (0+255),f,c
  6079  00ED18  D7FA               	bra	u4927
  6080  00ED1A  D000               	nop2	
  6081                           
  6082                           ;SD_PIC.c: 494: LATEbits.LATE2 = 1;
  6083  00ED1C  848D               	bsf	3981,2,c	;volatile
  6084                           
  6085                           ;SD_PIC.c: 495: TRISEbits.TRISE2 = 0;
  6086  00ED1E  9496               	bcf	3990,2,c	;volatile
  6087                           
  6088                           ;SD_PIC.c: 498: for(i = 0; i < 10; i++){
  6089  00ED20  0E00               	movlw	0
  6090  00ED22  6E60               	movwf	initSD@i,c
  6091  00ED24                     l3723:
  6092  00ED24  0E09               	movlw	9
  6093  00ED26  6460               	cpfsgt	initSD@i,c
  6094  00ED28  D001               	goto	l3727
  6095  00ED2A  D005               	goto	l351
  6096  00ED2C                     l3727:
  6097                           
  6098                           ;SD_PIC.c: 499: spiSend(0xFF);
  6099  00ED2C  0EFF               	movlw	255
  6100  00ED2E  EC61  F06A         	call	_spiSend
  6101  00ED32  2A60               	incf	initSD@i,f,c
  6102  00ED34  D7F7               	goto	l3723
  6103  00ED36                     l351:
  6104                           
  6105                           ;SD_PIC.c: 500: }
  6106                           ;SD_PIC.c: 502: LATEbits.LATE2 = 0;
  6107  00ED36  948D               	bcf	3981,2,c	;volatile
  6108  00ED38                     l3733:
  6109  00ED38  0E00               	movlw	0
  6110  00ED3A  6E04               	movwf	SD_Command@arg,c
  6111  00ED3C  0E00               	movlw	0
  6112  00ED3E  6E05               	movwf	SD_Command@arg+1,c
  6113  00ED40  0E00               	movlw	0
  6114  00ED42  6E06               	movwf	SD_Command@arg+2,c
  6115  00ED44  0E00               	movlw	0
  6116  00ED46  6E07               	movwf	SD_Command@arg+3,c
  6117  00ED48  0E0A               	movlw	low _CMD0
  6118  00ED4A  6EF6               	movwf	tblptrl,c
  6119  00ED4C                     	if	1	;There is more than 1 active tblptr byte
  6120  00ED4C  0EFF               	movlw	high _CMD0
  6121  00ED4E  6EF7               	movwf	tblptrh,c
  6122  00ED50                     	endif
  6123  00ED50                     	if	0	;There are less than 3 active tblptr bytes
  6124  00ED50                     	endif
  6125  00ED50  0008               	tblrd		*
  6126  00ED52  50F5               	movf	tablat,w,c
  6127  00ED54  ECDB  F06C         	call	_SD_Command
  6128  00ED58  6E3A               	movwf	??_initSD& (0+255),c
  6129  00ED5A  0EF3               	movlw	low _R1_IDLE_STATE
  6130  00ED5C  6EF6               	movwf	tblptrl,c
  6131  00ED5E                     	if	1	;There is more than 1 active tblptr byte
  6132  00ED5E  0EFE               	movlw	high _R1_IDLE_STATE
  6133  00ED60  6EF7               	movwf	tblptrh,c
  6134  00ED62                     	endif
  6135  00ED62                     	if	0	;There are less than 3 active tblptr bytes
  6136  00ED62                     	endif
  6137  00ED62  0008               	tblrd		*
  6138  00ED64  50F5               	movf	tablat,w,c
  6139  00ED66  183A               	xorwf	??_initSD,w,c
  6140  00ED68  A4D8               	btfss	status,2,c
  6141  00ED6A  D7E6               	goto	l3733
  6142  00ED6C                     l3735:
  6143                           
  6144                           ;SD_PIC.c: 516: response = SD_Command(CMD8, 0x01AA);
  6145  00ED6C  0EAA               	movlw	170
  6146  00ED6E  6E04               	movwf	SD_Command@arg,c
  6147  00ED70  0E01               	movlw	1
  6148  00ED72  6E05               	movwf	SD_Command@arg+1,c
  6149  00ED74  0E00               	movlw	0
  6150  00ED76  6E06               	movwf	SD_Command@arg+2,c
  6151  00ED78  0E00               	movlw	0
  6152  00ED7A  6E07               	movwf	SD_Command@arg+3,c
  6153  00ED7C  0E07               	movlw	low _CMD8
  6154  00ED7E  6EF6               	movwf	tblptrl,c
  6155  00ED80                     	if	1	;There is more than 1 active tblptr byte
  6156  00ED80  0EFF               	movlw	high _CMD8
  6157  00ED82  6EF7               	movwf	tblptrh,c
  6158  00ED84                     	endif
  6159  00ED84                     	if	0	;There are less than 3 active tblptr bytes
  6160  00ED84                     	endif
  6161  00ED84  0008               	tblrd		*
  6162  00ED86  50F5               	movf	tablat,w,c
  6163  00ED88  ECDB  F06C         	call	_SD_Command
  6164  00ED8C  6E5F               	movwf	initSD@response,c
  6165                           
  6166                           ;SD_PIC.c: 519: LATEbits.LATE2 = 0;
  6167  00ED8E  948D               	bcf	3981,2,c	;volatile
  6168                           
  6169                           ;SD_PIC.c: 520: for(i = 0; i < 4; i++){ arr_response[i] = spiReceive(); }
  6170  00ED90  0E00               	movlw	0
  6171  00ED92  6E60               	movwf	initSD@i,c
  6172  00ED94                     l3741:
  6173  00ED94  0E03               	movlw	3
  6174  00ED96  6460               	cpfsgt	initSD@i,c
  6175  00ED98  D001               	goto	l3745
  6176  00ED9A  D00D               	goto	l357
  6177  00ED9C                     l3745:
  6178  00ED9C  5060               	movf	initSD@i,w,c
  6179  00ED9E  0D01               	mullw	1
  6180  00EDA0  0E4B               	movlw	low initSD@arr_response
  6181  00EDA2  24F3               	addwf	prodl,w,c
  6182  00EDA4  6ED9               	movwf	fsr2l,c
  6183  00EDA6  0E00               	movlw	high initSD@arr_response
  6184  00EDA8  20F4               	addwfc	prodh,w,c
  6185  00EDAA  6EDA               	movwf	fsr2h,c
  6186  00EDAC  EC5D  F06A         	call	_spiReceive	;wreg free
  6187  00EDB0  6EDF               	movwf	indf2,c
  6188  00EDB2  2A60               	incf	initSD@i,f,c
  6189  00EDB4  D7EF               	goto	l3741
  6190  00EDB6                     l357:
  6191                           
  6192                           ;SD_PIC.c: 521: LATEbits.LATE2 = 1;
  6193  00EDB6  848D               	bsf	3981,2,c	;volatile
  6194                           
  6195                           ;SD_PIC.c: 523: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  6196  00EDB8  0EF2               	movlw	low _R1_ILLEGAL_COMMAND
  6197  00EDBA  6EF6               	movwf	tblptrl,c
  6198  00EDBC                     	if	1	;There is more than 1 active tblptr byte
  6199  00EDBC  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6200  00EDBE  6EF7               	movwf	tblptrh,c
  6201  00EDC0                     	endif
  6202  00EDC0                     	if	0	;There are less than 3 active tblptr bytes
  6203  00EDC0                     	endif
  6204  00EDC0  0008               	tblrd		*
  6205  00EDC2  CFF5 F03A          	movff	tablat,??_initSD
  6206  00EDC6  505F               	movf	initSD@response,w,c
  6207  00EDC8  143A               	andwf	??_initSD,w,c
  6208  00EDCA  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6209  00EDCC  0EF2               	movlw	low _R1_ILLEGAL_COMMAND
  6210  00EDCE  6EF6               	movwf	tblptrl,c
  6211  00EDD0                     	if	1	;There is more than 1 active tblptr byte
  6212  00EDD0  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6213  00EDD2  6EF7               	movwf	tblptrh,c
  6214  00EDD4                     	endif
  6215  00EDD4                     	if	0	;There are less than 3 active tblptr bytes
  6216  00EDD4                     	endif
  6217  00EDD4  0008               	tblrd		*
  6218  00EDD6  50F5               	movf	tablat,w,c
  6219  00EDD8  183B               	xorwf	??_initSD+1,w,c
  6220  00EDDA  A4D8               	btfss	status,2,c
  6221  00EDDC  D02C               	goto	l3777
  6222                           
  6223                           ;SD_PIC.c: 526: SDCard.SDversion = 1;
  6224  00EDDE  0E01               	movlw	1
  6225  00EDE0  0100               	movlb	0	; () banked
  6226  00EDE2  6F80               	movwf	_SDCard& (0+255),b
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;SD_PIC.c: 529: SD_Command(CMD58, 0);
  6230  00EDE4  0E00               	movlw	0
  6231  00EDE6  6E04               	movwf	SD_Command@arg,c
  6232  00EDE8  0E00               	movlw	0
  6233  00EDEA  6E05               	movwf	SD_Command@arg+1,c
  6234  00EDEC  0E00               	movlw	0
  6235  00EDEE  6E06               	movwf	SD_Command@arg+2,c
  6236  00EDF0  0E00               	movlw	0
  6237  00EDF2  6E07               	movwf	SD_Command@arg+3,c
  6238  00EDF4  0EF8               	movlw	low _CMD58
  6239  00EDF6  6EF6               	movwf	tblptrl,c
  6240  00EDF8                     	if	1	;There is more than 1 active tblptr byte
  6241  00EDF8  0EFE               	movlw	high _CMD58
  6242  00EDFA  6EF7               	movwf	tblptrh,c
  6243  00EDFC                     	endif
  6244  00EDFC                     	if	0	;There are less than 3 active tblptr bytes
  6245  00EDFC                     	endif
  6246  00EDFC  0008               	tblrd		*
  6247  00EDFE  50F5               	movf	tablat,w,c
  6248  00EE00  ECDB  F06C         	call	_SD_Command
  6249                           
  6250                           ;SD_PIC.c: 530: LATEbits.LATE2 = 0;
  6251  00EE04  948D               	bcf	3981,2,c	;volatile
  6252                           
  6253                           ;SD_PIC.c: 531: for(i = 0; i < 4; i++){ arr_response[i] = spiReceive(); }
  6254  00EE06  0E00               	movlw	0
  6255  00EE08  6E60               	movwf	initSD@i,c
  6256  00EE0A                     l3761:
  6257  00EE0A  0E03               	movlw	3
  6258  00EE0C  6460               	cpfsgt	initSD@i,c
  6259  00EE0E  D001               	goto	l3765
  6260  00EE10  D00D               	goto	l360
  6261  00EE12                     l3765:
  6262  00EE12  5060               	movf	initSD@i,w,c
  6263  00EE14  0D01               	mullw	1
  6264  00EE16  0E4B               	movlw	low initSD@arr_response
  6265  00EE18  24F3               	addwf	prodl,w,c
  6266  00EE1A  6ED9               	movwf	fsr2l,c
  6267  00EE1C  0E00               	movlw	high initSD@arr_response
  6268  00EE1E  20F4               	addwfc	prodh,w,c
  6269  00EE20  6EDA               	movwf	fsr2h,c
  6270  00EE22  EC5D  F06A         	call	_spiReceive	;wreg free
  6271  00EE26  6EDF               	movwf	indf2,c
  6272  00EE28  2A60               	incf	initSD@i,f,c
  6273  00EE2A  D7EF               	goto	l3761
  6274  00EE2C                     l360:
  6275                           
  6276                           ;SD_PIC.c: 532: LATEbits.LATE2 = 1;
  6277  00EE2C  848D               	bsf	3981,2,c	;volatile
  6278                           
  6279                           ;SD_PIC.c: 534: if(arr_response[2] != 0x01){
  6280  00EE2E  044D               	decf	initSD@arr_response+2,w,c
  6281  00EE30  A4D8               	btfss	status,2,c
  6282  00EE32  0012               	return	
  6283  00EE34  D012               	goto	l3787
  6284  00EE36                     l3777:
  6285                           
  6286                           ;SD_PIC.c: 540: else if(response == R1_IDLE_STATE){
  6287  00EE36  0EF3               	movlw	low _R1_IDLE_STATE
  6288  00EE38  6EF6               	movwf	tblptrl,c
  6289  00EE3A                     	if	1	;There is more than 1 active tblptr byte
  6290  00EE3A  0EFE               	movlw	high _R1_IDLE_STATE
  6291  00EE3C  6EF7               	movwf	tblptrh,c
  6292  00EE3E                     	endif
  6293  00EE3E                     	if	0	;There are less than 3 active tblptr bytes
  6294  00EE3E                     	endif
  6295  00EE3E  0008               	tblrd		*
  6296  00EE40  50F5               	movf	tablat,w,c
  6297  00EE42  625F               	cpfseq	initSD@response,c
  6298  00EE44  D793               	goto	l3735
  6299                           
  6300                           ;SD_PIC.c: 541: if((arr_response[2] == 0x01) && (arr_response[3] == 0xAA)){
  6301  00EE46  044D               	decf	initSD@arr_response+2,w,c
  6302  00EE48  A4D8               	btfss	status,2,c
  6303  00EE4A  0012               	return	
  6304  00EE4C  0EAA               	movlw	170
  6305  00EE4E  184E               	xorwf	initSD@arr_response+3,w,c
  6306  00EE50  A4D8               	btfss	status,2,c
  6307  00EE52  0012               	return	
  6308                           
  6309                           ;SD_PIC.c: 544: SDCard.SDversion = 2;
  6310  00EE54  0E02               	movlw	2
  6311  00EE56  0100               	movlb	0	; () banked
  6312  00EE58  6F80               	movwf	_SDCard& (0+255),b
  6313  00EE5A                     l3787:
  6314                           
  6315                           ;SD_PIC.c: 550: }
  6316                           ;SD_PIC.c: 551: }
  6317                           ;SD_PIC.c: 552: }
  6318                           ;SD_PIC.c: 561: unsigned long argument = (SDCard.SDversion == 1) ? 0 : 0x40000000;
  6319  00EE5A  0100               	movlb	0	; () banked
  6320  00EE5C  0580               	decf	_SDCard& (0+255),w,b
  6321  00EE5E  B4D8               	btfsc	status,2,c
  6322  00EE60  D008               	goto	l3791
  6323                           
  6324                           ; BSR set to: 0
  6325  00EE62  0E00               	movlw	0
  6326  00EE64  6E41               	movwf	initSD@argument,c
  6327  00EE66  0E00               	movlw	0
  6328  00EE68  6E42               	movwf	initSD@argument+1,c
  6329  00EE6A  0E00               	movlw	0
  6330  00EE6C  6E43               	movwf	initSD@argument+2,c
  6331  00EE6E  0E40               	movlw	64
  6332  00EE70  D007               	goto	L7
  6333  00EE72                     l3791:
  6334                           
  6335                           ; BSR set to: 0
  6336  00EE72  0E00               	movlw	0
  6337  00EE74  6E41               	movwf	initSD@argument,c
  6338  00EE76  0E00               	movlw	0
  6339  00EE78  6E42               	movwf	initSD@argument+1,c
  6340  00EE7A  0E00               	movlw	0
  6341  00EE7C  6E43               	movwf	initSD@argument+2,c
  6342  00EE7E  0E00               	movlw	0
  6343  00EE80                     L7:
  6344  00EE80  6E44               	movwf	initSD@argument+3,c
  6345  00EE82                     l3793:
  6346                           
  6347                           ;SD_PIC.c: 564: response = SD_ACMD(ACMD41, argument);
  6348  00EE82  C041  F00D         	movff	initSD@argument,SD_ACMD@arg
  6349  00EE86  C042  F00E         	movff	initSD@argument+1,SD_ACMD@arg+1
  6350  00EE8A  C043  F00F         	movff	initSD@argument+2,SD_ACMD@arg+2
  6351  00EE8E  C044  F010         	movff	initSD@argument+3,SD_ACMD@arg+3
  6352  00EE92  0EF5               	movlw	low _ACMD41
  6353  00EE94  6EF6               	movwf	tblptrl,c
  6354  00EE96                     	if	1	;There is more than 1 active tblptr byte
  6355  00EE96  0EFE               	movlw	high _ACMD41
  6356  00EE98  6EF7               	movwf	tblptrh,c
  6357  00EE9A                     	endif
  6358  00EE9A                     	if	0	;There are less than 3 active tblptr bytes
  6359  00EE9A                     	endif
  6360  00EE9A  0008               	tblrd		*
  6361  00EE9C  50F5               	movf	tablat,w,c
  6362  00EE9E  ECFB  F06A         	call	_SD_ACMD
  6363  00EEA2  6E5F               	movwf	initSD@response,c
  6364                           
  6365                           ;SD_PIC.c: 565: }while((response != R1_READY_STATE) && ((response & R1_ILLEGAL_COMMAND) 
      +                          != R1_ILLEGAL_COMMAND));
  6366  00EEA4  0EF4               	movlw	low _R1_READY_STATE
  6367  00EEA6  6EF6               	movwf	tblptrl,c
  6368  00EEA8                     	if	1	;There is more than 1 active tblptr byte
  6369  00EEA8  0EFE               	movlw	high _R1_READY_STATE
  6370  00EEAA  6EF7               	movwf	tblptrh,c
  6371  00EEAC                     	endif
  6372  00EEAC                     	if	0	;There are less than 3 active tblptr bytes
  6373  00EEAC                     	endif
  6374  00EEAC  0008               	tblrd		*
  6375  00EEAE  50F5               	movf	tablat,w,c
  6376  00EEB0  185F               	xorwf	initSD@response,w,c
  6377  00EEB2  B4D8               	btfsc	status,2,c
  6378  00EEB4  D013               	goto	l3799
  6379  00EEB6  0EF2               	movlw	low _R1_ILLEGAL_COMMAND
  6380  00EEB8  6EF6               	movwf	tblptrl,c
  6381  00EEBA                     	if	1	;There is more than 1 active tblptr byte
  6382  00EEBA  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6383  00EEBC  6EF7               	movwf	tblptrh,c
  6384  00EEBE                     	endif
  6385  00EEBE                     	if	0	;There are less than 3 active tblptr bytes
  6386  00EEBE                     	endif
  6387  00EEBE  0008               	tblrd		*
  6388  00EEC0  CFF5 F03A          	movff	tablat,??_initSD
  6389  00EEC4  505F               	movf	initSD@response,w,c
  6390  00EEC6  143A               	andwf	??_initSD,w,c
  6391  00EEC8  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6392  00EECA  0EF2               	movlw	low _R1_ILLEGAL_COMMAND
  6393  00EECC  6EF6               	movwf	tblptrl,c
  6394  00EECE                     	if	1	;There is more than 1 active tblptr byte
  6395  00EECE  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6396  00EED0  6EF7               	movwf	tblptrh,c
  6397  00EED2                     	endif
  6398  00EED2                     	if	0	;There are less than 3 active tblptr bytes
  6399  00EED2                     	endif
  6400  00EED2  0008               	tblrd		*
  6401  00EED4  50F5               	movf	tablat,w,c
  6402  00EED6  183B               	xorwf	??_initSD+1,w,c
  6403  00EED8  A4D8               	btfss	status,2,c
  6404  00EEDA  D7D3               	goto	l3793
  6405  00EEDC                     l3799:
  6406                           
  6407                           ;SD_PIC.c: 570: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  6408  00EEDC  0EF2               	movlw	low _R1_ILLEGAL_COMMAND
  6409  00EEDE  6EF6               	movwf	tblptrl,c
  6410  00EEE0                     	if	1	;There is more than 1 active tblptr byte
  6411  00EEE0  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6412  00EEE2  6EF7               	movwf	tblptrh,c
  6413  00EEE4                     	endif
  6414  00EEE4                     	if	0	;There are less than 3 active tblptr bytes
  6415  00EEE4                     	endif
  6416  00EEE4  0008               	tblrd		*
  6417  00EEE6  CFF5 F03A          	movff	tablat,??_initSD
  6418  00EEEA  505F               	movf	initSD@response,w,c
  6419  00EEEC  143A               	andwf	??_initSD,w,c
  6420  00EEEE  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6421  00EEF0  0EF2               	movlw	low _R1_ILLEGAL_COMMAND
  6422  00EEF2  6EF6               	movwf	tblptrl,c
  6423  00EEF4                     	if	1	;There is more than 1 active tblptr byte
  6424  00EEF4  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6425  00EEF6  6EF7               	movwf	tblptrh,c
  6426  00EEF8                     	endif
  6427  00EEF8                     	if	0	;There are less than 3 active tblptr bytes
  6428  00EEF8                     	endif
  6429  00EEF8  0008               	tblrd		*
  6430  00EEFA  50F5               	movf	tablat,w,c
  6431  00EEFC  183B               	xorwf	??_initSD+1,w,c
  6432  00EEFE  A4D8               	btfss	status,2,c
  6433  00EF00  D01C               	goto	l3811
  6434                           
  6435                           ;SD_PIC.c: 571: if(SDCard.SDversion == 1){
  6436  00EF02  0100               	movlb	0	; () banked
  6437  00EF04  0580               	decf	_SDCard& (0+255),w,b
  6438  00EF06  A4D8               	btfss	status,2,c
  6439  00EF08  D014               	goto	l3807
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;SD_PIC.c: 573: SDCard.Type = 2;
  6443  00EF0A  0E02               	movlw	2
  6444  00EF0C  0100               	movlb	0	; () banked
  6445  00EF0E  6F81               	movwf	(_SDCard+1)& (0+255),b
  6446                           
  6447                           ; BSR set to: 0
  6448                           ;SD_PIC.c: 574: SD_Command(CMD1, 0);
  6449  00EF10  0E00               	movlw	0
  6450  00EF12  6E04               	movwf	SD_Command@arg,c
  6451  00EF14  0E00               	movlw	0
  6452  00EF16  6E05               	movwf	SD_Command@arg+1,c
  6453  00EF18  0E00               	movlw	0
  6454  00EF1A  6E06               	movwf	SD_Command@arg+2,c
  6455  00EF1C  0E00               	movlw	0
  6456  00EF1E  6E07               	movwf	SD_Command@arg+3,c
  6457  00EF20  0E08               	movlw	low _CMD1
  6458  00EF22  6EF6               	movwf	tblptrl,c
  6459  00EF24                     	if	1	;There is more than 1 active tblptr byte
  6460  00EF24  0EFF               	movlw	high _CMD1
  6461  00EF26  6EF7               	movwf	tblptrh,c
  6462  00EF28                     	endif
  6463  00EF28                     	if	0	;There are less than 3 active tblptr bytes
  6464  00EF28                     	endif
  6465  00EF28  0008               	tblrd		*
  6466  00EF2A  50F5               	movf	tablat,w,c
  6467  00EF2C  ECDB  F06C         	call	_SD_Command
  6468                           
  6469                           ;SD_PIC.c: 575: }
  6470  00EF30  D004               	goto	l3811
  6471  00EF32                     l3807:
  6472                           
  6473                           ;SD_PIC.c: 576: else{
  6474                           ;SD_PIC.c: 578: SDCard.init = 0;
  6475  00EF32  0E00               	movlw	0
  6476  00EF34  0100               	movlb	0	; () banked
  6477  00EF36  6F9B               	movwf	(_SDCard+27)& (0+255),b
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;SD_PIC.c: 579: return;
  6481  00EF38  0012               	return	
  6482  00EF3A                     l3811:
  6483                           
  6484                           ;SD_PIC.c: 580: }
  6485                           ;SD_PIC.c: 581: }
  6486                           ;SD_PIC.c: 583: if(SDCard.Type != 2){
  6487  00EF3A  0E02               	movlw	2
  6488  00EF3C  0100               	movlb	0	; () banked
  6489  00EF3E  1981               	xorwf	(_SDCard+1)& (0+255),w,b
  6490  00EF40  B4D8               	btfsc	status,2,c
  6491  00EF42  D027               	goto	l3831
  6492                           
  6493                           ; BSR set to: 0
  6494                           ;SD_PIC.c: 586: SD_Command(CMD58, 0);
  6495  00EF44  0E00               	movlw	0
  6496  00EF46  6E04               	movwf	SD_Command@arg,c
  6497  00EF48  0E00               	movlw	0
  6498  00EF4A  6E05               	movwf	SD_Command@arg+1,c
  6499  00EF4C  0E00               	movlw	0
  6500  00EF4E  6E06               	movwf	SD_Command@arg+2,c
  6501  00EF50  0E00               	movlw	0
  6502  00EF52  6E07               	movwf	SD_Command@arg+3,c
  6503  00EF54  0EF8               	movlw	low _CMD58
  6504  00EF56  6EF6               	movwf	tblptrl,c
  6505  00EF58                     	if	1	;There is more than 1 active tblptr byte
  6506  00EF58  0EFE               	movlw	high _CMD58
  6507  00EF5A  6EF7               	movwf	tblptrh,c
  6508  00EF5C                     	endif
  6509  00EF5C                     	if	0	;There are less than 3 active tblptr bytes
  6510  00EF5C                     	endif
  6511  00EF5C  0008               	tblrd		*
  6512  00EF5E  50F5               	movf	tablat,w,c
  6513  00EF60  ECDB  F06C         	call	_SD_Command
  6514                           
  6515                           ;SD_PIC.c: 589: LATEbits.LATE2 = 0;
  6516  00EF64  948D               	bcf	3981,2,c	;volatile
  6517                           
  6518                           ;SD_PIC.c: 590: SDCard.Type = (unsigned char)((spiReceive() & 0xC0) == 0xC0);
  6519  00EF66  EC5D  F06A         	call	_spiReceive	;wreg free
  6520  00EF6A  0BC0               	andlw	192
  6521  00EF6C  0AC0               	xorlw	192
  6522  00EF6E  A4D8               	btfss	status,2,c
  6523  00EF70  D002               	goto	u3610
  6524  00EF72  0E01               	movlw	1
  6525  00EF74  D001               	goto	u3620
  6526  00EF76                     u3610:
  6527  00EF76  0E00               	movlw	0
  6528  00EF78                     u3620:
  6529  00EF78  0100               	movlb	0	; () banked
  6530  00EF7A  6F81               	movwf	(_SDCard+1)& (0+255),b
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;SD_PIC.c: 594: for(i = 0; i < 3; i++){ spiReceive(); }
  6534  00EF7C  0E00               	movlw	0
  6535  00EF7E  6E60               	movwf	initSD@i,c
  6536  00EF80                     l3821:
  6537                           
  6538                           ; BSR set to: 0
  6539  00EF80  0E02               	movlw	2
  6540  00EF82  6460               	cpfsgt	initSD@i,c
  6541  00EF84  D001               	goto	l3825
  6542  00EF86  D004               	goto	l382
  6543  00EF88                     l3825:
  6544  00EF88  EC5D  F06A         	call	_spiReceive	;wreg free
  6545  00EF8C  2A60               	incf	initSD@i,f,c
  6546  00EF8E  D7F8               	goto	l3821
  6547  00EF90                     l382:
  6548                           
  6549                           ;SD_PIC.c: 595: LATEbits.LATE2 = 1;
  6550  00EF90  848D               	bsf	3981,2,c	;volatile
  6551  00EF92                     l3831:
  6552  00EF92  0E00               	movlw	0
  6553  00EF94  6E04               	movwf	SD_Command@arg,c
  6554  00EF96  0E02               	movlw	2
  6555  00EF98  6E05               	movwf	SD_Command@arg+1,c
  6556  00EF9A  0E00               	movlw	0
  6557  00EF9C  6E06               	movwf	SD_Command@arg+2,c
  6558  00EF9E  0E00               	movlw	0
  6559  00EFA0  6E07               	movwf	SD_Command@arg+3,c
  6560  00EFA2  0E01               	movlw	low _CMD16
  6561  00EFA4  6EF6               	movwf	tblptrl,c
  6562  00EFA6                     	if	1	;There is more than 1 active tblptr byte
  6563  00EFA6  0EFF               	movlw	high _CMD16
  6564  00EFA8  6EF7               	movwf	tblptrh,c
  6565  00EFAA                     	endif
  6566  00EFAA                     	if	0	;There are less than 3 active tblptr bytes
  6567  00EFAA                     	endif
  6568  00EFAA  0008               	tblrd		*
  6569  00EFAC  50F5               	movf	tablat,w,c
  6570  00EFAE  ECDB  F06C         	call	_SD_Command
  6571  00EFB2  6E3A               	movwf	??_initSD& (0+255),c
  6572  00EFB4  0EF4               	movlw	low _R1_READY_STATE
  6573  00EFB6  6EF6               	movwf	tblptrl,c
  6574  00EFB8                     	if	1	;There is more than 1 active tblptr byte
  6575  00EFB8  0EFE               	movlw	high _R1_READY_STATE
  6576  00EFBA  6EF7               	movwf	tblptrh,c
  6577  00EFBC                     	endif
  6578  00EFBC                     	if	0	;There are less than 3 active tblptr bytes
  6579  00EFBC                     	endif
  6580  00EFBC  0008               	tblrd		*
  6581  00EFBE  50F5               	movf	tablat,w,c
  6582  00EFC0  183A               	xorwf	??_initSD,w,c
  6583  00EFC2  A4D8               	btfss	status,2,c
  6584  00EFC4  D7E6               	goto	l3831
  6585                           
  6586                           ;SD_PIC.c: 600: SDCard.blockSize = 512;
  6587  00EFC6  0E02               	movlw	2
  6588  00EFC8  0100               	movlb	0	; () banked
  6589  00EFCA  6F93               	movwf	(_SDCard+19)& (0+255),b
  6590  00EFCC  0E00               	movlw	0
  6591  00EFCE  6F92               	movwf	(_SDCard+18)& (0+255),b
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;SD_PIC.c: 603: SD_Command(CMD9, 0);
  6595  00EFD0  0E00               	movlw	0
  6596  00EFD2  6E04               	movwf	SD_Command@arg,c
  6597  00EFD4  0E00               	movlw	0
  6598  00EFD6  6E05               	movwf	SD_Command@arg+1,c
  6599  00EFD8  0E00               	movlw	0
  6600  00EFDA  6E06               	movwf	SD_Command@arg+2,c
  6601  00EFDC  0E00               	movlw	0
  6602  00EFDE  6E07               	movwf	SD_Command@arg+3,c
  6603  00EFE0  0E05               	movlw	low _CMD9
  6604  00EFE2  6EF6               	movwf	tblptrl,c
  6605  00EFE4                     	if	1	;There is more than 1 active tblptr byte
  6606  00EFE4  0EFF               	movlw	high _CMD9
  6607  00EFE6  6EF7               	movwf	tblptrh,c
  6608  00EFE8                     	endif
  6609  00EFE8                     	if	0	;There are less than 3 active tblptr bytes
  6610  00EFE8                     	endif
  6611  00EFE8  0008               	tblrd		*
  6612  00EFEA  50F5               	movf	tablat,w,c
  6613  00EFEC  ECDB  F06C         	call	_SD_Command
  6614                           
  6615                           ;SD_PIC.c: 604: LATEbits.LATE2 = 0;
  6616  00EFF0  948D               	bcf	3981,2,c	;volatile
  6617  00EFF2                     l3839:
  6618  00EFF2  EC5D  F06A         	call	_spiReceive	;wreg free
  6619  00EFF6  6E3A               	movwf	??_initSD& (0+255),c
  6620  00EFF8  0EF1               	movlw	low _START_BLOCK
  6621  00EFFA  6EF6               	movwf	tblptrl,c
  6622  00EFFC                     	if	1	;There is more than 1 active tblptr byte
  6623  00EFFC  0EFE               	movlw	high _START_BLOCK
  6624  00EFFE  6EF7               	movwf	tblptrh,c
  6625  00F000                     	endif
  6626  00F000                     	if	0	;There are less than 3 active tblptr bytes
  6627  00F000                     	endif
  6628  00F000  0008               	tblrd		*
  6629  00F002  50F5               	movf	tablat,w,c
  6630  00F004  183A               	xorwf	??_initSD,w,c
  6631  00F006  A4D8               	btfss	status,2,c
  6632  00F008  D7F4               	goto	l3839
  6633                           
  6634                           ;SD_PIC.c: 606: for(i = 0; i < 16; i++){
  6635  00F00A  0E00               	movlw	0
  6636  00F00C  6E60               	movwf	initSD@i,c
  6637  00F00E                     l3843:
  6638  00F00E  0E0F               	movlw	15
  6639  00F010  6460               	cpfsgt	initSD@i,c
  6640  00F012  D001               	goto	l3847
  6641  00F014  D00D               	goto	l3853
  6642  00F016                     l3847:
  6643                           
  6644                           ;SD_PIC.c: 607: arr_response[i] = spiReceive();
  6645  00F016  5060               	movf	initSD@i,w,c
  6646  00F018  0D01               	mullw	1
  6647  00F01A  0E4B               	movlw	low initSD@arr_response
  6648  00F01C  24F3               	addwf	prodl,w,c
  6649  00F01E  6ED9               	movwf	fsr2l,c
  6650  00F020  0E00               	movlw	high initSD@arr_response
  6651  00F022  20F4               	addwfc	prodh,w,c
  6652  00F024  6EDA               	movwf	fsr2h,c
  6653  00F026  EC5D  F06A         	call	_spiReceive	;wreg free
  6654  00F02A  6EDF               	movwf	indf2,c
  6655  00F02C  2A60               	incf	initSD@i,f,c
  6656  00F02E  D7EF               	goto	l3843
  6657  00F030                     l3853:
  6658                           
  6659                           ;SD_PIC.c: 608: }
  6660                           ;SD_PIC.c: 609: spiReceive();
  6661  00F030  EC5D  F06A         	call	_spiReceive	;wreg free
  6662                           
  6663                           ;SD_PIC.c: 610: spiReceive();
  6664  00F034  EC5D  F06A         	call	_spiReceive	;wreg free
  6665                           
  6666                           ;SD_PIC.c: 611: LATEbits.LATE2 = 1;
  6667  00F038  848D               	bsf	3981,2,c	;volatile
  6668                           
  6669                           ;SD_PIC.c: 613: if(SDCard.SDversion == 2){
  6670  00F03A  0E02               	movlw	2
  6671  00F03C  0100               	movlb	0	; () banked
  6672  00F03E  1980               	xorwf	_SDCard& (0+255),w,b
  6673  00F040  A4D8               	btfss	status,2,c
  6674  00F042  D06C               	goto	l3865
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;SD_PIC.c: 619: unsigned long tempSize = arr_response[9] + 1UL;
  6678  00F044  0E01               	movlw	1
  6679  00F046  2454               	addwf	initSD@arr_response+9,w,c
  6680  00F048  6E47               	movwf	initSD@tempSize,c
  6681  00F04A  6A48               	clrf	initSD@tempSize+1,c
  6682  00F04C  0E00               	movlw	0
  6683  00F04E  2248               	addwfc	initSD@tempSize+1,f,c
  6684  00F050  6A49               	clrf	initSD@tempSize+2,c
  6685  00F052  0E00               	movlw	0
  6686  00F054  2249               	addwfc	initSD@tempSize+2,f,c
  6687  00F056  6A4A               	clrf	initSD@tempSize+3,c
  6688  00F058  0E00               	movlw	0
  6689  00F05A  224A               	addwfc	initSD@tempSize+3,f,c
  6690                           
  6691                           ;SD_PIC.c: 620: tempSize |= (unsigned long)(arr_response[8] << 8);
  6692  00F05C  5053               	movf	initSD@arr_response+8,w,c
  6693  00F05E  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6694  00F060  6A3A               	clrf	??_initSD& (0+255),c
  6695  00F062  C03A  F03C         	movff	??_initSD,??_initSD+2
  6696  00F066  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6697  00F06A  0E00               	movlw	0
  6698  00F06C  BE3D               	btfsc	(??_initSD+3)& (0+255),7,c
  6699  00F06E  0EFF               	movlw	255
  6700  00F070  6E3E               	movwf	(??_initSD+4)& (0+255),c
  6701  00F072  6E3F               	movwf	(??_initSD+5)& (0+255),c
  6702  00F074  503C               	movf	??_initSD+2,w,c
  6703  00F076  1247               	iorwf	initSD@tempSize,f,c
  6704  00F078  503D               	movf	??_initSD+3,w,c
  6705  00F07A  1248               	iorwf	initSD@tempSize+1,f,c
  6706  00F07C  503E               	movf	??_initSD+4,w,c
  6707  00F07E  1249               	iorwf	initSD@tempSize+2,f,c
  6708  00F080  503F               	movf	??_initSD+5,w,c
  6709  00F082  124A               	iorwf	initSD@tempSize+3,f,c
  6710                           
  6711                           ;SD_PIC.c: 621: tempSize |= (unsigned long)(arr_response[7] & 0x3F) << 16;
  6712  00F084  C052  F03A         	movff	initSD@arr_response+7,??_initSD
  6713  00F088  0E3F               	movlw	63
  6714  00F08A  163A               	andwf	??_initSD,f,c
  6715  00F08C  C03A  F03B         	movff	??_initSD,??_initSD+1
  6716  00F090  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6717  00F092  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6718  00F094  6A3E               	clrf	(??_initSD+4)& (0+255),c
  6719  00F096  C03C  F03E         	movff	??_initSD+2,??_initSD+4
  6720  00F09A  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6721  00F09E  6A3C               	clrf	??_initSD+2,c
  6722  00F0A0  6A3B               	clrf	??_initSD+1,c
  6723  00F0A2  503B               	movf	??_initSD+1,w,c
  6724  00F0A4  1247               	iorwf	initSD@tempSize,f,c
  6725  00F0A6  503C               	movf	??_initSD+2,w,c
  6726  00F0A8  1248               	iorwf	initSD@tempSize+1,f,c
  6727  00F0AA  503D               	movf	??_initSD+3,w,c
  6728  00F0AC  1249               	iorwf	initSD@tempSize+2,f,c
  6729  00F0AE  503E               	movf	??_initSD+4,w,c
  6730  00F0B0  124A               	iorwf	initSD@tempSize+3,f,c
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;SD_PIC.c: 622: SDCard.size = tempSize * 0.524288;
  6734  00F0B2  C047  F009         	movff	initSD@tempSize,___lltoft@c
  6735  00F0B6  C048  F00A         	movff	initSD@tempSize+1,___lltoft@c+1
  6736  00F0BA  C049  F00B         	movff	initSD@tempSize+2,___lltoft@c+2
  6737  00F0BE  C04A  F00C         	movff	initSD@tempSize+3,___lltoft@c+3
  6738  00F0C2  EC80  F06B         	call	___lltoft	;wreg free
  6739  00F0C6  C009  F015         	movff	?___lltoft,___ftmul@f1
  6740  00F0CA  C00A  F016         	movff	?___lltoft+1,___ftmul@f1+1
  6741  00F0CE  C00B  F017         	movff	?___lltoft+2,___ftmul@f1+2
  6742  00F0D2  0E38               	movlw	56
  6743  00F0D4  6E18               	movwf	___ftmul@f2,c
  6744  00F0D6  0E06               	movlw	6
  6745  00F0D8  6E19               	movwf	___ftmul@f2+1,c
  6746  00F0DA  0E3F               	movlw	63
  6747  00F0DC  6E1A               	movwf	___ftmul@f2+2,c
  6748  00F0DE  EC35  F06E         	call	___ftmul	;wreg free
  6749  00F0E2  C015  F098         	movff	?___ftmul,_SDCard+24
  6750  00F0E6  C016  F099         	movff	?___ftmul+1,_SDCard+25
  6751  00F0EA  C017  F09A         	movff	?___ftmul+2,_SDCard+26
  6752                           
  6753                           ;SD_PIC.c: 623: SDCard.numBlocks = (unsigned long)(SDCard.size * 2048);
  6754  00F0EE  0E00               	movlw	0
  6755  00F0F0  6E18               	movwf	___ftmul@f2,c
  6756  00F0F2  0E00               	movlw	0
  6757  00F0F4  6E19               	movwf	___ftmul@f2+1,c
  6758  00F0F6  0E45               	movlw	69
  6759  00F0F8  6E1A               	movwf	___ftmul@f2+2,c
  6760  00F0FA  C098  F015         	movff	_SDCard+24,___ftmul@f1
  6761  00F0FE  C099  F016         	movff	_SDCard+25,___ftmul@f1+1
  6762  00F102  C09A  F017         	movff	_SDCard+26,___ftmul@f1+2
  6763  00F106  EC35  F06E         	call	___ftmul	;wreg free
  6764  00F10A  C015  F02B         	movff	?___ftmul,___fttol@f1
  6765  00F10E  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  6766  00F112  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  6767  00F116  ECAF  F06E         	call	___fttol	;wreg free
  6768  00F11A  D0BE               	goto	L8
  6769  00F11C                     l3865:
  6770                           
  6771                           ;SD_PIC.c: 625: else{
  6772                           ;SD_PIC.c: 633: unsigned long tempSize = (unsigned long)(arr_response[6] & 0x03) << 4;
  6773  00F11C  C051  F03A         	movff	initSD@arr_response+6,??_initSD
  6774  00F120  0E03               	movlw	3
  6775  00F122  163A               	andwf	??_initSD,f,c
  6776  00F124  C03A  F03B         	movff	??_initSD,??_initSD+1
  6777  00F128  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6778  00F12A  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6779  00F12C  6A3E               	clrf	(??_initSD+4)& (0+255),c
  6780  00F12E  0E04               	movlw	4
  6781  00F130                     u3705:
  6782  00F130  90D8               	bcf	status,0,c
  6783  00F132  363B               	rlcf	??_initSD+1,f,c
  6784  00F134  363C               	rlcf	??_initSD+2,f,c
  6785  00F136  363D               	rlcf	??_initSD+3,f,c
  6786  00F138  363E               	rlcf	??_initSD+4,f,c
  6787  00F13A  2EE8               	decfsz	wreg,f,c
  6788  00F13C  D7F9               	goto	u3705
  6789  00F13E  C03B  F05B         	movff	??_initSD+1,initSD@tempSize_560
  6790  00F142  C03C  F05C         	movff	??_initSD+2,initSD@tempSize_560+1
  6791  00F146  C03D  F05D         	movff	??_initSD+3,initSD@tempSize_560+2
  6792  00F14A  C03E  F05E         	movff	??_initSD+4,initSD@tempSize_560+3
  6793                           
  6794                           ;SD_PIC.c: 634: tempSize |= (unsigned long)(arr_response[7] << 2);
  6795  00F14E  5052               	movf	initSD@arr_response+7,w,c
  6796  00F150  6E3A               	movwf	??_initSD& (0+255),c
  6797  00F152  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6798  00F154  90D8               	bcf	status,0,c
  6799  00F156  363A               	rlcf	??_initSD,f,c
  6800  00F158  363B               	rlcf	??_initSD+1,f,c
  6801  00F15A  90D8               	bcf	status,0,c
  6802  00F15C  363A               	rlcf	??_initSD,f,c
  6803  00F15E  363B               	rlcf	??_initSD+1,f,c
  6804  00F160  C03A  F03C         	movff	??_initSD,??_initSD+2
  6805  00F164  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6806  00F168  0E00               	movlw	0
  6807  00F16A  BE3D               	btfsc	(??_initSD+3)& (0+255),7,c
  6808  00F16C  0EFF               	movlw	255
  6809  00F16E  6E3E               	movwf	(??_initSD+4)& (0+255),c
  6810  00F170  6E3F               	movwf	(??_initSD+5)& (0+255),c
  6811  00F172  503C               	movf	??_initSD+2,w,c
  6812  00F174  125B               	iorwf	initSD@tempSize_560,f,c
  6813  00F176  503D               	movf	??_initSD+3,w,c
  6814  00F178  125C               	iorwf	initSD@tempSize_560+1,f,c
  6815  00F17A  503E               	movf	??_initSD+4,w,c
  6816  00F17C  125D               	iorwf	initSD@tempSize_560+2,f,c
  6817  00F17E  503F               	movf	??_initSD+5,w,c
  6818  00F180  125E               	iorwf	initSD@tempSize_560+3,f,c
  6819                           
  6820                           ;SD_PIC.c: 635: tempSize |= (unsigned long)((arr_response[8] & 0xC0) >> 2) + 1;
  6821  00F182  C053  F03A         	movff	initSD@arr_response+8,??_initSD
  6822  00F186  90D8               	bcf	status,0,c
  6823  00F188  323A               	rrcf	??_initSD,f,c
  6824  00F18A  90D8               	bcf	status,0,c
  6825  00F18C  323A               	rrcf	??_initSD,f,c
  6826  00F18E  0E30               	movlw	48
  6827  00F190  163A               	andwf	??_initSD,f,c
  6828  00F192  0E01               	movlw	1
  6829  00F194  243A               	addwf	??_initSD,w,c
  6830  00F196  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6831  00F198  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6832  00F19A  0E00               	movlw	0
  6833  00F19C  223C               	addwfc	(??_initSD+2)& (0+255),f,c
  6834  00F19E  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6835  00F1A0  0E00               	movlw	0
  6836  00F1A2  223D               	addwfc	(??_initSD+3)& (0+255),f,c
  6837  00F1A4  6A3E               	clrf	(??_initSD+4)& (0+255),c
  6838  00F1A6  0E00               	movlw	0
  6839  00F1A8  223E               	addwfc	(??_initSD+4)& (0+255),f,c
  6840  00F1AA  503B               	movf	??_initSD+1,w,c
  6841  00F1AC  125B               	iorwf	initSD@tempSize_560,f,c
  6842  00F1AE  503C               	movf	??_initSD+2,w,c
  6843  00F1B0  125C               	iorwf	initSD@tempSize_560+1,f,c
  6844  00F1B2  503D               	movf	??_initSD+3,w,c
  6845  00F1B4  125D               	iorwf	initSD@tempSize_560+2,f,c
  6846  00F1B6  503E               	movf	??_initSD+4,w,c
  6847  00F1B8  125E               	iorwf	initSD@tempSize_560+3,f,c
  6848                           
  6849                           ;SD_PIC.c: 636: tempSize = tempSize << (((unsigned long) ((arr_response[9] & 0x03) << 1)
      +                           | (unsigned long)((arr_response[10] & 0x80) >> 7)) + 2);
  6850  00F1BA  C054  F03A         	movff	initSD@arr_response+9,??_initSD
  6851  00F1BE  0E03               	movlw	3
  6852  00F1C0  163A               	andwf	??_initSD,f,c
  6853  00F1C2  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6854  00F1C4  AE55               	btfss	initSD@arr_response+10,7,c
  6855  00F1C6  D001               	bra	u3715
  6856  00F1C8  2A3B               	incf	(??_initSD+1)& (0+255),f,c
  6857  00F1CA                     u3715:
  6858  00F1CA  303B               	rrcf	??_initSD+1,w,c
  6859  00F1CC  343A               	rlcf	??_initSD,w,c
  6860  00F1CE  6E3C               	movwf	(??_initSD+2)& (0+255),c
  6861  00F1D0  0E02               	movlw	2
  6862  00F1D2  263C               	addwf	??_initSD+2,f,c
  6863  00F1D4  C05B  F03D         	movff	initSD@tempSize_560,??_initSD+3
  6864  00F1D8  C05C  F03E         	movff	initSD@tempSize_560+1,??_initSD+4
  6865  00F1DC  C05D  F03F         	movff	initSD@tempSize_560+2,??_initSD+5
  6866  00F1E0  C05E  F040         	movff	initSD@tempSize_560+3,??_initSD+6
  6867  00F1E4  2A3C               	incf	??_initSD+2,f,c
  6868  00F1E6  D005               	goto	u3720
  6869  00F1E8                     u3725:
  6870  00F1E8  90D8               	bcf	status,0,c
  6871  00F1EA  363D               	rlcf	??_initSD+3,f,c
  6872  00F1EC  363E               	rlcf	??_initSD+4,f,c
  6873  00F1EE  363F               	rlcf	??_initSD+5,f,c
  6874  00F1F0  3640               	rlcf	??_initSD+6,f,c
  6875  00F1F2                     u3720:
  6876  00F1F2  2E3C               	decfsz	??_initSD+2,f,c
  6877  00F1F4  D7F9               	goto	u3725
  6878  00F1F6  C03D  F05B         	movff	??_initSD+3,initSD@tempSize_560
  6879  00F1FA  C03E  F05C         	movff	??_initSD+4,initSD@tempSize_560+1
  6880  00F1FE  C03F  F05D         	movff	??_initSD+5,initSD@tempSize_560+2
  6881  00F202  C040  F05E         	movff	??_initSD+6,initSD@tempSize_560+3
  6882                           
  6883                           ;SD_PIC.c: 639: tempSize = tempSize << ((unsigned long) (arr_response[5] & 0x0F));
  6884  00F206  C050  F03A         	movff	initSD@arr_response+5,??_initSD
  6885  00F20A  0E0F               	movlw	15
  6886  00F20C  163A               	andwf	??_initSD,f,c
  6887  00F20E  C05B  F03B         	movff	initSD@tempSize_560,??_initSD+1
  6888  00F212  C05C  F03C         	movff	initSD@tempSize_560+1,??_initSD+2
  6889  00F216  C05D  F03D         	movff	initSD@tempSize_560+2,??_initSD+3
  6890  00F21A  C05E  F03E         	movff	initSD@tempSize_560+3,??_initSD+4
  6891  00F21E  2A3A               	incf	??_initSD,f,c
  6892  00F220  D005               	goto	u3730
  6893  00F222                     u3735:
  6894  00F222  90D8               	bcf	status,0,c
  6895  00F224  363B               	rlcf	??_initSD+1,f,c
  6896  00F226  363C               	rlcf	??_initSD+2,f,c
  6897  00F228  363D               	rlcf	??_initSD+3,f,c
  6898  00F22A  363E               	rlcf	??_initSD+4,f,c
  6899  00F22C                     u3730:
  6900  00F22C  2E3A               	decfsz	??_initSD,f,c
  6901  00F22E  D7F9               	goto	u3735
  6902  00F230  C03B  F05B         	movff	??_initSD+1,initSD@tempSize_560
  6903  00F234  C03C  F05C         	movff	??_initSD+2,initSD@tempSize_560+1
  6904  00F238  C03D  F05D         	movff	??_initSD+3,initSD@tempSize_560+2
  6905  00F23C  C03E  F05E         	movff	??_initSD+4,initSD@tempSize_560+3
  6906                           
  6907                           ;SD_PIC.c: 641: SDCard.size = (unsigned long)tempSize;
  6908  00F240  C05B  F009         	movff	initSD@tempSize_560,___lltoft@c
  6909  00F244  C05C  F00A         	movff	initSD@tempSize_560+1,___lltoft@c+1
  6910  00F248  C05D  F00B         	movff	initSD@tempSize_560+2,___lltoft@c+2
  6911  00F24C  C05E  F00C         	movff	initSD@tempSize_560+3,___lltoft@c+3
  6912  00F250  EC80  F06B         	call	___lltoft	;wreg free
  6913  00F254  C009  F098         	movff	?___lltoft,_SDCard+24
  6914  00F258  C00A  F099         	movff	?___lltoft+1,_SDCard+25
  6915  00F25C  C00B  F09A         	movff	?___lltoft+2,_SDCard+26
  6916                           
  6917                           ;SD_PIC.c: 642: SDCard.numBlocks = (unsigned long)(SDCard.size/SDCard.blockSize);
  6918  00F260  C092  F009         	movff	_SDCard+18,___lwtoft@c
  6919  00F264  C093  F00A         	movff	_SDCard+19,___lwtoft@c+1
  6920  00F268  ECA8  F06A         	call	___lwtoft	;wreg free
  6921  00F26C  C009  F00F         	movff	?___lwtoft,___ftdiv@f2
  6922  00F270  C00A  F010         	movff	?___lwtoft+1,___ftdiv@f2+1
  6923  00F274  C00B  F011         	movff	?___lwtoft+2,___ftdiv@f2+2
  6924  00F278  C098  F00C         	movff	_SDCard+24,___ftdiv@f1
  6925  00F27C  C099  F00D         	movff	_SDCard+25,___ftdiv@f1+1
  6926  00F280  C09A  F00E         	movff	_SDCard+26,___ftdiv@f1+2
  6927  00F284  ECC2  F06D         	call	___ftdiv	;wreg free
  6928  00F288  C00C  F02B         	movff	?___ftdiv,___fttol@f1
  6929  00F28C  C00D  F02C         	movff	?___ftdiv+1,___fttol@f1+1
  6930  00F290  C00E  F02D         	movff	?___ftdiv+2,___fttol@f1+2
  6931  00F294  ECAF  F06E         	call	___fttol	;wreg free
  6932  00F298                     L8:
  6933  00F298  C02B  F094         	movff	?___fttol,_SDCard+20
  6934  00F29C  C02C  F095         	movff	?___fttol+1,_SDCard+21
  6935  00F2A0  C02D  F096         	movff	?___fttol+2,_SDCard+22
  6936  00F2A4  C02E  F097         	movff	?___fttol+3,_SDCard+23
  6937                           
  6938                           ;SD_PIC.c: 643: }
  6939                           ;SD_PIC.c: 646: SD_Command(CMD10, 0);
  6940  00F2A8  0E00               	movlw	0
  6941  00F2AA  6E04               	movwf	SD_Command@arg,c
  6942  00F2AC  0E00               	movlw	0
  6943  00F2AE  6E05               	movwf	SD_Command@arg+1,c
  6944  00F2B0  0E00               	movlw	0
  6945  00F2B2  6E06               	movwf	SD_Command@arg+2,c
  6946  00F2B4  0E00               	movlw	0
  6947  00F2B6  6E07               	movwf	SD_Command@arg+3,c
  6948  00F2B8  0E04               	movlw	low _CMD10
  6949  00F2BA  6EF6               	movwf	tblptrl,c
  6950  00F2BC                     	if	1	;There is more than 1 active tblptr byte
  6951  00F2BC  0EFF               	movlw	high _CMD10
  6952  00F2BE  6EF7               	movwf	tblptrh,c
  6953  00F2C0                     	endif
  6954  00F2C0                     	if	0	;There are less than 3 active tblptr bytes
  6955  00F2C0                     	endif
  6956  00F2C0  0008               	tblrd		*
  6957  00F2C2  50F5               	movf	tablat,w,c
  6958  00F2C4  ECDB  F06C         	call	_SD_Command
  6959                           
  6960                           ;SD_PIC.c: 648: LATEbits.LATE2 = 0;
  6961  00F2C8  948D               	bcf	3981,2,c	;volatile
  6962  00F2CA                     l3875:
  6963                           
  6964                           ;SD_PIC.c: 652: response = spiReceive();
  6965  00F2CA  EC5D  F06A         	call	_spiReceive	;wreg free
  6966  00F2CE  6E5F               	movwf	initSD@response,c
  6967                           
  6968                           ;SD_PIC.c: 653: }while(response != START_BLOCK);
  6969  00F2D0  0EF1               	movlw	low _START_BLOCK
  6970  00F2D2  6EF6               	movwf	tblptrl,c
  6971  00F2D4                     	if	1	;There is more than 1 active tblptr byte
  6972  00F2D4  0EFE               	movlw	high _START_BLOCK
  6973  00F2D6  6EF7               	movwf	tblptrh,c
  6974  00F2D8                     	endif
  6975  00F2D8                     	if	0	;There are less than 3 active tblptr bytes
  6976  00F2D8                     	endif
  6977  00F2D8  0008               	tblrd		*
  6978  00F2DA  50F5               	movf	tablat,w,c
  6979  00F2DC  625F               	cpfseq	initSD@response,c
  6980  00F2DE  D7F5               	goto	l3875
  6981                           
  6982                           ;SD_PIC.c: 655: for(i = 0; i < 16; i++){
  6983  00F2E0  0E00               	movlw	0
  6984  00F2E2  6E60               	movwf	initSD@i,c
  6985  00F2E4                     l3881:
  6986  00F2E4  0E0F               	movlw	15
  6987  00F2E6  6460               	cpfsgt	initSD@i,c
  6988  00F2E8  D001               	goto	l3885
  6989  00F2EA  D00D               	goto	l3891
  6990  00F2EC                     l3885:
  6991                           
  6992                           ;SD_PIC.c: 656: arr_response[i] = spiReceive();
  6993  00F2EC  5060               	movf	initSD@i,w,c
  6994  00F2EE  0D01               	mullw	1
  6995  00F2F0  0E4B               	movlw	low initSD@arr_response
  6996  00F2F2  24F3               	addwf	prodl,w,c
  6997  00F2F4  6ED9               	movwf	fsr2l,c
  6998  00F2F6  0E00               	movlw	high initSD@arr_response
  6999  00F2F8  20F4               	addwfc	prodh,w,c
  7000  00F2FA  6EDA               	movwf	fsr2h,c
  7001  00F2FC  EC5D  F06A         	call	_spiReceive	;wreg free
  7002  00F300  6EDF               	movwf	indf2,c
  7003  00F302  2A60               	incf	initSD@i,f,c
  7004  00F304  D7EF               	goto	l3881
  7005  00F306                     l3891:
  7006                           
  7007                           ;SD_PIC.c: 657: }
  7008                           ;SD_PIC.c: 658: spiReceive();
  7009  00F306  EC5D  F06A         	call	_spiReceive	;wreg free
  7010                           
  7011                           ;SD_PIC.c: 659: spiReceive();
  7012  00F30A  EC5D  F06A         	call	_spiReceive	;wreg free
  7013                           
  7014                           ;SD_PIC.c: 660: LATEbits.LATE2 = 1;
  7015  00F30E  848D               	bsf	3981,2,c	;volatile
  7016                           
  7017                           ;SD_PIC.c: 662: SDCard.MID = arr_response[0];
  7018  00F310  C04B  F082         	movff	initSD@arr_response,_SDCard+2
  7019                           
  7020                           ;SD_PIC.c: 663: SDCard.OID = (unsigned short)(arr_response[1] << 8U) | arr_response[2];
  7021  00F314  504C               	movf	initSD@arr_response+1,w,c
  7022  00F316  6E3A               	movwf	??_initSD& (0+255),c
  7023  00F318  504D               	movf	initSD@arr_response+2,w,c
  7024  00F31A  0100               	movlb	0	; () banked
  7025  00F31C  6F83               	movwf	(_SDCard+3)& (0+255),b
  7026  00F31E  C03A  F084         	movff	??_initSD,_SDCard+4
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;SD_PIC.c: 664: SDCard.PHMH = arr_response[3];
  7030  00F322  C04E  F089         	movff	initSD@arr_response+3,_SDCard+9
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;SD_PIC.c: 668: SDCard.PHML = (unsigned long)arr_response[4] << 24U;
  7034  00F326  C04F  F03A         	movff	initSD@arr_response+4,??_initSD
  7035  00F32A  6A3B               	clrf	(??_initSD+1)& (0+255),c
  7036  00F32C  6A3C               	clrf	(??_initSD+2)& (0+255),c
  7037  00F32E  6A3D               	clrf	(??_initSD+3)& (0+255),c
  7038  00F330  C03A  F03D         	movff	??_initSD,??_initSD+3
  7039  00F334  6A3C               	clrf	??_initSD+2,c
  7040  00F336  6A3B               	clrf	??_initSD+1,c
  7041  00F338  6A3A               	clrf	??_initSD,c
  7042  00F33A  C03A  F085         	movff	??_initSD,_SDCard+5
  7043  00F33E  C03B  F086         	movff	??_initSD+1,_SDCard+6
  7044  00F342  C03C  F087         	movff	??_initSD+2,_SDCard+7
  7045  00F346  C03D  F088         	movff	??_initSD+3,_SDCard+8
  7046                           
  7047                           ; BSR set to: 0
  7048                           ;SD_PIC.c: 669: SDCard.PHML |= (unsigned long)arr_response[5] << 16U;
  7049  00F34A  C050  F03A         	movff	initSD@arr_response+5,??_initSD
  7050  00F34E  6A3B               	clrf	(??_initSD+1)& (0+255),c
  7051  00F350  6A3C               	clrf	(??_initSD+2)& (0+255),c
  7052  00F352  6A3D               	clrf	(??_initSD+3)& (0+255),c
  7053  00F354  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  7054  00F358  C03A  F03C         	movff	??_initSD,??_initSD+2
  7055  00F35C  6A3B               	clrf	??_initSD+1,c
  7056  00F35E  6A3A               	clrf	??_initSD,c
  7057  00F360  503A               	movf	??_initSD,w,c
  7058  00F362  0100               	movlb	0	; () banked
  7059  00F364  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  7060  00F366  503B               	movf	??_initSD+1,w,c
  7061  00F368  0100               	movlb	0	; () banked
  7062  00F36A  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  7063  00F36C  503C               	movf	??_initSD+2,w,c
  7064  00F36E  0100               	movlb	0	; () banked
  7065  00F370  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  7066  00F372  503D               	movf	??_initSD+3,w,c
  7067  00F374  0100               	movlb	0	; () banked
  7068  00F376  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;SD_PIC.c: 670: SDCard.PHML |= (unsigned long)arr_response[6] << 8U;
  7072  00F378  C051  F03A         	movff	initSD@arr_response+6,??_initSD
  7073  00F37C  6A3B               	clrf	(??_initSD+1)& (0+255),c
  7074  00F37E  6A3C               	clrf	(??_initSD+2)& (0+255),c
  7075  00F380  6A3D               	clrf	(??_initSD+3)& (0+255),c
  7076  00F382  C03C  F03D         	movff	??_initSD+2,??_initSD+3
  7077  00F386  C03B  F03C         	movff	??_initSD+1,??_initSD+2
  7078  00F38A  C03A  F03B         	movff	??_initSD,??_initSD+1
  7079  00F38E  6A3A               	clrf	??_initSD,c
  7080  00F390  503A               	movf	??_initSD,w,c
  7081  00F392  0100               	movlb	0	; () banked
  7082  00F394  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  7083  00F396  503B               	movf	??_initSD+1,w,c
  7084  00F398  0100               	movlb	0	; () banked
  7085  00F39A  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  7086  00F39C  503C               	movf	??_initSD+2,w,c
  7087  00F39E  0100               	movlb	0	; () banked
  7088  00F3A0  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  7089  00F3A2  503D               	movf	??_initSD+3,w,c
  7090  00F3A4  0100               	movlb	0	; () banked
  7091  00F3A6  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;SD_PIC.c: 671: SDCard.PHML |= (unsigned long)arr_response[7];
  7095  00F3A8  5052               	movf	initSD@arr_response+7,w,c
  7096  00F3AA  0100               	movlb	0	; () banked
  7097  00F3AC  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;SD_PIC.c: 673: SDCard.PRV = arr_response[8];
  7101  00F3AE  C053  F08A         	movff	initSD@arr_response+8,_SDCard+10
  7102                           
  7103                           ; BSR set to: 0
  7104                           ;SD_PIC.c: 677: SDCard.PSN = (unsigned long)arr_response[9] << 24U;
  7105  00F3B2  C054  F03A         	movff	initSD@arr_response+9,??_initSD
  7106  00F3B6  6A3B               	clrf	(??_initSD+1)& (0+255),c
  7107  00F3B8  6A3C               	clrf	(??_initSD+2)& (0+255),c
  7108  00F3BA  6A3D               	clrf	(??_initSD+3)& (0+255),c
  7109  00F3BC  C03A  F03D         	movff	??_initSD,??_initSD+3
  7110  00F3C0  6A3C               	clrf	??_initSD+2,c
  7111  00F3C2  6A3B               	clrf	??_initSD+1,c
  7112  00F3C4  6A3A               	clrf	??_initSD,c
  7113  00F3C6  C03A  F08B         	movff	??_initSD,_SDCard+11
  7114  00F3CA  C03B  F08C         	movff	??_initSD+1,_SDCard+12
  7115  00F3CE  C03C  F08D         	movff	??_initSD+2,_SDCard+13
  7116  00F3D2  C03D  F08E         	movff	??_initSD+3,_SDCard+14
  7117                           
  7118                           ; BSR set to: 0
  7119                           ;SD_PIC.c: 678: SDCard.PSN |= (unsigned long)arr_response[10] << 16U;
  7120  00F3D6  C055  F03A         	movff	initSD@arr_response+10,??_initSD
  7121  00F3DA  6A3B               	clrf	(??_initSD+1)& (0+255),c
  7122  00F3DC  6A3C               	clrf	(??_initSD+2)& (0+255),c
  7123  00F3DE  6A3D               	clrf	(??_initSD+3)& (0+255),c
  7124  00F3E0  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  7125  00F3E4  C03A  F03C         	movff	??_initSD,??_initSD+2
  7126  00F3E8  6A3B               	clrf	??_initSD+1,c
  7127  00F3EA  6A3A               	clrf	??_initSD,c
  7128  00F3EC  503A               	movf	??_initSD,w,c
  7129  00F3EE  0100               	movlb	0	; () banked
  7130  00F3F0  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  7131  00F3F2  503B               	movf	??_initSD+1,w,c
  7132  00F3F4  0100               	movlb	0	; () banked
  7133  00F3F6  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  7134  00F3F8  503C               	movf	??_initSD+2,w,c
  7135  00F3FA  0100               	movlb	0	; () banked
  7136  00F3FC  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  7137  00F3FE  503D               	movf	??_initSD+3,w,c
  7138  00F400  0100               	movlb	0	; () banked
  7139  00F402  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;SD_PIC.c: 679: SDCard.PSN |= (unsigned long)arr_response[11] << 8U;
  7143  00F404  C056  F03A         	movff	initSD@arr_response+11,??_initSD
  7144  00F408  6A3B               	clrf	(??_initSD+1)& (0+255),c
  7145  00F40A  6A3C               	clrf	(??_initSD+2)& (0+255),c
  7146  00F40C  6A3D               	clrf	(??_initSD+3)& (0+255),c
  7147  00F40E  C03C  F03D         	movff	??_initSD+2,??_initSD+3
  7148  00F412  C03B  F03C         	movff	??_initSD+1,??_initSD+2
  7149  00F416  C03A  F03B         	movff	??_initSD,??_initSD+1
  7150  00F41A  6A3A               	clrf	??_initSD,c
  7151  00F41C  503A               	movf	??_initSD,w,c
  7152  00F41E  0100               	movlb	0	; () banked
  7153  00F420  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  7154  00F422  503B               	movf	??_initSD+1,w,c
  7155  00F424  0100               	movlb	0	; () banked
  7156  00F426  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  7157  00F428  503C               	movf	??_initSD+2,w,c
  7158  00F42A  0100               	movlb	0	; () banked
  7159  00F42C  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  7160  00F42E  503D               	movf	??_initSD+3,w,c
  7161  00F430  0100               	movlb	0	; () banked
  7162  00F432  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  7163                           
  7164                           ; BSR set to: 0
  7165                           ;SD_PIC.c: 680: SDCard.PSN |= (unsigned long)arr_response[12];
  7166  00F434  5057               	movf	initSD@arr_response+12,w,c
  7167  00F436  0100               	movlb	0	; () banked
  7168  00F438  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;SD_PIC.c: 682: SDCard.MDT = (unsigned short)(((arr_response[13] & 0x0F) << 8U)) |
  7172                           ;SD_PIC.c: 683: (arr_response[14]);
  7173  00F43A  5058               	movf	initSD@arr_response+13,w,c
  7174  00F43C  0B0F               	andlw	15
  7175  00F43E  6E3A               	movwf	??_initSD& (0+255),c
  7176  00F440  5059               	movf	initSD@arr_response+14,w,c
  7177  00F442  0100               	movlb	0	; () banked
  7178  00F444  6F8F               	movwf	(_SDCard+15)& (0+255),b
  7179  00F446  C03A  F090         	movff	??_initSD,_SDCard+16
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;SD_PIC.c: 684: SDCard.CRC = arr_response[15] & 0xFE;
  7183  00F44A  505A               	movf	initSD@arr_response+15,w,c
  7184  00F44C  0BFE               	andlw	254
  7185  00F44E  0100               	movlb	0	; () banked
  7186  00F450  6F91               	movwf	(_SDCard+17)& (0+255),b
  7187                           
  7188                           ; BSR set to: 0
  7189                           ;SD_PIC.c: 687: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  7190  00F452  848D               	bsf	3981,2,c	;volatile
  7191                           
  7192                           ; BSR set to: 0
  7193  00F454  9AC6               	bcf	4038,5,c	;volatile
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;SD_PIC.c: 688: SSPCON1 = 0b00010000;
  7197  00F456  0E10               	movlw	16
  7198  00F458  6EC6               	movwf	4038,c	;volatile
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;SD_PIC.c: 689: OSCCON = last_OSCCON;
  7202  00F45A  C045  FFD3         	movff	initSD@last_OSCCON,4051	;volatile
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;SD_PIC.c: 690: OSCTUNE = last_OSCTUNE;
  7206  00F45E  C046  FF9B         	movff	initSD@last_OSCTUNE,3995	;volatile
  7207                           
  7208                           ;SD_PIC.c: 693: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  7209  00F462  D004               	goto	l3935
  7210  00F464                     l3933:
  7211  00F464  0E42               	movlw	66
  7212  00F466                     u4937:
  7213  00F466  2EE8               	decfsz	wreg,f,c
  7214  00F468  D7FE               	bra	u4937
  7215  00F46A  D000               	nop2	
  7216  00F46C                     l3935:
  7217  00F46C  A4D3               	btfss	4051,2,c	;volatile
  7218  00F46E  D7FA               	goto	l3933
  7219                           
  7220                           ;SD_PIC.c: 696: SSPCON1bits.SSPEN = 1;
  7221  00F470  8AC6               	bsf	4038,5,c	;volatile
  7222                           
  7223                           ;SD_PIC.c: 699: SDCard.write.MBW_flag_first = 1;
  7224  00F472  0E01               	movlw	1
  7225  00F474  0100               	movlb	0	; () banked
  7226  00F476  6FA4               	movwf	(_SDCard+36)& (0+255),b
  7227                           
  7228                           ;SD_PIC.c: 700: SDCard.write.MBW_startBlock = 0;
  7229  00F478  0E00               	movlw	0
  7230  00F47A  0100               	movlb	0	; () banked
  7231  00F47C  6FA0               	movwf	(_SDCard+32)& (0+255),b
  7232  00F47E  0E00               	movlw	0
  7233  00F480  6FA1               	movwf	(_SDCard+33)& (0+255),b
  7234  00F482  0E00               	movlw	0
  7235  00F484  6FA2               	movwf	(_SDCard+34)& (0+255),b
  7236  00F486  0E00               	movlw	0
  7237  00F488  6FA3               	movwf	(_SDCard+35)& (0+255),b
  7238                           
  7239                           ;SD_PIC.c: 701: SDCard.write.lastBlockWritten = 0;
  7240  00F48A  0E00               	movlw	0
  7241  00F48C  0100               	movlb	0	; () banked
  7242  00F48E  6F9C               	movwf	(_SDCard+28)& (0+255),b
  7243  00F490  0E00               	movlw	0
  7244  00F492  6F9D               	movwf	(_SDCard+29)& (0+255),b
  7245  00F494  0E00               	movlw	0
  7246  00F496  6F9E               	movwf	(_SDCard+30)& (0+255),b
  7247  00F498  0E00               	movlw	0
  7248  00F49A  6F9F               	movwf	(_SDCard+31)& (0+255),b
  7249                           
  7250                           ;SD_PIC.c: 702: SDCard.read.MBR_flag_first = 1;
  7251  00F49C  0E01               	movlw	1
  7252  00F49E  0100               	movlb	0	; () banked
  7253  00F4A0  6FAD               	movwf	(_SDCard+45)& (0+255),b
  7254                           
  7255                           ;SD_PIC.c: 703: SDCard.read.MBR_startBlock = 0;
  7256  00F4A2  0E00               	movlw	0
  7257  00F4A4  0100               	movlb	0	; () banked
  7258  00F4A6  6FA9               	movwf	(_SDCard+41)& (0+255),b
  7259  00F4A8  0E00               	movlw	0
  7260  00F4AA  6FAA               	movwf	(_SDCard+42)& (0+255),b
  7261  00F4AC  0E00               	movlw	0
  7262  00F4AE  6FAB               	movwf	(_SDCard+43)& (0+255),b
  7263  00F4B0  0E00               	movlw	0
  7264  00F4B2  6FAC               	movwf	(_SDCard+44)& (0+255),b
  7265                           
  7266                           ;SD_PIC.c: 704: SDCard.read.lastBlockRead = 0;
  7267  00F4B4  0E00               	movlw	0
  7268  00F4B6  0100               	movlb	0	; () banked
  7269  00F4B8  6FA5               	movwf	(_SDCard+37)& (0+255),b
  7270  00F4BA  0E00               	movlw	0
  7271  00F4BC  6FA6               	movwf	(_SDCard+38)& (0+255),b
  7272  00F4BE  0E00               	movlw	0
  7273  00F4C0  6FA7               	movwf	(_SDCard+39)& (0+255),b
  7274  00F4C2  0E00               	movlw	0
  7275  00F4C4  6FA8               	movwf	(_SDCard+40)& (0+255),b
  7276                           
  7277                           ;SD_PIC.c: 707: SDCard.init = 1;
  7278  00F4C6  0E01               	movlw	1
  7279  00F4C8  0100               	movlb	0	; () banked
  7280  00F4CA  6F9B               	movwf	(_SDCard+27)& (0+255),b
  7281  00F4CC  0012               	return		;funcret
  7282  00F4CE                     __end_of_initSD:
  7283                           	opt stack 0
  7284                           tblptru	equ	0xFF8
  7285                           tblptrh	equ	0xFF7
  7286                           tblptrl	equ	0xFF6
  7287                           tablat	equ	0xFF5
  7288                           prodh	equ	0xFF4
  7289                           prodl	equ	0xFF3
  7290                           intcon	equ	0xFF2
  7291                           intcon2	equ	0xFF1
  7292                           intcon3	equ	0xFF0
  7293                           postinc0	equ	0xFEE
  7294                           wreg	equ	0xFE8
  7295                           plusw1	equ	0xFE3
  7296                           indf2	equ	0xFDF
  7297                           postinc2	equ	0xFDE
  7298                           postdec2	equ	0xFDD
  7299                           plusw2	equ	0xFDB
  7300                           fsr2h	equ	0xFDA
  7301                           fsr2l	equ	0xFD9
  7302                           status	equ	0xFD8
  7303                           
  7304 ;; *************** function _spiInit *****************
  7305 ;; Defined at:
  7306 ;;		line 54 in file "../../src/SPI/SPI_PIC.c"
  7307 ;; Parameters:    Size  Location     Type
  7308 ;;  divider         1    wreg     unsigned char 
  7309 ;; Auto vars:     Size  Location     Type
  7310 ;;  divider         1    0[COMRAM] unsigned char 
  7311 ;; Return value:  Size  Location     Type
  7312 ;;                  1    wreg      void 
  7313 ;; Registers used:
  7314 ;;		wreg, status,2, status,0
  7315 ;; Tracked objects:
  7316 ;;		On entry : 0/0
  7317 ;;		On exit  : 0/0
  7318 ;;		Unchanged: 0/0
  7319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7323 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7324 ;;Total ram usage:        1 bytes
  7325 ;; Hardware stack levels used:    1
  7326 ;; This function calls:
  7327 ;;		Nothing
  7328 ;; This function is called by:
  7329 ;;		_initSD
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text19
  7334  00D5BE                     __ptext19:
  7335                           	opt stack 0
  7336  00D5BE                     _spiInit:
  7337                           	opt stack 29
  7338                           
  7339                           ;incstack = 0
  7340                           ;spiInit@divider stored from wreg
  7341  00D5BE  6E01               	movwf	spiInit@divider,c
  7342                           
  7343                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  7344  00D5C0  9AC6               	bcf	4038,5,c	;volatile
  7345                           
  7346                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  7347  00D5C2  0E00               	movlw	0
  7348  00D5C4  6EC7               	movwf	4039,c	;volatile
  7349                           
  7350                           ;SPI_PIC.c: 71: switch(divider){
  7351  00D5C6  D007               	goto	l3299
  7352  00D5C8                     l3293:
  7353                           
  7354                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  7355  00D5C8  0E11               	movlw	17
  7356  00D5CA  D003               	goto	L11
  7357  00D5CC                     l3295:
  7358                           
  7359                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  7360  00D5CC  0E12               	movlw	18
  7361  00D5CE  D001               	goto	L11
  7362  00D5D0                     l3297:
  7363                           
  7364                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  7365  00D5D0  0E10               	movlw	16
  7366  00D5D2                     L11:
  7367  00D5D2  6EC6               	movwf	4038,c	;volatile
  7368                           
  7369                           ;SPI_PIC.c: 83: }
  7370  00D5D4  D00B               	goto	l430
  7371  00D5D6                     l3299:
  7372  00D5D6  5001               	movf	spiInit@divider,w,c
  7373                           
  7374                           ; Switch size 1, requested type "space"
  7375                           ; Number of cases is 3, Range of values is 4 to 64
  7376                           ; switch strategies available:
  7377                           ; Name         Instructions Cycles
  7378                           ; simple_byte           10     6 (average)
  7379                           ;	Chosen strategy is simple_byte
  7380  00D5D8  0A04               	xorlw	4	; case 4
  7381  00D5DA  B4D8               	btfsc	status,2,c
  7382  00D5DC  D7F9               	goto	l3297
  7383  00D5DE  0A14               	xorlw	20	; case 16
  7384  00D5E0  B4D8               	btfsc	status,2,c
  7385  00D5E2  D7F2               	goto	l3293
  7386  00D5E4  0A50               	xorlw	80	; case 64
  7387  00D5E6  B4D8               	btfsc	status,2,c
  7388  00D5E8  D7F1               	goto	l3295
  7389  00D5EA  D7F2               	goto	l3297
  7390  00D5EC                     l430:
  7391                           
  7392                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  7393  00D5EC  9A94               	bcf	3988,5,c	;volatile
  7394                           
  7395                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  7396  00D5EE  8894               	bsf	3988,4,c	;volatile
  7397                           
  7398                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  7399  00D5F0  9694               	bcf	3988,3,c	;volatile
  7400                           
  7401                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  7402  00D5F2  8AC6               	bsf	4038,5,c	;volatile
  7403  00D5F4  0012               	return		;funcret
  7404  00D5F6                     __end_of_spiInit:
  7405                           	opt stack 0
  7406                           tblptru	equ	0xFF8
  7407                           tblptrh	equ	0xFF7
  7408                           tblptrl	equ	0xFF6
  7409                           tablat	equ	0xFF5
  7410                           prodh	equ	0xFF4
  7411                           prodl	equ	0xFF3
  7412                           intcon	equ	0xFF2
  7413                           intcon2	equ	0xFF1
  7414                           intcon3	equ	0xFF0
  7415                           postinc0	equ	0xFEE
  7416                           wreg	equ	0xFE8
  7417                           plusw1	equ	0xFE3
  7418                           indf2	equ	0xFDF
  7419                           postinc2	equ	0xFDE
  7420                           postdec2	equ	0xFDD
  7421                           plusw2	equ	0xFDB
  7422                           fsr2h	equ	0xFDA
  7423                           fsr2l	equ	0xFD9
  7424                           status	equ	0xFD8
  7425                           
  7426 ;; *************** function ___lwtoft *****************
  7427 ;; Defined at:
  7428 ;;		line 28 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;  c               2    8[COMRAM] unsigned int 
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;		None
  7433 ;; Return value:  Size  Location     Type
  7434 ;;                  3    8[COMRAM] float 
  7435 ;; Registers used:
  7436 ;;		wreg, status,2, status,0, cstack
  7437 ;; Tracked objects:
  7438 ;;		On entry : 0/0
  7439 ;;		On exit  : 0/0
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7442 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7445 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7446 ;;Total ram usage:        3 bytes
  7447 ;; Hardware stack levels used:    1
  7448 ;; Hardware stack levels required when called:    1
  7449 ;; This function calls:
  7450 ;;		___ftpack
  7451 ;; This function is called by:
  7452 ;;		_initSD
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           	psect	text20
  7457  00D550                     __ptext20:
  7458                           	opt stack 0
  7459  00D550                     ___lwtoft:
  7460                           	opt stack 28
  7461                           
  7462                           ;incstack = 0
  7463  00D550  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  7464  00D554  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  7465  00D558  6A03               	clrf	___ftpack@arg+2,c
  7466  00D55A  0E8E               	movlw	142
  7467  00D55C  6E04               	movwf	___ftpack@exp,c
  7468  00D55E  0E00               	movlw	0
  7469  00D560  6E05               	movwf	___ftpack@sign,c
  7470  00D562  EC6B  F06D         	call	___ftpack	;wreg free
  7471  00D566  C001  F009         	movff	?___ftpack,?___lwtoft
  7472  00D56A  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  7473  00D56E  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  7474  00D572  0012               	return	
  7475  00D574                     __end_of___lwtoft:
  7476                           	opt stack 0
  7477                           tblptru	equ	0xFF8
  7478                           tblptrh	equ	0xFF7
  7479                           tblptrl	equ	0xFF6
  7480                           tablat	equ	0xFF5
  7481                           prodh	equ	0xFF4
  7482                           prodl	equ	0xFF3
  7483                           intcon	equ	0xFF2
  7484                           intcon2	equ	0xFF1
  7485                           intcon3	equ	0xFF0
  7486                           postinc0	equ	0xFEE
  7487                           wreg	equ	0xFE8
  7488                           plusw1	equ	0xFE3
  7489                           indf2	equ	0xFDF
  7490                           postinc2	equ	0xFDE
  7491                           postdec2	equ	0xFDD
  7492                           plusw2	equ	0xFDB
  7493                           fsr2h	equ	0xFDA
  7494                           fsr2l	equ	0xFD9
  7495                           status	equ	0xFD8
  7496                           
  7497 ;; *************** function ___lltoft *****************
  7498 ;; Defined at:
  7499 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;  c               4    8[COMRAM] unsigned long 
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;  exp             1   16[COMRAM] unsigned char 
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  3    8[COMRAM] float 
  7506 ;; Registers used:
  7507 ;;		wreg, status,2, status,0, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7513 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7514 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7515 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;Total ram usage:        9 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    1
  7520 ;; This function calls:
  7521 ;;		___ftpack
  7522 ;; This function is called by:
  7523 ;;		_initSD
  7524 ;;		_printf
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           	psect	text21
  7529  00D700                     __ptext21:
  7530                           	opt stack 0
  7531  00D700                     ___lltoft:
  7532                           	opt stack 28
  7533                           
  7534                           ;incstack = 0
  7535  00D700  0E8E               	movlw	142
  7536  00D702  6E11               	movwf	___lltoft@exp,c
  7537  00D704  D006               	goto	l3659
  7538  00D706                     l3657:
  7539  00D706  90D8               	bcf	status,0,c
  7540  00D708  320C               	rrcf	___lltoft@c+3,f,c
  7541  00D70A  320B               	rrcf	___lltoft@c+2,f,c
  7542  00D70C  320A               	rrcf	___lltoft@c+1,f,c
  7543  00D70E  3209               	rrcf	___lltoft@c,f,c
  7544  00D710  2A11               	incf	___lltoft@exp,f,c
  7545  00D712                     l3659:
  7546  00D712  0E00               	movlw	0
  7547  00D714  1409               	andwf	___lltoft@c,w,c
  7548  00D716  6E0D               	movwf	??___lltoft& (0+255),c
  7549  00D718  0E00               	movlw	0
  7550  00D71A  140A               	andwf	___lltoft@c+1,w,c
  7551  00D71C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  7552  00D71E  0E00               	movlw	0
  7553  00D720  140B               	andwf	___lltoft@c+2,w,c
  7554  00D722  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  7555  00D724  0EFF               	movlw	255
  7556  00D726  140C               	andwf	___lltoft@c+3,w,c
  7557  00D728  6E10               	movwf	(??___lltoft+3)& (0+255),c
  7558  00D72A  500D               	movf	??___lltoft,w,c
  7559  00D72C  100E               	iorwf	??___lltoft+1,w,c
  7560  00D72E  100F               	iorwf	??___lltoft+2,w,c
  7561  00D730  1010               	iorwf	??___lltoft+3,w,c
  7562  00D732  A4D8               	btfss	status,2,c
  7563  00D734  D7E8               	goto	l3657
  7564  00D736  C009  F001         	movff	___lltoft@c,___ftpack@arg
  7565  00D73A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  7566  00D73E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  7567  00D742  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  7568  00D746  0E00               	movlw	0
  7569  00D748  6E05               	movwf	___ftpack@sign,c
  7570  00D74A  EC6B  F06D         	call	___ftpack	;wreg free
  7571  00D74E  C001  F009         	movff	?___ftpack,?___lltoft
  7572  00D752  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  7573  00D756  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  7574  00D75A  0012               	return	
  7575  00D75C                     __end_of___lltoft:
  7576                           	opt stack 0
  7577                           tblptru	equ	0xFF8
  7578                           tblptrh	equ	0xFF7
  7579                           tblptrl	equ	0xFF6
  7580                           tablat	equ	0xFF5
  7581                           prodh	equ	0xFF4
  7582                           prodl	equ	0xFF3
  7583                           intcon	equ	0xFF2
  7584                           intcon2	equ	0xFF1
  7585                           intcon3	equ	0xFF0
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           plusw1	equ	0xFE3
  7589                           indf2	equ	0xFDF
  7590                           postinc2	equ	0xFDE
  7591                           postdec2	equ	0xFDD
  7592                           plusw2	equ	0xFDB
  7593                           fsr2h	equ	0xFDA
  7594                           fsr2l	equ	0xFD9
  7595                           status	equ	0xFD8
  7596                           
  7597 ;; *************** function ___fttol *****************
  7598 ;; Defined at:
  7599 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  7600 ;; Parameters:    Size  Location     Type
  7601 ;;  f1              3   42[COMRAM] float 
  7602 ;; Auto vars:     Size  Location     Type
  7603 ;;  lval            4   52[COMRAM] unsigned long 
  7604 ;;  exp1            1   56[COMRAM] unsigned char 
  7605 ;;  sign1           1   51[COMRAM] unsigned char 
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  4   42[COMRAM] long 
  7608 ;; Registers used:
  7609 ;;		wreg, status,2, status,0
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7615 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;Total ram usage:       15 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; This function calls:
  7622 ;;		Nothing
  7623 ;; This function is called by:
  7624 ;;		_initSD
  7625 ;;		_printf
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           	psect	text22
  7630  00DD5E                     __ptext22:
  7631                           	opt stack 0
  7632  00DD5E                     ___fttol:
  7633                           	opt stack 29
  7634                           
  7635                           ;incstack = 0
  7636  00DD5E  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  7637  00DD62  6A30               	clrf	(??___fttol+1)& (0+255),c
  7638  00DD64  6A31               	clrf	(??___fttol+2)& (0+255),c
  7639  00DD66  342C               	rlcf	___fttol@f1+1,w,c
  7640  00DD68  362F               	rlcf	??___fttol& (0+255),f,c
  7641  00DD6A  E301               	bnc	u3261
  7642  00DD6C  8030               	bsf	(??___fttol+1)& (0+255),0,c
  7643  00DD6E                     u3261:
  7644  00DD6E  502F               	movf	??___fttol,w,c
  7645  00DD70  6E39               	movwf	___fttol@exp1,c
  7646  00DD72  5039               	movf	___fttol@exp1,w,c
  7647  00DD74  A4D8               	btfss	status,2,c
  7648  00DD76  D009               	goto	l3577
  7649  00DD78  0E00               	movlw	0
  7650  00DD7A  6E2B               	movwf	?___fttol,c
  7651  00DD7C  0E00               	movlw	0
  7652  00DD7E  6E2C               	movwf	?___fttol+1,c
  7653  00DD80  0E00               	movlw	0
  7654  00DD82  6E2D               	movwf	?___fttol+2,c
  7655  00DD84  0E00               	movlw	0
  7656  00DD86  6E2E               	movwf	?___fttol+3,c
  7657  00DD88  0012               	return	
  7658  00DD8A                     l3577:
  7659  00DD8A  0E17               	movlw	23
  7660  00DD8C  6E2F               	movwf	??___fttol& (0+255),c
  7661  00DD8E  C02B  F030         	movff	___fttol@f1,??___fttol+1
  7662  00DD92  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  7663  00DD96  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  7664  00DD9A  282F               	incf	??___fttol,w,c
  7665  00DD9C  6E33               	movwf	(??___fttol+4)& (0+255),c
  7666  00DD9E  D004               	goto	u3280
  7667  00DDA0                     u3285:
  7668  00DDA0  90D8               	bcf	status,0,c
  7669  00DDA2  3232               	rrcf	??___fttol+3,f,c
  7670  00DDA4  3231               	rrcf	??___fttol+2,f,c
  7671  00DDA6  3230               	rrcf	??___fttol+1,f,c
  7672  00DDA8                     u3280:
  7673  00DDA8  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  7674  00DDAA  D7FA               	goto	u3285
  7675  00DDAC  5030               	movf	??___fttol+1,w,c
  7676  00DDAE  6E34               	movwf	___fttol@sign1,c
  7677  00DDB0  8E2C               	bsf	___fttol@f1+1,7,c
  7678  00DDB2  0EFF               	movlw	255
  7679  00DDB4  162B               	andwf	___fttol@f1,f,c
  7680  00DDB6  0EFF               	movlw	255
  7681  00DDB8  162C               	andwf	___fttol@f1+1,f,c
  7682  00DDBA  0E00               	movlw	0
  7683  00DDBC  162D               	andwf	___fttol@f1+2,f,c
  7684  00DDBE  502B               	movf	___fttol@f1,w,c
  7685  00DDC0  6E35               	movwf	___fttol@lval,c
  7686  00DDC2  502C               	movf	___fttol@f1+1,w,c
  7687  00DDC4  6E36               	movwf	___fttol@lval+1,c
  7688  00DDC6  502D               	movf	___fttol@f1+2,w,c
  7689  00DDC8  6E37               	movwf	___fttol@lval+2,c
  7690  00DDCA  6A38               	clrf	___fttol@lval+3,c
  7691  00DDCC  0E8E               	movlw	142
  7692  00DDCE  5E39               	subwf	___fttol@exp1,f,c
  7693  00DDD0  AE39               	btfss	___fttol@exp1,7,c
  7694  00DDD2  D016               	goto	l3599
  7695  00DDD4  5039               	movf	___fttol@exp1,w,c
  7696  00DDD6  0A80               	xorlw	128
  7697  00DDD8  0F8F               	addlw	143
  7698  00DDDA  B0D8               	btfsc	status,0,c
  7699  00DDDC  D009               	goto	l3595
  7700  00DDDE  0E00               	movlw	0
  7701  00DDE0  6E2B               	movwf	?___fttol,c
  7702  00DDE2  0E00               	movlw	0
  7703  00DDE4  6E2C               	movwf	?___fttol+1,c
  7704  00DDE6  0E00               	movlw	0
  7705  00DDE8  6E2D               	movwf	?___fttol+2,c
  7706  00DDEA  0E00               	movlw	0
  7707  00DDEC  6E2E               	movwf	?___fttol+3,c
  7708  00DDEE  0012               	return	
  7709  00DDF0                     l3595:
  7710  00DDF0  90D8               	bcf	status,0,c
  7711  00DDF2  3238               	rrcf	___fttol@lval+3,f,c
  7712  00DDF4  3237               	rrcf	___fttol@lval+2,f,c
  7713  00DDF6  3236               	rrcf	___fttol@lval+1,f,c
  7714  00DDF8  3235               	rrcf	___fttol@lval,f,c
  7715  00DDFA  3E39               	incfsz	___fttol@exp1,f,c
  7716  00DDFC  D7F9               	goto	l3595
  7717  00DDFE  D015               	goto	l3609
  7718  00DE00                     l3599:
  7719  00DE00  0E17               	movlw	23
  7720  00DE02  6439               	cpfsgt	___fttol@exp1,c
  7721  00DE04  D00F               	goto	l3607
  7722  00DE06  0E00               	movlw	0
  7723  00DE08  6E2B               	movwf	?___fttol,c
  7724  00DE0A  0E00               	movlw	0
  7725  00DE0C  6E2C               	movwf	?___fttol+1,c
  7726  00DE0E  0E00               	movlw	0
  7727  00DE10  6E2D               	movwf	?___fttol+2,c
  7728  00DE12  0E00               	movlw	0
  7729  00DE14  6E2E               	movwf	?___fttol+3,c
  7730  00DE16  0012               	return	
  7731  00DE18                     l3605:
  7732  00DE18  90D8               	bcf	status,0,c
  7733  00DE1A  3635               	rlcf	___fttol@lval,f,c
  7734  00DE1C  3636               	rlcf	___fttol@lval+1,f,c
  7735  00DE1E  3637               	rlcf	___fttol@lval+2,f,c
  7736  00DE20  3638               	rlcf	___fttol@lval+3,f,c
  7737  00DE22  0639               	decf	___fttol@exp1,f,c
  7738  00DE24                     l3607:
  7739  00DE24  5039               	movf	___fttol@exp1,w,c
  7740  00DE26  A4D8               	btfss	status,2,c
  7741  00DE28  D7F7               	goto	l3605
  7742  00DE2A                     l3609:
  7743  00DE2A  5034               	movf	___fttol@sign1,w,c
  7744  00DE2C  B4D8               	btfsc	status,2,c
  7745  00DE2E  D008               	goto	l3613
  7746  00DE30  1E38               	comf	___fttol@lval+3,f,c
  7747  00DE32  1E37               	comf	___fttol@lval+2,f,c
  7748  00DE34  1E36               	comf	___fttol@lval+1,f,c
  7749  00DE36  6C35               	negf	___fttol@lval,c
  7750  00DE38  0E00               	movlw	0
  7751  00DE3A  2236               	addwfc	___fttol@lval+1,f,c
  7752  00DE3C  2237               	addwfc	___fttol@lval+2,f,c
  7753  00DE3E  2238               	addwfc	___fttol@lval+3,f,c
  7754  00DE40                     l3613:
  7755  00DE40  C035  F02B         	movff	___fttol@lval,?___fttol
  7756  00DE44  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  7757  00DE48  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  7758  00DE4C  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  7759  00DE50  0012               	return	
  7760  00DE52                     __end_of___fttol:
  7761                           	opt stack 0
  7762                           tblptru	equ	0xFF8
  7763                           tblptrh	equ	0xFF7
  7764                           tblptrl	equ	0xFF6
  7765                           tablat	equ	0xFF5
  7766                           prodh	equ	0xFF4
  7767                           prodl	equ	0xFF3
  7768                           intcon	equ	0xFF2
  7769                           intcon2	equ	0xFF1
  7770                           intcon3	equ	0xFF0
  7771                           postinc0	equ	0xFEE
  7772                           wreg	equ	0xFE8
  7773                           plusw1	equ	0xFE3
  7774                           indf2	equ	0xFDF
  7775                           postinc2	equ	0xFDE
  7776                           postdec2	equ	0xFDD
  7777                           plusw2	equ	0xFDB
  7778                           fsr2h	equ	0xFDA
  7779                           fsr2l	equ	0xFD9
  7780                           status	equ	0xFD8
  7781                           
  7782 ;; *************** function ___ftmul *****************
  7783 ;; Defined at:
  7784 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  7785 ;; Parameters:    Size  Location     Type
  7786 ;;  f1              3   20[COMRAM] float 
  7787 ;;  f2              3   23[COMRAM] float 
  7788 ;; Auto vars:     Size  Location     Type
  7789 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  7790 ;;  sign            1   34[COMRAM] unsigned char 
  7791 ;;  cntr            1   33[COMRAM] unsigned char 
  7792 ;;  exp             1   29[COMRAM] unsigned char 
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  3   20[COMRAM] float 
  7795 ;; Registers used:
  7796 ;;		wreg, status,2, status,0, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 0/0
  7799 ;;		On exit  : 0/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7802 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7803 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7804 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;Total ram usage:       15 bytes
  7807 ;; Hardware stack levels used:    1
  7808 ;; Hardware stack levels required when called:    1
  7809 ;; This function calls:
  7810 ;;		___ftpack
  7811 ;; This function is called by:
  7812 ;;		_initSD
  7813 ;;		_fround
  7814 ;;		_scale
  7815 ;;		_printf
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text23
  7820  00DC6A                     __ptext23:
  7821                           	opt stack 0
  7822  00DC6A                     ___ftmul:
  7823                           	opt stack 27
  7824                           
  7825                           ;incstack = 0
  7826  00DC6A  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  7827  00DC6E  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7828  00DC70  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7829  00DC72  3416               	rlcf	___ftmul@f1+1,w,c
  7830  00DC74  361B               	rlcf	??___ftmul& (0+255),f,c
  7831  00DC76  E301               	bnc	u2731
  7832  00DC78  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7833  00DC7A                     u2731:
  7834  00DC7A  501B               	movf	??___ftmul,w,c
  7835  00DC7C  6E1E               	movwf	___ftmul@exp,c
  7836  00DC7E  501E               	movf	___ftmul@exp,w,c
  7837  00DC80  A4D8               	btfss	status,2,c
  7838  00DC82  D007               	goto	l3155
  7839  00DC84  0E00               	movlw	0
  7840  00DC86  6E15               	movwf	?___ftmul,c
  7841  00DC88  0E00               	movlw	0
  7842  00DC8A  6E16               	movwf	?___ftmul+1,c
  7843  00DC8C  0E00               	movlw	0
  7844  00DC8E  6E17               	movwf	?___ftmul+2,c
  7845  00DC90  0012               	return	
  7846  00DC92                     l3155:
  7847  00DC92  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  7848  00DC96  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7849  00DC98  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7850  00DC9A  3419               	rlcf	___ftmul@f2+1,w,c
  7851  00DC9C  361B               	rlcf	??___ftmul& (0+255),f,c
  7852  00DC9E  E301               	bnc	u2751
  7853  00DCA0  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7854  00DCA2                     u2751:
  7855  00DCA2  501B               	movf	??___ftmul,w,c
  7856  00DCA4  6E23               	movwf	___ftmul@sign,c
  7857  00DCA6  5023               	movf	___ftmul@sign,w,c
  7858  00DCA8  A4D8               	btfss	status,2,c
  7859  00DCAA  D007               	goto	l3161
  7860  00DCAC  0E00               	movlw	0
  7861  00DCAE  6E15               	movwf	?___ftmul,c
  7862  00DCB0  0E00               	movlw	0
  7863  00DCB2  6E16               	movwf	?___ftmul+1,c
  7864  00DCB4  0E00               	movlw	0
  7865  00DCB6  6E17               	movwf	?___ftmul+2,c
  7866  00DCB8  0012               	return	
  7867  00DCBA                     l3161:
  7868  00DCBA  5023               	movf	___ftmul@sign,w,c
  7869  00DCBC  0F7B               	addlw	123
  7870  00DCBE  261E               	addwf	___ftmul@exp,f,c
  7871  00DCC0  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  7872  00DCC4  501A               	movf	___ftmul@f2+2,w,c
  7873  00DCC6  1A23               	xorwf	___ftmul@sign,f,c
  7874  00DCC8  0E80               	movlw	128
  7875  00DCCA  1623               	andwf	___ftmul@sign,f,c
  7876  00DCCC  8E16               	bsf	___ftmul@f1+1,7,c
  7877  00DCCE  8E19               	bsf	___ftmul@f2+1,7,c
  7878  00DCD0  0EFF               	movlw	255
  7879  00DCD2  1618               	andwf	___ftmul@f2,f,c
  7880  00DCD4  0EFF               	movlw	255
  7881  00DCD6  1619               	andwf	___ftmul@f2+1,f,c
  7882  00DCD8  0E00               	movlw	0
  7883  00DCDA  161A               	andwf	___ftmul@f2+2,f,c
  7884  00DCDC  0E00               	movlw	0
  7885  00DCDE  6E1F               	movwf	___ftmul@f3_as_product,c
  7886  00DCE0  0E00               	movlw	0
  7887  00DCE2  6E20               	movwf	___ftmul@f3_as_product+1,c
  7888  00DCE4  0E00               	movlw	0
  7889  00DCE6  6E21               	movwf	___ftmul@f3_as_product+2,c
  7890  00DCE8  0E07               	movlw	7
  7891  00DCEA  6E22               	movwf	___ftmul@cntr,c
  7892  00DCEC                     l3175:
  7893  00DCEC  A015               	btfss	___ftmul@f1,0,c
  7894  00DCEE  D006               	goto	l3179
  7895  00DCF0  5018               	movf	___ftmul@f2,w,c
  7896  00DCF2  261F               	addwf	___ftmul@f3_as_product,f,c
  7897  00DCF4  5019               	movf	___ftmul@f2+1,w,c
  7898  00DCF6  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7899  00DCF8  501A               	movf	___ftmul@f2+2,w,c
  7900  00DCFA  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7901  00DCFC                     l3179:
  7902  00DCFC  90D8               	bcf	status,0,c
  7903  00DCFE  3217               	rrcf	___ftmul@f1+2,f,c
  7904  00DD00  3216               	rrcf	___ftmul@f1+1,f,c
  7905  00DD02  3215               	rrcf	___ftmul@f1,f,c
  7906  00DD04  90D8               	bcf	status,0,c
  7907  00DD06  3618               	rlcf	___ftmul@f2,f,c
  7908  00DD08  3619               	rlcf	___ftmul@f2+1,f,c
  7909  00DD0A  361A               	rlcf	___ftmul@f2+2,f,c
  7910  00DD0C  2E22               	decfsz	___ftmul@cntr,f,c
  7911  00DD0E  D7EE               	goto	l3175
  7912  00DD10  0E09               	movlw	9
  7913  00DD12  6E22               	movwf	___ftmul@cntr,c
  7914  00DD14                     l3185:
  7915  00DD14  A015               	btfss	___ftmul@f1,0,c
  7916  00DD16  D006               	goto	l3189
  7917  00DD18  5018               	movf	___ftmul@f2,w,c
  7918  00DD1A  261F               	addwf	___ftmul@f3_as_product,f,c
  7919  00DD1C  5019               	movf	___ftmul@f2+1,w,c
  7920  00DD1E  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7921  00DD20  501A               	movf	___ftmul@f2+2,w,c
  7922  00DD22  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7923  00DD24                     l3189:
  7924  00DD24  90D8               	bcf	status,0,c
  7925  00DD26  3217               	rrcf	___ftmul@f1+2,f,c
  7926  00DD28  3216               	rrcf	___ftmul@f1+1,f,c
  7927  00DD2A  3215               	rrcf	___ftmul@f1,f,c
  7928  00DD2C  90D8               	bcf	status,0,c
  7929  00DD2E  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  7930  00DD30  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  7931  00DD32  321F               	rrcf	___ftmul@f3_as_product,f,c
  7932  00DD34  2E22               	decfsz	___ftmul@cntr,f,c
  7933  00DD36  D7EE               	goto	l3185
  7934  00DD38  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7935  00DD3C  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7936  00DD40  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7937  00DD44  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  7938  00DD48  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  7939  00DD4C  EC6B  F06D         	call	___ftpack	;wreg free
  7940  00DD50  C001  F015         	movff	?___ftpack,?___ftmul
  7941  00DD54  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  7942  00DD58  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  7943  00DD5C  0012               	return	
  7944  00DD5E                     __end_of___ftmul:
  7945                           	opt stack 0
  7946                           tblptru	equ	0xFF8
  7947                           tblptrh	equ	0xFF7
  7948                           tblptrl	equ	0xFF6
  7949                           tablat	equ	0xFF5
  7950                           prodh	equ	0xFF4
  7951                           prodl	equ	0xFF3
  7952                           intcon	equ	0xFF2
  7953                           intcon2	equ	0xFF1
  7954                           intcon3	equ	0xFF0
  7955                           postinc0	equ	0xFEE
  7956                           wreg	equ	0xFE8
  7957                           plusw1	equ	0xFE3
  7958                           indf2	equ	0xFDF
  7959                           postinc2	equ	0xFDE
  7960                           postdec2	equ	0xFDD
  7961                           plusw2	equ	0xFDB
  7962                           fsr2h	equ	0xFDA
  7963                           fsr2l	equ	0xFD9
  7964                           status	equ	0xFD8
  7965                           
  7966 ;; *************** function ___ftdiv *****************
  7967 ;; Defined at:
  7968 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  7969 ;; Parameters:    Size  Location     Type
  7970 ;;  f1              3   11[COMRAM] float 
  7971 ;;  f2              3   14[COMRAM] float 
  7972 ;; Auto vars:     Size  Location     Type
  7973 ;;  f3              3   21[COMRAM] float 
  7974 ;;  sign            1   25[COMRAM] unsigned char 
  7975 ;;  exp             1   24[COMRAM] unsigned char 
  7976 ;;  cntr            1   20[COMRAM] unsigned char 
  7977 ;; Return value:  Size  Location     Type
  7978 ;;                  3   11[COMRAM] float 
  7979 ;; Registers used:
  7980 ;;		wreg, status,2, status,0, cstack
  7981 ;; Tracked objects:
  7982 ;;		On entry : 0/0
  7983 ;;		On exit  : 0/0
  7984 ;;		Unchanged: 0/0
  7985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7986 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7987 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7988 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7989 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7990 ;;Total ram usage:       15 bytes
  7991 ;; Hardware stack levels used:    1
  7992 ;; Hardware stack levels required when called:    1
  7993 ;; This function calls:
  7994 ;;		___ftpack
  7995 ;; This function is called by:
  7996 ;;		_initSD
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text24
  8001  00DB84                     __ptext24:
  8002                           	opt stack 0
  8003  00DB84                     ___ftdiv:
  8004                           	opt stack 28
  8005                           
  8006                           ;incstack = 0
  8007  00DB84  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  8008  00DB88  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  8009  00DB8A  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  8010  00DB8C  340D               	rlcf	___ftdiv@f1+1,w,c
  8011  00DB8E  3612               	rlcf	??___ftdiv& (0+255),f,c
  8012  00DB90  E301               	bnc	u3161
  8013  00DB92  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  8014  00DB94                     u3161:
  8015  00DB94  5012               	movf	??___ftdiv,w,c
  8016  00DB96  6E19               	movwf	___ftdiv@exp,c
  8017  00DB98  5019               	movf	___ftdiv@exp,w,c
  8018  00DB9A  A4D8               	btfss	status,2,c
  8019  00DB9C  D007               	goto	l3501
  8020  00DB9E  0E00               	movlw	0
  8021  00DBA0  6E0C               	movwf	?___ftdiv,c
  8022  00DBA2  0E00               	movlw	0
  8023  00DBA4  6E0D               	movwf	?___ftdiv+1,c
  8024  00DBA6  0E00               	movlw	0
  8025  00DBA8  6E0E               	movwf	?___ftdiv+2,c
  8026  00DBAA  0012               	return	
  8027  00DBAC                     l3501:
  8028  00DBAC  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  8029  00DBB0  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  8030  00DBB2  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  8031  00DBB4  3410               	rlcf	___ftdiv@f2+1,w,c
  8032  00DBB6  3612               	rlcf	??___ftdiv& (0+255),f,c
  8033  00DBB8  E301               	bnc	u3181
  8034  00DBBA  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  8035  00DBBC                     u3181:
  8036  00DBBC  5012               	movf	??___ftdiv,w,c
  8037  00DBBE  6E1A               	movwf	___ftdiv@sign,c
  8038  00DBC0  501A               	movf	___ftdiv@sign,w,c
  8039  00DBC2  A4D8               	btfss	status,2,c
  8040  00DBC4  D007               	goto	l3507
  8041  00DBC6  0E00               	movlw	0
  8042  00DBC8  6E0C               	movwf	?___ftdiv,c
  8043  00DBCA  0E00               	movlw	0
  8044  00DBCC  6E0D               	movwf	?___ftdiv+1,c
  8045  00DBCE  0E00               	movlw	0
  8046  00DBD0  6E0E               	movwf	?___ftdiv+2,c
  8047  00DBD2  0012               	return	
  8048  00DBD4                     l3507:
  8049  00DBD4  0E00               	movlw	0
  8050  00DBD6  6E16               	movwf	___ftdiv@f3,c
  8051  00DBD8  0E00               	movlw	0
  8052  00DBDA  6E17               	movwf	___ftdiv@f3+1,c
  8053  00DBDC  0E00               	movlw	0
  8054  00DBDE  6E18               	movwf	___ftdiv@f3+2,c
  8055  00DBE0  501A               	movf	___ftdiv@sign,w,c
  8056  00DBE2  0F89               	addlw	137
  8057  00DBE4  5E19               	subwf	___ftdiv@exp,f,c
  8058  00DBE6  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  8059  00DBEA  5011               	movf	___ftdiv@f2+2,w,c
  8060  00DBEC  1A1A               	xorwf	___ftdiv@sign,f,c
  8061  00DBEE  0E80               	movlw	128
  8062  00DBF0  161A               	andwf	___ftdiv@sign,f,c
  8063  00DBF2  8E0D               	bsf	___ftdiv@f1+1,7,c
  8064  00DBF4  0EFF               	movlw	255
  8065  00DBF6  160C               	andwf	___ftdiv@f1,f,c
  8066  00DBF8  0EFF               	movlw	255
  8067  00DBFA  160D               	andwf	___ftdiv@f1+1,f,c
  8068  00DBFC  0E00               	movlw	0
  8069  00DBFE  160E               	andwf	___ftdiv@f1+2,f,c
  8070  00DC00  8E10               	bsf	___ftdiv@f2+1,7,c
  8071  00DC02  0EFF               	movlw	255
  8072  00DC04  160F               	andwf	___ftdiv@f2,f,c
  8073  00DC06  0EFF               	movlw	255
  8074  00DC08  1610               	andwf	___ftdiv@f2+1,f,c
  8075  00DC0A  0E00               	movlw	0
  8076  00DC0C  1611               	andwf	___ftdiv@f2+2,f,c
  8077  00DC0E  0E18               	movlw	24
  8078  00DC10  6E15               	movwf	___ftdiv@cntr,c
  8079  00DC12                     l3527:
  8080  00DC12  90D8               	bcf	status,0,c
  8081  00DC14  3616               	rlcf	___ftdiv@f3,f,c
  8082  00DC16  3617               	rlcf	___ftdiv@f3+1,f,c
  8083  00DC18  3618               	rlcf	___ftdiv@f3+2,f,c
  8084  00DC1A  500F               	movf	___ftdiv@f2,w,c
  8085  00DC1C  5C0C               	subwf	___ftdiv@f1,w,c
  8086  00DC1E  5010               	movf	___ftdiv@f2+1,w,c
  8087  00DC20  580D               	subwfb	___ftdiv@f1+1,w,c
  8088  00DC22  5011               	movf	___ftdiv@f2+2,w,c
  8089  00DC24  580E               	subwfb	___ftdiv@f1+2,w,c
  8090  00DC26  A0D8               	btfss	status,0,c
  8091  00DC28  D007               	goto	l924
  8092  00DC2A  500F               	movf	___ftdiv@f2,w,c
  8093  00DC2C  5E0C               	subwf	___ftdiv@f1,f,c
  8094  00DC2E  5010               	movf	___ftdiv@f2+1,w,c
  8095  00DC30  5A0D               	subwfb	___ftdiv@f1+1,f,c
  8096  00DC32  5011               	movf	___ftdiv@f2+2,w,c
  8097  00DC34  5A0E               	subwfb	___ftdiv@f1+2,f,c
  8098  00DC36  8016               	bsf	___ftdiv@f3,0,c
  8099  00DC38                     l924:
  8100  00DC38  90D8               	bcf	status,0,c
  8101  00DC3A  360C               	rlcf	___ftdiv@f1,f,c
  8102  00DC3C  360D               	rlcf	___ftdiv@f1+1,f,c
  8103  00DC3E  360E               	rlcf	___ftdiv@f1+2,f,c
  8104  00DC40  2E15               	decfsz	___ftdiv@cntr,f,c
  8105  00DC42  D7E7               	goto	l3527
  8106  00DC44  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  8107  00DC48  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8108  00DC4C  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8109  00DC50  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  8110  00DC54  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  8111  00DC58  EC6B  F06D         	call	___ftpack	;wreg free
  8112  00DC5C  C001  F00C         	movff	?___ftpack,?___ftdiv
  8113  00DC60  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  8114  00DC64  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  8115  00DC68  0012               	return	
  8116  00DC6A                     __end_of___ftdiv:
  8117                           	opt stack 0
  8118                           tblptru	equ	0xFF8
  8119                           tblptrh	equ	0xFF7
  8120                           tblptrl	equ	0xFF6
  8121                           tablat	equ	0xFF5
  8122                           prodh	equ	0xFF4
  8123                           prodl	equ	0xFF3
  8124                           intcon	equ	0xFF2
  8125                           intcon2	equ	0xFF1
  8126                           intcon3	equ	0xFF0
  8127                           postinc0	equ	0xFEE
  8128                           wreg	equ	0xFE8
  8129                           plusw1	equ	0xFE3
  8130                           indf2	equ	0xFDF
  8131                           postinc2	equ	0xFDE
  8132                           postdec2	equ	0xFDD
  8133                           plusw2	equ	0xFDB
  8134                           fsr2h	equ	0xFDA
  8135                           fsr2l	equ	0xFD9
  8136                           status	equ	0xFD8
  8137                           
  8138 ;; *************** function ___ftpack *****************
  8139 ;; Defined at:
  8140 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;  arg             3    0[COMRAM] unsigned um
  8143 ;;  exp             1    3[COMRAM] unsigned char 
  8144 ;;  sign            1    4[COMRAM] unsigned char 
  8145 ;; Auto vars:     Size  Location     Type
  8146 ;;		None
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  3    0[COMRAM] float 
  8149 ;; Registers used:
  8150 ;;		wreg, status,2, status,0
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8156 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8158 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8159 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8160 ;;Total ram usage:        8 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; This function calls:
  8163 ;;		Nothing
  8164 ;; This function is called by:
  8165 ;;		___ftadd
  8166 ;;		___ftdiv
  8167 ;;		___ftmul
  8168 ;;		___lltoft
  8169 ;;		___lwtoft
  8170 ;; This function uses a non-reentrant model
  8171 ;;
  8172                           
  8173                           	psect	text25
  8174  00DAD6                     __ptext25:
  8175                           	opt stack 0
  8176  00DAD6                     ___ftpack:
  8177                           	opt stack 27
  8178                           
  8179                           ;incstack = 0
  8180  00DAD6  5004               	movf	___ftpack@exp,w,c
  8181  00DAD8  B4D8               	btfsc	status,2,c
  8182  00DADA  D005               	goto	l2965
  8183  00DADC  5001               	movf	___ftpack@arg,w,c
  8184  00DADE  1002               	iorwf	___ftpack@arg+1,w,c
  8185  00DAE0  1003               	iorwf	___ftpack@arg+2,w,c
  8186  00DAE2  A4D8               	btfss	status,2,c
  8187  00DAE4  D00C               	goto	l2971
  8188  00DAE6                     l2965:
  8189  00DAE6  0E00               	movlw	0
  8190  00DAE8  6E01               	movwf	?___ftpack,c
  8191  00DAEA  0E00               	movlw	0
  8192  00DAEC  6E02               	movwf	?___ftpack+1,c
  8193  00DAEE  0E00               	movlw	0
  8194  00DAF0  6E03               	movwf	?___ftpack+2,c
  8195  00DAF2  0012               	return	
  8196  00DAF4                     l2969:
  8197  00DAF4  2A04               	incf	___ftpack@exp,f,c
  8198  00DAF6  90D8               	bcf	status,0,c
  8199  00DAF8  3203               	rrcf	___ftpack@arg+2,f,c
  8200  00DAFA  3202               	rrcf	___ftpack@arg+1,f,c
  8201  00DAFC  3201               	rrcf	___ftpack@arg,f,c
  8202  00DAFE                     l2971:
  8203  00DAFE  0E00               	movlw	0
  8204  00DB00  1401               	andwf	___ftpack@arg,w,c
  8205  00DB02  6E06               	movwf	??___ftpack& (0+255),c
  8206  00DB04  0E00               	movlw	0
  8207  00DB06  1402               	andwf	___ftpack@arg+1,w,c
  8208  00DB08  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8209  00DB0A  0EFE               	movlw	254
  8210  00DB0C  1403               	andwf	___ftpack@arg+2,w,c
  8211  00DB0E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8212  00DB10  5006               	movf	??___ftpack,w,c
  8213  00DB12  1007               	iorwf	??___ftpack+1,w,c
  8214  00DB14  1008               	iorwf	??___ftpack+2,w,c
  8215  00DB16  B4D8               	btfsc	status,2,c
  8216  00DB18  D00C               	goto	l2977
  8217  00DB1A  D7EC               	goto	l2969
  8218  00DB1C                     l2973:
  8219  00DB1C  2A04               	incf	___ftpack@exp,f,c
  8220  00DB1E  0E01               	movlw	1
  8221  00DB20  2601               	addwf	___ftpack@arg,f,c
  8222  00DB22  0E00               	movlw	0
  8223  00DB24  2202               	addwfc	___ftpack@arg+1,f,c
  8224  00DB26  0E00               	movlw	0
  8225  00DB28  2203               	addwfc	___ftpack@arg+2,f,c
  8226  00DB2A  90D8               	bcf	status,0,c
  8227  00DB2C  3203               	rrcf	___ftpack@arg+2,f,c
  8228  00DB2E  3202               	rrcf	___ftpack@arg+1,f,c
  8229  00DB30  3201               	rrcf	___ftpack@arg,f,c
  8230  00DB32                     l2977:
  8231  00DB32  0E00               	movlw	0
  8232  00DB34  1401               	andwf	___ftpack@arg,w,c
  8233  00DB36  6E06               	movwf	??___ftpack& (0+255),c
  8234  00DB38  0E00               	movlw	0
  8235  00DB3A  1402               	andwf	___ftpack@arg+1,w,c
  8236  00DB3C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8237  00DB3E  0EFF               	movlw	255
  8238  00DB40  1403               	andwf	___ftpack@arg+2,w,c
  8239  00DB42  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8240  00DB44  5006               	movf	??___ftpack,w,c
  8241  00DB46  1007               	iorwf	??___ftpack+1,w,c
  8242  00DB48  1008               	iorwf	??___ftpack+2,w,c
  8243  00DB4A  B4D8               	btfsc	status,2,c
  8244  00DB4C  D006               	goto	l2981
  8245  00DB4E  D7E6               	goto	l2973
  8246  00DB50                     l2979:
  8247  00DB50  0604               	decf	___ftpack@exp,f,c
  8248  00DB52  90D8               	bcf	status,0,c
  8249  00DB54  3601               	rlcf	___ftpack@arg,f,c
  8250  00DB56  3602               	rlcf	___ftpack@arg+1,f,c
  8251  00DB58  3603               	rlcf	___ftpack@arg+2,f,c
  8252  00DB5A                     l2981:
  8253  00DB5A  BE02               	btfsc	___ftpack@arg+1,7,c
  8254  00DB5C  D003               	goto	l866
  8255  00DB5E  0E02               	movlw	2
  8256  00DB60  6004               	cpfslt	___ftpack@exp,c
  8257  00DB62  D7F6               	goto	l2979
  8258  00DB64                     l866:
  8259  00DB64  A004               	btfss	___ftpack@exp,0,c
  8260  00DB66  9E02               	bcf	___ftpack@arg+1,7,c
  8261  00DB68  90D8               	bcf	status,0,c
  8262  00DB6A  3204               	rrcf	___ftpack@exp,f,c
  8263  00DB6C  5004               	movf	___ftpack@exp,w,c
  8264  00DB6E  1203               	iorwf	___ftpack@arg+2,f,c
  8265  00DB70  5005               	movf	___ftpack@sign,w,c
  8266  00DB72  A4D8               	btfss	status,2,c
  8267  00DB74  8E03               	bsf	___ftpack@arg+2,7,c
  8268  00DB76  C001  F001         	movff	___ftpack@arg,?___ftpack
  8269  00DB7A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8270  00DB7E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8271  00DB82  0012               	return	
  8272  00DB84                     __end_of___ftpack:
  8273                           	opt stack 0
  8274                           tblptru	equ	0xFF8
  8275                           tblptrh	equ	0xFF7
  8276                           tblptrl	equ	0xFF6
  8277                           tablat	equ	0xFF5
  8278                           prodh	equ	0xFF4
  8279                           prodl	equ	0xFF3
  8280                           intcon	equ	0xFF2
  8281                           intcon2	equ	0xFF1
  8282                           intcon3	equ	0xFF0
  8283                           postinc0	equ	0xFEE
  8284                           wreg	equ	0xFE8
  8285                           plusw1	equ	0xFE3
  8286                           indf2	equ	0xFDF
  8287                           postinc2	equ	0xFDE
  8288                           postdec2	equ	0xFDD
  8289                           plusw2	equ	0xFDB
  8290                           fsr2h	equ	0xFDA
  8291                           fsr2l	equ	0xFD9
  8292                           status	equ	0xFD8
  8293                           
  8294 ;; *************** function _SD_ACMD *****************
  8295 ;; Defined at:
  8296 ;;		line 88 in file "../../src/SD/SD_PIC.c"
  8297 ;; Parameters:    Size  Location     Type
  8298 ;;  cmd             1    wreg     unsigned char 
  8299 ;;  arg             4   12[COMRAM] unsigned long 
  8300 ;; Auto vars:     Size  Location     Type
  8301 ;;  cmd             1   16[COMRAM] unsigned char 
  8302 ;; Return value:  Size  Location     Type
  8303 ;;                  1    wreg      unsigned char 
  8304 ;; Registers used:
  8305 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8306 ;; Tracked objects:
  8307 ;;		On entry : 0/0
  8308 ;;		On exit  : 0/0
  8309 ;;		Unchanged: 0/0
  8310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8311 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8314 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8315 ;;Total ram usage:        5 bytes
  8316 ;; Hardware stack levels used:    1
  8317 ;; Hardware stack levels required when called:    3
  8318 ;; This function calls:
  8319 ;;		_SD_Command
  8320 ;; This function is called by:
  8321 ;;		_initSD
  8322 ;;		_SD_MBW_Start
  8323 ;; This function uses a non-reentrant model
  8324 ;;
  8325                           
  8326                           	psect	text26
  8327  00D5F6                     __ptext26:
  8328                           	opt stack 0
  8329  00D5F6                     _SD_ACMD:
  8330                           	opt stack 26
  8331                           
  8332                           ;incstack = 0
  8333                           ;SD_ACMD@cmd stored from wreg
  8334  00D5F6  6E11               	movwf	SD_ACMD@cmd,c
  8335                           
  8336                           ;SD_PIC.c: 99: SD_Command(CMD55, 0);
  8337  00D5F8  0E00               	movlw	0
  8338  00D5FA  6E04               	movwf	SD_Command@arg,c
  8339  00D5FC  0E00               	movlw	0
  8340  00D5FE  6E05               	movwf	SD_Command@arg+1,c
  8341  00D600  0E00               	movlw	0
  8342  00D602  6E06               	movwf	SD_Command@arg+2,c
  8343  00D604  0E00               	movlw	0
  8344  00D606  6E07               	movwf	SD_Command@arg+3,c
  8345  00D608  0EF9               	movlw	low _CMD55
  8346  00D60A  6EF6               	movwf	tblptrl,c
  8347  00D60C                     	if	1	;There is more than 1 active tblptr byte
  8348  00D60C  0EFE               	movlw	high _CMD55
  8349  00D60E  6EF7               	movwf	tblptrh,c
  8350  00D610                     	endif
  8351  00D610                     	if	0	;There are less than 3 active tblptr bytes
  8352  00D610                     	endif
  8353  00D610  0008               	tblrd		*
  8354  00D612  50F5               	movf	tablat,w,c
  8355  00D614  ECDB  F06C         	call	_SD_Command
  8356                           
  8357                           ;SD_PIC.c: 100: return SD_Command(cmd, arg);
  8358  00D618  C00D  F004         	movff	SD_ACMD@arg,SD_Command@arg
  8359  00D61C  C00E  F005         	movff	SD_ACMD@arg+1,SD_Command@arg+1
  8360  00D620  C00F  F006         	movff	SD_ACMD@arg+2,SD_Command@arg+2
  8361  00D624  C010  F007         	movff	SD_ACMD@arg+3,SD_Command@arg+3
  8362  00D628  5011               	movf	SD_ACMD@cmd,w,c
  8363  00D62A  ECDB  F06C         	call	_SD_Command
  8364  00D62E  0012               	return	
  8365  00D630                     __end_of_SD_ACMD:
  8366                           	opt stack 0
  8367                           tblptru	equ	0xFF8
  8368                           tblptrh	equ	0xFF7
  8369                           tblptrl	equ	0xFF6
  8370                           tablat	equ	0xFF5
  8371                           prodh	equ	0xFF4
  8372                           prodl	equ	0xFF3
  8373                           intcon	equ	0xFF2
  8374                           intcon2	equ	0xFF1
  8375                           intcon3	equ	0xFF0
  8376                           postinc0	equ	0xFEE
  8377                           wreg	equ	0xFE8
  8378                           plusw1	equ	0xFE3
  8379                           indf2	equ	0xFDF
  8380                           postinc2	equ	0xFDE
  8381                           postdec2	equ	0xFDD
  8382                           plusw2	equ	0xFDB
  8383                           fsr2h	equ	0xFDA
  8384                           fsr2l	equ	0xFD9
  8385                           status	equ	0xFD8
  8386                           
  8387 ;; *************** function _SD_Command *****************
  8388 ;; Defined at:
  8389 ;;		line 32 in file "../../src/SD/SD_PIC.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;  cmd             1    wreg     unsigned char 
  8392 ;;  arg             4    3[COMRAM] unsigned long 
  8393 ;; Auto vars:     Size  Location     Type
  8394 ;;  cmd             1    9[COMRAM] unsigned char 
  8395 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  8396 ;;		 -> SD_Command@arg(4), 
  8397 ;;  n               1   11[COMRAM] unsigned char 
  8398 ;;  response        1   10[COMRAM] unsigned char 
  8399 ;; Return value:  Size  Location     Type
  8400 ;;                  1    wreg      unsigned char 
  8401 ;; Registers used:
  8402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8403 ;; Tracked objects:
  8404 ;;		On entry : 0/0
  8405 ;;		On exit  : 0/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8408 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8409 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8412 ;;Total ram usage:        9 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; Hardware stack levels required when called:    2
  8415 ;; This function calls:
  8416 ;;		_spiReceive
  8417 ;;		_spiSend
  8418 ;; This function is called by:
  8419 ;;		_SD_ACMD
  8420 ;;		_initSD
  8421 ;;		_SD_SingleBlockWrite
  8422 ;;		_SD_MBW_Start
  8423 ;;		_SD_MBW_Send
  8424 ;;		_SD_SingleBlockRead
  8425 ;;		_SD_MBR_Start
  8426 ;;		_SD_MBR_Stop
  8427 ;;		_SD_EraseBlocks
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text27
  8432  00D9B6                     __ptext27:
  8433                           	opt stack 0
  8434  00D9B6                     _SD_Command:
  8435                           	opt stack 27
  8436                           
  8437                           ;incstack = 0
  8438                           ;SD_Command@cmd stored from wreg
  8439  00D9B6  6E0A               	movwf	SD_Command@cmd,c
  8440                           
  8441                           ;SD_PIC.c: 42: unsigned char response;
  8442                           ;SD_PIC.c: 43: unsigned char n = 0;
  8443  00D9B8  0E00               	movlw	0
  8444  00D9BA  6E0C               	movwf	SD_Command@n,c
  8445                           
  8446                           ;SD_PIC.c: 46: LATEbits.LATE2 = 0;
  8447  00D9BC  948D               	bcf	3981,2,c	;volatile
  8448  00D9BE                     l3001:
  8449  00D9BE  EC5D  F06A         	call	_spiReceive	;wreg free
  8450  00D9C2  0AFF               	xorlw	255
  8451  00D9C4  A4D8               	btfss	status,2,c
  8452  00D9C6  D7FB               	goto	l3001
  8453                           
  8454                           ;SD_PIC.c: 54: spiSend(cmd | 0x40U);
  8455  00D9C8  500A               	movf	SD_Command@cmd,w,c
  8456  00D9CA  0940               	iorlw	64
  8457  00D9CC  EC61  F06A         	call	_spiSend
  8458                           
  8459                           ;SD_PIC.c: 58: unsigned char* ptr = (unsigned char*)&arg + sizeof(unsigned long) - 1;
  8460  00D9D0  0E07               	movlw	low (SD_Command@arg+3)
  8461  00D9D2  6E08               	movwf	SD_Command@ptr,c
  8462  00D9D4  0E00               	movlw	high (SD_Command@arg+3)
  8463  00D9D6  6E09               	movwf	SD_Command@ptr+1,c
  8464                           
  8465                           ;SD_PIC.c: 59: while(n < 4){
  8466  00D9D8  D00B               	goto	l3013
  8467  00D9DA                     l3007:
  8468                           
  8469                           ;SD_PIC.c: 60: spiSend(*ptr);
  8470  00D9DA  C008  FFD9         	movff	SD_Command@ptr,fsr2l
  8471  00D9DE  C009  FFDA         	movff	SD_Command@ptr+1,fsr2h
  8472  00D9E2  50DF               	movf	indf2,w,c
  8473  00D9E4  EC61  F06A         	call	_spiSend
  8474                           
  8475                           ;SD_PIC.c: 61: ptr--;
  8476  00D9E8  0608               	decf	SD_Command@ptr,f,c
  8477  00D9EA  A0D8               	btfss	status,0,c
  8478  00D9EC  0609               	decf	SD_Command@ptr+1,f,c
  8479                           
  8480                           ;SD_PIC.c: 62: n++;
  8481  00D9EE  2A0C               	incf	SD_Command@n,f,c
  8482  00D9F0                     l3013:
  8483  00D9F0  0E03               	movlw	3
  8484  00D9F2  640C               	cpfsgt	SD_Command@n,c
  8485  00D9F4  D7F2               	goto	l3007
  8486                           
  8487                           ;SD_PIC.c: 63: }
  8488                           ;SD_PIC.c: 68: if(cmd == CMD8){
  8489  00D9F6  0E07               	movlw	low _CMD8
  8490  00D9F8  6EF6               	movwf	tblptrl,c
  8491  00D9FA                     	if	1	;There is more than 1 active tblptr byte
  8492  00D9FA  0EFF               	movlw	high _CMD8
  8493  00D9FC  6EF7               	movwf	tblptrh,c
  8494  00D9FE                     	endif
  8495  00D9FE                     	if	0	;There are less than 3 active tblptr bytes
  8496  00D9FE                     	endif
  8497  00D9FE  0008               	tblrd		*
  8498  00DA00  50F5               	movf	tablat,w,c
  8499  00DA02  620A               	cpfseq	SD_Command@cmd,c
  8500  00DA04  D009               	goto	l3019
  8501                           
  8502                           ;SD_PIC.c: 69: spiSend(CMD8CRC);
  8503  00DA06  0E06               	movlw	low _CMD8CRC
  8504  00DA08  6EF6               	movwf	tblptrl,c
  8505  00DA0A                     	if	1	;There is more than 1 active tblptr byte
  8506  00DA0A  0EFF               	movlw	high _CMD8CRC
  8507  00DA0C  6EF7               	movwf	tblptrh,c
  8508  00DA0E                     	endif
  8509  00DA0E                     	if	0	;There are less than 3 active tblptr bytes
  8510  00DA0E                     	endif
  8511  00DA0E  0008               	tblrd		*
  8512  00DA10  50F5               	movf	tablat,w,c
  8513  00DA12  EC61  F06A         	call	_spiSend
  8514                           
  8515                           ;SD_PIC.c: 70: }
  8516  00DA16  D008               	goto	l3021
  8517  00DA18                     l3019:
  8518                           
  8519                           ;SD_PIC.c: 71: else{
  8520                           ;SD_PIC.c: 72: spiSend(CMD0CRC);
  8521  00DA18  0E09               	movlw	low _CMD0CRC
  8522  00DA1A  6EF6               	movwf	tblptrl,c
  8523  00DA1C                     	if	1	;There is more than 1 active tblptr byte
  8524  00DA1C  0EFF               	movlw	high _CMD0CRC
  8525  00DA1E  6EF7               	movwf	tblptrh,c
  8526  00DA20                     	endif
  8527  00DA20                     	if	0	;There are less than 3 active tblptr bytes
  8528  00DA20                     	endif
  8529  00DA20  0008               	tblrd		*
  8530  00DA22  50F5               	movf	tablat,w,c
  8531  00DA24  EC61  F06A         	call	_spiSend
  8532  00DA28                     l3021:
  8533                           
  8534                           ;SD_PIC.c: 73: }
  8535                           ;SD_PIC.c: 76: n = 0;
  8536  00DA28  0E00               	movlw	0
  8537  00DA2A  6E0C               	movwf	SD_Command@n,c
  8538  00DA2C                     l3023:
  8539                           
  8540                           ;SD_PIC.c: 78: response = spiReceive();
  8541  00DA2C  EC5D  F06A         	call	_spiReceive	;wreg free
  8542  00DA30  6E0B               	movwf	SD_Command@response,c
  8543                           
  8544                           ;SD_PIC.c: 79: n++;
  8545  00DA32  2A0C               	incf	SD_Command@n,f,c
  8546                           
  8547                           ;SD_PIC.c: 80: }while((n < 8) && (response == 0xFF));
  8548  00DA34  0E08               	movlw	8
  8549  00DA36  600C               	cpfslt	SD_Command@n,c
  8550  00DA38  D003               	goto	l248
  8551  00DA3A  280B               	incf	SD_Command@response,w,c
  8552  00DA3C  B4D8               	btfsc	status,2,c
  8553  00DA3E  D7F6               	goto	l3023
  8554  00DA40                     l248:
  8555                           
  8556                           ;SD_PIC.c: 83: LATEbits.LATE2 = 1;
  8557  00DA40  848D               	bsf	3981,2,c	;volatile
  8558                           
  8559                           ;SD_PIC.c: 85: return response;
  8560  00DA42  500B               	movf	SD_Command@response,w,c
  8561  00DA44  0012               	return	
  8562  00DA46                     __end_of_SD_Command:
  8563                           	opt stack 0
  8564                           tblptru	equ	0xFF8
  8565                           tblptrh	equ	0xFF7
  8566                           tblptrl	equ	0xFF6
  8567                           tablat	equ	0xFF5
  8568                           prodh	equ	0xFF4
  8569                           prodl	equ	0xFF3
  8570                           intcon	equ	0xFF2
  8571                           intcon2	equ	0xFF1
  8572                           intcon3	equ	0xFF0
  8573                           postinc0	equ	0xFEE
  8574                           wreg	equ	0xFE8
  8575                           plusw1	equ	0xFE3
  8576                           indf2	equ	0xFDF
  8577                           postinc2	equ	0xFDE
  8578                           postdec2	equ	0xFDD
  8579                           plusw2	equ	0xFDB
  8580                           fsr2h	equ	0xFDA
  8581                           fsr2l	equ	0xFD9
  8582                           status	equ	0xFD8
  8583                           
  8584 ;; *************** function _spiSend *****************
  8585 ;; Defined at:
  8586 ;;		line 33 in file "../../src/SPI/SPI_PIC.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;  val             1    wreg     unsigned char 
  8589 ;; Auto vars:     Size  Location     Type
  8590 ;;  val             1    2[COMRAM] unsigned char 
  8591 ;; Return value:  Size  Location     Type
  8592 ;;                  1    wreg      void 
  8593 ;; Registers used:
  8594 ;;		wreg, status,2, cstack
  8595 ;; Tracked objects:
  8596 ;;		On entry : 0/0
  8597 ;;		On exit  : 0/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8603 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8604 ;;Total ram usage:        1 bytes
  8605 ;; Hardware stack levels used:    1
  8606 ;; Hardware stack levels required when called:    1
  8607 ;; This function calls:
  8608 ;;		_spiTransfer
  8609 ;; This function is called by:
  8610 ;;		_SD_Command
  8611 ;;		_initSD
  8612 ;;		_SD_SendDummyBytes
  8613 ;;		_SD_SingleBlockWrite
  8614 ;;		_SD_MBW_Send
  8615 ;;		_SD_MBW_Stop
  8616 ;;		_SD_SingleBlockRead
  8617 ;;		_SD_MBR_Receive
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           	psect	text28
  8622  00D4C2                     __ptext28:
  8623                           	opt stack 0
  8624  00D4C2                     _spiSend:
  8625                           	opt stack 28
  8626                           
  8627                           ;incstack = 0
  8628                           ;spiSend@val stored from wreg
  8629  00D4C2  6E03               	movwf	spiSend@val,c
  8630                           
  8631                           ;SPI_PIC.c: 41: spiTransfer(val);
  8632  00D4C4  5003               	movf	spiSend@val,w,c
  8633  00D4C6  EC96  F06A         	call	_spiTransfer
  8634  00D4CA  0012               	return		;funcret
  8635  00D4CC                     __end_of_spiSend:
  8636                           	opt stack 0
  8637                           tblptru	equ	0xFF8
  8638                           tblptrh	equ	0xFF7
  8639                           tblptrl	equ	0xFF6
  8640                           tablat	equ	0xFF5
  8641                           prodh	equ	0xFF4
  8642                           prodl	equ	0xFF3
  8643                           intcon	equ	0xFF2
  8644                           intcon2	equ	0xFF1
  8645                           intcon3	equ	0xFF0
  8646                           postinc0	equ	0xFEE
  8647                           wreg	equ	0xFE8
  8648                           plusw1	equ	0xFE3
  8649                           indf2	equ	0xFDF
  8650                           postinc2	equ	0xFDE
  8651                           postdec2	equ	0xFDD
  8652                           plusw2	equ	0xFDB
  8653                           fsr2h	equ	0xFDA
  8654                           fsr2l	equ	0xFD9
  8655                           status	equ	0xFD8
  8656                           
  8657 ;; *************** function _spiReceive *****************
  8658 ;; Defined at:
  8659 ;;		line 44 in file "../../src/SPI/SPI_PIC.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;		None
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;		None
  8664 ;; Return value:  Size  Location     Type
  8665 ;;                  1    wreg      unsigned char 
  8666 ;; Registers used:
  8667 ;;		wreg, status,2, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8677 ;;Total ram usage:        0 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    1
  8680 ;; This function calls:
  8681 ;;		_spiTransfer
  8682 ;; This function is called by:
  8683 ;;		_SD_Command
  8684 ;;		_initSD
  8685 ;;		_SD_SingleBlockWrite
  8686 ;;		_SD_MBW_Send
  8687 ;;		_SD_MBW_Stop
  8688 ;;		_SD_SingleBlockRead
  8689 ;;		_SD_MBR_Receive
  8690 ;; This function uses a non-reentrant model
  8691 ;;
  8692                           
  8693                           	psect	text29
  8694  00D4BA                     __ptext29:
  8695                           	opt stack 0
  8696  00D4BA                     _spiReceive:
  8697                           	opt stack 28
  8698                           
  8699                           ;SPI_PIC.c: 51: return spiTransfer(0xFF);
  8700                           
  8701                           ;incstack = 0
  8702  00D4BA  0EFF               	movlw	255
  8703  00D4BC  EC96  F06A         	call	_spiTransfer
  8704  00D4C0  0012               	return	
  8705  00D4C2                     __end_of_spiReceive:
  8706                           	opt stack 0
  8707                           tblptru	equ	0xFF8
  8708                           tblptrh	equ	0xFF7
  8709                           tblptrl	equ	0xFF6
  8710                           tablat	equ	0xFF5
  8711                           prodh	equ	0xFF4
  8712                           prodl	equ	0xFF3
  8713                           intcon	equ	0xFF2
  8714                           intcon2	equ	0xFF1
  8715                           intcon3	equ	0xFF0
  8716                           postinc0	equ	0xFEE
  8717                           wreg	equ	0xFE8
  8718                           plusw1	equ	0xFE3
  8719                           indf2	equ	0xFDF
  8720                           postinc2	equ	0xFDE
  8721                           postdec2	equ	0xFDD
  8722                           plusw2	equ	0xFDB
  8723                           fsr2h	equ	0xFDA
  8724                           fsr2l	equ	0xFD9
  8725                           status	equ	0xFD8
  8726                           
  8727 ;; *************** function _spiTransfer *****************
  8728 ;; Defined at:
  8729 ;;		line 12 in file "../../src/SPI/SPI_PIC.c"
  8730 ;; Parameters:    Size  Location     Type
  8731 ;;  byteToTransf    1    wreg     unsigned char 
  8732 ;; Auto vars:     Size  Location     Type
  8733 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  8734 ;; Return value:  Size  Location     Type
  8735 ;;                  1    wreg      unsigned char 
  8736 ;; Registers used:
  8737 ;;		wreg, status,2
  8738 ;; Tracked objects:
  8739 ;;		On entry : 0/0
  8740 ;;		On exit  : 0/0
  8741 ;;		Unchanged: 0/0
  8742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8744 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8747 ;;Total ram usage:        2 bytes
  8748 ;; Hardware stack levels used:    1
  8749 ;; This function calls:
  8750 ;;		Nothing
  8751 ;; This function is called by:
  8752 ;;		_spiSend
  8753 ;;		_spiReceive
  8754 ;;		_SD_SingleBlockWrite
  8755 ;;		_SD_MBW_Send
  8756 ;; This function uses a non-reentrant model
  8757 ;;
  8758                           
  8759                           	psect	text30
  8760  00D52C                     __ptext30:
  8761                           	opt stack 0
  8762  00D52C                     _spiTransfer:
  8763                           	opt stack 28
  8764                           
  8765                           ;incstack = 0
  8766                           ;spiTransfer@byteToTransfer stored from wreg
  8767  00D52C  6E02               	movwf	spiTransfer@byteToTransfer,c
  8768                           
  8769                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  8770  00D52E  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  8771  00D532                     l2949:
  8772  00D532  B69E               	btfsc	3998,3,c	;volatile
  8773  00D534  D002               	goto	u2350
  8774  00D536  0E01               	movlw	1
  8775  00D538  D001               	goto	u2352
  8776  00D53A                     u2350:
  8777  00D53A  0E00               	movlw	0
  8778  00D53C                     u2352:
  8779  00D53C  6E01               	movwf	??_spiTransfer& (0+255),c
  8780  00D53E  B0C7               	btfsc	4039,0,c	;volatile
  8781  00D540  D002               	goto	u2360
  8782  00D542  0E01               	movlw	1
  8783  00D544  D001               	goto	u2362
  8784  00D546                     u2360:
  8785  00D546  0E00               	movlw	0
  8786  00D548                     u2362:
  8787  00D548  1001               	iorwf	??_spiTransfer,w,c
  8788  00D54A  E1F3               	bnz	l2949
  8789                           
  8790                           ;SPI_PIC.c: 30: return SSPBUF;
  8791  00D54C  50C9               	movf	4041,w,c	;volatile
  8792  00D54E  0012               	return	
  8793  00D550                     __end_of_spiTransfer:
  8794                           	opt stack 0
  8795                           tblptru	equ	0xFF8
  8796                           tblptrh	equ	0xFF7
  8797                           tblptrl	equ	0xFF6
  8798                           tablat	equ	0xFF5
  8799                           prodh	equ	0xFF4
  8800                           prodl	equ	0xFF3
  8801                           intcon	equ	0xFF2
  8802                           intcon2	equ	0xFF1
  8803                           intcon3	equ	0xFF0
  8804                           postinc0	equ	0xFEE
  8805                           wreg	equ	0xFE8
  8806                           plusw1	equ	0xFE3
  8807                           indf2	equ	0xFDF
  8808                           postinc2	equ	0xFDE
  8809                           postdec2	equ	0xFDD
  8810                           plusw2	equ	0xFDB
  8811                           fsr2h	equ	0xFDA
  8812                           fsr2l	equ	0xFD9
  8813                           status	equ	0xFD8
  8814                           
  8815 ;; *************** function _initLCD *****************
  8816 ;; Defined at:
  8817 ;;		line 60 in file "../../src/CharacterLCD/lcd.c"
  8818 ;; Parameters:    Size  Location     Type
  8819 ;;		None
  8820 ;; Auto vars:     Size  Location     Type
  8821 ;;		None
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  1    wreg      void 
  8824 ;; Registers used:
  8825 ;;		wreg, status,2, status,0, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8833 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8835 ;;Total ram usage:        1 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    2
  8838 ;; This function calls:
  8839 ;;		_lcdInst
  8840 ;; This function is called by:
  8841 ;;		_main
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           	psect	text31
  8846  00D6B4                     __ptext31:
  8847                           	opt stack 0
  8848  00D6B4                     _initLCD:
  8849                           	opt stack 28
  8850                           
  8851                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  8852                           
  8853                           ;incstack = 0
  8854  00D6B4  0EC3               	movlw	195
  8855  00D6B6  6E04               	movwf	??_initLCD& (0+255),c
  8856  00D6B8  0ECD               	movlw	205
  8857  00D6BA                     u4947:
  8858  00D6BA  2EE8               	decfsz	wreg,f,c
  8859  00D6BC  D7FE               	bra	u4947
  8860  00D6BE  2E04               	decfsz	??_initLCD& (0+255),f,c
  8861  00D6C0  D7FC               	bra	u4947
  8862  00D6C2  F000               	nop	
  8863                           
  8864                           ;lcd.c: 69: lcdInst(0b00110011);
  8865  00D6C4  0E33               	movlw	51
  8866  00D6C6  EC66  F06A         	call	_lcdInst
  8867                           
  8868                           ;lcd.c: 70: lcdInst(0b00110010);
  8869  00D6CA  0E32               	movlw	50
  8870  00D6CC  EC66  F06A         	call	_lcdInst
  8871                           
  8872                           ;lcd.c: 71: lcdInst(0b00101000);
  8873  00D6D0  0E28               	movlw	40
  8874  00D6D2  EC66  F06A         	call	_lcdInst
  8875                           
  8876                           ;lcd.c: 72: lcdInst(0b00001111);
  8877  00D6D6  0E0F               	movlw	15
  8878  00D6D8  EC66  F06A         	call	_lcdInst
  8879                           
  8880                           ;lcd.c: 73: lcdInst(0b00000110);
  8881  00D6DC  0E06               	movlw	6
  8882  00D6DE  EC66  F06A         	call	_lcdInst
  8883                           
  8884                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  8885  00D6E2  0E01               	movlw	1
  8886  00D6E4  EC66  F06A         	call	_lcdInst
  8887  00D6E8  0EC3               	movlw	195
  8888  00D6EA  6E04               	movwf	??_initLCD& (0+255),c
  8889  00D6EC  0ECD               	movlw	205
  8890  00D6EE                     u4957:
  8891  00D6EE  2EE8               	decfsz	wreg,f,c
  8892  00D6F0  D7FE               	bra	u4957
  8893  00D6F2  2E04               	decfsz	??_initLCD& (0+255),f,c
  8894  00D6F4  D7FC               	bra	u4957
  8895  00D6F6  F000               	nop	
  8896                           
  8897                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  8898  00D6F8  0E0F               	movlw	15
  8899  00D6FA  EC66  F06A         	call	_lcdInst
  8900  00D6FE  0012               	return		;funcret
  8901  00D700                     __end_of_initLCD:
  8902                           	opt stack 0
  8903                           tblptru	equ	0xFF8
  8904                           tblptrh	equ	0xFF7
  8905                           tblptrl	equ	0xFF6
  8906                           tablat	equ	0xFF5
  8907                           prodh	equ	0xFF4
  8908                           prodl	equ	0xFF3
  8909                           intcon	equ	0xFF2
  8910                           intcon2	equ	0xFF1
  8911                           intcon3	equ	0xFF0
  8912                           postinc0	equ	0xFEE
  8913                           wreg	equ	0xFE8
  8914                           plusw1	equ	0xFE3
  8915                           indf2	equ	0xFDF
  8916                           postinc2	equ	0xFDE
  8917                           postdec2	equ	0xFDD
  8918                           plusw2	equ	0xFDB
  8919                           fsr2h	equ	0xFDA
  8920                           fsr2l	equ	0xFD9
  8921                           status	equ	0xFD8
  8922                           
  8923 ;; *************** function _lcdInst *****************
  8924 ;; Defined at:
  8925 ;;		line 11 in file "../../src/CharacterLCD/lcd.c"
  8926 ;; Parameters:    Size  Location     Type
  8927 ;;  data            1    wreg     unsigned char 
  8928 ;; Auto vars:     Size  Location     Type
  8929 ;;  data            1    2[COMRAM] unsigned char 
  8930 ;; Return value:  Size  Location     Type
  8931 ;;                  1    wreg      void 
  8932 ;; Registers used:
  8933 ;;		wreg, status,2, status,0, cstack
  8934 ;; Tracked objects:
  8935 ;;		On entry : 0/0
  8936 ;;		On exit  : 0/0
  8937 ;;		Unchanged: 0/0
  8938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8942 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8943 ;;Total ram usage:        1 bytes
  8944 ;; Hardware stack levels used:    1
  8945 ;; Hardware stack levels required when called:    1
  8946 ;; This function calls:
  8947 ;;		_lcdNibble
  8948 ;; This function is called by:
  8949 ;;		_main
  8950 ;;		_initLCD
  8951 ;;		_lcd_set_cursor
  8952 ;;		_lcd_shift_cursor
  8953 ;;		_lcd_shift_display
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           	psect	text32
  8958  00D4CC                     __ptext32:
  8959                           	opt stack 0
  8960  00D4CC                     _lcdInst:
  8961                           	opt stack 29
  8962                           
  8963                           ;incstack = 0
  8964                           ;lcdInst@data stored from wreg
  8965  00D4CC  6E03               	movwf	lcdInst@data,c
  8966                           
  8967                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  8968  00D4CE  948C               	bcf	3980,2,c	;volatile
  8969                           
  8970                           ;lcd.c: 20: lcdNibble(data);
  8971  00D4D0  5003               	movf	lcdInst@data,w,c
  8972  00D4D2  EC19  F06C         	call	_lcdNibble
  8973                           
  8974                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  8975  00D4D6  0EC8               	movlw	200
  8976  00D4D8                     u4967:
  8977  00D4D8  D000               	nop2	
  8978  00D4DA  2EE8               	decfsz	wreg,f,c
  8979  00D4DC  D7FD               	bra	u4967
  8980  00D4DE  0012               	return		;funcret
  8981  00D4E0                     __end_of_lcdInst:
  8982                           	opt stack 0
  8983                           tblptru	equ	0xFF8
  8984                           tblptrh	equ	0xFF7
  8985                           tblptrl	equ	0xFF6
  8986                           tablat	equ	0xFF5
  8987                           prodh	equ	0xFF4
  8988                           prodl	equ	0xFF3
  8989                           intcon	equ	0xFF2
  8990                           intcon2	equ	0xFF1
  8991                           intcon3	equ	0xFF0
  8992                           postinc0	equ	0xFEE
  8993                           wreg	equ	0xFE8
  8994                           plusw1	equ	0xFE3
  8995                           indf2	equ	0xFDF
  8996                           postinc2	equ	0xFDE
  8997                           postdec2	equ	0xFDD
  8998                           plusw2	equ	0xFDB
  8999                           fsr2h	equ	0xFDA
  9000                           fsr2l	equ	0xFD9
  9001                           status	equ	0xFD8
  9002                           
  9003 ;; *************** function _lcdNibble *****************
  9004 ;; Defined at:
  9005 ;;		line 37 in file "../../src/CharacterLCD/lcd.c"
  9006 ;; Parameters:    Size  Location     Type
  9007 ;;  data            1    wreg     unsigned char 
  9008 ;; Auto vars:     Size  Location     Type
  9009 ;;  data            1    1[COMRAM] unsigned char 
  9010 ;;  temp            1    0[COMRAM] unsigned char 
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      void 
  9013 ;; Registers used:
  9014 ;;		wreg, status,2, status,0
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9023 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9024 ;;Total ram usage:        2 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; This function calls:
  9027 ;;		Nothing
  9028 ;; This function is called by:
  9029 ;;		_lcdInst
  9030 ;;		_putch
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           	psect	text33
  9035  00D832                     __ptext33:
  9036                           	opt stack 0
  9037  00D832                     _lcdNibble:
  9038                           	opt stack 28
  9039                           
  9040                           ;incstack = 0
  9041                           ;lcdNibble@data stored from wreg
  9042  00D832  6E02               	movwf	lcdNibble@data,c
  9043                           
  9044                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  9045  00D834  5002               	movf	lcdNibble@data,w,c
  9046  00D836  0BF0               	andlw	240
  9047  00D838  6E01               	movwf	lcdNibble@temp,c
  9048                           
  9049                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  9050  00D83A  508C               	movf	3980,w,c	;volatile
  9051  00D83C  0B0F               	andlw	15
  9052  00D83E  6E8C               	movwf	3980,c	;volatile
  9053                           
  9054                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  9055  00D840  5001               	movf	lcdNibble@temp,w,c
  9056  00D842  108C               	iorwf	3980,w,c	;volatile
  9057  00D844  6E8C               	movwf	3980,c	;volatile
  9058                           
  9059                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  9060  00D846  0E00               	movlw	0
  9061  00D848  BEF2               	btfsc	intcon,7,c	;volatile
  9062  00D84A  0E01               	movlw	1
  9063  00D84C  6E7B               	movwf	lcd@LCDinterruptState,c
  9064  00D84E  9EF2               	bcf	intcon,7,c	;volatile
  9065  00D850  868C               	bsf	3980,3,c	;volatile
  9066  00D852  0E53               	movlw	83
  9067  00D854                     u4977:
  9068  00D854  2EE8               	decfsz	wreg,f,c
  9069  00D856  D7FE               	bra	u4977
  9070  00D858  F000               	nop	
  9071  00D85A  968C               	bcf	3980,3,c	;volatile
  9072  00D85C  0EC8               	movlw	200
  9073  00D85E                     u4987:
  9074  00D85E  D000               	nop2	
  9075  00D860  2EE8               	decfsz	wreg,f,c
  9076  00D862  D7FD               	bra	u4987
  9077  00D864  B07B               	btfsc	lcd@LCDinterruptState,0,c
  9078  00D866  D002               	bra	u2505
  9079  00D868  9EF2               	bcf	intcon,7,c	;volatile
  9080  00D86A  D001               	bra	u2506
  9081  00D86C                     u2505:
  9082  00D86C  8EF2               	bsf	intcon,7,c	;volatile
  9083  00D86E                     u2506:
  9084                           
  9085                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  9086  00D86E  3802               	swapf	lcdNibble@data,w,c
  9087  00D870  0BF0               	andlw	240
  9088  00D872  6E02               	movwf	lcdNibble@data,c
  9089                           
  9090                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  9091  00D874  5002               	movf	lcdNibble@data,w,c
  9092  00D876  0BF0               	andlw	240
  9093  00D878  6E01               	movwf	lcdNibble@temp,c
  9094                           
  9095                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  9096  00D87A  508C               	movf	3980,w,c	;volatile
  9097  00D87C  0B0F               	andlw	15
  9098  00D87E  6E8C               	movwf	3980,c	;volatile
  9099                           
  9100                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  9101  00D880  5001               	movf	lcdNibble@temp,w,c
  9102  00D882  108C               	iorwf	3980,w,c	;volatile
  9103  00D884  6E8C               	movwf	3980,c	;volatile
  9104                           
  9105                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  9106  00D886  0E00               	movlw	0
  9107  00D888  BEF2               	btfsc	intcon,7,c	;volatile
  9108  00D88A  0E01               	movlw	1
  9109  00D88C  6E7B               	movwf	lcd@LCDinterruptState,c
  9110  00D88E  9EF2               	bcf	intcon,7,c	;volatile
  9111  00D890  868C               	bsf	3980,3,c	;volatile
  9112  00D892  0E53               	movlw	83
  9113  00D894                     u4997:
  9114  00D894  2EE8               	decfsz	wreg,f,c
  9115  00D896  D7FE               	bra	u4997
  9116  00D898  F000               	nop	
  9117  00D89A  968C               	bcf	3980,3,c	;volatile
  9118  00D89C  0EC8               	movlw	200
  9119  00D89E                     u5007:
  9120  00D89E  D000               	nop2	
  9121  00D8A0  2EE8               	decfsz	wreg,f,c
  9122  00D8A2  D7FD               	bra	u5007
  9123  00D8A4  B07B               	btfsc	lcd@LCDinterruptState,0,c
  9124  00D8A6  D002               	bra	u2515
  9125  00D8A8  9EF2               	bcf	intcon,7,c	;volatile
  9126  00D8AA  D001               	bra	u2516
  9127  00D8AC                     u2515:
  9128  00D8AC  8EF2               	bsf	intcon,7,c	;volatile
  9129  00D8AE                     u2516:
  9130  00D8AE  0012               	return		;funcret
  9131  00D8B0                     __end_of_lcdNibble:
  9132                           	opt stack 0
  9133                           tblptru	equ	0xFF8
  9134                           tblptrh	equ	0xFF7
  9135                           tblptrl	equ	0xFF6
  9136                           tablat	equ	0xFF5
  9137                           prodh	equ	0xFF4
  9138                           prodl	equ	0xFF3
  9139                           intcon	equ	0xFF2
  9140                           intcon2	equ	0xFF1
  9141                           intcon3	equ	0xFF0
  9142                           postinc0	equ	0xFEE
  9143                           wreg	equ	0xFE8
  9144                           plusw1	equ	0xFE3
  9145                           indf2	equ	0xFDF
  9146                           postinc2	equ	0xFDE
  9147                           postdec2	equ	0xFDD
  9148                           plusw2	equ	0xFDB
  9149                           fsr2h	equ	0xFDA
  9150                           fsr2l	equ	0xFD9
  9151                           status	equ	0xFD8
  9152                           tblptru	equ	0xFF8
  9153                           tblptrh	equ	0xFF7
  9154                           tblptrl	equ	0xFF6
  9155                           tablat	equ	0xFF5
  9156                           prodh	equ	0xFF4
  9157                           prodl	equ	0xFF3
  9158                           intcon	equ	0xFF2
  9159                           intcon2	equ	0xFF1
  9160                           intcon3	equ	0xFF0
  9161                           postinc0	equ	0xFEE
  9162                           wreg	equ	0xFE8
  9163                           plusw1	equ	0xFE3
  9164                           indf2	equ	0xFDF
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           plusw2	equ	0xFDB
  9168                           fsr2h	equ	0xFDA
  9169                           fsr2l	equ	0xFD9
  9170                           status	equ	0xFD8
  9171                           
  9172                           	psect	rparam
  9173  0000                     tblptru	equ	0xFF8
  9174                           tblptrh	equ	0xFF7
  9175                           tblptrl	equ	0xFF6
  9176                           tablat	equ	0xFF5
  9177                           prodh	equ	0xFF4
  9178                           prodl	equ	0xFF3
  9179                           intcon	equ	0xFF2
  9180                           intcon2	equ	0xFF1
  9181                           intcon3	equ	0xFF0
  9182                           postinc0	equ	0xFEE
  9183                           wreg	equ	0xFE8
  9184                           plusw1	equ	0xFE3
  9185                           indf2	equ	0xFDF
  9186                           postinc2	equ	0xFDE
  9187                           postdec2	equ	0xFDD
  9188                           plusw2	equ	0xFDB
  9189                           fsr2h	equ	0xFDA
  9190                           fsr2l	equ	0xFD9
  9191                           status	equ	0xFD8


Data Sizes:
    Strings     244
    Constant    184
    Data        0
    BSS         64
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    122     124
    BANK0           128      0      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(COMRAM[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_19(CODE[16]), STR_18(CODE[6]), STR_17(CODE[14]), STR_16(CODE[9]), 
		 -> STR_15(CODE[11]), STR_14(CODE[3]), STR_13(CODE[10]), STR_12(CODE[11]), 
		 -> STR_11(CODE[16]), STR_10(CODE[13]), STR_9(CODE[13]), STR_8(CODE[15]), 
		 -> STR_7(CODE[11]), STR_6(CODE[14]), STR_5(CODE[14]), STR_4(CODE[10]), 
		 -> STR_3(CODE[11]), STR_2(CODE[16]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    SD_Command@ptr	PTR unsigned char  size(2) Largest target is 4
		 -> SD_Command@arg(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcdNibble
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _initSD->___fttol
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftmul->___wmul
    ___ftdiv->___lwtoft
    _SD_ACMD->_SD_Command
    _SD_Command->_spiSend
    _spiSend->_spiTransfer
    _spiReceive->_spiTransfer
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   72946
                                            109 COMRAM    13    13      0
                            _initLCD
                             _initSD
                            _lcdInst
                      _machineConfig
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              49    37     12   52701
                                             63 COMRAM    46    34     12
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   12105
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11907
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     770
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initSD                                              39    39      0   19718
                                             57 COMRAM    39    39      0
                            _SD_ACMD
                         _SD_Command
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                           ___lwtoft
                            _spiInit
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2802
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     632
                                             42 COMRAM    15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5389
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3063
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _SD_ACMD                                              5     1      4    1966
                                             12 COMRAM     5     1      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (2) _SD_Command                                           9     5      4    1770
                                              3 COMRAM     9     5      4
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (2) _spiReceive                                           0     0      0      22
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (3) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _initSD
     _SD_ACMD
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft
       ___ftpack
     ___lwtoft
       ___ftpack
     _spiInit
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _lcdInst
     _lcdNibble
   _machineConfig
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      3E       5       48.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7A      7C       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      BA      34        0.0%
DATA                 0      0      BA       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Apr 17 02:43:48 2018

    __end_of_R1_READY_STATE FEF5                 _SSPSTATbits 000FC7                          l98 ECBC  
               __CFG_CPD$ON 000000          initSD@arr_response 004B                ___awdiv@sign 000C  
       ___wmul@multiplicand 0011                 __CFG_BORV$3 000000                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
              ___ftadd@exp1 0039                ___ftadd@exp2 0038                ___ftadd@sign 0037  
                       l430 D5EC                         l351 ED36                         l248 DA40  
                       l360 EE2C                         l357 EDB6                         l382 EF90  
                       l583 FA14                         l904 E1CA                         l592 FBE4  
                       l913 E1E6                         l834 DF68                         l931 E00C  
                       l924 DC38                         l932 E034                         l866 DB64  
                       l938 E09A                         l963 D58A                         l893 E11A  
                       l889 E0F0                __CFG_CPB$OFF 000000              ?_machineConfig 0001  
           __end_of_CMD0CRC FF0A             __end_of_CMD8CRC FF07                ___awmod@sign 0006  
                       prod 000FF3                         wreg 000FE8               SD_Command@cmd 000A  
             SD_Command@arg 0004               SD_Command@ptr 0008                __CFG_LVP$OFF 000000  
              ___ftdiv@cntr 0015                ___ftdiv@sign 001A                __CFG_WDT$OFF 000000  
                      l1013 D920                        l1023 D7B0                        l3001 D9BE  
                      l3021 DA28                        l3013 D9F0                        l3023 DA2C  
                      l3007 D9DA                        l3121 E196                        l4001 F644  
                      l3019 DA18                        l3115 E17A                        l3211 D956  
                      l4011 F684                        l3117 E184                        l3109 E158  
                      l3221 D978                        l3205 D946                        l4101 F9FE  
                      l3135 E202                        l3127 E1B8                        l3119 E18E  
                      l4111 FA30                        l3161 DCBA                        l3145 E232  
                      l3129 E1C2                        l3217 D96C                        l3233 D99E  
                      l4201 FD0C                        l4121 FB54                        l4105 FA18  
                      l4041 F7AC                        l3155 DC92                        l3219 D974  
                      l4123 FB5E                        l4115 FA80                        l4051 F81E  
                      l4043 F7DA                        l4035 F778                        l4027 F714  
                      l3501 DBAC                        l3093 E128                        l3421 E060  
                      l3237 D9AC                        l3229 D994                        l3261 D7FC  
                      l3253 D7E2                        l3325 E45E                        l3317 E39E  
                      l4205 FD28                        l4213 FE0A                        l4045 F7EA  
                      l3175 DCEC                        l3087 E0FE                        l3431 E088  
                      l4207 FDA0                        l4215 FE20                        l4151 FC04  
                      l4127 FB6A                        l4071 F8FE                        l4055 F842  
                      l4039 F79C                        l3185 DD14                        l3441 DE70  
                      l3433 E094                        l3425 E070                        l3273 D828  
                      l3265 D810                        l3257 D7F0                        l3249 D7D6  
                      l3345 E676                        l4217 FE26                        l4161 FC42  
                      l4137 FBA8                        l4065 F896                        l4129 FB74  
                      l3507 DBD4                        l3179 DCFC                        l3259 D7F8  
                      l3363 E86A                        l3339 E5D2                        l4163 FC46  
                      l4155 FC28                        l4083 F936                        l4219 FE36  
                      l4251 E8F6                        l3189 DD24                        l3613 DE40  
                      l3605 DE18                        l3293 D5C8                        l3461 DED0  
                      l3269 D81A                        l3357 E7C6                        l3349 E69A  
                      l4093 F9DA                        l4069 F8FA                        l4253 E904  
                      l4261 E938                        l4237 E8A0                        l3527 DC12  
                      l3607 DE24                        l3295 D5CC                        l3711 ECFA  
                      l3623 D8D2                        l3447 DE8E                        l3391 DFD2  
                      l3375 D524                        l4175 FC7E                        l4191 FCBA  
                      l4095 F9E4                        l4087 F952                        l4255 E912  
                      l3609 DE2A                        l3297 D5D0                        l3553 DA76  
                      l3545 D646                        l3625 D8DE                        l3481 DF2E  
                      l3385 DFA6                        l4177 FC82                        l4193 FCD0  
                      l4249 E8E8                        l4361 ECB0                        l3299 D5D6  
                      l3811 EF3A                        l3723 ED24                        l3563 DAD2  
                      l3635 D912                        l3627 D8E2                        l3651 D7A2  
                      l3643 D76E                        l3491 DF56                        l4099 F9F0  
                      l4259 E920                        l3821 EF80                        l3741 ED94  
                      l3733 ED38                        l3709 ECF2                        l3557 DAA6  
                      l3645 D77A                        l3493 DF62                        l3485 DF3E  
                      l3469 DF00                        l4197 FCEC                        l3831 EF92  
                      l3807 EF32                        l3735 ED6C                        l3727 ED2C  
                      l3647 D77E                        l3577 DD8A                        l3657 D706  
                      l3825 EF88                        l3761 EE0A                        l3745 ED9C  
                      l2971 DAFE                        l3595 DDF0                        l3659 D712  
                      l3843 F00E                        l2949 D532                        l2981 DB5A  
                      l2973 DB1C                        l2965 DAE6                        l3933 F464  
                      l3853 F030                        l3765 EE12                        l3941 F4DA  
                      l3599 DE00                        l3935 F46C                        l3847 F016  
                      l3839 EFF2                        l3791 EE72                        l2977 DB32  
                      l2969 DAF4                        l3881 F2E4                        l3865 F11C  
                      l3793 EE82                        l3777 EE36                        l3953 F516  
                      l3945 F4EC                        l2979 DB50                        l3891 F306  
                      l3875 F2CA                        l3787 EE5A                        l3963 F56E  
                      l3885 F2EC                        l3981 F5BE                        l3965 F572  
                      l3957 F54C                        l3799 EEDC                        l3975 F598  
                      l3967 F576                        l3959 F562                        l3985 F5D2  
                      l3969 F57A                        l3993 F5EA                        l3979 F5AA  
                      l3995 F630                        l3989 F5E4                        _CMD0 FF0A  
                      _CMD1 FF08                        _CMD8 FF07                        _CMD9 FF05  
                      STR_1 FF1C                        STR_2 FF3D                        STR_3 FFB0  
                      STR_4 FFDC                        STR_5 FF88                        STR_6 FF7A  
                      STR_7 FFD1                        STR_8 FF5D                        STR_9 FFA3  
                      u3001 DF8A                        u3021 DFB6                        _LATA 000F89  
                      _LATB 000F8A                        _LATC 000F8B                        _LATD 000F8C  
                      _LATE 000F8D                        u2350 D53A                        u2360 D546  
                      u2352 D53C                        u4040 FA0E                        u2505 D86C  
                      u3161 DB94                        u2521 E0BC                        u2506 D86E  
                      u2362 D548                        u2515 D8AC                        u3411 ECD0  
                      u2531 E0D0                        u2516 D8AE                        u3181 DBBC  
                      u3261 DD6E                        u5007 D89E                        u3280 DDA8  
                      u3610 EF76                        u2731 DC7A                printf@tmpval 0060  
                      u3620 EF78                        u3285 DDA0                        u2751 DCA2  
                      u3720 F1F2                        u3705 F130                        u3730 F22C  
                      u3715 F1CA                        u4275 EBD8                        _PEIE 007F96  
                      u3725 F1E8                        u3735 F222                        u4707 E8CA  
                      u4717 E942                        u4807 EACE                        u4727 E95C  
                      u3880 F6BC                        u4817 EAE8                        u4737 E972  
                      u4907 D4EC                        u4827 EAFE                        u4747 E9BC  
                      u4917 ECF4                        u3885 F6B2                        u4837 EB86  
                      u4757 E9D6                        u4927 ED0E                        u4847 EBA0  
                      u4767 E9EC                        u4937 F466                        u4857 EBB6  
                      u4777 EA2A                        u4697 E8B4                        u4947 D6BA  
                      u4867 EC32                        u4787 EA44                        u4957 D6EE  
                      u4877 EC4C                        u4797 EA5A                        u4967 D4D8  
                      u4887 EC62                        u4977 D854                        u4897 ECA0  
                      u4987 D85E                        u4997 D894             __end_of_SD_ACMD D630  
                      _main E88E                ___ftpack@arg 0001                ___ftpack@exp 0004  
                      fsr2h 000FDA                        indf2 000FDF                        fsr2l 000FD9  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
             __CFG_IESO$OFF 000000              initSD@argument 0041               __CFG_MCLRE$ON 000000  
              ___ftmul@cntr 0022                ___param_bank 000000                ___ftmul@sign 0023  
          __end_of_LCD_LEFT FEEA                ___fttol@exp1 0039                ___fttol@lval 0035  
                     ?_main 0001                       _CMD10 FF04                       _CMD12 FF03  
                     _CMD13 FF02                       _CMD16 FF01                       _CMD24 FEFE  
                     _CMD32 FEFC                       _CMD17 FF00                       _CMD25 FEFD  
                     _CMD33 FEFB                       _CMD18 FEFF                       _CMD38 FEFA  
                     _CMD55 FEF9                       _CMD58 FEF8             __end_of___awdiv D9B6  
           __end_of___ftadd E258                       STR_10 FF96                       STR_11 FF4D  
                     STR_12 FFBB                       STR_20 FF0B                       STR_13 FFE6  
                     STR_14 FFAD                       STR_15 FFC6                       STR_16 FFF0  
                     STR_17 FF6C                       STR_18 FFF9                       STR_19 FF2D  
           __end_of___awmod D832              initSD@tempSize 0047             __end_of___ftdiv DC6A  
           __end_of___ftneg D598             __end_of___lldiv D932             __end_of___ftmul DD5E  
           ___awdiv@divisor 0009             __end_of___llmod D7C2             __end_of___ftsub D670  
           __end_of___fttol DE52              initSD@response 005F             ___awdiv@counter 000B  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TRISE 000F96                       _SSPIF 007CF3  
        initSD@last_OSCTUNE 0046               __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000  
              ___lltoft@exp 0011             __end_of_lcdInst D4E0              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000                       _nRBPU 007F8F               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000             __end_of_initLCD D700  
            __CFG_EBTRB$OFF 000000             __end_of_dpowers FE7B                       _scale E49E  
           __end_of_isdigit D52C               ___ftpack@sign 0005                       _putch D4E0  
               initSD@F3023 00AE             __end_of_spiInit D5F6                       tablat 000FF5  
           __end_of_spiSend D4CC           _LCDinterruptState 007C                       plusw1 000FE3  
                     plusw2 000FDB                 ?_SD_Command 0004                       status 000FD8  
            __CFG_PBADEN$ON 000000                __end_of_CMD0 FF0B                __end_of_CMD1 FF09  
              __end_of_CMD8 FF08                __end_of_CMD9 FF06             __initialization D4F4  
              __end_of_main ECBE              __CFG_OSC$HSPLL 000000             ??_machineConfig 0001  
         __end_of_LCD_RIGHT FEEB                      ??_main 006E               ___fttol@sign1 0034  
             __activetblptr 000002        __size_of__tdiv_to_l_ 0132          SD_Command@response 000B  
                 ??_SD_ACMD 0011                      _ACMD22 FEF7                      _ACMD23 FEF6  
                    _ACMD41 FEF5                      _ADCON0 000FC2                      _ADCON1 000FC1  
                    _ADCON2 000FC0            ___llmod@dividend 000E                      ?_scale 0024  
          ___awdiv@dividend 0007                      ?_putch 0001            __end_of___ftpack DB84  
          __end_of___lltoft D75C                      _INT1IE 007F83                      _CVRCON 000FB5  
          __end_of___lwtoft D574                      _OSCCON 000FD3                      _SDCard 0080  
                    _SSPBUF 000FC9              __CFG_XINST$OFF 000000            __end_of__powers_ FEA2  
                    ___ftge DA46                      ___wmul D598                   ??___awdiv 000B  
                 ??___ftadd 0034              __CFG_STVREN$ON 000000                   ??___awmod 0005  
                 ??___ftdiv 0012                   ??___ftneg 0004                   ??___lldiv 0009  
                 ??___ftmul 001B                   ??___llmod 0016                   ??___ftsub 0040  
                 ??___fttol 002F                      _initSD ECBE                      _fround E258  
                    clear_0 D4FA            ___awdiv@quotient 000D             ___awmod@divisor 0003  
           ___awmod@counter 0005                   ??_lcdInst 0003                      _printf F4CE  
     ___ftmul@f3_as_product 001F                   ??_initLCD 0004         __size_of_SD_Command 0090  
         __end_of_STOP_TRAN FEF0                   ??_isdigit 0001                ?_spiTransfer 0001  
              __mediumconst FE52                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_spiInit 0001                   ??_spiSend 0003  
                __accesstop 0080     __end_of__initialization D504                  ___ftadd@f1 002E  
                ___ftadd@f2 0031                  ___ftge@ff1 0001                  ___ftge@ff2 0004  
             __end_of_CMD10 FF05               __end_of_CMD12 FF04               __end_of_CMD13 FF03  
             __end_of_CMD16 FF02               __end_of_CMD24 FEFF               __end_of_CMD32 FEFD  
             __end_of_CMD17 FF01               __end_of_CMD25 FEFE               __end_of_CMD33 FEFC  
             __end_of_CMD18 FF00               __end_of_CMD38 FEFB               __end_of_CMD55 FEFA  
             __end_of_CMD58 FEF9               ___rparam_used 000001                  ___ftdiv@f1 000C  
                ___ftdiv@f2 000F                  ___ftdiv@f3 0016                  ___ftneg@f1 0001  
                ___ftmul@f1 0015                  ___ftmul@f2 0018                  ___ftsub@f1 003A  
                ___ftsub@f2 003D                  ___fttol@f1 002B              __pcstackCOMRAM 0001  
                ___lltoft@c 0009               __end_of_scale E88E               __end_of_putch D4F4  
         _START_BLOCK_TOKEN FEF0                  ___lwtoft@c 0009          __size_of_lcdNibble 007E  
                __div_to_l_ DE52             __div_to_l_@exp1 000C             __div_to_l_@cntr 000B  
                   ??_scale 0027             __div_to_l_@quot 0007                     ??_putch 0003  
                __pbssBANK0 0080               __div_to_l_@f1 0001               __div_to_l_@f2 0004  
                   ?___ftge 0001                     ?___wmul 000F   __end_of_START_BLOCK_TOKEN FEF1  
                   ?_initSD 0001                     _CMD0CRC FF09                     ?_fround 0024  
                   _CMD8CRC FF06                   ?___ftpack 0001                     ?_printf 0040  
                 ?___lltoft 0009                   ?___lwtoft 0009                     _SD_ACMD D5F6  
                   _OSCTUNE 000F9B   spiTransfer@byteToTransfer 0002        lcd@LCDinterruptState 007B  
                   _SSPCON1 000FC6                     _SSPSTAT 000FC7                ??_SD_Command 0008  
         __end_of_lcdNibble D8B0          initSD@tempSize_560 005B           __end_of__npowers_ FEC9  
                   __Hparam 0000                  _scale$1546 0027                     __Lparam 0000  
           __size_of___ftge 0090                     ___awdiv D932                     ___ftadd E0AC  
                   ___awmod D7C2                     ___ftdiv DB84                     ___ftneg D574  
                   ___lldiv D8B0             __size_of___wmul 0026                     ___ftmul DC6A  
                   ___llmod D75C                     ___ftsub D630                     ___fttol DD5E  
                 _CMCONbits 000FB4             __size_of_initSD 0810                     __pcinit D4F4  
                ??___ftpack 0006             __size_of_fround 0246                     __ramtop 1000  
                   _lcdInst D4CC                  ??___lltoft 000D                     __ptext0 E88E  
                   __ptext1 F4CE                     __ptext2 E49E                     __ptext3 D4E0  
                   __ptext4 D50E                     __ptext5 E258                     __ptext6 D598  
                   __ptext7 D7C2                     __ptext8 D932                     __ptext9 DF7A  
           __size_of_printf 0984                  ??___lwtoft 000C                     _initLCD D6B4  
         __end_of_hexpowers FEE9                 ?__div_to_l_ 0001                     _dpowers FE53  
        __end_of_SD_Command DA46                     _isdigit D50E            ___awmod@dividend 0001  
                 _LCD_RIGHT FEEA                     _spiInit D5BE                     _spiSend D4C2  
                   main@PNM 0076        __size_of_spiTransfer 0024        end_of_initialization D504  
                   initSD@i 0060       __end_of_R1_IDLE_STATE FEF4       __end_of_LCD_SIZE_HORZ FEED  
     __end_of_LCD_SIZE_VERT FEEC               __Lmediumconst FE52             ___lldiv@divisor 0005  
           ___lldiv@counter 000D                     printf@c 006D                     printf@f 0040  
                _spiReceive D4BA                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE              __tdiv_to_l_@f1 0001              __tdiv_to_l_@f2 0004  
             ??__tdiv_to_l_ 0007       __end_of_machineConfig D6B4              spiInit@divider 0001  
                 _TRISCbits 000F94                   _TRISEbits 000F96                   _STOP_TRAN FEEF  
               SD_Command@n 000C              __end_of_ACMD22 FEF8              __end_of_ACMD23 FEF7  
            __end_of_ACMD41 FEF6                 ___ftdiv@exp 0019         __size_of__div_to_l_ 0128  
               ___ftmul@exp 001E              __end_of___ftge DAD6              __end_of___wmul D5BE  
         initSD@last_OSCCON 0045              __end_of_initSD F4CE              __end_of_fround E49E  
            __end_of_printf FE52         start_initialization D4F4         __end_of__tdiv_to_l_ E0AC  
__end_of_R1_ILLEGAL_COMMAND FEF3             ___llmod@divisor 0012             ___llmod@counter 0016  
                  ??___ftge 0007                 ?_spiReceive 0001                    ??___wmul 0013  
          __CFG_LPT1OSC$OFF 000000                    ??_initSD 003A                    ??_fround 0027  
                  ??_printf 004C                  fround@prec 002D           __size_of___ftpack 00AE  
         __size_of___lltoft 005C                 __pbssCOMRAM 007B           __size_of___lwtoft 0024  
                  ?_SD_ACMD 000D                _isdigit$1176 0002           __CFG_CCP2MX$PORTC 000000  
             __pmediumconst FE52                  SD_ACMD@cmd 0011                  SD_ACMD@arg 000D  
                 _lcdNibble D832                    ?___awdiv 0007                    ?___ftadd 002E  
                  ?___awmod 0001                    ?___ftdiv 000C                    ?___ftneg 0001  
                  ?___lldiv 0001                    ?___ftmul 0015                    ?___llmod 000E  
                  ?___ftsub 003A                   __npowers_ FEA2                    ?___fttol 002B  
                  ?_lcdInst 0001                 __tdiv_to_l_ DF7A                ??__div_to_l_ 0007  
                  ?_initLCD 0001                    ?_isdigit 0001                    ?_spiInit 0001  
                  ?_spiSend 0001                   _hexpowers FEC9              __size_of_scale 03F0  
       __size_of_spiReceive 0008              __size_of_putch 0014                    _LCD_LEFT FEE9  
            ___wmul@product 0013                    _LATDbits 000F8C                    _LATEbits 000F8D  
                spiSend@val 0003          __end_of__div_to_l_ DF7A            __CFG_WDTPS$32768 000000  
                ?_lcdNibble 0001           ___wmul@multiplier 000F               lcdNibble@data 0002  
                printf@flag 005E               lcdNibble@temp 0001                  printf@fval 0068  
             ??_spiTransfer 0001                  printf@prec 006B                   main@month 0075  
            _LCD_HORZ_LIMIT FEEE            __size_of_SD_ACMD 003A                    __Hrparam 0000  
                  __Lrparam 0000          __CFG_BOREN$SBORDIS 000000            __size_of___awdiv 0084  
          __size_of___ftadd 01AC            __size_of___awmod 0070            __size_of___ftdiv 00E6  
          __size_of___ftneg 0024            __size_of___lldiv 0082            __size_of___ftmul 00F4  
          __size_of___llmod 0066            __size_of___ftsub 0040            __size_of___fttol 00F4  
                  ___ftpack DAD6                 _fround$1544 002A                 _fround$1545 0027  
                  ___lltoft D700                    ___lwtoft D550            __size_of_lcdInst 0014  
          __size_of_initLCD 004C      __end_of_LCD_HORZ_LIMIT FEEF            __size_of_isdigit 001E  
                  __ptext10 DE52                    __ptext11 D75C                    __ptext20 D550  
                  __ptext12 D8B0                    __ptext21 D700                    __ptext13 D630  
                  __ptext30 D52C                    __ptext22 DD5E                    __ptext14 E0AC  
                  __ptext31 D6B4                    __ptext23 DC6A                    __ptext15 D574  
                  __ptext32 D4CC                    __ptext24 DB84                    __ptext16 DA46  
                  __ptext33 D832                    __ptext25 DAD6                    __ptext17 D670  
                  __ptext26 D5F6                    __ptext18 ECBE                    __ptext27 D9B6  
                  __ptext19 D5BE                    __ptext28 D4C2                    __ptext29 D4BA  
          __size_of_spiInit 0038            __size_of_spiSend 000A                    __powers_ FE7B  
       __end_of_START_BLOCK FEF2              _LCD_VERT_LIMIT FEED         __end_of_spiTransfer D550  
             __size_of_main 0430      __size_of_machineConfig 0044          _R1_ILLEGAL_COMMAND FEF2  
              ??_spiReceive 0003                 ??_lcdNibble 0001                   printf@idx 0057  
                 printf@len 0058                   printf@exp 005C                   printf@val 0064  
                  main@year 0073                   putch@data 0003                 _OSCTUNEbits 000F9B  
                _INTCONbits 000FF2      __end_of_LCD_VERT_LIMIT FEEE                    isdigit@c 0003  
                  scale@scl 002A          __end_of_spiReceive D4C2            __tdiv_to_l_@exp1 000F  
          __tdiv_to_l_@cntr 000E            __tdiv_to_l_@quot 000A               _R1_IDLE_STATE FEF3  
             _LCD_SIZE_HORZ FEEC               _LCD_SIZE_VERT FEEB            ___lldiv@dividend 0001  
                _OSCCONbits 000FD3                    printf@ap 005A                    printf@cp 0055  
            _R1_READY_STATE FEF4                 lcdInst@data 0003                ?__tdiv_to_l_ 0001  
               _printf$1547 0052                 _START_BLOCK FEF1            ___lldiv@quotient 0009  
             _machineConfig D670                 _spiTransfer D52C                 _SSPCON1bits 000FC6  
                _SD_Command D9B6  
