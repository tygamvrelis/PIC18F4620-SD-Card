

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 11 01:30:33 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,inline
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	text30,global,reloc=2,class=CODE,delta=1
    41                           	psect	text31,global,reloc=2,class=CODE,delta=1
    42                           	psect	text32,global,reloc=2,class=CODE,delta=1
    43                           	psect	text33,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46  0000                     
    47                           ; Version 1.42
    48                           ; Generated 13/04/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4620 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	smallconst
    83  001000                     __psmallconst:
    84                           	opt stack 0
    85  001000  00                 	db	0
    86  001001                     _dpowers:
    87                           	opt stack 0
    88  001001  0001               	dw	1
    89  001003  0000               	dw	0
    90  001005  000A               	dw	10
    91  001007  0000               	dw	0
    92  001009  0064               	dw	100
    93  00100B  0000               	dw	0
    94  00100D  03E8               	dw	1000
    95  00100F  0000               	dw	0
    96  001011  2710               	dw	10000
    97  001013  0000               	dw	0
    98  001015  86A0               	dw	34464
    99  001017  0001               	dw	1
   100  001019  4240               	dw	16960
   101  00101B  000F               	dw	15
   102  00101D  9680               	dw	38528
   103  00101F  0098               	dw	152
   104  001021  E100               	dw	57600
   105  001023  05F5               	dw	1525
   106  001025  CA00               	dw	51712
   107  001027  3B9A               	dw	15258
   108  001029                     __end_of_dpowers:
   109                           	opt stack 0
   110  001029                     _LCD_LINE4_ADDR:
   111                           	opt stack 0
   112  001029  50                 	db	80
   113  00102A                     __end_of_LCD_LINE4_ADDR:
   114                           	opt stack 0
   115  00102A                     _LCD_LINE3_ADDR:
   116                           	opt stack 0
   117  00102A  10                 	db	16
   118  00102B                     __end_of_LCD_LINE3_ADDR:
   119                           	opt stack 0
   120  00102B                     _LCD_LINE1_ADDR:
   121                           	opt stack 0
   122  00102B  00                 	db	0
   123  00102C                     __end_of_LCD_LINE1_ADDR:
   124                           	opt stack 0
   125  00102C                     _LCD_SIZE_VERT:
   126                           	opt stack 0
   127  00102C  04                 	db	4
   128  00102D                     __end_of_LCD_SIZE_VERT:
   129                           	opt stack 0
   130  00102D                     _LCD_SIZE_HORZ:
   131                           	opt stack 0
   132  00102D  10                 	db	16
   133  00102E                     __end_of_LCD_SIZE_HORZ:
   134                           	opt stack 0
   135  00102E                     _STOP_TRAN:
   136                           	opt stack 0
   137  00102E  FD                 	db	253
   138  00102F                     __end_of_STOP_TRAN:
   139                           	opt stack 0
   140  00102F                     _START_BLOCK_TOKEN:
   141                           	opt stack 0
   142  00102F  FC                 	db	252
   143  001030                     __end_of_START_BLOCK_TOKEN:
   144                           	opt stack 0
   145  001030                     _START_BLOCK:
   146                           	opt stack 0
   147  001030  FE                 	db	254
   148  001031                     __end_of_START_BLOCK:
   149                           	opt stack 0
   150  001031                     _R1_ILLEGAL_COMMAND:
   151                           	opt stack 0
   152  001031  04                 	db	4
   153  001032                     __end_of_R1_ILLEGAL_COMMAND:
   154                           	opt stack 0
   155  001032                     _R1_IDLE_STATE:
   156                           	opt stack 0
   157  001032  01                 	db	1
   158  001033                     __end_of_R1_IDLE_STATE:
   159                           	opt stack 0
   160  001033                     _R1_READY_STATE:
   161                           	opt stack 0
   162  001033  00                 	db	0
   163  001034                     __end_of_R1_READY_STATE:
   164                           	opt stack 0
   165  001034                     _ACMD41:
   166                           	opt stack 0
   167  001034  29                 	db	41
   168  001035                     __end_of_ACMD41:
   169                           	opt stack 0
   170  001035                     _ACMD23:
   171                           	opt stack 0
   172  001035  17                 	db	23
   173  001036                     __end_of_ACMD23:
   174                           	opt stack 0
   175  001036                     _ACMD22:
   176                           	opt stack 0
   177  001036  16                 	db	22
   178  001037                     __end_of_ACMD22:
   179                           	opt stack 0
   180  001037                     _CMD58:
   181                           	opt stack 0
   182  001037  3A                 	db	58
   183  001038                     __end_of_CMD58:
   184                           	opt stack 0
   185  001038                     _CMD55:
   186                           	opt stack 0
   187  001038  37                 	db	55
   188  001039                     __end_of_CMD55:
   189                           	opt stack 0
   190  001039                     _CMD38:
   191                           	opt stack 0
   192  001039  26                 	db	38
   193  00103A                     __end_of_CMD38:
   194                           	opt stack 0
   195  00103A                     _CMD33:
   196                           	opt stack 0
   197  00103A  21                 	db	33
   198  00103B                     __end_of_CMD33:
   199                           	opt stack 0
   200  00103B                     _CMD32:
   201                           	opt stack 0
   202  00103B  20                 	db	32
   203  00103C                     __end_of_CMD32:
   204                           	opt stack 0
   205  00103C                     _CMD25:
   206                           	opt stack 0
   207  00103C  19                 	db	25
   208  00103D                     __end_of_CMD25:
   209                           	opt stack 0
   210  00103D                     _CMD24:
   211                           	opt stack 0
   212  00103D  18                 	db	24
   213  00103E                     __end_of_CMD24:
   214                           	opt stack 0
   215  00103E                     _CMD18:
   216                           	opt stack 0
   217  00103E  12                 	db	18
   218  00103F                     __end_of_CMD18:
   219                           	opt stack 0
   220  00103F                     _CMD17:
   221                           	opt stack 0
   222  00103F  11                 	db	17
   223  001040                     __end_of_CMD17:
   224                           	opt stack 0
   225  001040                     _CMD16:
   226                           	opt stack 0
   227  001040  10                 	db	16
   228  001041                     __end_of_CMD16:
   229                           	opt stack 0
   230  001041                     _CMD13:
   231                           	opt stack 0
   232  001041  0D                 	db	13
   233  001042                     __end_of_CMD13:
   234                           	opt stack 0
   235  001042                     _CMD12:
   236                           	opt stack 0
   237  001042  0C                 	db	12
   238  001043                     __end_of_CMD12:
   239                           	opt stack 0
   240  001043                     _CMD10:
   241                           	opt stack 0
   242  001043  0A                 	db	10
   243  001044                     __end_of_CMD10:
   244                           	opt stack 0
   245  001044                     _CMD9:
   246                           	opt stack 0
   247  001044  09                 	db	9
   248  001045                     __end_of_CMD9:
   249                           	opt stack 0
   250  001045                     _CMD8CRC:
   251                           	opt stack 0
   252  001045  87                 	db	135
   253  001046                     __end_of_CMD8CRC:
   254                           	opt stack 0
   255  001046                     _CMD8:
   256                           	opt stack 0
   257  001046  08                 	db	8
   258  001047                     __end_of_CMD8:
   259                           	opt stack 0
   260  001047                     _CMD1:
   261                           	opt stack 0
   262  001047  01                 	db	1
   263  001048                     __end_of_CMD1:
   264                           	opt stack 0
   265  001048                     _CMD0CRC:
   266                           	opt stack 0
   267  001048  95                 	db	149
   268  001049                     __end_of_CMD0CRC:
   269                           	opt stack 0
   270  001049                     _CMD0:
   271                           	opt stack 0
   272  001049  00                 	db	0
   273  00104A                     __end_of_CMD0:
   274                           	opt stack 0
   275  00104A                     _LCD_LINE2_ADDR:
   276                           	opt stack 0
   277  00104A  40                 	db	64
   278  00104B                     __end_of_LCD_LINE2_ADDR:
   279                           	opt stack 0
   280  0000                     _LATDbits	set	3980
   281  0000                     _INTCONbits	set	4082
   282  0000                     _TRISCbits	set	3988
   283  0000                     _SSPCON1	set	4038
   284  0000                     _SSPSTAT	set	4039
   285  0000                     _SSPSTATbits	set	4039
   286  0000                     _SSPBUF	set	4041
   287  0000                     _TRISEbits	set	3990
   288  0000                     _OSCCONbits	set	4051
   289  0000                     _OSCTUNEbits	set	3995
   290  0000                     _OSCTUNE	set	3995
   291  0000                     _OSCCON	set	4051
   292  0000                     _LATEbits	set	3981
   293  0000                     _SSPCON1bits	set	4038
   294  0000                     _TRISD	set	3989
   295  0000                     _LATD	set	3980
   296  0000                     _SSPIF	set	31987
   297  00104B                     STR_9:
   298  00104B  52                 	db	82	;'R'
   299  00104C  65                 	db	101	;'e'
   300  00104D  61                 	db	97	;'a'
   301  00104E  64                 	db	100	;'d'
   302  00104F  69                 	db	105	;'i'
   303  001050  6E                 	db	110	;'n'
   304  001051  67                 	db	103	;'g'
   305  001052  20                 	db	32
   306  001053  73                 	db	115	;'s'
   307  001054  65                 	db	101	;'e'
   308  001055  63                 	db	99	;'c'
   309  001056  74                 	db	116	;'t'
   310  001057  6F                 	db	111	;'o'
   311  001058  72                 	db	114	;'r'
   312  001059  20                 	db	32
   313  00105A  30                 	db	48	;'0'
   314  00105B  00                 	db	0
   315  00105C                     STR_12:
   316  00105C  52                 	db	82	;'R'
   317  00105D  65                 	db	101	;'e'
   318  00105E  61                 	db	97	;'a'
   319  00105F  64                 	db	100	;'d'
   320  001060  69                 	db	105	;'i'
   321  001061  6E                 	db	110	;'n'
   322  001062  67                 	db	103	;'g'
   323  001063  20                 	db	32
   324  001064  73                 	db	115	;'s'
   325  001065  65                 	db	101	;'e'
   326  001066  63                 	db	99	;'c'
   327  001067  74                 	db	116	;'t'
   328  001068  6F                 	db	111	;'o'
   329  001069  72                 	db	114	;'r'
   330  00106A  73                 	db	115	;'s'
   331  00106B  00                 	db	0
   332  00106C                     STR_4:
   333  00106C  77                 	db	119	;'w'
   334  00106D  72                 	db	114	;'r'
   335  00106E  69                 	db	105	;'i'
   336  00106F  74                 	db	116	;'t'
   337  001070  65                 	db	101	;'e'
   338  001071  20                 	db	32
   339  001072  66                 	db	102	;'f'
   340  001073  69                 	db	105	;'i'
   341  001074  6E                 	db	110	;'n'
   342  001075  69                 	db	105	;'i'
   343  001076  73                 	db	115	;'s'
   344  001077  68                 	db	104	;'h'
   345  001078  65                 	db	101	;'e'
   346  001079  64                 	db	100	;'d'
   347  00107A  00                 	db	0
   348  00107B                     STR_1:
   349  00107B  49                 	db	73	;'I'
   350  00107C  6E                 	db	110	;'n'
   351  00107D  69                 	db	105	;'i'
   352  00107E  74                 	db	116	;'t'
   353  00107F  20                 	db	32
   354  001080  73                 	db	115	;'s'
   355  001081  75                 	db	117	;'u'
   356  001082  63                 	db	99	;'c'
   357  001083  63                 	db	99	;'c'
   358  001084  65                 	db	101	;'e'
   359  001085  73                 	db	115	;'s'
   360  001086  73                 	db	115	;'s'
   361  001087  21                 	db	33
   362  001088  00                 	db	0
   363  001089                     STR_5:
   364  001089  4D                 	db	77	;'M'
   365  00108A  42                 	db	66	;'B'
   366  00108B  57                 	db	87	;'W'
   367  00108C  20                 	db	32
   368  00108D  53                 	db	83	;'S'
   369  00108E  74                 	db	116	;'t'
   370  00108F  61                 	db	97	;'a'
   371  001090  72                 	db	114	;'r'
   372  001091  74                 	db	116	;'t'
   373  001092  2E                 	db	46
   374  001093  2E                 	db	46
   375  001094  2E                 	db	46
   376  001095  00                 	db	0
   377  001096                     STR_3:
   378  001096  53                 	db	83	;'S'
   379  001097  69                 	db	105	;'i'
   380  001098  6E                 	db	110	;'n'
   381  001099  67                 	db	103	;'g'
   382  00109A  6C                 	db	108	;'l'
   383  00109B  65                 	db	101	;'e'
   384  00109C  20                 	db	32
   385  00109D  62                 	db	98	;'b'
   386  00109E  6C                 	db	108	;'l'
   387  00109F  6F                 	db	111	;'o'
   388  0010A0  63                 	db	99	;'c'
   389  0010A1  6B                 	db	107	;'k'
   390  0010A2  00                 	db	0
   391  0010A3                     STR_2:
   392  0010A3  49                 	db	73	;'I'
   393  0010A4  6E                 	db	110	;'n'
   394  0010A5  69                 	db	105	;'i'
   395  0010A6  74                 	db	116	;'t'
   396  0010A7  20                 	db	32
   397  0010A8  66                 	db	102	;'f'
   398  0010A9  61                 	db	97	;'a'
   399  0010AA  69                 	db	105	;'i'
   400  0010AB  6C                 	db	108	;'l'
   401  0010AC  65                 	db	101	;'e'
   402  0010AD  64                 	db	100	;'d'
   403  0010AE  00                 	db	0
   404  0010AF                     STR_7:
   405  0010AF  44                 	db	68	;'D'
   406  0010B0  6F                 	db	111	;'o'
   407  0010B1  6E                 	db	110	;'n'
   408  0010B2  65                 	db	101	;'e'
   409  0010B3  20                 	db	32
   410  0010B4  4D                 	db	77	;'M'
   411  0010B5  42                 	db	66	;'B'
   412  0010B6  57                 	db	87	;'W'
   413  0010B7  21                 	db	33
   414  0010B8  00                 	db	0
   415  0010B9                     STR_15:
   416  0010B9  53                 	db	83	;'S'
   417  0010BA  65                 	db	101	;'e'
   418  0010BB  63                 	db	99	;'c'
   419  0010BC  20                 	db	32
   420  0010BD  25                 	db	37
   421  0010BE  64                 	db	100	;'d'
   422  0010BF  2D                 	db	45
   423  0010C0  25                 	db	37
   424  0010C1  64                 	db	100	;'d'
   425  0010C2  00                 	db	0
   426  0010C3                     STR_6:
   427  0010C3  44                 	db	68	;'D'
   428  0010C4  6F                 	db	111	;'o'
   429  0010C5  6E                 	db	110	;'n'
   430  0010C6  65                 	db	101	;'e'
   431  0010C7  3A                 	db	58	;':'
   432  0010C8  20                 	db	32
   433  0010C9  25                 	db	37
   434  0010CA  6C                 	db	108	;'l'
   435  0010CB  75                 	db	117	;'u'
   436  0010CC  00                 	db	0
   437  0010CD                     STR_11:
   438  0010CD  46                 	db	70	;'F'
   439  0010CE  61                 	db	97	;'a'
   440  0010CF  69                 	db	105	;'i'
   441  0010D0  6C                 	db	108	;'l'
   442  0010D1  75                 	db	117	;'u'
   443  0010D2  72                 	db	114	;'r'
   444  0010D3  65                 	db	101	;'e'
   445  0010D4  21                 	db	33
   446  0010D5  00                 	db	0
   447  0010D6                     STR_8:
   448  0010D6  44                 	db	68	;'D'
   449  0010D7  6F                 	db	111	;'o'
   450  0010D8  6E                 	db	110	;'n'
   451  0010D9  65                 	db	101	;'e'
   452  0010DA  20                 	db	32
   453  0010DB  25                 	db	37
   454  0010DC  6C                 	db	108	;'l'
   455  0010DD  75                 	db	117	;'u'
   456  0010DE  00                 	db	0
   457  0010DF                     STR_10:
   458  0010DF  41                 	db	65	;'A'
   459  0010E0  76                 	db	118	;'v'
   460  0010E1  67                 	db	103	;'g'
   461  0010E2  3A                 	db	58	;':'
   462  0010E3  20                 	db	32
   463  0010E4  25                 	db	37
   464  0010E5  64                 	db	100	;'d'
   465  0010E6  00                 	db	0
   466  0000                     
   467                           ; #config settings
   468  0010E7  00                 	db	0	; dummy byte at the end
   469  0000                     
   470                           	psect	cinit
   471  002C7A                     __pcinit:
   472                           	opt stack 0
   473  002C7A                     start_initialization:
   474                           	opt stack 0
   475  002C7A                     __initialization:
   476                           	opt stack 0
   477                           
   478                           ; Clear objects allocated to BIGRAM (1024 bytes)
   479  002C7A  EE00  F0BE         	lfsr	0,__pbssBIGRAM
   480  002C7E  EE14 F000          	lfsr	1,1024
   481  002C82                     clear_0:
   482  002C82  6AEE               	clrf	postinc0,c
   483  002C84  50E5               	movf	postdec1,w,c
   484  002C86  50E1               	movf	fsr1l,w,c
   485  002C88  E1FC               	bnz	clear_0
   486  002C8A  50E2               	movf	fsr1h,w,c
   487  002C8C  E1FA               	bnz	clear_0
   488                           
   489                           ; Clear objects allocated to BANK0 (62 bytes)
   490  002C8E  EE00  F080         	lfsr	0,__pbssBANK0
   491  002C92  0E3E               	movlw	62
   492  002C94                     clear_1:
   493  002C94  6AEE               	clrf	postinc0,c
   494  002C96  06E8               	decf	wreg,f,c
   495  002C98  E1FD               	bnz	clear_1
   496  002C9A                     end_of_initialization:
   497                           	opt stack 0
   498  002C9A                     __end_of__initialization:
   499                           	opt stack 0
   500  002C9A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   501  002C9C  6EF8               	movwf	tblptru,c
   502  002C9E  0100               	movlb	0
   503  002CA0  EF7B  F00C         	goto	_main	;jump to C main() function
   504                           tblptru	equ	0xFF8
   505                           postinc0	equ	0xFEE
   506                           wreg	equ	0xFE8
   507                           postdec1	equ	0xFE5
   508                           fsr1h	equ	0xFE2
   509                           fsr1l	equ	0xFE1
   510                           
   511                           	psect	bssBANK0
   512  000080                     __pbssBANK0:
   513                           	opt stack 0
   514  000080                     _SDCard:
   515                           	opt stack 0
   516  000080                     	ds	46
   517  0000AE                     initSD@F3023:
   518                           	opt stack 0
   519  0000AE                     	ds	16
   520                           tblptru	equ	0xFF8
   521                           postinc0	equ	0xFEE
   522                           wreg	equ	0xFE8
   523                           postdec1	equ	0xFE5
   524                           fsr1h	equ	0xFE2
   525                           fsr1l	equ	0xFE1
   526                           
   527                           	psect	bssBIGRAM
   528  0000BE                     __pbssBIGRAM:
   529                           	opt stack 0
   530  0000BE                     main@readBuffer:
   531                           	opt stack 0
   532  0000BE                     	ds	512
   533  0002BE                     _writeBuffer:
   534                           	opt stack 0
   535  0002BE                     	ds	512
   536                           tblptru	equ	0xFF8
   537                           postinc0	equ	0xFEE
   538                           wreg	equ	0xFE8
   539                           postdec1	equ	0xFE5
   540                           fsr1h	equ	0xFE2
   541                           fsr1l	equ	0xFE1
   542                           
   543                           	psect	cstackCOMRAM
   544  000001                     __pcstackCOMRAM:
   545                           	opt stack 0
   546  000001                     ??_spiTransfer:
   547  000001                     ?___ftpack:
   548                           	opt stack 0
   549  000001                     ?___lldiv:
   550                           	opt stack 0
   551  000001                     spiInit@divider:
   552                           	opt stack 0
   553  000001                     pulse_e@interruptState:
   554                           	opt stack 0
   555  000001                     ___ftpack@arg:
   556                           	opt stack 0
   557  000001                     ___lldiv@dividend:
   558                           	opt stack 0
   559                           
   560                           ; 4 bytes @ 0x0
   561  000001                     	ds	1
   562  000002                     spiTransfer@byteToTransfer:
   563                           	opt stack 0
   564  000002                     send_nibble@data:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x1
   568  000002                     	ds	1
   569  000003                     spiSend@val:
   570                           	opt stack 0
   571  000003                     send_byte@data:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x2
   575  000003                     	ds	1
   576  000004                     SD_SendDummyBytes@numBytes:
   577                           	opt stack 0
   578  000004                     lcdInst@data:
   579                           	opt stack 0
   580  000004                     putch@data:
   581                           	opt stack 0
   582  000004                     ___ftpack@exp:
   583                           	opt stack 0
   584  000004                     SD_MBR_Receive@bufReceive:
   585                           	opt stack 0
   586  000004                     SD_Command@arg:
   587                           	opt stack 0
   588                           
   589                           ; 4 bytes @ 0x3
   590  000004                     	ds	1
   591  000005                     ??_initLCD:
   592  000005                     SD_SendDummyBytes@n:
   593                           	opt stack 0
   594  000005                     ___ftpack@sign:
   595                           	opt stack 0
   596  000005                     ___lldiv@divisor:
   597                           	opt stack 0
   598                           
   599                           ; 4 bytes @ 0x4
   600  000005                     	ds	1
   601  000006                     ??_SD_MBR_Receive:
   602  000006                     ??___ftpack:
   603                           
   604                           ; 1 bytes @ 0x5
   605  000006                     	ds	1
   606  000007                     SD_MBR_Receive@i:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x6
   610  000007                     	ds	1
   611  000008                     SD_Command@n:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x7
   615  000008                     	ds	1
   616  000009                     ?___lltoft:
   617                           	opt stack 0
   618  000009                     ?___lwtoft:
   619                           	opt stack 0
   620  000009                     SD_Command@cmd:
   621                           	opt stack 0
   622  000009                     ___lwtoft@c:
   623                           	opt stack 0
   624  000009                     ___lldiv@quotient:
   625                           	opt stack 0
   626  000009                     ___lltoft@c:
   627                           	opt stack 0
   628                           
   629                           ; 4 bytes @ 0x8
   630  000009                     	ds	1
   631  00000A                     SD_Command@response:
   632                           	opt stack 0
   633                           
   634                           ; 1 bytes @ 0x9
   635  00000A                     	ds	1
   636  00000B                     SD_MBW_Send@arrWrite:
   637                           	opt stack 0
   638  00000B                     SD_ACMD@arg:
   639                           	opt stack 0
   640  00000B                     SD_SingleBlockWrite@block:
   641                           	opt stack 0
   642  00000B                     SD_SingleBlockRead@block:
   643                           	opt stack 0
   644  00000B                     SD_MBR_Start@startBlock:
   645                           	opt stack 0
   646  00000B                     SD_EraseBlocks@firstBlock:
   647                           	opt stack 0
   648                           
   649                           ; 4 bytes @ 0xA
   650  00000B                     	ds	1
   651  00000C                     ?___ftdiv:
   652                           	opt stack 0
   653  00000C                     ___ftdiv@f1:
   654                           	opt stack 0
   655                           
   656                           ; 3 bytes @ 0xB
   657  00000C                     	ds	1
   658  00000D                     ??___lltoft:
   659  00000D                     SD_MBW_Send@response:
   660                           	opt stack 0
   661  00000D                     ___lldiv@counter:
   662                           	opt stack 0
   663                           
   664                           ; 1 bytes @ 0xC
   665  00000D                     	ds	1
   666  00000E                     ?___llmod:
   667                           	opt stack 0
   668  00000E                     average@array:
   669                           	opt stack 0
   670  00000E                     SD_MBW_Send@i:
   671                           	opt stack 0
   672  00000E                     ___llmod@dividend:
   673                           	opt stack 0
   674                           
   675                           ; 4 bytes @ 0xD
   676  00000E                     	ds	1
   677  00000F                     ??_SD_MBR_Start:
   678  00000F                     SD_ACMD@cmd:
   679                           	opt stack 0
   680  00000F                     SD_SingleBlockWrite@arr:
   681                           	opt stack 0
   682  00000F                     SD_SingleBlockRead@buf:
   683                           	opt stack 0
   684  00000F                     ___ftdiv@f2:
   685                           	opt stack 0
   686  00000F                     SD_EraseBlocks@lastBlock:
   687                           	opt stack 0
   688                           
   689                           ; 4 bytes @ 0xE
   690  00000F                     	ds	1
   691  000010                     SD_MBR_Start@response:
   692                           	opt stack 0
   693  000010                     average@n:
   694                           	opt stack 0
   695  000010                     SD_MBW_Start@startBlock:
   696                           	opt stack 0
   697                           
   698                           ; 4 bytes @ 0xF
   699  000010                     	ds	1
   700  000011                     ??_SD_SingleBlockWrite:
   701  000011                     ??_SD_SingleBlockRead:
   702  000011                     ___lltoft@exp:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0x10
   706  000011                     	ds	1
   707  000012                     ??___ftdiv:
   708  000012                     ??_average:
   709  000012                     ?___ftmul:
   710                           	opt stack 0
   711  000012                     SD_SingleBlockWrite@response:
   712                           	opt stack 0
   713  000012                     SD_SingleBlockRead@i:
   714                           	opt stack 0
   715  000012                     ___ftmul@f1:
   716                           	opt stack 0
   717  000012                     ___llmod@divisor:
   718                           	opt stack 0
   719                           
   720                           ; 4 bytes @ 0x11
   721  000012                     	ds	1
   722  000013                     SD_SingleBlockWrite@i:
   723                           	opt stack 0
   724  000013                     average@sum:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x12
   728  000013                     	ds	1
   729  000014                     SD_SingleBlockRead@response:
   730                           	opt stack 0
   731  000014                     SD_MBW_Start@numBlocks:
   732                           	opt stack 0
   733                           
   734                           ; 4 bytes @ 0x13
   735  000014                     	ds	1
   736  000015                     ___ftdiv@cntr:
   737                           	opt stack 0
   738  000015                     ___ftmul@f2:
   739                           	opt stack 0
   740                           
   741                           ; 3 bytes @ 0x14
   742  000015                     	ds	1
   743  000016                     ___llmod@counter:
   744                           	opt stack 0
   745  000016                     ___ftdiv@f3:
   746                           	opt stack 0
   747                           
   748                           ; 3 bytes @ 0x15
   749  000016                     	ds	1
   750  000017                     average@idx:
   751                           	opt stack 0
   752                           
   753                           ; 2 bytes @ 0x16
   754  000017                     	ds	1
   755  000018                     ??_SD_MBW_Start:
   756  000018                     ??___ftmul:
   757                           
   758                           ; 1 bytes @ 0x17
   759  000018                     	ds	1
   760  000019                     ?_printf:
   761                           	opt stack 0
   762  000019                     ___ftdiv@exp:
   763                           	opt stack 0
   764  000019                     printf@f:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x18
   768  000019                     	ds	1
   769  00001A                     ___ftdiv@sign:
   770                           	opt stack 0
   771                           
   772                           ; 1 bytes @ 0x19
   773  00001A                     	ds	1
   774  00001B                     ___ftmul@exp:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x1A
   778  00001B                     	ds	1
   779  00001C                     ___ftmul@f3_as_product:
   780                           	opt stack 0
   781                           
   782                           ; 3 bytes @ 0x1B
   783  00001C                     	ds	3
   784  00001F                     ??_printf:
   785  00001F                     ___ftmul@cntr:
   786                           	opt stack 0
   787                           
   788                           ; 1 bytes @ 0x1E
   789  00001F                     	ds	1
   790  000020                     ___ftmul@sign:
   791                           	opt stack 0
   792                           
   793                           ; 1 bytes @ 0x1F
   794  000020                     	ds	1
   795  000021                     ?___fttol:
   796                           	opt stack 0
   797  000021                     printf@prec:
   798                           	opt stack 0
   799  000021                     ___fttol@f1:
   800                           	opt stack 0
   801                           
   802                           ; 3 bytes @ 0x20
   803  000021                     	ds	2
   804  000023                     printf@val:
   805                           	opt stack 0
   806                           
   807                           ; 4 bytes @ 0x22
   808  000023                     	ds	2
   809  000025                     ??___fttol:
   810                           
   811                           ; 1 bytes @ 0x24
   812  000025                     	ds	2
   813  000027                     printf@ap:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x26
   817  000027                     	ds	2
   818  000029                     printf@flag:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x28
   822  000029                     	ds	1
   823  00002A                     printf@c:
   824                           	opt stack 0
   825  00002A                     ___fttol@sign1:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x29
   829  00002A                     	ds	1
   830  00002B                     ___fttol@lval:
   831                           	opt stack 0
   832                           
   833                           ; 4 bytes @ 0x2A
   834  00002B                     	ds	4
   835  00002F                     ___fttol@exp1:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x2E
   839  00002F                     	ds	1
   840  000030                     ??_initSD:
   841                           
   842                           ; 1 bytes @ 0x2F
   843  000030                     	ds	7
   844  000037                     initSD@argument:
   845                           	opt stack 0
   846                           
   847                           ; 4 bytes @ 0x36
   848  000037                     	ds	4
   849  00003B                     initSD@last_OSCCON:
   850                           	opt stack 0
   851                           
   852                           ; 1 bytes @ 0x3A
   853  00003B                     	ds	1
   854  00003C                     initSD@last_OSCTUNE:
   855                           	opt stack 0
   856                           
   857                           ; 1 bytes @ 0x3B
   858  00003C                     	ds	1
   859  00003D                     initSD@tempSize:
   860                           	opt stack 0
   861                           
   862                           ; 4 bytes @ 0x3C
   863  00003D                     	ds	4
   864  000041                     initSD@arr_response:
   865                           	opt stack 0
   866                           
   867                           ; 16 bytes @ 0x40
   868  000041                     	ds	16
   869  000051                     initSD@i:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x50
   873  000051                     	ds	1
   874  000052                     initSD@i_500:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x51
   878  000052                     	ds	1
   879  000053                     initSD@i_497:
   880                           	opt stack 0
   881                           
   882                           ; 1 bytes @ 0x52
   883  000053                     	ds	1
   884  000054                     initSD@i_498:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x53
   888  000054                     	ds	1
   889  000055                     initSD@i_501:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x54
   893  000055                     	ds	1
   894  000056                     initSD@i_504:
   895                           	opt stack 0
   896                           
   897                           ; 1 bytes @ 0x55
   898  000056                     	ds	1
   899  000057                     initSD@tempSize_503:
   900                           	opt stack 0
   901                           
   902                           ; 4 bytes @ 0x56
   903  000057                     	ds	4
   904  00005B                     initSD@response:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x5A
   908  00005B                     	ds	1
   909  00005C                     ??_main:
   910                           
   911                           ; 1 bytes @ 0x5B
   912  00005C                     	ds	12
   913  000068                     main@avg:
   914                           	opt stack 0
   915                           
   916                           ; 4 bytes @ 0x67
   917  000068                     	ds	4
   918  00006C                     main@numWrites:
   919                           	opt stack 0
   920                           
   921                           ; 2 bytes @ 0x6B
   922  00006C                     	ds	2
   923  00006E                     main@firstBlock:
   924                           	opt stack 0
   925                           
   926                           ; 1 bytes @ 0x6D
   927  00006E                     	ds	1
   928  00006F                     main@i:
   929                           	opt stack 0
   930                           
   931                           ; 4 bytes @ 0x6E
   932  00006F                     	ds	4
   933                           tblptru	equ	0xFF8
   934                           postinc0	equ	0xFEE
   935                           wreg	equ	0xFE8
   936                           postdec1	equ	0xFE5
   937                           fsr1h	equ	0xFE2
   938                           fsr1l	equ	0xFE1
   939                           
   940 ;;
   941 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
   942 ;;
   943 ;; *************** function _main *****************
   944 ;; Defined at:
   945 ;;		line 45 in file "main.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;		None
   948 ;; Auto vars:     Size  Location     Type
   949 ;;  i               4  110[COMRAM] unsigned long 
   950 ;;  avg             4  103[COMRAM] unsigned long 
   951 ;;  numWrites       2  107[COMRAM] unsigned short 
   952 ;;  firstBlock      1  109[COMRAM] unsigned char 
   953 ;; Return value:  Size  Location     Type
   954 ;;                  1    wreg      void 
   955 ;; Registers used:
   956 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   957 ;; Tracked objects:
   958 ;;		On entry : 0/0
   959 ;;		On exit  : 0/0
   960 ;;		Unchanged: 0/0
   961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   963 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   964 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   965 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   966 ;;Total ram usage:       23 bytes
   967 ;; Hardware stack levels required when called:    5
   968 ;; This function calls:
   969 ;;		_SD_EraseBlocks
   970 ;;		_SD_MBR_Receive
   971 ;;		_SD_MBR_Start
   972 ;;		_SD_MBR_Stop
   973 ;;		_SD_MBW_Send
   974 ;;		_SD_MBW_Start
   975 ;;		_SD_MBW_Stop
   976 ;;		_SD_SingleBlockRead
   977 ;;		_SD_SingleBlockWrite
   978 ;;		___lldiv
   979 ;;		___llmod
   980 ;;		_average
   981 ;;		_initLCD
   982 ;;		_initSD
   983 ;;		_lcdInst
   984 ;;		_printf
   985 ;;		_spiReceive
   986 ;; This function is called by:
   987 ;;		Startup code after reset
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text0
   992  0018F6                     __ptext0:
   993                           	opt stack 0
   994  0018F6                     _main:
   995                           	opt stack 26
   996                           
   997                           ;main.c: 49: LATD = 0x00;
   998                           
   999                           ;incstack = 0
  1000  0018F6  0E00               	movlw	0
  1001  0018F8  6E8C               	movwf	3980,c	;volatile
  1002                           
  1003                           ;main.c: 50: TRISD = 0x00;
  1004  0018FA  0E00               	movlw	0
  1005  0018FC  6E95               	movwf	3989,c	;volatile
  1006                           
  1007                           ;main.c: 52: initLCD();
  1008  0018FE  ECE8  F014         	call	_initLCD	;wreg free
  1009                           
  1010                           ;main.c: 53: { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  1011  001902  0E0C               	movlw	12
  1012  001904  ECC5  F016         	call	_lcdInst
  1013                           
  1014                           ;main.c: 56: initSD();
  1015  001908  EC74  F008         	call	_initSD	;wreg free
  1016                           
  1017                           ;main.c: 57: if(SDCard.init){
  1018  00190C  0100               	movlb	0	; () banked
  1019  00190E  519B               	movf	(_SDCard+27)& (0+255),w,b
  1020  001910  B4D8               	btfsc	status,2,c
  1021  001912  D007               	goto	l3100
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;main.c: 58: printf("Init success!");
  1025  001914  0E7B               	movlw	low STR_1
  1026  001916  6E19               	movwf	printf@f,c
  1027  001918  0E10               	movlw	high STR_1
  1028  00191A  6E1A               	movwf	printf@f+1,c
  1029  00191C  EC98  F00F         	call	_printf	;wreg free
  1030                           
  1031                           ;main.c: 59: }
  1032  001920  D007               	goto	l3102
  1033  001922                     l3100:
  1034                           
  1035                           ;main.c: 60: else{
  1036                           ;main.c: 61: printf("Init failed");
  1037  001922  0EA3               	movlw	low STR_2
  1038  001924  6E19               	movwf	printf@f,c
  1039  001926  0E10               	movlw	high STR_2
  1040  001928  6E1A               	movwf	printf@f+1,c
  1041  00192A  EC98  F00F         	call	_printf	;wreg free
  1042  00192E                     l57:
  1043  00192E  D7FF               	goto	l57
  1044  001930                     l3102:
  1045                           
  1046                           ;main.c: 63: }
  1047                           ;main.c: 64: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1048  001930  0E33               	movlw	51
  1049  001932  6E5D               	movwf	(??_main+1)& (0+255),c
  1050  001934  0EBB               	movlw	187
  1051  001936  6E5C               	movwf	??_main& (0+255),c
  1052  001938  0EE0               	movlw	224
  1053  00193A                     u2917:
  1054  00193A  2EE8               	decfsz	wreg,f,c
  1055  00193C  D7FE               	bra	u2917
  1056  00193E  2E5C               	decfsz	??_main& (0+255),f,c
  1057  001940  D7FC               	bra	u2917
  1058  001942  2E5D               	decfsz	(??_main+1)& (0+255),f,c
  1059  001944  D7FA               	bra	u2917
  1060                           
  1061                           ;main.c: 68: static unsigned char readBuffer[512] = {0};
  1062                           ;main.c: 70: unsigned long i;
  1063                           ;main.c: 80: { SSPCON1bits.SSPEN = 1; LATEbits.LATE2 = 0;};
  1064  001946  8AC6               	bsf	4038,5,c	;volatile
  1065  001948  948D               	bcf	3981,2,c	;volatile
  1066                           
  1067                           ;main.c: 81: SD_EraseBlocks(0, 0);
  1068  00194A  0E00               	movlw	0
  1069  00194C  6E0B               	movwf	SD_EraseBlocks@firstBlock,c
  1070  00194E  0E00               	movlw	0
  1071  001950  6E0C               	movwf	SD_EraseBlocks@firstBlock+1,c
  1072  001952  0E00               	movlw	0
  1073  001954  6E0D               	movwf	SD_EraseBlocks@firstBlock+2,c
  1074  001956  0E00               	movlw	0
  1075  001958  6E0E               	movwf	SD_EraseBlocks@firstBlock+3,c
  1076  00195A  0E00               	movlw	0
  1077  00195C  6E0F               	movwf	SD_EraseBlocks@lastBlock,c
  1078  00195E  0E00               	movlw	0
  1079  001960  6E10               	movwf	SD_EraseBlocks@lastBlock+1,c
  1080  001962  0E00               	movlw	0
  1081  001964  6E11               	movwf	SD_EraseBlocks@lastBlock+2,c
  1082  001966  0E00               	movlw	0
  1083  001968  6E12               	movwf	SD_EraseBlocks@lastBlock+3,c
  1084  00196A  ECE4  F013         	call	_SD_EraseBlocks	;wreg free
  1085  00196E                     l3110:
  1086  00196E  ECD0  F016         	call	_spiReceive	;wreg free
  1087  001972  0AFF               	xorlw	255
  1088  001974  A4D8               	btfss	status,2,c
  1089  001976  D7FB               	goto	l3110
  1090                           
  1091                           ;main.c: 85: for(i = 0; i < 512; i++){
  1092  001978  0E00               	movlw	0
  1093  00197A  6E6F               	movwf	main@i,c
  1094  00197C  0E00               	movlw	0
  1095  00197E  6E70               	movwf	main@i+1,c
  1096  001980  0E00               	movlw	0
  1097  001982  6E71               	movwf	main@i+2,c
  1098  001984  0E00               	movlw	0
  1099  001986  6E72               	movwf	main@i+3,c
  1100  001988                     l3114:
  1101  001988  5072               	movf	main@i+3,w,c
  1102  00198A  1071               	iorwf	main@i+2,w,c
  1103  00198C  E113               	bnz	l3124
  1104  00198E  0E02               	movlw	2
  1105  001990  5C70               	subwf	main@i+1,w,c
  1106  001992  B0D8               	btfsc	status,0,c
  1107  001994  D00F               	goto	l3124
  1108                           
  1109                           ;main.c: 86: writeBuffer[i] = i & 0xFF;
  1110  001996  0EBE               	movlw	low _writeBuffer
  1111  001998  246F               	addwf	main@i,w,c
  1112  00199A  6ED9               	movwf	fsr2l,c
  1113  00199C  0E02               	movlw	high _writeBuffer
  1114  00199E  2070               	addwfc	main@i+1,w,c
  1115  0019A0  6EDA               	movwf	fsr2h,c
  1116  0019A2  C06F  FFDF         	movff	main@i,indf2
  1117  0019A6  0E01               	movlw	1
  1118  0019A8  266F               	addwf	main@i,f,c
  1119  0019AA  0E00               	movlw	0
  1120  0019AC  2270               	addwfc	main@i+1,f,c
  1121  0019AE  2271               	addwfc	main@i+2,f,c
  1122  0019B0  2272               	addwfc	main@i+3,f,c
  1123  0019B2  D7EA               	goto	l3114
  1124  0019B4                     l3124:
  1125  0019B4  0E00               	movlw	0
  1126  0019B6  6E0B               	movwf	SD_SingleBlockWrite@block,c
  1127  0019B8  0E00               	movlw	0
  1128  0019BA  6E0C               	movwf	SD_SingleBlockWrite@block+1,c
  1129  0019BC  0E00               	movlw	0
  1130  0019BE  6E0D               	movwf	SD_SingleBlockWrite@block+2,c
  1131  0019C0  0E00               	movlw	0
  1132  0019C2  6E0E               	movwf	SD_SingleBlockWrite@block+3,c
  1133  0019C4  0EBE               	movlw	low _writeBuffer
  1134  0019C6  6E0F               	movwf	SD_SingleBlockWrite@arr,c
  1135  0019C8  0E02               	movlw	high _writeBuffer
  1136  0019CA  6E10               	movwf	SD_SingleBlockWrite@arr+1,c
  1137  0019CC  EC7B  F012         	call	_SD_SingleBlockWrite	;wreg free
  1138  0019D0  0900               	iorlw	0
  1139  0019D2  B4D8               	btfsc	status,2,c
  1140  0019D4  D7EF               	goto	l3124
  1141                           
  1142                           ;main.c: 91: { lcdInst(0x01); _delay((unsigned long)((5)*(40000000/4000.0)));};
  1143  0019D6  0E01               	movlw	1
  1144  0019D8  ECC5  F016         	call	_lcdInst
  1145  0019DC  0E41               	movlw	65
  1146  0019DE  6E5C               	movwf	??_main& (0+255),c
  1147  0019E0  0EEE               	movlw	238
  1148  0019E2                     u2927:
  1149  0019E2  2EE8               	decfsz	wreg,f,c
  1150  0019E4  D7FE               	bra	u2927
  1151  0019E6  2E5C               	decfsz	??_main& (0+255),f,c
  1152  0019E8  D7FC               	bra	u2927
  1153  0019EA  D000               	nop2	
  1154                           
  1155                           ;main.c: 92: printf("Single block");
  1156  0019EC  0E96               	movlw	low STR_3
  1157  0019EE  6E19               	movwf	printf@f,c
  1158  0019F0  0E10               	movlw	high STR_3
  1159  0019F2  6E1A               	movwf	printf@f+1,c
  1160  0019F4  EC98  F00F         	call	_printf	;wreg free
  1161                           
  1162                           ;main.c: 93: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1163  0019F8  0E4A               	movlw	low _LCD_LINE2_ADDR
  1164  0019FA  6EF6               	movwf	tblptrl,c
  1165  0019FC                     	if	1	;There is more than 1 active tblptr byte
  1166  0019FC  0E10               	movlw	high _LCD_LINE2_ADDR
  1167  0019FE  6EF7               	movwf	tblptrh,c
  1168  001A00                     	endif
  1169  001A00                     	if	0	;There are less than 3 active tblptr bytes
  1170  001A00                     	endif
  1171  001A00  0008               	tblrd		*
  1172  001A02  50F5               	movf	tablat,w,c
  1173  001A04  0980               	iorlw	128
  1174  001A06  ECC5  F016         	call	_lcdInst
  1175                           
  1176                           ;main.c: 94: printf("write finished");
  1177  001A0A  0E6C               	movlw	low STR_4
  1178  001A0C  6E19               	movwf	printf@f,c
  1179  001A0E  0E10               	movlw	high STR_4
  1180  001A10  6E1A               	movwf	printf@f+1,c
  1181  001A12  EC98  F00F         	call	_printf	;wreg free
  1182                           
  1183                           ;main.c: 95: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1184  001A16  0E33               	movlw	51
  1185  001A18  6E5D               	movwf	(??_main+1)& (0+255),c
  1186  001A1A  0EBB               	movlw	187
  1187  001A1C  6E5C               	movwf	??_main& (0+255),c
  1188  001A1E  0EE0               	movlw	224
  1189  001A20                     u2937:
  1190  001A20  2EE8               	decfsz	wreg,f,c
  1191  001A22  D7FE               	bra	u2937
  1192  001A24  2E5C               	decfsz	??_main& (0+255),f,c
  1193  001A26  D7FC               	bra	u2937
  1194  001A28  2E5D               	decfsz	(??_main+1)& (0+255),f,c
  1195  001A2A  D7FA               	bra	u2937
  1196                           
  1197                           ;main.c: 115: unsigned char firstBlock = 1;
  1198  001A2C  0E01               	movlw	1
  1199  001A2E  6E6E               	movwf	main@firstBlock,c
  1200                           
  1201                           ;main.c: 116: unsigned short numWrites = 1000;
  1202  001A30  0E03               	movlw	3
  1203  001A32  6E6D               	movwf	main@numWrites+1,c
  1204  001A34  0EE8               	movlw	232
  1205  001A36  6E6C               	movwf	main@numWrites,c
  1206                           
  1207                           ;main.c: 119: for(i = 0; i < 512; i++){
  1208  001A38  0E00               	movlw	0
  1209  001A3A  6E6F               	movwf	main@i,c
  1210  001A3C  0E00               	movlw	0
  1211  001A3E  6E70               	movwf	main@i+1,c
  1212  001A40  0E00               	movlw	0
  1213  001A42  6E71               	movwf	main@i+2,c
  1214  001A44  0E00               	movlw	0
  1215  001A46  6E72               	movwf	main@i+3,c
  1216  001A48                     l3144:
  1217  001A48  5072               	movf	main@i+3,w,c
  1218  001A4A  1071               	iorwf	main@i+2,w,c
  1219  001A4C  E113               	bnz	l3154
  1220  001A4E  0E02               	movlw	2
  1221  001A50  5C70               	subwf	main@i+1,w,c
  1222  001A52  B0D8               	btfsc	status,0,c
  1223  001A54  D00F               	goto	l3154
  1224                           
  1225                           ;main.c: 120: writeBuffer[i] = 0x34;
  1226  001A56  0EBE               	movlw	low _writeBuffer
  1227  001A58  246F               	addwf	main@i,w,c
  1228  001A5A  6ED9               	movwf	fsr2l,c
  1229  001A5C  0E02               	movlw	high _writeBuffer
  1230  001A5E  2070               	addwfc	main@i+1,w,c
  1231  001A60  6EDA               	movwf	fsr2h,c
  1232  001A62  0E34               	movlw	52
  1233  001A64  6EDF               	movwf	indf2,c
  1234  001A66  0E01               	movlw	1
  1235  001A68  266F               	addwf	main@i,f,c
  1236  001A6A  0E00               	movlw	0
  1237  001A6C  2270               	addwfc	main@i+1,f,c
  1238  001A6E  2271               	addwfc	main@i+2,f,c
  1239  001A70  2272               	addwfc	main@i+3,f,c
  1240  001A72  D7EA               	goto	l3144
  1241  001A74                     l3154:
  1242                           
  1243                           ;main.c: 121: }
  1244                           ;main.c: 123: { lcdInst(0x01); _delay((unsigned long)((5)*(40000000/4000.0)));};
  1245  001A74  0E01               	movlw	1
  1246  001A76  ECC5  F016         	call	_lcdInst
  1247  001A7A  0E41               	movlw	65
  1248  001A7C  6E5C               	movwf	??_main& (0+255),c
  1249  001A7E  0EEE               	movlw	238
  1250  001A80                     u2947:
  1251  001A80  2EE8               	decfsz	wreg,f,c
  1252  001A82  D7FE               	bra	u2947
  1253  001A84  2E5C               	decfsz	??_main& (0+255),f,c
  1254  001A86  D7FC               	bra	u2947
  1255  001A88  D000               	nop2	
  1256                           
  1257                           ;main.c: 124: printf("MBW Start...");
  1258  001A8A  0E89               	movlw	low STR_5
  1259  001A8C  6E19               	movwf	printf@f,c
  1260  001A8E  0E10               	movlw	high STR_5
  1261  001A90  6E1A               	movwf	printf@f+1,c
  1262  001A92  EC98  F00F         	call	_printf	;wreg free
  1263                           
  1264                           ;main.c: 125: SD_MBW_Start(firstBlock, numWrites);
  1265  001A96  506E               	movf	main@firstBlock,w,c
  1266  001A98  6E10               	movwf	SD_MBW_Start@startBlock,c
  1267  001A9A  6A11               	clrf	SD_MBW_Start@startBlock+1,c
  1268  001A9C  6A12               	clrf	SD_MBW_Start@startBlock+2,c
  1269  001A9E  6A13               	clrf	SD_MBW_Start@startBlock+3,c
  1270  001AA0  C06C  F014         	movff	main@numWrites,SD_MBW_Start@numBlocks
  1271  001AA4  C06D  F015         	movff	main@numWrites+1,SD_MBW_Start@numBlocks+1
  1272  001AA8  6A16               	clrf	SD_MBW_Start@numBlocks+2,c
  1273  001AAA  6A17               	clrf	SD_MBW_Start@numBlocks+3,c
  1274  001AAC  EC6A  F014         	call	_SD_MBW_Start	;wreg free
  1275                           
  1276                           ;main.c: 127: for(i = 0; i < numWrites; i++){
  1277  001AB0  0E00               	movlw	0
  1278  001AB2  6E6F               	movwf	main@i,c
  1279  001AB4  0E00               	movlw	0
  1280  001AB6  6E70               	movwf	main@i+1,c
  1281  001AB8  0E00               	movlw	0
  1282  001ABA  6E71               	movwf	main@i+2,c
  1283  001ABC  0E00               	movlw	0
  1284  001ABE  6E72               	movwf	main@i+3,c
  1285  001AC0  D03E               	goto	l3176
  1286  001AC2                     l3164:
  1287                           
  1288                           ;main.c: 129: if(!SD_MBW_Send(writeBuffer)){
  1289  001AC2  0EBE               	movlw	low _writeBuffer
  1290  001AC4  6E0B               	movwf	SD_MBW_Send@arrWrite,c
  1291  001AC6  0E02               	movlw	high _writeBuffer
  1292  001AC8  6E0C               	movwf	SD_MBW_Send@arrWrite+1,c
  1293  001ACA  EC98  F010         	call	_SD_MBW_Send	;wreg free
  1294  001ACE  0900               	iorlw	0
  1295  001AD0  B4D8               	btfsc	status,2,c
  1296  001AD2  D045               	goto	l3178
  1297                           
  1298                           ;main.c: 131: }
  1299                           ;main.c: 132: if(i % 100 == 0){
  1300                           
  1301                           ;main.c: 130: break;
  1302  001AD4  C06F  F00E         	movff	main@i,___llmod@dividend
  1303  001AD8  C070  F00F         	movff	main@i+1,___llmod@dividend+1
  1304  001ADC  C071  F010         	movff	main@i+2,___llmod@dividend+2
  1305  001AE0  C072  F011         	movff	main@i+3,___llmod@dividend+3
  1306  001AE4  0E64               	movlw	100
  1307  001AE6  6E12               	movwf	___llmod@divisor,c
  1308  001AE8  0E00               	movlw	0
  1309  001AEA  6E13               	movwf	___llmod@divisor+1,c
  1310  001AEC  0E00               	movlw	0
  1311  001AEE  6E14               	movwf	___llmod@divisor+2,c
  1312  001AF0  0E00               	movlw	0
  1313  001AF2  6E15               	movwf	___llmod@divisor+3,c
  1314  001AF4  EC8B  F015         	call	___llmod	;wreg free
  1315  001AF8  500E               	movf	?___llmod,w,c
  1316  001AFA  100F               	iorwf	?___llmod+1,w,c
  1317  001AFC  1010               	iorwf	?___llmod+2,w,c
  1318  001AFE  1011               	iorwf	?___llmod+3,w,c
  1319  001B00  A4D8               	btfss	status,2,c
  1320  001B02  D017               	goto	l3174
  1321                           
  1322                           ;main.c: 134: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1323  001B04  0E4A               	movlw	low _LCD_LINE2_ADDR
  1324  001B06  6EF6               	movwf	tblptrl,c
  1325  001B08                     	if	1	;There is more than 1 active tblptr byte
  1326  001B08  0E10               	movlw	high _LCD_LINE2_ADDR
  1327  001B0A  6EF7               	movwf	tblptrh,c
  1328  001B0C                     	endif
  1329  001B0C                     	if	0	;There are less than 3 active tblptr bytes
  1330  001B0C                     	endif
  1331  001B0C  0008               	tblrd		*
  1332  001B0E  50F5               	movf	tablat,w,c
  1333  001B10  0980               	iorlw	128
  1334  001B12  ECC5  F016         	call	_lcdInst
  1335                           
  1336                           ;main.c: 135: printf("Done: %lu", i);
  1337  001B16  0EC3               	movlw	low STR_6
  1338  001B18  6E19               	movwf	printf@f,c
  1339  001B1A  0E10               	movlw	high STR_6
  1340  001B1C  6E1A               	movwf	printf@f+1,c
  1341  001B1E  C06F  F01B         	movff	main@i,?_printf+2
  1342  001B22  C070  F01C         	movff	main@i+1,?_printf+3
  1343  001B26  C071  F01D         	movff	main@i+2,?_printf+4
  1344  001B2A  C072  F01E         	movff	main@i+3,?_printf+5
  1345  001B2E  EC98  F00F         	call	_printf	;wreg free
  1346  001B32                     l3174:
  1347  001B32  0E01               	movlw	1
  1348  001B34  266F               	addwf	main@i,f,c
  1349  001B36  0E00               	movlw	0
  1350  001B38  2270               	addwfc	main@i+1,f,c
  1351  001B3A  2271               	addwfc	main@i+2,f,c
  1352  001B3C  2272               	addwfc	main@i+3,f,c
  1353  001B3E                     l3176:
  1354  001B3E  506C               	movf	main@numWrites,w,c
  1355  001B40  6E5C               	movwf	??_main& (0+255),c
  1356  001B42  506D               	movf	main@numWrites+1,w,c
  1357  001B44  6E5D               	movwf	(??_main+1)& (0+255),c
  1358  001B46  6A5E               	clrf	(??_main+2)& (0+255),c
  1359  001B48  6A5F               	clrf	(??_main+3)& (0+255),c
  1360  001B4A  505C               	movf	??_main,w,c
  1361  001B4C  5C6F               	subwf	main@i,w,c
  1362  001B4E  505D               	movf	??_main+1,w,c
  1363  001B50  5870               	subwfb	main@i+1,w,c
  1364  001B52  505E               	movf	??_main+2,w,c
  1365  001B54  5871               	subwfb	main@i+2,w,c
  1366  001B56  505F               	movf	??_main+3,w,c
  1367  001B58  5872               	subwfb	main@i+3,w,c
  1368  001B5A  A0D8               	btfss	status,0,c
  1369  001B5C  D7B2               	goto	l3164
  1370  001B5E                     l3178:
  1371                           
  1372                           ;main.c: 136: }
  1373                           ;main.c: 137: }
  1374                           ;main.c: 138: SD_MBW_Stop();
  1375  001B5E  EC25  F016         	call	_SD_MBW_Stop	;wreg free
  1376                           
  1377                           ;main.c: 139: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  1378  001B62  848D               	bsf	3981,2,c	;volatile
  1379  001B64  9AC6               	bcf	4038,5,c	;volatile
  1380                           
  1381                           ;main.c: 140: { lcdInst(0x01); _delay((unsigned long)((5)*(40000000/4000.0)));};
  1382  001B66  0E01               	movlw	1
  1383  001B68  ECC5  F016         	call	_lcdInst
  1384  001B6C  0E41               	movlw	65
  1385  001B6E  6E5C               	movwf	??_main& (0+255),c
  1386  001B70  0EEE               	movlw	238
  1387  001B72                     u2957:
  1388  001B72  2EE8               	decfsz	wreg,f,c
  1389  001B74  D7FE               	bra	u2957
  1390  001B76  2E5C               	decfsz	??_main& (0+255),f,c
  1391  001B78  D7FC               	bra	u2957
  1392  001B7A  D000               	nop2	
  1393                           
  1394                           ;main.c: 141: printf("Done MBW!");
  1395  001B7C  0EAF               	movlw	low STR_7
  1396  001B7E  6E19               	movwf	printf@f,c
  1397  001B80  0E10               	movlw	high STR_7
  1398  001B82  6E1A               	movwf	printf@f+1,c
  1399  001B84  EC98  F00F         	call	_printf	;wreg free
  1400                           
  1401                           ;main.c: 142: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1402  001B88  0E4A               	movlw	low _LCD_LINE2_ADDR
  1403  001B8A  6EF6               	movwf	tblptrl,c
  1404  001B8C                     	if	1	;There is more than 1 active tblptr byte
  1405  001B8C  0E10               	movlw	high _LCD_LINE2_ADDR
  1406  001B8E  6EF7               	movwf	tblptrh,c
  1407  001B90                     	endif
  1408  001B90                     	if	0	;There are less than 3 active tblptr bytes
  1409  001B90                     	endif
  1410  001B90  0008               	tblrd		*
  1411  001B92  50F5               	movf	tablat,w,c
  1412  001B94  0980               	iorlw	128
  1413  001B96  ECC5  F016         	call	_lcdInst
  1414                           
  1415                           ;main.c: 143: printf("Done %lu", i);
  1416  001B9A  0ED6               	movlw	low STR_8
  1417  001B9C  6E19               	movwf	printf@f,c
  1418  001B9E  0E10               	movlw	high STR_8
  1419  001BA0  6E1A               	movwf	printf@f+1,c
  1420  001BA2  C06F  F01B         	movff	main@i,?_printf+2
  1421  001BA6  C070  F01C         	movff	main@i+1,?_printf+3
  1422  001BAA  C071  F01D         	movff	main@i+2,?_printf+4
  1423  001BAE  C072  F01E         	movff	main@i+3,?_printf+5
  1424  001BB2  EC98  F00F         	call	_printf	;wreg free
  1425                           
  1426                           ;main.c: 144: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1427  001BB6  0E33               	movlw	51
  1428  001BB8  6E5D               	movwf	(??_main+1)& (0+255),c
  1429  001BBA  0EBB               	movlw	187
  1430  001BBC  6E5C               	movwf	??_main& (0+255),c
  1431  001BBE  0EE0               	movlw	224
  1432  001BC0                     u2967:
  1433  001BC0  2EE8               	decfsz	wreg,f,c
  1434  001BC2  D7FE               	bra	u2967
  1435  001BC4  2E5C               	decfsz	??_main& (0+255),f,c
  1436  001BC6  D7FC               	bra	u2967
  1437  001BC8  2E5D               	decfsz	(??_main+1)& (0+255),f,c
  1438  001BCA  D7FA               	bra	u2967
  1439                           
  1440                           ;main.c: 149: { SSPCON1bits.SSPEN = 1; LATEbits.LATE2 = 0;};
  1441  001BCC  8AC6               	bsf	4038,5,c	;volatile
  1442  001BCE  948D               	bcf	3981,2,c	;volatile
  1443                           
  1444                           ;main.c: 157: { lcdInst(0x01); _delay((unsigned long)((5)*(40000000/4000.0)));};
  1445  001BD0  0E01               	movlw	1
  1446  001BD2  ECC5  F016         	call	_lcdInst
  1447  001BD6  0E41               	movlw	65
  1448  001BD8  6E5C               	movwf	??_main& (0+255),c
  1449  001BDA  0EEE               	movlw	238
  1450  001BDC                     u2977:
  1451  001BDC  2EE8               	decfsz	wreg,f,c
  1452  001BDE  D7FE               	bra	u2977
  1453  001BE0  2E5C               	decfsz	??_main& (0+255),f,c
  1454  001BE2  D7FC               	bra	u2977
  1455  001BE4  D000               	nop2	
  1456                           
  1457                           ;main.c: 158: printf("Reading sector 0");
  1458  001BE6  0E4B               	movlw	low STR_9
  1459  001BE8  6E19               	movwf	printf@f,c
  1460  001BEA  0E10               	movlw	high STR_9
  1461  001BEC  6E1A               	movwf	printf@f+1,c
  1462  001BEE  EC98  F00F         	call	_printf	;wreg free
  1463                           
  1464                           ;main.c: 159: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1465  001BF2  0E33               	movlw	51
  1466  001BF4  6E5D               	movwf	(??_main+1)& (0+255),c
  1467  001BF6  0EBB               	movlw	187
  1468  001BF8  6E5C               	movwf	??_main& (0+255),c
  1469  001BFA  0EE0               	movlw	224
  1470  001BFC                     u2987:
  1471  001BFC  2EE8               	decfsz	wreg,f,c
  1472  001BFE  D7FE               	bra	u2987
  1473  001C00  2E5C               	decfsz	??_main& (0+255),f,c
  1474  001C02  D7FC               	bra	u2987
  1475  001C04  2E5D               	decfsz	(??_main+1)& (0+255),f,c
  1476  001C06  D7FA               	bra	u2987
  1477                           
  1478                           ;main.c: 162: if(SD_SingleBlockRead(0, readBuffer)){
  1479  001C08  0E00               	movlw	0
  1480  001C0A  6E0B               	movwf	SD_SingleBlockRead@block,c
  1481  001C0C  0E00               	movlw	0
  1482  001C0E  6E0C               	movwf	SD_SingleBlockRead@block+1,c
  1483  001C10  0E00               	movlw	0
  1484  001C12  6E0D               	movwf	SD_SingleBlockRead@block+2,c
  1485  001C14  0E00               	movlw	0
  1486  001C16  6E0E               	movwf	SD_SingleBlockRead@block+3,c
  1487  001C18  0EBE               	movlw	low main@readBuffer
  1488  001C1A  6E0F               	movwf	SD_SingleBlockRead@buf,c
  1489  001C1C  0E00               	movlw	high main@readBuffer
  1490  001C1E  6E10               	movwf	SD_SingleBlockRead@buf+1,c
  1491  001C20  ECEA  F012         	call	_SD_SingleBlockRead	;wreg free
  1492  001C24  0900               	iorlw	0
  1493  001C26  B4D8               	btfsc	status,2,c
  1494  001C28  D01E               	goto	l3214
  1495                           
  1496                           ;main.c: 163: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1497  001C2A  0E4A               	movlw	low _LCD_LINE2_ADDR
  1498  001C2C  6EF6               	movwf	tblptrl,c
  1499  001C2E                     	if	1	;There is more than 1 active tblptr byte
  1500  001C2E  0E10               	movlw	high _LCD_LINE2_ADDR
  1501  001C30  6EF7               	movwf	tblptrh,c
  1502  001C32                     	endif
  1503  001C32                     	if	0	;There are less than 3 active tblptr bytes
  1504  001C32                     	endif
  1505  001C32  0008               	tblrd		*
  1506  001C34  50F5               	movf	tablat,w,c
  1507  001C36  0980               	iorlw	128
  1508  001C38  ECC5  F016         	call	_lcdInst
  1509                           
  1510                           ;main.c: 164: printf("Avg: %d", average(readBuffer, 512));
  1511  001C3C  0EDF               	movlw	low STR_10
  1512  001C3E  6E19               	movwf	printf@f,c
  1513  001C40  0E10               	movlw	high STR_10
  1514  001C42  6E1A               	movwf	printf@f+1,c
  1515  001C44  0EBE               	movlw	low main@readBuffer
  1516  001C46  6E0E               	movwf	average@array,c
  1517  001C48  0E00               	movlw	high main@readBuffer
  1518  001C4A  6E0F               	movwf	average@array+1,c
  1519  001C4C  0E02               	movlw	2
  1520  001C4E  6E11               	movwf	average@n+1,c
  1521  001C50  0E00               	movlw	0
  1522  001C52  6E10               	movwf	average@n,c
  1523  001C54  EC56  F015         	call	_average	;wreg free
  1524  001C58  6E5C               	movwf	??_main& (0+255),c
  1525  001C5A  505C               	movf	??_main,w,c
  1526  001C5C  6E1B               	movwf	?_printf+2,c
  1527  001C5E  6A1C               	clrf	?_printf+3,c
  1528  001C60  EC98  F00F         	call	_printf	;wreg free
  1529                           
  1530                           ;main.c: 165: }
  1531  001C64  D00F               	goto	l3218
  1532  001C66                     l3214:
  1533                           
  1534                           ;main.c: 166: else{
  1535                           ;main.c: 168: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1536  001C66  0E4A               	movlw	low _LCD_LINE2_ADDR
  1537  001C68  6EF6               	movwf	tblptrl,c
  1538  001C6A                     	if	1	;There is more than 1 active tblptr byte
  1539  001C6A  0E10               	movlw	high _LCD_LINE2_ADDR
  1540  001C6C  6EF7               	movwf	tblptrh,c
  1541  001C6E                     	endif
  1542  001C6E                     	if	0	;There are less than 3 active tblptr bytes
  1543  001C6E                     	endif
  1544  001C6E  0008               	tblrd		*
  1545  001C70  50F5               	movf	tablat,w,c
  1546  001C72  0980               	iorlw	128
  1547  001C74  ECC5  F016         	call	_lcdInst
  1548                           
  1549                           ;main.c: 169: printf("Failure!");
  1550  001C78  0ECD               	movlw	low STR_11
  1551  001C7A  6E19               	movwf	printf@f,c
  1552  001C7C  0E10               	movlw	high STR_11
  1553  001C7E  6E1A               	movwf	printf@f+1,c
  1554  001C80  EC98  F00F         	call	_printf	;wreg free
  1555  001C84                     l3218:
  1556                           
  1557                           ;main.c: 170: }
  1558                           ;main.c: 171: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1559  001C84  0E33               	movlw	51
  1560  001C86  6E5D               	movwf	(??_main+1)& (0+255),c
  1561  001C88  0EBB               	movlw	187
  1562  001C8A  6E5C               	movwf	??_main& (0+255),c
  1563  001C8C  0EE0               	movlw	224
  1564  001C8E                     u2997:
  1565  001C8E  2EE8               	decfsz	wreg,f,c
  1566  001C90  D7FE               	bra	u2997
  1567  001C92  2E5C               	decfsz	??_main& (0+255),f,c
  1568  001C94  D7FC               	bra	u2997
  1569  001C96  2E5D               	decfsz	(??_main+1)& (0+255),f,c
  1570  001C98  D7FA               	bra	u2997
  1571                           
  1572                           ;main.c: 192: for(i = 0; i < sizeof(readBuffer); i++)
  1573  001C9A  0E00               	movlw	0
  1574  001C9C  6E6F               	movwf	main@i,c
  1575  001C9E  0E00               	movlw	0
  1576  001CA0  6E70               	movwf	main@i+1,c
  1577  001CA2  0E00               	movlw	0
  1578  001CA4  6E71               	movwf	main@i+2,c
  1579  001CA6  0E00               	movlw	0
  1580  001CA8  6E72               	movwf	main@i+3,c
  1581  001CAA                     l3222:
  1582  001CAA  5072               	movf	main@i+3,w,c
  1583  001CAC  1071               	iorwf	main@i+2,w,c
  1584  001CAE  E113               	bnz	l3232
  1585  001CB0  0E02               	movlw	2
  1586  001CB2  5C70               	subwf	main@i+1,w,c
  1587  001CB4  B0D8               	btfsc	status,0,c
  1588  001CB6  D00F               	goto	l3232
  1589                           
  1590                           ;main.c: 193: {
  1591                           ;main.c: 195: readBuffer[i] = 0;
  1592  001CB8  0EBE               	movlw	low main@readBuffer
  1593  001CBA  246F               	addwf	main@i,w,c
  1594  001CBC  6ED9               	movwf	fsr2l,c
  1595  001CBE  0E00               	movlw	high main@readBuffer
  1596  001CC0  2070               	addwfc	main@i+1,w,c
  1597  001CC2  6EDA               	movwf	fsr2h,c
  1598  001CC4  0E00               	movlw	0
  1599  001CC6  6EDF               	movwf	indf2,c
  1600  001CC8  0E01               	movlw	1
  1601  001CCA  266F               	addwf	main@i,f,c
  1602  001CCC  0E00               	movlw	0
  1603  001CCE  2270               	addwfc	main@i+1,f,c
  1604  001CD0  2271               	addwfc	main@i+2,f,c
  1605  001CD2  2272               	addwfc	main@i+3,f,c
  1606  001CD4  D7EA               	goto	l3222
  1607  001CD6                     l3232:
  1608                           
  1609                           ;main.c: 196: }
  1610                           ;main.c: 199: unsigned long avg = 0;
  1611  001CD6  0E00               	movlw	0
  1612  001CD8  6E68               	movwf	main@avg,c
  1613  001CDA  0E00               	movlw	0
  1614  001CDC  6E69               	movwf	main@avg+1,c
  1615  001CDE  0E00               	movlw	0
  1616  001CE0  6E6A               	movwf	main@avg+2,c
  1617  001CE2  0E00               	movlw	0
  1618  001CE4  6E6B               	movwf	main@avg+3,c
  1619                           
  1620                           ;main.c: 203: SD_MBR_Start(SDCard.write.MBW_startBlock);
  1621  001CE6  C0A0  F00B         	movff	_SDCard+32,SD_MBR_Start@startBlock
  1622  001CEA  C0A1  F00C         	movff	_SDCard+33,SD_MBR_Start@startBlock+1
  1623  001CEE  C0A2  F00D         	movff	_SDCard+34,SD_MBR_Start@startBlock+2
  1624  001CF2  C0A3  F00E         	movff	_SDCard+35,SD_MBR_Start@startBlock+3
  1625  001CF6  EC20  F015         	call	_SD_MBR_Start	;wreg free
  1626                           
  1627                           ;main.c: 205: { lcdInst(0x01); _delay((unsigned long)((5)*(40000000/4000.0)));};
  1628  001CFA  0E01               	movlw	1
  1629  001CFC  ECC5  F016         	call	_lcdInst
  1630  001D00  0E41               	movlw	65
  1631  001D02  6E5C               	movwf	??_main& (0+255),c
  1632  001D04  0EEE               	movlw	238
  1633  001D06                     u3007:
  1634  001D06  2EE8               	decfsz	wreg,f,c
  1635  001D08  D7FE               	bra	u3007
  1636  001D0A  2E5C               	decfsz	??_main& (0+255),f,c
  1637  001D0C  D7FC               	bra	u3007
  1638  001D0E  D000               	nop2	
  1639                           
  1640                           ;main.c: 206: printf("Reading sectors");
  1641  001D10  0E5C               	movlw	low STR_12
  1642  001D12  6E19               	movwf	printf@f,c
  1643  001D14  0E10               	movlw	high STR_12
  1644  001D16  6E1A               	movwf	printf@f+1,c
  1645  001D18  EC98  F00F         	call	_printf	;wreg free
  1646                           
  1647                           ;main.c: 207: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1648  001D1C  0E4A               	movlw	low _LCD_LINE2_ADDR
  1649  001D1E  6EF6               	movwf	tblptrl,c
  1650  001D20                     	if	1	;There is more than 1 active tblptr byte
  1651  001D20  0E10               	movlw	high _LCD_LINE2_ADDR
  1652  001D22  6EF7               	movwf	tblptrh,c
  1653  001D24                     	endif
  1654  001D24                     	if	0	;There are less than 3 active tblptr bytes
  1655  001D24                     	endif
  1656  001D24  0008               	tblrd		*
  1657  001D26  50F5               	movf	tablat,w,c
  1658  001D28  0980               	iorlw	128
  1659  001D2A  ECC5  F016         	call	_lcdInst
  1660                           
  1661                           ;main.c: 208: printf("%d-%d", firstBlock, firstBlock + numWrites - 1);
  1662  001D2E  0EBD               	movlw	low (STR_15+4)
  1663  001D30  6E19               	movwf	printf@f,c
  1664  001D32  0E10               	movlw	high (STR_15+4)
  1665  001D34  6E1A               	movwf	printf@f+1,c
  1666  001D36  C06E  F01B         	movff	main@firstBlock,?_printf+2
  1667  001D3A  6A1C               	clrf	?_printf+3,c
  1668  001D3C  506E               	movf	main@firstBlock,w,c
  1669  001D3E  246C               	addwf	main@numWrites,w,c
  1670  001D40  6E5C               	movwf	??_main& (0+255),c
  1671  001D42  0E00               	movlw	0
  1672  001D44  206D               	addwfc	main@numWrites+1,w,c
  1673  001D46  6E5D               	movwf	(??_main+1)& (0+255),c
  1674  001D48  0EFF               	movlw	255
  1675  001D4A  245C               	addwf	??_main,w,c
  1676  001D4C  6E1D               	movwf	?_printf+4,c
  1677  001D4E  0EFF               	movlw	255
  1678  001D50  205D               	addwfc	??_main+1,w,c
  1679  001D52  6E1E               	movwf	?_printf+5,c
  1680  001D54  EC98  F00F         	call	_printf	;wreg free
  1681                           
  1682                           ;main.c: 210: for(i = 0;
  1683  001D58  0E00               	movlw	0
  1684  001D5A  6E6F               	movwf	main@i,c
  1685  001D5C  0E00               	movlw	0
  1686  001D5E  6E70               	movwf	main@i+1,c
  1687  001D60  0E00               	movlw	0
  1688  001D62  6E71               	movwf	main@i+2,c
  1689  001D64  0E00               	movlw	0
  1690  001D66  6E72               	movwf	main@i+3,c
  1691                           
  1692                           ;main.c: 211: i < SDCard.write.lastBlockWritten - SDCard.write.MBW_startBlock + 1;
  1693                           ;main.c: 212: i++
  1694                           ;main.c: 213: )
  1695  001D68  D041               	goto	l3260
  1696  001D6A                     l3248:
  1697                           
  1698                           ;main.c: 214: {
  1699                           ;main.c: 216: SD_MBR_Receive(readBuffer);
  1700  001D6A  0EBE               	movlw	low main@readBuffer
  1701  001D6C  6E04               	movwf	SD_MBR_Receive@bufReceive,c
  1702  001D6E  0E00               	movlw	high main@readBuffer
  1703  001D70  6E05               	movwf	SD_MBR_Receive@bufReceive+1,c
  1704  001D72  EC9F  F013         	call	_SD_MBR_Receive	;wreg free
  1705                           
  1706                           ;main.c: 220: avg += average(readBuffer, 512);
  1707  001D76  0EBE               	movlw	low main@readBuffer
  1708  001D78  6E0E               	movwf	average@array,c
  1709  001D7A  0E00               	movlw	high main@readBuffer
  1710  001D7C  6E0F               	movwf	average@array+1,c
  1711  001D7E  0E02               	movlw	2
  1712  001D80  6E11               	movwf	average@n+1,c
  1713  001D82  0E00               	movlw	0
  1714  001D84  6E10               	movwf	average@n,c
  1715  001D86  EC56  F015         	call	_average	;wreg free
  1716  001D8A  6E5C               	movwf	??_main& (0+255),c
  1717  001D8C  505C               	movf	??_main,w,c
  1718  001D8E  2668               	addwf	main@avg,f,c
  1719  001D90  0E00               	movlw	0
  1720  001D92  2269               	addwfc	main@avg+1,f,c
  1721  001D94  226A               	addwfc	main@avg+2,f,c
  1722  001D96  226B               	addwfc	main@avg+3,f,c
  1723                           
  1724                           ;main.c: 222: if((i > 0) && (i % 250 == 0)){
  1725  001D98  506F               	movf	main@i,w,c
  1726  001D9A  1070               	iorwf	main@i+1,w,c
  1727  001D9C  1071               	iorwf	main@i+2,w,c
  1728  001D9E  1072               	iorwf	main@i+3,w,c
  1729  001DA0  B4D8               	btfsc	status,2,c
  1730  001DA2  D01E               	goto	l3258
  1731  001DA4  C06F  F00E         	movff	main@i,___llmod@dividend
  1732  001DA8  C070  F00F         	movff	main@i+1,___llmod@dividend+1
  1733  001DAC  C071  F010         	movff	main@i+2,___llmod@dividend+2
  1734  001DB0  C072  F011         	movff	main@i+3,___llmod@dividend+3
  1735  001DB4  0EFA               	movlw	250
  1736  001DB6  6E12               	movwf	___llmod@divisor,c
  1737  001DB8  0E00               	movlw	0
  1738  001DBA  6E13               	movwf	___llmod@divisor+1,c
  1739  001DBC  0E00               	movlw	0
  1740  001DBE  6E14               	movwf	___llmod@divisor+2,c
  1741  001DC0  0E00               	movlw	0
  1742  001DC2  6E15               	movwf	___llmod@divisor+3,c
  1743  001DC4  EC8B  F015         	call	___llmod	;wreg free
  1744  001DC8  500E               	movf	?___llmod,w,c
  1745  001DCA  100F               	iorwf	?___llmod+1,w,c
  1746  001DCC  1010               	iorwf	?___llmod+2,w,c
  1747  001DCE  1011               	iorwf	?___llmod+3,w,c
  1748  001DD0  A4D8               	btfss	status,2,c
  1749  001DD2  D006               	goto	l3258
  1750                           
  1751                           ;main.c: 223: printf(".");
  1752  001DD4  0E94               	movlw	low (STR_5+11)
  1753  001DD6  6E19               	movwf	printf@f,c
  1754  001DD8  0E10               	movlw	high (STR_5+11)
  1755  001DDA  6E1A               	movwf	printf@f+1,c
  1756  001DDC  EC98  F00F         	call	_printf	;wreg free
  1757  001DE0                     l3258:
  1758  001DE0  0E01               	movlw	1
  1759  001DE2  266F               	addwf	main@i,f,c
  1760  001DE4  0E00               	movlw	0
  1761  001DE6  2270               	addwfc	main@i+1,f,c
  1762  001DE8  2271               	addwfc	main@i+2,f,c
  1763  001DEA  2272               	addwfc	main@i+3,f,c
  1764  001DEC                     l3260:
  1765  001DEC  C0A0  F05C         	movff	_SDCard+32,??_main
  1766  001DF0  C0A1  F05D         	movff	_SDCard+33,??_main+1
  1767  001DF4  C0A2  F05E         	movff	_SDCard+34,??_main+2
  1768  001DF8  C0A3  F05F         	movff	_SDCard+35,??_main+3
  1769  001DFC  1E5C               	comf	??_main,f,c
  1770  001DFE  1E5D               	comf	??_main+1,f,c
  1771  001E00  1E5E               	comf	??_main+2,f,c
  1772  001E02  1E5F               	comf	??_main+3,f,c
  1773  001E04  2A5C               	incf	??_main,f,c
  1774  001E06  0E00               	movlw	0
  1775  001E08  225D               	addwfc	??_main+1,f,c
  1776  001E0A  225E               	addwfc	??_main+2,f,c
  1777  001E0C  225F               	addwfc	??_main+3,f,c
  1778  001E0E  0100               	movlb	0	; () banked
  1779  001E10  519C               	movf	(_SDCard+28)& (0+255),w,b
  1780  001E12  245C               	addwf	??_main,w,c
  1781  001E14  6E60               	movwf	(??_main+4)& (0+255),c
  1782  001E16  0100               	movlb	0	; () banked
  1783  001E18  519D               	movf	(_SDCard+29)& (0+255),w,b
  1784  001E1A  205D               	addwfc	??_main+1,w,c
  1785  001E1C  6E61               	movwf	(??_main+5)& (0+255),c
  1786  001E1E  0100               	movlb	0	; () banked
  1787  001E20  519E               	movf	(_SDCard+30)& (0+255),w,b
  1788  001E22  205E               	addwfc	??_main+2,w,c
  1789  001E24  6E62               	movwf	(??_main+6)& (0+255),c
  1790  001E26  0100               	movlb	0	; () banked
  1791  001E28  519F               	movf	(_SDCard+31)& (0+255),w,b
  1792  001E2A  205F               	addwfc	??_main+3,w,c
  1793  001E2C  6E63               	movwf	(??_main+7)& (0+255),c
  1794  001E2E  0E01               	movlw	1
  1795  001E30  2460               	addwf	??_main+4,w,c
  1796  001E32  6E64               	movwf	(??_main+8)& (0+255),c
  1797  001E34  0E00               	movlw	0
  1798  001E36  2061               	addwfc	??_main+5,w,c
  1799  001E38  6E65               	movwf	(??_main+9)& (0+255),c
  1800  001E3A  0E00               	movlw	0
  1801  001E3C  2062               	addwfc	??_main+6,w,c
  1802  001E3E  6E66               	movwf	(??_main+10)& (0+255),c
  1803  001E40  0E00               	movlw	0
  1804  001E42  2063               	addwfc	??_main+7,w,c
  1805  001E44  6E67               	movwf	(??_main+11)& (0+255),c
  1806  001E46  5064               	movf	??_main+8,w,c
  1807  001E48  5C6F               	subwf	main@i,w,c
  1808  001E4A  5065               	movf	??_main+9,w,c
  1809  001E4C  5870               	subwfb	main@i+1,w,c
  1810  001E4E  5066               	movf	??_main+10,w,c
  1811  001E50  5871               	subwfb	main@i+2,w,c
  1812  001E52  5067               	movf	??_main+11,w,c
  1813  001E54  5872               	subwfb	main@i+3,w,c
  1814  001E56  A0D8               	btfss	status,0,c
  1815  001E58  D788               	goto	l3248
  1816                           
  1817                           ; BSR set to: 0
  1818                           ;main.c: 224: }
  1819                           ;main.c: 225: }
  1820                           ;main.c: 226: SD_MBR_Stop();
  1821                           
  1822                           ; BSR set to: 0
  1823  001E5A  EC67  F016         	call	_SD_MBR_Stop	;wreg free
  1824                           
  1825                           ;main.c: 230: avg /= (SDCard.read.lastBlockRead - SDCard.read.MBR_startBlock);
  1826  001E5E  C068  F001         	movff	main@avg,___lldiv@dividend
  1827  001E62  C069  F002         	movff	main@avg+1,___lldiv@dividend+1
  1828  001E66  C06A  F003         	movff	main@avg+2,___lldiv@dividend+2
  1829  001E6A  C06B  F004         	movff	main@avg+3,___lldiv@dividend+3
  1830  001E6E  C0A9  F05C         	movff	_SDCard+41,??_main
  1831  001E72  C0AA  F05D         	movff	_SDCard+42,??_main+1
  1832  001E76  C0AB  F05E         	movff	_SDCard+43,??_main+2
  1833  001E7A  C0AC  F05F         	movff	_SDCard+44,??_main+3
  1834  001E7E  1E5C               	comf	??_main,f,c
  1835  001E80  1E5D               	comf	??_main+1,f,c
  1836  001E82  1E5E               	comf	??_main+2,f,c
  1837  001E84  1E5F               	comf	??_main+3,f,c
  1838  001E86  2A5C               	incf	??_main,f,c
  1839  001E88  0E00               	movlw	0
  1840  001E8A  225D               	addwfc	??_main+1,f,c
  1841  001E8C  225E               	addwfc	??_main+2,f,c
  1842  001E8E  225F               	addwfc	??_main+3,f,c
  1843  001E90  0100               	movlb	0	; () banked
  1844  001E92  51A5               	movf	(_SDCard+37)& (0+255),w,b
  1845  001E94  245C               	addwf	??_main,w,c
  1846  001E96  6E05               	movwf	___lldiv@divisor,c
  1847  001E98  0100               	movlb	0	; () banked
  1848  001E9A  51A6               	movf	(_SDCard+38)& (0+255),w,b
  1849  001E9C  205D               	addwfc	??_main+1,w,c
  1850  001E9E  6E06               	movwf	___lldiv@divisor+1,c
  1851  001EA0  0100               	movlb	0	; () banked
  1852  001EA2  51A7               	movf	(_SDCard+39)& (0+255),w,b
  1853  001EA4  205E               	addwfc	??_main+2,w,c
  1854  001EA6  6E07               	movwf	___lldiv@divisor+2,c
  1855  001EA8  0100               	movlb	0	; () banked
  1856  001EAA  51A8               	movf	(_SDCard+40)& (0+255),w,b
  1857  001EAC  205F               	addwfc	??_main+3,w,c
  1858  001EAE  6E08               	movwf	___lldiv@divisor+3,c
  1859  001EB0  EC29  F014         	call	___lldiv	;wreg free
  1860  001EB4  C001  F068         	movff	?___lldiv,main@avg
  1861  001EB8  C002  F069         	movff	?___lldiv+1,main@avg+1
  1862  001EBC  C003  F06A         	movff	?___lldiv+2,main@avg+2
  1863  001EC0  C004  F06B         	movff	?___lldiv+3,main@avg+3
  1864                           
  1865                           ;main.c: 232: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  1866  001EC4  848D               	bsf	3981,2,c	;volatile
  1867  001EC6  9AC6               	bcf	4038,5,c	;volatile
  1868                           
  1869                           ;main.c: 234: { lcdInst(0x01); _delay((unsigned long)((5)*(40000000/4000.0)));};
  1870  001EC8  0E01               	movlw	1
  1871  001ECA  ECC5  F016         	call	_lcdInst
  1872  001ECE  0E41               	movlw	65
  1873  001ED0  6E5C               	movwf	??_main& (0+255),c
  1874  001ED2  0EEE               	movlw	238
  1875  001ED4                     u3017:
  1876  001ED4  2EE8               	decfsz	wreg,f,c
  1877  001ED6  D7FE               	bra	u3017
  1878  001ED8  2E5C               	decfsz	??_main& (0+255),f,c
  1879  001EDA  D7FC               	bra	u3017
  1880  001EDC  D000               	nop2	
  1881                           
  1882                           ;main.c: 235: printf("Sec %d-%d", (int)firstBlock, (int)(firstBlock + numWrites - 1));
  1883  001EDE  0EB9               	movlw	low STR_15
  1884  001EE0  6E19               	movwf	printf@f,c
  1885  001EE2  0E10               	movlw	high STR_15
  1886  001EE4  6E1A               	movwf	printf@f+1,c
  1887  001EE6  C06E  F01B         	movff	main@firstBlock,?_printf+2
  1888  001EEA  6A1C               	clrf	?_printf+3,c
  1889  001EEC  506E               	movf	main@firstBlock,w,c
  1890  001EEE  246C               	addwf	main@numWrites,w,c
  1891  001EF0  6E5C               	movwf	??_main& (0+255),c
  1892  001EF2  0E00               	movlw	0
  1893  001EF4  206D               	addwfc	main@numWrites+1,w,c
  1894  001EF6  6E5D               	movwf	(??_main+1)& (0+255),c
  1895  001EF8  0EFF               	movlw	255
  1896  001EFA  245C               	addwf	??_main,w,c
  1897  001EFC  6E1D               	movwf	?_printf+4,c
  1898  001EFE  0EFF               	movlw	255
  1899  001F00  205D               	addwfc	??_main+1,w,c
  1900  001F02  6E1E               	movwf	?_printf+5,c
  1901  001F04  EC98  F00F         	call	_printf	;wreg free
  1902                           
  1903                           ;main.c: 236: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1904  001F08  0E4A               	movlw	low _LCD_LINE2_ADDR
  1905  001F0A  6EF6               	movwf	tblptrl,c
  1906  001F0C                     	if	1	;There is more than 1 active tblptr byte
  1907  001F0C  0E10               	movlw	high _LCD_LINE2_ADDR
  1908  001F0E  6EF7               	movwf	tblptrh,c
  1909  001F10                     	endif
  1910  001F10                     	if	0	;There are less than 3 active tblptr bytes
  1911  001F10                     	endif
  1912  001F10  0008               	tblrd		*
  1913  001F12  50F5               	movf	tablat,w,c
  1914  001F14  0980               	iorlw	128
  1915  001F16  ECC5  F016         	call	_lcdInst
  1916                           
  1917                           ;main.c: 237: printf("Avg: %d", (int)avg);
  1918  001F1A  0EDF               	movlw	low STR_10
  1919  001F1C  6E19               	movwf	printf@f,c
  1920  001F1E  0E10               	movlw	high STR_10
  1921  001F20  6E1A               	movwf	printf@f+1,c
  1922  001F22  C068  F01B         	movff	main@avg,?_printf+2
  1923  001F26  C069  F01C         	movff	main@avg+1,?_printf+3
  1924  001F2A  EC98  F00F         	call	_printf	;wreg free
  1925  001F2E                     l85:
  1926  001F2E  D7FF               	goto	l85
  1927  001F30                     __end_of_main:
  1928                           	opt stack 0
  1929                           tblptru	equ	0xFF8
  1930                           tblptrh	equ	0xFF7
  1931                           tblptrl	equ	0xFF6
  1932                           tablat	equ	0xFF5
  1933                           postinc0	equ	0xFEE
  1934                           wreg	equ	0xFE8
  1935                           postdec1	equ	0xFE5
  1936                           fsr1h	equ	0xFE2
  1937                           fsr1l	equ	0xFE1
  1938                           indf2	equ	0xFDF
  1939                           fsr2h	equ	0xFDA
  1940                           fsr2l	equ	0xFD9
  1941                           status	equ	0xFD8
  1942                           
  1943 ;; *************** function _printf *****************
  1944 ;; Defined at:
  1945 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;  f               2   24[COMRAM] PTR const unsigned char 
  1948 ;;		 -> STR_16(8), STR_15(10), STR_14(2), STR_13(6), 
  1949 ;;		 -> STR_12(16), STR_11(9), STR_10(8), STR_9(17), 
  1950 ;;		 -> STR_8(9), STR_7(10), STR_6(10), STR_5(13), 
  1951 ;;		 -> STR_4(15), STR_3(13), STR_2(12), STR_1(14), 
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  val             4   34[COMRAM] unsigned long 
  1954 ;;  tmpval          4    0        struct .
  1955 ;;  cp              3    0        PTR const unsigned char 
  1956 ;;  ap              2   38[COMRAM] PTR void [1]
  1957 ;;		 -> ?_printf(2), 
  1958 ;;  prec            2   32[COMRAM] int 
  1959 ;;  len             2    0        unsigned int 
  1960 ;;  c               1   41[COMRAM] char 
  1961 ;;  flag            1   40[COMRAM] unsigned char 
  1962 ;; Return value:  Size  Location     Type
  1963 ;;                  2   24[COMRAM] int 
  1964 ;; Registers used:
  1965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1971 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1973 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1974 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1975 ;;Total ram usage:       18 bytes
  1976 ;; Hardware stack levels used:    1
  1977 ;; Hardware stack levels required when called:    4
  1978 ;; This function calls:
  1979 ;;		___lldiv
  1980 ;;		___llmod
  1981 ;;		_putch
  1982 ;; This function is called by:
  1983 ;;		_main
  1984 ;; This function uses a non-reentrant model
  1985 ;;
  1986                           
  1987                           	psect	text1
  1988  001F30                     __ptext1:
  1989                           	opt stack 0
  1990  001F30                     _printf:
  1991                           	opt stack 26
  1992                           
  1993                           ;doprnt.c: 466: va_list ap;
  1994                           ;doprnt.c: 499: signed char c;
  1995                           ;doprnt.c: 504: int prec;
  1996                           ;doprnt.c: 508: unsigned char flag;
  1997                           ;doprnt.c: 523: union {
  1998                           ;doprnt.c: 524: unsigned long vd;
  1999                           ;doprnt.c: 525: double integ;
  2000                           ;doprnt.c: 526: } tmpval;
  2001                           ;doprnt.c: 528: unsigned long val;
  2002                           ;doprnt.c: 529: unsigned len;
  2003                           ;doprnt.c: 530: const char * cp;
  2004                           ;doprnt.c: 533: *ap = __va_start();
  2005                           
  2006                           ;incstack = 0
  2007  001F30  0E1B               	movlw	low (?_printf+2)
  2008  001F32  6E27               	movwf	printf@ap,c
  2009  001F34  0E00               	movlw	high (?_printf+2)
  2010  001F36  6E28               	movwf	printf@ap+1,c
  2011                           
  2012                           ;doprnt.c: 536: while(c = *f++) {
  2013  001F38  D0EE               	goto	l2868
  2014  001F3A                     l2804:
  2015                           
  2016                           ;doprnt.c: 538: if(c != '%')
  2017  001F3A  0E25               	movlw	37
  2018  001F3C  182A               	xorwf	printf@c,w,c
  2019  001F3E  B4D8               	btfsc	status,2,c
  2020  001F40  D004               	goto	l2808
  2021                           
  2022                           ;doprnt.c: 540: {
  2023                           ;doprnt.c: 541: (putch(c) );
  2024  001F42  502A               	movf	printf@c,w,c
  2025  001F44  ECBF  F016         	call	_putch
  2026                           
  2027                           ;doprnt.c: 542: continue;
  2028  001F48  D0E6               	goto	l2868
  2029  001F4A                     l2808:
  2030                           
  2031                           ;doprnt.c: 543: }
  2032                           ;doprnt.c: 548: flag = 0;
  2033  001F4A  0E00               	movlw	0
  2034  001F4C  6E29               	movwf	printf@flag,c
  2035                           
  2036                           ;doprnt.c: 635: switch(c = *f++) {
  2037                           
  2038                           ;doprnt.c: 633: loop:
  2039  001F4E  D004               	goto	l2816
  2040  001F50                     l2810:
  2041                           
  2042                           ;doprnt.c: 643: flag |= 0x10;
  2043  001F50  8829               	bsf	printf@flag,4,c
  2044                           
  2045                           ;doprnt.c: 644: goto loop;
  2046  001F52  D002               	goto	l2816
  2047  001F54                     l2812:
  2048                           
  2049                           ;doprnt.c: 818: flag |= 0x40;
  2050  001F54  8C29               	bsf	printf@flag,6,c
  2051                           
  2052                           ;doprnt.c: 822: }
  2053                           
  2054                           ;doprnt.c: 819: break;
  2055  001F56  D01A               	goto	l444
  2056  001F58                     l2816:
  2057  001F58  C019  FFF6         	movff	printf@f,tblptrl
  2058  001F5C  C01A  FFF7         	movff	printf@f+1,tblptrh
  2059  001F60  4A19               	infsnz	printf@f,f,c
  2060  001F62  2A1A               	incf	printf@f+1,f,c
  2061  001F64                     	if	0	;tblptru may be non-zero
  2062  001F64                     	endif
  2063  001F64                     	if	0	;tblptru may be non-zero
  2064  001F64                     	endif
  2065  001F64  0008               	tblrd		*
  2066  001F66  CFF5 F02A          	movff	tablat,printf@c
  2067  001F6A  502A               	movf	printf@c,w,c
  2068                           
  2069                           ; Switch size 1, requested type "space"
  2070                           ; Number of cases is 5, Range of values is 0 to 117
  2071                           ; switch strategies available:
  2072                           ; Name         Instructions Cycles
  2073                           ; simple_byte           16     9 (average)
  2074                           ;	Chosen strategy is simple_byte
  2075  001F6C  0A00               	xorlw	0	; case 0
  2076  001F6E  B4D8               	btfsc	status,2,c
  2077  001F70  0012               	return	
  2078  001F72  0A64               	xorlw	100	; case 100
  2079  001F74  B4D8               	btfsc	status,2,c
  2080  001F76  D00A               	goto	l444
  2081  001F78  0A0D               	xorlw	13	; case 105
  2082  001F7A  B4D8               	btfsc	status,2,c
  2083  001F7C  D007               	goto	l444
  2084  001F7E  0A05               	xorlw	5	; case 108
  2085  001F80  B4D8               	btfsc	status,2,c
  2086  001F82  D7E6               	goto	l2810
  2087  001F84  0A19               	xorlw	25	; case 117
  2088  001F86  B4D8               	btfsc	status,2,c
  2089  001F88  D7E5               	goto	l2812
  2090  001F8A  D0C5               	goto	l2868
  2091  001F8C                     l444:
  2092                           
  2093                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  2094  001F8C  BC29               	btfsc	printf@flag,6,c
  2095  001F8E  D02E               	goto	l447
  2096                           
  2097                           ;doprnt.c: 1253: {
  2098                           ;doprnt.c: 1255: if(flag & 0x10)
  2099  001F90  A829               	btfss	printf@flag,4,c
  2100  001F92  D00E               	goto	l2824
  2101                           
  2102                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2103  001F94  C027  FFD9         	movff	printf@ap,fsr2l
  2104  001F98  C028  FFDA         	movff	printf@ap+1,fsr2h
  2105  001F9C  CFDE F023          	movff	postinc2,printf@val
  2106  001FA0  CFDE F024          	movff	postinc2,printf@val+1
  2107  001FA4  CFDE F025          	movff	postinc2,printf@val+2
  2108  001FA8  CFDE F026          	movff	postinc2,printf@val+3
  2109  001FAC  0E04               	movlw	4
  2110  001FAE  D00E               	goto	L1
  2111  001FB0                     l2824:
  2112                           
  2113                           ;doprnt.c: 1257: else
  2114                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2115  001FB0  C027  FFD9         	movff	printf@ap,fsr2l
  2116  001FB4  C028  FFDA         	movff	printf@ap+1,fsr2h
  2117  001FB8  CFDE F023          	movff	postinc2,printf@val
  2118  001FBC  CFDD F024          	movff	postdec2,printf@val+1
  2119  001FC0  0E00               	movlw	0
  2120  001FC2  BE24               	btfsc	printf@val+1,7,c
  2121  001FC4  0EFF               	movlw	-1
  2122  001FC6  6E25               	movwf	printf@val+2,c
  2123  001FC8  6E26               	movwf	printf@val+3,c
  2124  001FCA  0E02               	movlw	2
  2125  001FCC                     L1:
  2126  001FCC  2627               	addwf	printf@ap,f,c
  2127  001FCE  0E00               	movlw	0
  2128  001FD0  2228               	addwfc	printf@ap+1,f,c
  2129                           
  2130                           ;doprnt.c: 1261: if((long)val < 0) {
  2131  001FD2  AE26               	btfss	printf@val+3,7,c
  2132  001FD4  D02D               	goto	l2842
  2133                           
  2134                           ;doprnt.c: 1262: flag |= 0x03;
  2135  001FD6  0E03               	movlw	3
  2136  001FD8  1229               	iorwf	printf@flag,f,c
  2137                           
  2138                           ;doprnt.c: 1263: val = -val;
  2139  001FDA  1E26               	comf	printf@val+3,f,c
  2140  001FDC  1E25               	comf	printf@val+2,f,c
  2141  001FDE  1E24               	comf	printf@val+1,f,c
  2142  001FE0  6C23               	negf	printf@val,c
  2143  001FE2  0E00               	movlw	0
  2144  001FE4  2224               	addwfc	printf@val+1,f,c
  2145  001FE6  2225               	addwfc	printf@val+2,f,c
  2146  001FE8  2226               	addwfc	printf@val+3,f,c
  2147                           
  2148                           ;doprnt.c: 1264: }
  2149                           ;doprnt.c: 1266: }
  2150  001FEA  D022               	goto	l2842
  2151  001FEC                     l447:
  2152                           
  2153                           ;doprnt.c: 1268: else
  2154                           ;doprnt.c: 1273: {
  2155                           ;doprnt.c: 1281: if(flag & 0x10)
  2156  001FEC  A829               	btfss	printf@flag,4,c
  2157  001FEE  D00E               	goto	l2838
  2158                           
  2159                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2160  001FF0  C027  FFD9         	movff	printf@ap,fsr2l
  2161  001FF4  C028  FFDA         	movff	printf@ap+1,fsr2h
  2162  001FF8  CFDE F023          	movff	postinc2,printf@val
  2163  001FFC  CFDE F024          	movff	postinc2,printf@val+1
  2164  002000  CFDE F025          	movff	postinc2,printf@val+2
  2165  002004  CFDE F026          	movff	postinc2,printf@val+3
  2166  002008  0E04               	movlw	4
  2167  00200A  D00F               	goto	L2
  2168  00200C                     l2838:
  2169                           
  2170                           ;doprnt.c: 1283: else
  2171                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2172  00200C  C027  FFD9         	movff	printf@ap,fsr2l
  2173  002010  C028  FFDA         	movff	printf@ap+1,fsr2h
  2174  002014  CFDE F01F          	movff	postinc2,??_printf
  2175  002018  CFDD F020          	movff	postdec2,??_printf+1
  2176  00201C  C01F  F023         	movff	??_printf,printf@val
  2177  002020  C020  F024         	movff	??_printf+1,printf@val+1
  2178  002024  6A25               	clrf	printf@val+2,c
  2179  002026  6A26               	clrf	printf@val+3,c
  2180  002028  0E02               	movlw	2
  2181  00202A                     L2:
  2182  00202A  2627               	addwf	printf@ap,f,c
  2183  00202C  0E00               	movlw	0
  2184  00202E  2228               	addwfc	printf@ap+1,f,c
  2185  002030                     l2842:
  2186                           
  2187                           ;doprnt.c: 1287: }
  2188                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2189  002030  0E01               	movlw	1
  2190  002032  6E2A               	movwf	printf@c,c
  2191  002034                     l2844:
  2192  002034  0E0A               	movlw	10
  2193  002036  182A               	xorwf	printf@c,w,c
  2194  002038  B4D8               	btfsc	status,2,c
  2195  00203A  D018               	goto	l2856
  2196                           
  2197                           ;doprnt.c: 1306: if(val < dpowers[c])
  2198  00203C  502A               	movf	printf@c,w,c
  2199  00203E  0D04               	mullw	4
  2200  002040  0E01               	movlw	low _dpowers
  2201  002042  24F3               	addwf	prodl,w,c
  2202  002044  6EF6               	movwf	tblptrl,c
  2203  002046  0E10               	movlw	high _dpowers
  2204  002048  20F4               	addwfc	prodh,w,c
  2205  00204A  6EF7               	movwf	tblptrh,c
  2206  00204C                     	if	0	;There are less than 3 active tblptr bytes
  2207  00204C                     	endif
  2208  00204C  0009               	tblrd		*+
  2209  00204E  50F5               	movf	tablat,w,c
  2210  002050  5C23               	subwf	printf@val,w,c
  2211  002052  0009               	tblrd		*+
  2212  002054  50F5               	movf	tablat,w,c
  2213  002056  5824               	subwfb	printf@val+1,w,c
  2214  002058  0009               	tblrd		*+
  2215  00205A  50F5               	movf	tablat,w,c
  2216  00205C  5825               	subwfb	printf@val+2,w,c
  2217  00205E  0009               	tblrd		*+
  2218  002060  50F5               	movf	tablat,w,c
  2219  002062  5826               	subwfb	printf@val+3,w,c
  2220  002064  A0D8               	btfss	status,0,c
  2221  002066  D002               	goto	l2856
  2222                           
  2223                           ;doprnt.c: 1307: break;
  2224  002068  2A2A               	incf	printf@c,f,c
  2225  00206A  D7E4               	goto	l2844
  2226  00206C                     l2856:
  2227                           
  2228                           ;doprnt.c: 1422: {
  2229                           ;doprnt.c: 1438: if(flag & 0x03)
  2230  00206C  C029  F01F         	movff	printf@flag,??_printf
  2231  002070  0E03               	movlw	3
  2232  002072  161F               	andwf	??_printf,f,c
  2233  002074  B4D8               	btfsc	status,2,c
  2234  002076  D003               	goto	l2860
  2235                           
  2236                           ;doprnt.c: 1439: (putch('-') );
  2237  002078  0E2D               	movlw	45
  2238  00207A  ECBF  F016         	call	_putch
  2239  00207E                     l2860:
  2240                           
  2241                           ;doprnt.c: 1469: }
  2242                           ;doprnt.c: 1472: prec = c;
  2243  00207E  502A               	movf	printf@c,w,c
  2244  002080  6E21               	movwf	printf@prec,c
  2245  002082  6A22               	clrf	printf@prec+1,c
  2246  002084  BE21               	btfsc	printf@prec,7,c
  2247  002086  0622               	decf	printf@prec+1,f,c
  2248                           
  2249                           ;doprnt.c: 1474: while(prec--) {
  2250  002088  D03E               	goto	l2866
  2251  00208A                     l2862:
  2252                           
  2253                           ;doprnt.c: 1478: {
  2254                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2255  00208A  C021  F01F         	movff	printf@prec,??_printf
  2256  00208E  C022  F020         	movff	printf@prec+1,??_printf+1
  2257  002092  90D8               	bcf	status,0,c
  2258  002094  361F               	rlcf	??_printf,f,c
  2259  002096  3620               	rlcf	??_printf+1,f,c
  2260  002098  90D8               	bcf	status,0,c
  2261  00209A  361F               	rlcf	??_printf,f,c
  2262  00209C  3620               	rlcf	??_printf+1,f,c
  2263  00209E  0E01               	movlw	low _dpowers
  2264  0020A0  241F               	addwf	??_printf,w,c
  2265  0020A2  6EF6               	movwf	tblptrl,c
  2266  0020A4  0E10               	movlw	high _dpowers
  2267  0020A6  2020               	addwfc	??_printf+1,w,c
  2268  0020A8  6EF7               	movwf	tblptrh,c
  2269  0020AA                     	if	0	;There are less than 3 active tblptr bytes
  2270  0020AA                     	endif
  2271  0020AA  0009               	tblrd		*+
  2272  0020AC  CFF5 F005          	movff	tablat,___lldiv@divisor
  2273  0020B0  0009               	tblrd		*+
  2274  0020B2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2275  0020B6  0009               	tblrd		*+
  2276  0020B8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2277  0020BC  000A               	tblrd		*-
  2278  0020BE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2279  0020C2  C023  F001         	movff	printf@val,___lldiv@dividend
  2280  0020C6  C024  F002         	movff	printf@val+1,___lldiv@dividend+1
  2281  0020CA  C025  F003         	movff	printf@val+2,___lldiv@dividend+2
  2282  0020CE  C026  F004         	movff	printf@val+3,___lldiv@dividend+3
  2283  0020D2  EC29  F014         	call	___lldiv	;wreg free
  2284  0020D6  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2285  0020DA  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2286  0020DE  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2287  0020E2  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2288  0020E6  0E0A               	movlw	10
  2289  0020E8  6E12               	movwf	___llmod@divisor,c
  2290  0020EA  0E00               	movlw	0
  2291  0020EC  6E13               	movwf	___llmod@divisor+1,c
  2292  0020EE  0E00               	movlw	0
  2293  0020F0  6E14               	movwf	___llmod@divisor+2,c
  2294  0020F2  0E00               	movlw	0
  2295  0020F4  6E15               	movwf	___llmod@divisor+3,c
  2296  0020F6  EC8B  F015         	call	___llmod	;wreg free
  2297  0020FA  500E               	movf	?___llmod,w,c
  2298  0020FC  0F30               	addlw	48
  2299  0020FE  6E2A               	movwf	printf@c,c
  2300                           
  2301                           ;doprnt.c: 1523: }
  2302                           ;doprnt.c: 1524: (putch(c) );
  2303  002100  502A               	movf	printf@c,w,c
  2304  002102  ECBF  F016         	call	_putch
  2305  002106                     l2866:
  2306  002106  0621               	decf	printf@prec,f,c
  2307  002108  A0D8               	btfss	status,0,c
  2308  00210A  0622               	decf	printf@prec+1,f,c
  2309  00210C  2821               	incf	printf@prec,w,c
  2310  00210E  E1BD               	bnz	l2862
  2311  002110  2822               	incf	printf@prec+1,w,c
  2312  002112  A4D8               	btfss	status,2,c
  2313  002114  D7BA               	goto	l2862
  2314  002116                     l2868:
  2315  002116  C019  FFF6         	movff	printf@f,tblptrl
  2316  00211A  C01A  FFF7         	movff	printf@f+1,tblptrh
  2317  00211E  4A19               	infsnz	printf@f,f,c
  2318  002120  2A1A               	incf	printf@f+1,f,c
  2319  002122                     	if	0	;tblptru may be non-zero
  2320  002122                     	endif
  2321  002122                     	if	0	;tblptru may be non-zero
  2322  002122                     	endif
  2323  002122  0008               	tblrd		*
  2324  002124  CFF5 F02A          	movff	tablat,printf@c
  2325  002128  502A               	movf	printf@c,w,c
  2326  00212A  B4D8               	btfsc	status,2,c
  2327  00212C  0012               	return	
  2328  00212E  D705               	goto	l2804
  2329  002130                     __end_of_printf:
  2330                           	opt stack 0
  2331                           tblptru	equ	0xFF8
  2332                           tblptrh	equ	0xFF7
  2333                           tblptrl	equ	0xFF6
  2334                           tablat	equ	0xFF5
  2335                           prodh	equ	0xFF4
  2336                           prodl	equ	0xFF3
  2337                           postinc0	equ	0xFEE
  2338                           wreg	equ	0xFE8
  2339                           postdec1	equ	0xFE5
  2340                           fsr1h	equ	0xFE2
  2341                           fsr1l	equ	0xFE1
  2342                           indf2	equ	0xFDF
  2343                           postinc2	equ	0xFDE
  2344                           postdec2	equ	0xFDD
  2345                           fsr2h	equ	0xFDA
  2346                           fsr2l	equ	0xFD9
  2347                           status	equ	0xFD8
  2348                           
  2349 ;; *************** function _putch *****************
  2350 ;; Defined at:
  2351 ;;		line 102 in file "lcd.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  data            1    wreg     unsigned char 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  data            1    3[COMRAM] unsigned char 
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      void 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2, status,0, cstack
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2366 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2368 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2369 ;;Total ram usage:        1 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    3
  2372 ;; This function calls:
  2373 ;;		_send_byte
  2374 ;; This function is called by:
  2375 ;;		_printf
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           	psect	text2
  2380  002D7E                     __ptext2:
  2381                           	opt stack 0
  2382  002D7E                     _putch:
  2383                           	opt stack 26
  2384                           
  2385                           ;incstack = 0
  2386                           ;putch@data stored from wreg
  2387  002D7E  6E04               	movwf	putch@data,c
  2388                           
  2389                           ;lcd.c: 103: LATDbits.LATD2 = 1;
  2390  002D80  848C               	bsf	3980,2,c	;volatile
  2391                           
  2392                           ;lcd.c: 104: send_byte((unsigned char)data);
  2393  002D82  5004               	movf	putch@data,w,c
  2394  002D84  ECB6  F016         	call	_send_byte
  2395  002D88  0012               	return		;funcret
  2396  002D8A                     __end_of_putch:
  2397                           	opt stack 0
  2398                           tblptru	equ	0xFF8
  2399                           tblptrh	equ	0xFF7
  2400                           tblptrl	equ	0xFF6
  2401                           tablat	equ	0xFF5
  2402                           prodh	equ	0xFF4
  2403                           prodl	equ	0xFF3
  2404                           postinc0	equ	0xFEE
  2405                           wreg	equ	0xFE8
  2406                           postdec1	equ	0xFE5
  2407                           fsr1h	equ	0xFE2
  2408                           fsr1l	equ	0xFE1
  2409                           indf2	equ	0xFDF
  2410                           postinc2	equ	0xFDE
  2411                           postdec2	equ	0xFDD
  2412                           fsr2h	equ	0xFDA
  2413                           fsr2l	equ	0xFD9
  2414                           status	equ	0xFD8
  2415                           
  2416 ;; *************** function ___llmod *****************
  2417 ;; Defined at:
  2418 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  dividend        4   13[COMRAM] unsigned long 
  2421 ;;  divisor         4   17[COMRAM] unsigned long 
  2422 ;; Auto vars:     Size  Location     Type
  2423 ;;  counter         1   21[COMRAM] unsigned char 
  2424 ;; Return value:  Size  Location     Type
  2425 ;;                  4   13[COMRAM] unsigned long 
  2426 ;; Registers used:
  2427 ;;		wreg, status,2, status,0
  2428 ;; Tracked objects:
  2429 ;;		On entry : 0/0
  2430 ;;		On exit  : 0/0
  2431 ;;		Unchanged: 0/0
  2432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2433 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2434 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2436 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2437 ;;Total ram usage:        9 bytes
  2438 ;; Hardware stack levels used:    1
  2439 ;; This function calls:
  2440 ;;		Nothing
  2441 ;; This function is called by:
  2442 ;;		_main
  2443 ;;		_printf
  2444 ;; This function uses a non-reentrant model
  2445 ;;
  2446                           
  2447                           	psect	text3
  2448  002B16                     __ptext3:
  2449                           	opt stack 0
  2450  002B16                     ___llmod:
  2451                           	opt stack 29
  2452                           
  2453                           ;incstack = 0
  2454  002B16  5012               	movf	___llmod@divisor,w,c
  2455  002B18  1013               	iorwf	___llmod@divisor+1,w,c
  2456  002B1A  1014               	iorwf	___llmod@divisor+2,w,c
  2457  002B1C  1015               	iorwf	___llmod@divisor+3,w,c
  2458  002B1E  B4D8               	btfsc	status,2,c
  2459  002B20  D024               	goto	l822
  2460  002B22  0E01               	movlw	1
  2461  002B24  6E16               	movwf	___llmod@counter,c
  2462  002B26  D006               	goto	l2492
  2463  002B28                     l2490:
  2464  002B28  90D8               	bcf	status,0,c
  2465  002B2A  3612               	rlcf	___llmod@divisor,f,c
  2466  002B2C  3613               	rlcf	___llmod@divisor+1,f,c
  2467  002B2E  3614               	rlcf	___llmod@divisor+2,f,c
  2468  002B30  3615               	rlcf	___llmod@divisor+3,f,c
  2469  002B32  2A16               	incf	___llmod@counter,f,c
  2470  002B34                     l2492:
  2471  002B34  AE15               	btfss	___llmod@divisor+3,7,c
  2472  002B36  D7F8               	goto	l2490
  2473  002B38                     l2494:
  2474  002B38  5012               	movf	___llmod@divisor,w,c
  2475  002B3A  5C0E               	subwf	___llmod@dividend,w,c
  2476  002B3C  5013               	movf	___llmod@divisor+1,w,c
  2477  002B3E  580F               	subwfb	___llmod@dividend+1,w,c
  2478  002B40  5014               	movf	___llmod@divisor+2,w,c
  2479  002B42  5810               	subwfb	___llmod@dividend+2,w,c
  2480  002B44  5015               	movf	___llmod@divisor+3,w,c
  2481  002B46  5811               	subwfb	___llmod@dividend+3,w,c
  2482  002B48  A0D8               	btfss	status,0,c
  2483  002B4A  D008               	goto	l2498
  2484  002B4C  5012               	movf	___llmod@divisor,w,c
  2485  002B4E  5E0E               	subwf	___llmod@dividend,f,c
  2486  002B50  5013               	movf	___llmod@divisor+1,w,c
  2487  002B52  5A0F               	subwfb	___llmod@dividend+1,f,c
  2488  002B54  5014               	movf	___llmod@divisor+2,w,c
  2489  002B56  5A10               	subwfb	___llmod@dividend+2,f,c
  2490  002B58  5015               	movf	___llmod@divisor+3,w,c
  2491  002B5A  5A11               	subwfb	___llmod@dividend+3,f,c
  2492  002B5C                     l2498:
  2493  002B5C  90D8               	bcf	status,0,c
  2494  002B5E  3215               	rrcf	___llmod@divisor+3,f,c
  2495  002B60  3214               	rrcf	___llmod@divisor+2,f,c
  2496  002B62  3213               	rrcf	___llmod@divisor+1,f,c
  2497  002B64  3212               	rrcf	___llmod@divisor,f,c
  2498  002B66  2E16               	decfsz	___llmod@counter,f,c
  2499  002B68  D7E7               	goto	l2494
  2500  002B6A                     l822:
  2501  002B6A  C00E  F00E         	movff	___llmod@dividend,?___llmod
  2502  002B6E  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  2503  002B72  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  2504  002B76  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  2505  002B7A  0012               	return		;funcret
  2506  002B7C                     __end_of___llmod:
  2507                           	opt stack 0
  2508                           tblptru	equ	0xFF8
  2509                           tblptrh	equ	0xFF7
  2510                           tblptrl	equ	0xFF6
  2511                           tablat	equ	0xFF5
  2512                           prodh	equ	0xFF4
  2513                           prodl	equ	0xFF3
  2514                           postinc0	equ	0xFEE
  2515                           wreg	equ	0xFE8
  2516                           postdec1	equ	0xFE5
  2517                           fsr1h	equ	0xFE2
  2518                           fsr1l	equ	0xFE1
  2519                           indf2	equ	0xFDF
  2520                           postinc2	equ	0xFDE
  2521                           postdec2	equ	0xFDD
  2522                           fsr2h	equ	0xFDA
  2523                           fsr2l	equ	0xFD9
  2524                           status	equ	0xFD8
  2525                           
  2526 ;; *************** function _initSD *****************
  2527 ;; Defined at:
  2528 ;;		line 374 in file "SD_PIC.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;		None
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  i               1   83[COMRAM] unsigned char 
  2533 ;;  i               1   81[COMRAM] unsigned char 
  2534 ;;  i               1   82[COMRAM] unsigned char 
  2535 ;;  i               1   85[COMRAM] unsigned char 
  2536 ;;  tempSize        4   86[COMRAM] unsigned long 
  2537 ;;  tempSize        4   60[COMRAM] unsigned long 
  2538 ;;  i               1   84[COMRAM] unsigned char 
  2539 ;;  i               1   80[COMRAM] unsigned char 
  2540 ;;  arr_response   16   64[COMRAM] unsigned char [16]
  2541 ;;  argument        4   54[COMRAM] unsigned long 
  2542 ;;  response        1   90[COMRAM] unsigned char 
  2543 ;;  last_OSCTUNE    1   59[COMRAM] const unsigned char 
  2544 ;;  last_OSCCON     1   58[COMRAM] const unsigned char 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;      Locals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;      Totals:        44       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;Total ram usage:       44 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    4
  2561 ;; This function calls:
  2562 ;;		_SD_ACMD
  2563 ;;		_SD_Command
  2564 ;;		___ftdiv
  2565 ;;		___ftmul
  2566 ;;		___fttol
  2567 ;;		___lltoft
  2568 ;;		___lwtoft
  2569 ;;		_spiInit
  2570 ;;		_spiReceive
  2571 ;;		_spiSend
  2572 ;; This function is called by:
  2573 ;;		_main
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text4
  2578  0010E8                     __ptext4:
  2579                           	opt stack 0
  2580  0010E8                     _initSD:
  2581                           	opt stack 26
  2582                           
  2583                           ;SD_PIC.c: 375: const unsigned char last_OSCCON = OSCCON;
  2584                           
  2585                           ;incstack = 0
  2586  0010E8  CFD3 F03B          	movff	4051,initSD@last_OSCCON	;volatile
  2587                           
  2588                           ;SD_PIC.c: 376: const unsigned char last_OSCTUNE = OSCTUNE;
  2589  0010EC  CF9B F03C          	movff	3995,initSD@last_OSCTUNE	;volatile
  2590                           
  2591                           ;SD_PIC.c: 377: unsigned char response;
  2592                           ;SD_PIC.c: 378: unsigned char arr_response[16] = {0};
  2593  0010F0  EE20  F0AE         	lfsr	2,initSD@F3023
  2594  0010F4  EE10  F041         	lfsr	1,initSD@arr_response
  2595  0010F8  0E0F               	movlw	15
  2596  0010FA                     u1891:
  2597  0010FA  CFDB FFE3          	movff	plusw2,plusw1
  2598  0010FE  06E8               	decf	wreg,f,c
  2599  001100  E2FC               	bc	u1891
  2600                           
  2601                           ;SD_PIC.c: 382: OSCTUNEbits.TUN = 0b000000;
  2602  001102  909B               	bcf	3995,0,c	;volatile
  2603  001104  929B               	bcf	3995,1,c	;volatile
  2604  001106  949B               	bcf	3995,2,c	;volatile
  2605  001108  969B               	bcf	3995,3,c	;volatile
  2606  00110A  989B               	bcf	3995,4,c	;volatile
  2607                           
  2608                           ;SD_PIC.c: 383: OSCCONbits.IRCF = 0b110;
  2609  00110C  50D3               	movf	4051,w,c	;volatile
  2610  00110E  0B8F               	andlw	-113
  2611  001110  0960               	iorlw	96
  2612  001112  6ED3               	movwf	4051,c	;volatile
  2613                           
  2614                           ;SD_PIC.c: 384: OSCCONbits.SCS = 0b11;
  2615  001114  0E03               	movlw	3
  2616  001116  12D3               	iorwf	4051,f,c	;volatile
  2617                           
  2618                           ;SD_PIC.c: 387: while(!OSCCONbits.IOFS){
  2619  001118  D004               	goto	l2560
  2620  00111A                     l2558:
  2621                           
  2622                           ;SD_PIC.c: 388: _delay((unsigned long)((20)*(40000000/4000000.0)));
  2623  00111A  0E42               	movlw	66
  2624  00111C                     u3027:
  2625  00111C  2EE8               	decfsz	wreg,f,c
  2626  00111E  D7FE               	bra	u3027
  2627  001120  D000               	nop2	
  2628  001122                     l2560:
  2629  001122  A4D3               	btfss	4051,2,c	;volatile
  2630  001124  D7FA               	goto	l2558
  2631                           
  2632                           ;SD_PIC.c: 389: }
  2633                           ;SD_PIC.c: 391: spiInit(16);
  2634  001126  0E10               	movlw	16
  2635  001128  EC09  F016         	call	_spiInit
  2636                           
  2637                           ;SD_PIC.c: 395: _delay((unsigned long)((20)*(40000000/4000.0)));
  2638  00112C  0E02               	movlw	2
  2639  00112E  6E31               	movwf	(??_initSD+1)& (0+255),c
  2640  001130  0E04               	movlw	4
  2641  001132  6E30               	movwf	??_initSD& (0+255),c
  2642  001134  0EBA               	movlw	186
  2643  001136                     u3037:
  2644  001136  2EE8               	decfsz	wreg,f,c
  2645  001138  D7FE               	bra	u3037
  2646  00113A  2E30               	decfsz	??_initSD& (0+255),f,c
  2647  00113C  D7FC               	bra	u3037
  2648  00113E  2E31               	decfsz	(??_initSD+1)& (0+255),f,c
  2649  001140  D7FA               	bra	u3037
  2650  001142  D000               	nop2	
  2651                           
  2652                           ;SD_PIC.c: 398: LATEbits.LATE2 = 1;
  2653  001144  848D               	bsf	3981,2,c	;volatile
  2654                           
  2655                           ;SD_PIC.c: 399: TRISEbits.TRISE2 = 0;
  2656  001146  9496               	bcf	3990,2,c	;volatile
  2657                           
  2658                           ;SD_PIC.c: 402: for(unsigned char i = 0; i < 10; i++){
  2659  001148  0E00               	movlw	0
  2660  00114A  6E51               	movwf	initSD@i,c
  2661  00114C                     l2572:
  2662  00114C  0E09               	movlw	9
  2663  00114E  6451               	cpfsgt	initSD@i,c
  2664  001150  D001               	goto	l2576
  2665  001152  D005               	goto	l290
  2666  001154                     l2576:
  2667                           
  2668                           ;SD_PIC.c: 403: spiSend(0xFF);
  2669  001154  0EFF               	movlw	255
  2670  001156  ECCB  F016         	call	_spiSend
  2671  00115A  2A51               	incf	initSD@i,f,c
  2672  00115C  D7F7               	goto	l2572
  2673  00115E                     l290:
  2674                           
  2675                           ;SD_PIC.c: 404: }
  2676                           ;SD_PIC.c: 406: LATEbits.LATE2 = 0;
  2677  00115E  948D               	bcf	3981,2,c	;volatile
  2678  001160                     l2582:
  2679  001160  0E00               	movlw	0
  2680  001162  6E04               	movwf	SD_Command@arg,c
  2681  001164  0E00               	movlw	0
  2682  001166  6E05               	movwf	SD_Command@arg+1,c
  2683  001168  0E00               	movlw	0
  2684  00116A  6E06               	movwf	SD_Command@arg+2,c
  2685  00116C  0E00               	movlw	0
  2686  00116E  6E07               	movwf	SD_Command@arg+3,c
  2687  001170  0E49               	movlw	low _CMD0
  2688  001172  6EF6               	movwf	tblptrl,c
  2689  001174                     	if	1	;There is more than 1 active tblptr byte
  2690  001174  0E10               	movlw	high _CMD0
  2691  001176  6EF7               	movwf	tblptrh,c
  2692  001178                     	endif
  2693  001178                     	if	0	;There are less than 3 active tblptr bytes
  2694  001178                     	endif
  2695  001178  0008               	tblrd		*
  2696  00117A  50F5               	movf	tablat,w,c
  2697  00117C  ECA9  F014         	call	_SD_Command
  2698  001180  6E30               	movwf	??_initSD& (0+255),c
  2699  001182  0E32               	movlw	low _R1_IDLE_STATE
  2700  001184  6EF6               	movwf	tblptrl,c
  2701  001186                     	if	1	;There is more than 1 active tblptr byte
  2702  001186  0E10               	movlw	high _R1_IDLE_STATE
  2703  001188  6EF7               	movwf	tblptrh,c
  2704  00118A                     	endif
  2705  00118A                     	if	0	;There are less than 3 active tblptr bytes
  2706  00118A                     	endif
  2707  00118A  0008               	tblrd		*
  2708  00118C  50F5               	movf	tablat,w,c
  2709  00118E  1830               	xorwf	??_initSD,w,c
  2710  001190  A4D8               	btfss	status,2,c
  2711  001192  D7E6               	goto	l2582
  2712  001194                     l2584:
  2713                           
  2714                           ;SD_PIC.c: 421: response = SD_Command(CMD8, 0x01AA);
  2715  001194  0EAA               	movlw	170
  2716  001196  6E04               	movwf	SD_Command@arg,c
  2717  001198  0E01               	movlw	1
  2718  00119A  6E05               	movwf	SD_Command@arg+1,c
  2719  00119C  0E00               	movlw	0
  2720  00119E  6E06               	movwf	SD_Command@arg+2,c
  2721  0011A0  0E00               	movlw	0
  2722  0011A2  6E07               	movwf	SD_Command@arg+3,c
  2723  0011A4  0E46               	movlw	low _CMD8
  2724  0011A6  6EF6               	movwf	tblptrl,c
  2725  0011A8                     	if	1	;There is more than 1 active tblptr byte
  2726  0011A8  0E10               	movlw	high _CMD8
  2727  0011AA  6EF7               	movwf	tblptrh,c
  2728  0011AC                     	endif
  2729  0011AC                     	if	0	;There are less than 3 active tblptr bytes
  2730  0011AC                     	endif
  2731  0011AC  0008               	tblrd		*
  2732  0011AE  50F5               	movf	tablat,w,c
  2733  0011B0  ECA9  F014         	call	_SD_Command
  2734  0011B4  6E5B               	movwf	initSD@response,c
  2735                           
  2736                           ;SD_PIC.c: 424: LATEbits.LATE2 = 0;
  2737  0011B6  948D               	bcf	3981,2,c	;volatile
  2738                           
  2739                           ;SD_PIC.c: 425: for(unsigned char i = 0; i < 4; i++){
  2740  0011B8  0E00               	movlw	0
  2741  0011BA  6E53               	movwf	initSD@i_497,c
  2742  0011BC                     l2590:
  2743  0011BC  0E03               	movlw	3
  2744  0011BE  6453               	cpfsgt	initSD@i_497,c
  2745  0011C0  D001               	goto	l2594
  2746  0011C2  D00D               	goto	l296
  2747  0011C4                     l2594:
  2748                           
  2749                           ;SD_PIC.c: 426: arr_response[i] = spiReceive();
  2750  0011C4  5053               	movf	initSD@i_497,w,c
  2751  0011C6  0D01               	mullw	1
  2752  0011C8  0E41               	movlw	low initSD@arr_response
  2753  0011CA  24F3               	addwf	prodl,w,c
  2754  0011CC  6ED9               	movwf	fsr2l,c
  2755  0011CE  0E00               	movlw	high initSD@arr_response
  2756  0011D0  20F4               	addwfc	prodh,w,c
  2757  0011D2  6EDA               	movwf	fsr2h,c
  2758  0011D4  ECD0  F016         	call	_spiReceive	;wreg free
  2759  0011D8  6EDF               	movwf	indf2,c
  2760  0011DA  2A53               	incf	initSD@i_497,f,c
  2761  0011DC  D7EF               	goto	l2590
  2762  0011DE                     l296:
  2763                           
  2764                           ;SD_PIC.c: 427: }
  2765                           ;SD_PIC.c: 428: LATEbits.LATE2 = 1;
  2766  0011DE  848D               	bsf	3981,2,c	;volatile
  2767                           
  2768                           ;SD_PIC.c: 430: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  2769  0011E0  0E31               	movlw	low _R1_ILLEGAL_COMMAND
  2770  0011E2  6EF6               	movwf	tblptrl,c
  2771  0011E4                     	if	1	;There is more than 1 active tblptr byte
  2772  0011E4  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  2773  0011E6  6EF7               	movwf	tblptrh,c
  2774  0011E8                     	endif
  2775  0011E8                     	if	0	;There are less than 3 active tblptr bytes
  2776  0011E8                     	endif
  2777  0011E8  0008               	tblrd		*
  2778  0011EA  CFF5 F030          	movff	tablat,??_initSD
  2779  0011EE  505B               	movf	initSD@response,w,c
  2780  0011F0  1430               	andwf	??_initSD,w,c
  2781  0011F2  6E31               	movwf	(??_initSD+1)& (0+255),c
  2782  0011F4  0E31               	movlw	low _R1_ILLEGAL_COMMAND
  2783  0011F6  6EF6               	movwf	tblptrl,c
  2784  0011F8                     	if	1	;There is more than 1 active tblptr byte
  2785  0011F8  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  2786  0011FA  6EF7               	movwf	tblptrh,c
  2787  0011FC                     	endif
  2788  0011FC                     	if	0	;There are less than 3 active tblptr bytes
  2789  0011FC                     	endif
  2790  0011FC  0008               	tblrd		*
  2791  0011FE  50F5               	movf	tablat,w,c
  2792  001200  1831               	xorwf	??_initSD+1,w,c
  2793  001202  A4D8               	btfss	status,2,c
  2794  001204  D02C               	goto	l2626
  2795                           
  2796                           ;SD_PIC.c: 433: SDCard.SDversion = 1;
  2797  001206  0E01               	movlw	1
  2798  001208  0100               	movlb	0	; () banked
  2799  00120A  6F80               	movwf	_SDCard& (0+255),b
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;SD_PIC.c: 436: SD_Command(CMD58, 0);
  2803  00120C  0E00               	movlw	0
  2804  00120E  6E04               	movwf	SD_Command@arg,c
  2805  001210  0E00               	movlw	0
  2806  001212  6E05               	movwf	SD_Command@arg+1,c
  2807  001214  0E00               	movlw	0
  2808  001216  6E06               	movwf	SD_Command@arg+2,c
  2809  001218  0E00               	movlw	0
  2810  00121A  6E07               	movwf	SD_Command@arg+3,c
  2811  00121C  0E37               	movlw	low _CMD58
  2812  00121E  6EF6               	movwf	tblptrl,c
  2813  001220                     	if	1	;There is more than 1 active tblptr byte
  2814  001220  0E10               	movlw	high _CMD58
  2815  001222  6EF7               	movwf	tblptrh,c
  2816  001224                     	endif
  2817  001224                     	if	0	;There are less than 3 active tblptr bytes
  2818  001224                     	endif
  2819  001224  0008               	tblrd		*
  2820  001226  50F5               	movf	tablat,w,c
  2821  001228  ECA9  F014         	call	_SD_Command
  2822                           
  2823                           ;SD_PIC.c: 437: LATEbits.LATE2 = 0;
  2824  00122C  948D               	bcf	3981,2,c	;volatile
  2825                           
  2826                           ;SD_PIC.c: 438: for(unsigned char i = 0; i < 4; i++){
  2827  00122E  0E00               	movlw	0
  2828  001230  6E54               	movwf	initSD@i_498,c
  2829  001232                     l2610:
  2830  001232  0E03               	movlw	3
  2831  001234  6454               	cpfsgt	initSD@i_498,c
  2832  001236  D001               	goto	l2614
  2833  001238  D00D               	goto	l299
  2834  00123A                     l2614:
  2835                           
  2836                           ;SD_PIC.c: 439: arr_response[i] = spiReceive();
  2837  00123A  5054               	movf	initSD@i_498,w,c
  2838  00123C  0D01               	mullw	1
  2839  00123E  0E41               	movlw	low initSD@arr_response
  2840  001240  24F3               	addwf	prodl,w,c
  2841  001242  6ED9               	movwf	fsr2l,c
  2842  001244  0E00               	movlw	high initSD@arr_response
  2843  001246  20F4               	addwfc	prodh,w,c
  2844  001248  6EDA               	movwf	fsr2h,c
  2845  00124A  ECD0  F016         	call	_spiReceive	;wreg free
  2846  00124E  6EDF               	movwf	indf2,c
  2847  001250  2A54               	incf	initSD@i_498,f,c
  2848  001252  D7EF               	goto	l2610
  2849  001254                     l299:
  2850                           
  2851                           ;SD_PIC.c: 440: }
  2852                           ;SD_PIC.c: 441: LATEbits.LATE2 = 1;
  2853  001254  848D               	bsf	3981,2,c	;volatile
  2854                           
  2855                           ;SD_PIC.c: 443: if(arr_response[2] != 0x01){
  2856  001256  0443               	decf	initSD@arr_response+2,w,c
  2857  001258  A4D8               	btfss	status,2,c
  2858  00125A  0012               	return	
  2859  00125C  D012               	goto	l2636
  2860  00125E                     l2626:
  2861                           
  2862                           ;SD_PIC.c: 449: else if(response == R1_IDLE_STATE){
  2863  00125E  0E32               	movlw	low _R1_IDLE_STATE
  2864  001260  6EF6               	movwf	tblptrl,c
  2865  001262                     	if	1	;There is more than 1 active tblptr byte
  2866  001262  0E10               	movlw	high _R1_IDLE_STATE
  2867  001264  6EF7               	movwf	tblptrh,c
  2868  001266                     	endif
  2869  001266                     	if	0	;There are less than 3 active tblptr bytes
  2870  001266                     	endif
  2871  001266  0008               	tblrd		*
  2872  001268  50F5               	movf	tablat,w,c
  2873  00126A  625B               	cpfseq	initSD@response,c
  2874  00126C  D793               	goto	l2584
  2875                           
  2876                           ;SD_PIC.c: 450: if((arr_response[2] == 0x01) && (arr_response[3] == 0xAA)){
  2877  00126E  0443               	decf	initSD@arr_response+2,w,c
  2878  001270  A4D8               	btfss	status,2,c
  2879  001272  0012               	return	
  2880  001274  0EAA               	movlw	170
  2881  001276  1844               	xorwf	initSD@arr_response+3,w,c
  2882  001278  A4D8               	btfss	status,2,c
  2883  00127A  0012               	return	
  2884                           
  2885                           ;SD_PIC.c: 453: SDCard.SDversion = 2;
  2886  00127C  0E02               	movlw	2
  2887  00127E  0100               	movlb	0	; () banked
  2888  001280  6F80               	movwf	_SDCard& (0+255),b
  2889  001282                     l2636:
  2890                           
  2891                           ;SD_PIC.c: 459: }
  2892                           ;SD_PIC.c: 460: }
  2893                           ;SD_PIC.c: 461: }
  2894                           ;SD_PIC.c: 469: unsigned long argument = (SDCard.SDversion == 1) ? 0 : 0x40000000;
  2895  001282  0100               	movlb	0	; () banked
  2896  001284  0580               	decf	_SDCard& (0+255),w,b
  2897  001286  B4D8               	btfsc	status,2,c
  2898  001288  D008               	goto	l2640
  2899                           
  2900                           ; BSR set to: 0
  2901  00128A  0E00               	movlw	0
  2902  00128C  6E37               	movwf	initSD@argument,c
  2903  00128E  0E00               	movlw	0
  2904  001290  6E38               	movwf	initSD@argument+1,c
  2905  001292  0E00               	movlw	0
  2906  001294  6E39               	movwf	initSD@argument+2,c
  2907  001296  0E40               	movlw	64
  2908  001298  D007               	goto	L3
  2909  00129A                     l2640:
  2910                           
  2911                           ; BSR set to: 0
  2912  00129A  0E00               	movlw	0
  2913  00129C  6E37               	movwf	initSD@argument,c
  2914  00129E  0E00               	movlw	0
  2915  0012A0  6E38               	movwf	initSD@argument+1,c
  2916  0012A2  0E00               	movlw	0
  2917  0012A4  6E39               	movwf	initSD@argument+2,c
  2918  0012A6  0E00               	movlw	0
  2919  0012A8                     L3:
  2920  0012A8  6E3A               	movwf	initSD@argument+3,c
  2921  0012AA                     l2642:
  2922                           
  2923                           ;SD_PIC.c: 472: response = SD_ACMD(ACMD41, argument);
  2924  0012AA  C037  F00B         	movff	initSD@argument,SD_ACMD@arg
  2925  0012AE  C038  F00C         	movff	initSD@argument+1,SD_ACMD@arg+1
  2926  0012B2  C039  F00D         	movff	initSD@argument+2,SD_ACMD@arg+2
  2927  0012B6  C03A  F00E         	movff	initSD@argument+3,SD_ACMD@arg+3
  2928  0012BA  0E34               	movlw	low _ACMD41
  2929  0012BC  6EF6               	movwf	tblptrl,c
  2930  0012BE                     	if	1	;There is more than 1 active tblptr byte
  2931  0012BE  0E10               	movlw	high _ACMD41
  2932  0012C0  6EF7               	movwf	tblptrh,c
  2933  0012C2                     	endif
  2934  0012C2                     	if	0	;There are less than 3 active tblptr bytes
  2935  0012C2                     	endif
  2936  0012C2  0008               	tblrd		*
  2937  0012C4  50F5               	movf	tablat,w,c
  2938  0012C6  ECEC  F015         	call	_SD_ACMD
  2939  0012CA  6E5B               	movwf	initSD@response,c
  2940                           
  2941                           ;SD_PIC.c: 473: }while(
  2942                           ;SD_PIC.c: 474: (response != R1_READY_STATE) &&
  2943                           ;SD_PIC.c: 475: ((response & R1_ILLEGAL_COMMAND) != R1_ILLEGAL_COMMAND)
  2944                           ;SD_PIC.c: 476: );
  2945  0012CC  0E33               	movlw	low _R1_READY_STATE
  2946  0012CE  6EF6               	movwf	tblptrl,c
  2947  0012D0                     	if	1	;There is more than 1 active tblptr byte
  2948  0012D0  0E10               	movlw	high _R1_READY_STATE
  2949  0012D2  6EF7               	movwf	tblptrh,c
  2950  0012D4                     	endif
  2951  0012D4                     	if	0	;There are less than 3 active tblptr bytes
  2952  0012D4                     	endif
  2953  0012D4  0008               	tblrd		*
  2954  0012D6  50F5               	movf	tablat,w,c
  2955  0012D8  185B               	xorwf	initSD@response,w,c
  2956  0012DA  B4D8               	btfsc	status,2,c
  2957  0012DC  D013               	goto	l2648
  2958  0012DE  0E31               	movlw	low _R1_ILLEGAL_COMMAND
  2959  0012E0  6EF6               	movwf	tblptrl,c
  2960  0012E2                     	if	1	;There is more than 1 active tblptr byte
  2961  0012E2  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  2962  0012E4  6EF7               	movwf	tblptrh,c
  2963  0012E6                     	endif
  2964  0012E6                     	if	0	;There are less than 3 active tblptr bytes
  2965  0012E6                     	endif
  2966  0012E6  0008               	tblrd		*
  2967  0012E8  CFF5 F030          	movff	tablat,??_initSD
  2968  0012EC  505B               	movf	initSD@response,w,c
  2969  0012EE  1430               	andwf	??_initSD,w,c
  2970  0012F0  6E31               	movwf	(??_initSD+1)& (0+255),c
  2971  0012F2  0E31               	movlw	low _R1_ILLEGAL_COMMAND
  2972  0012F4  6EF6               	movwf	tblptrl,c
  2973  0012F6                     	if	1	;There is more than 1 active tblptr byte
  2974  0012F6  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  2975  0012F8  6EF7               	movwf	tblptrh,c
  2976  0012FA                     	endif
  2977  0012FA                     	if	0	;There are less than 3 active tblptr bytes
  2978  0012FA                     	endif
  2979  0012FA  0008               	tblrd		*
  2980  0012FC  50F5               	movf	tablat,w,c
  2981  0012FE  1831               	xorwf	??_initSD+1,w,c
  2982  001300  A4D8               	btfss	status,2,c
  2983  001302  D7D3               	goto	l2642
  2984  001304                     l2648:
  2985                           
  2986                           ;SD_PIC.c: 480: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  2987  001304  0E31               	movlw	low _R1_ILLEGAL_COMMAND
  2988  001306  6EF6               	movwf	tblptrl,c
  2989  001308                     	if	1	;There is more than 1 active tblptr byte
  2990  001308  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  2991  00130A  6EF7               	movwf	tblptrh,c
  2992  00130C                     	endif
  2993  00130C                     	if	0	;There are less than 3 active tblptr bytes
  2994  00130C                     	endif
  2995  00130C  0008               	tblrd		*
  2996  00130E  CFF5 F030          	movff	tablat,??_initSD
  2997  001312  505B               	movf	initSD@response,w,c
  2998  001314  1430               	andwf	??_initSD,w,c
  2999  001316  6E31               	movwf	(??_initSD+1)& (0+255),c
  3000  001318  0E31               	movlw	low _R1_ILLEGAL_COMMAND
  3001  00131A  6EF6               	movwf	tblptrl,c
  3002  00131C                     	if	1	;There is more than 1 active tblptr byte
  3003  00131C  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3004  00131E  6EF7               	movwf	tblptrh,c
  3005  001320                     	endif
  3006  001320                     	if	0	;There are less than 3 active tblptr bytes
  3007  001320                     	endif
  3008  001320  0008               	tblrd		*
  3009  001322  50F5               	movf	tablat,w,c
  3010  001324  1831               	xorwf	??_initSD+1,w,c
  3011  001326  A4D8               	btfss	status,2,c
  3012  001328  D01C               	goto	l2660
  3013                           
  3014                           ;SD_PIC.c: 481: if(SDCard.SDversion == 1){
  3015  00132A  0100               	movlb	0	; () banked
  3016  00132C  0580               	decf	_SDCard& (0+255),w,b
  3017  00132E  A4D8               	btfss	status,2,c
  3018  001330  D014               	goto	l2656
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;SD_PIC.c: 483: SDCard.Type = TYPE_MMC;
  3022  001332  0E02               	movlw	2
  3023  001334  0100               	movlb	0	; () banked
  3024  001336  6F81               	movwf	(_SDCard+1)& (0+255),b
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;SD_PIC.c: 484: SD_Command(CMD1, 0);
  3028  001338  0E00               	movlw	0
  3029  00133A  6E04               	movwf	SD_Command@arg,c
  3030  00133C  0E00               	movlw	0
  3031  00133E  6E05               	movwf	SD_Command@arg+1,c
  3032  001340  0E00               	movlw	0
  3033  001342  6E06               	movwf	SD_Command@arg+2,c
  3034  001344  0E00               	movlw	0
  3035  001346  6E07               	movwf	SD_Command@arg+3,c
  3036  001348  0E47               	movlw	low _CMD1
  3037  00134A  6EF6               	movwf	tblptrl,c
  3038  00134C                     	if	1	;There is more than 1 active tblptr byte
  3039  00134C  0E10               	movlw	high _CMD1
  3040  00134E  6EF7               	movwf	tblptrh,c
  3041  001350                     	endif
  3042  001350                     	if	0	;There are less than 3 active tblptr bytes
  3043  001350                     	endif
  3044  001350  0008               	tblrd		*
  3045  001352  50F5               	movf	tablat,w,c
  3046  001354  ECA9  F014         	call	_SD_Command
  3047                           
  3048                           ;SD_PIC.c: 485: }
  3049  001358  D004               	goto	l2660
  3050  00135A                     l2656:
  3051                           
  3052                           ;SD_PIC.c: 486: else{
  3053                           ;SD_PIC.c: 488: SDCard.init = 0;
  3054  00135A  0E00               	movlw	0
  3055  00135C  0100               	movlb	0	; () banked
  3056  00135E  6F9B               	movwf	(_SDCard+27)& (0+255),b
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;SD_PIC.c: 489: return;
  3060  001360  0012               	return	
  3061  001362                     l2660:
  3062                           
  3063                           ;SD_PIC.c: 490: }
  3064                           ;SD_PIC.c: 491: }
  3065                           ;SD_PIC.c: 493: if(SDCard.Type != TYPE_MMC){
  3066  001362  0E02               	movlw	2
  3067  001364  0100               	movlb	0	; () banked
  3068  001366  1981               	xorwf	(_SDCard+1)& (0+255),w,b
  3069  001368  B4D8               	btfsc	status,2,c
  3070  00136A  D027               	goto	l2682
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;SD_PIC.c: 496: SD_Command(CMD58, 0);
  3074  00136C  0E00               	movlw	0
  3075  00136E  6E04               	movwf	SD_Command@arg,c
  3076  001370  0E00               	movlw	0
  3077  001372  6E05               	movwf	SD_Command@arg+1,c
  3078  001374  0E00               	movlw	0
  3079  001376  6E06               	movwf	SD_Command@arg+2,c
  3080  001378  0E00               	movlw	0
  3081  00137A  6E07               	movwf	SD_Command@arg+3,c
  3082  00137C  0E37               	movlw	low _CMD58
  3083  00137E  6EF6               	movwf	tblptrl,c
  3084  001380                     	if	1	;There is more than 1 active tblptr byte
  3085  001380  0E10               	movlw	high _CMD58
  3086  001382  6EF7               	movwf	tblptrh,c
  3087  001384                     	endif
  3088  001384                     	if	0	;There are less than 3 active tblptr bytes
  3089  001384                     	endif
  3090  001384  0008               	tblrd		*
  3091  001386  50F5               	movf	tablat,w,c
  3092  001388  ECA9  F014         	call	_SD_Command
  3093                           
  3094                           ;SD_PIC.c: 499: LATEbits.LATE2 = 0;
  3095  00138C  948D               	bcf	3981,2,c	;volatile
  3096                           
  3097                           ;SD_PIC.c: 500: if((spiReceive() & 0xC0) == 0xC0){
  3098  00138E  ECD0  F016         	call	_spiReceive	;wreg free
  3099  001392  0BC0               	andlw	192
  3100  001394  0AC0               	xorlw	192
  3101  001396  A4D8               	btfss	status,2,c
  3102  001398  D002               	goto	l2670
  3103                           
  3104                           ;SD_PIC.c: 501: SDCard.Type = TYPE_SDHC_SDXC;
  3105  00139A  0E01               	movlw	1
  3106  00139C  D001               	goto	L4
  3107  00139E                     l2670:
  3108                           
  3109                           ;SD_PIC.c: 503: else{
  3110                           ;SD_PIC.c: 504: SDCard.Type = TYPE_SDSC;
  3111  00139E  0E00               	movlw	0
  3112  0013A0                     L4:
  3113  0013A0  0100               	movlb	0	; () banked
  3114  0013A2  6F81               	movwf	(_SDCard+1)& (0+255),b
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;SD_PIC.c: 505: }
  3118                           ;SD_PIC.c: 509: for(unsigned char i = 0; i < 3; i++){
  3119  0013A4  0E00               	movlw	0
  3120  0013A6  6E52               	movwf	initSD@i_500,c
  3121  0013A8                     l2672:
  3122                           
  3123                           ; BSR set to: 0
  3124  0013A8  0E02               	movlw	2
  3125  0013AA  6452               	cpfsgt	initSD@i_500,c
  3126  0013AC  D001               	goto	l2676
  3127  0013AE  D004               	goto	l323
  3128  0013B0                     l2676:
  3129                           
  3130                           ;SD_PIC.c: 510: spiReceive();
  3131  0013B0  ECD0  F016         	call	_spiReceive	;wreg free
  3132  0013B4  2A52               	incf	initSD@i_500,f,c
  3133  0013B6  D7F8               	goto	l2672
  3134  0013B8                     l323:
  3135                           
  3136                           ;SD_PIC.c: 511: }
  3137                           ;SD_PIC.c: 512: LATEbits.LATE2 = 1;
  3138  0013B8  848D               	bsf	3981,2,c	;volatile
  3139  0013BA                     l2682:
  3140  0013BA  0E00               	movlw	0
  3141  0013BC  6E04               	movwf	SD_Command@arg,c
  3142  0013BE  0E02               	movlw	2
  3143  0013C0  6E05               	movwf	SD_Command@arg+1,c
  3144  0013C2  0E00               	movlw	0
  3145  0013C4  6E06               	movwf	SD_Command@arg+2,c
  3146  0013C6  0E00               	movlw	0
  3147  0013C8  6E07               	movwf	SD_Command@arg+3,c
  3148  0013CA  0E40               	movlw	low _CMD16
  3149  0013CC  6EF6               	movwf	tblptrl,c
  3150  0013CE                     	if	1	;There is more than 1 active tblptr byte
  3151  0013CE  0E10               	movlw	high _CMD16
  3152  0013D0  6EF7               	movwf	tblptrh,c
  3153  0013D2                     	endif
  3154  0013D2                     	if	0	;There are less than 3 active tblptr bytes
  3155  0013D2                     	endif
  3156  0013D2  0008               	tblrd		*
  3157  0013D4  50F5               	movf	tablat,w,c
  3158  0013D6  ECA9  F014         	call	_SD_Command
  3159  0013DA  6E30               	movwf	??_initSD& (0+255),c
  3160  0013DC  0E33               	movlw	low _R1_READY_STATE
  3161  0013DE  6EF6               	movwf	tblptrl,c
  3162  0013E0                     	if	1	;There is more than 1 active tblptr byte
  3163  0013E0  0E10               	movlw	high _R1_READY_STATE
  3164  0013E2  6EF7               	movwf	tblptrh,c
  3165  0013E4                     	endif
  3166  0013E4                     	if	0	;There are less than 3 active tblptr bytes
  3167  0013E4                     	endif
  3168  0013E4  0008               	tblrd		*
  3169  0013E6  50F5               	movf	tablat,w,c
  3170  0013E8  1830               	xorwf	??_initSD,w,c
  3171  0013EA  A4D8               	btfss	status,2,c
  3172  0013EC  D7E6               	goto	l2682
  3173                           
  3174                           ;SD_PIC.c: 517: SDCard.blockSize = 512;
  3175  0013EE  0E02               	movlw	2
  3176  0013F0  0100               	movlb	0	; () banked
  3177  0013F2  6F93               	movwf	(_SDCard+19)& (0+255),b
  3178  0013F4  0E00               	movlw	0
  3179  0013F6  6F92               	movwf	(_SDCard+18)& (0+255),b
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;SD_PIC.c: 520: SD_Command(CMD9, 0);
  3183  0013F8  0E00               	movlw	0
  3184  0013FA  6E04               	movwf	SD_Command@arg,c
  3185  0013FC  0E00               	movlw	0
  3186  0013FE  6E05               	movwf	SD_Command@arg+1,c
  3187  001400  0E00               	movlw	0
  3188  001402  6E06               	movwf	SD_Command@arg+2,c
  3189  001404  0E00               	movlw	0
  3190  001406  6E07               	movwf	SD_Command@arg+3,c
  3191  001408  0E44               	movlw	low _CMD9
  3192  00140A  6EF6               	movwf	tblptrl,c
  3193  00140C                     	if	1	;There is more than 1 active tblptr byte
  3194  00140C  0E10               	movlw	high _CMD9
  3195  00140E  6EF7               	movwf	tblptrh,c
  3196  001410                     	endif
  3197  001410                     	if	0	;There are less than 3 active tblptr bytes
  3198  001410                     	endif
  3199  001410  0008               	tblrd		*
  3200  001412  50F5               	movf	tablat,w,c
  3201  001414  ECA9  F014         	call	_SD_Command
  3202                           
  3203                           ;SD_PIC.c: 521: LATEbits.LATE2 = 0;
  3204  001418  948D               	bcf	3981,2,c	;volatile
  3205  00141A                     l2690:
  3206  00141A  ECD0  F016         	call	_spiReceive	;wreg free
  3207  00141E  6E30               	movwf	??_initSD& (0+255),c
  3208  001420  0E30               	movlw	low _START_BLOCK
  3209  001422  6EF6               	movwf	tblptrl,c
  3210  001424                     	if	1	;There is more than 1 active tblptr byte
  3211  001424  0E10               	movlw	high _START_BLOCK
  3212  001426  6EF7               	movwf	tblptrh,c
  3213  001428                     	endif
  3214  001428                     	if	0	;There are less than 3 active tblptr bytes
  3215  001428                     	endif
  3216  001428  0008               	tblrd		*
  3217  00142A  50F5               	movf	tablat,w,c
  3218  00142C  1830               	xorwf	??_initSD,w,c
  3219  00142E  A4D8               	btfss	status,2,c
  3220  001430  D7F4               	goto	l2690
  3221                           
  3222                           ;SD_PIC.c: 523: for(unsigned char i = 0; i < 16; i++){
  3223  001432  0E00               	movlw	0
  3224  001434  6E55               	movwf	initSD@i_501,c
  3225  001436                     l2694:
  3226  001436  0E0F               	movlw	15
  3227  001438  6455               	cpfsgt	initSD@i_501,c
  3228  00143A  D001               	goto	l2698
  3229  00143C  D00D               	goto	l2704
  3230  00143E                     l2698:
  3231                           
  3232                           ;SD_PIC.c: 524: arr_response[i] = spiReceive();
  3233  00143E  5055               	movf	initSD@i_501,w,c
  3234  001440  0D01               	mullw	1
  3235  001442  0E41               	movlw	low initSD@arr_response
  3236  001444  24F3               	addwf	prodl,w,c
  3237  001446  6ED9               	movwf	fsr2l,c
  3238  001448  0E00               	movlw	high initSD@arr_response
  3239  00144A  20F4               	addwfc	prodh,w,c
  3240  00144C  6EDA               	movwf	fsr2h,c
  3241  00144E  ECD0  F016         	call	_spiReceive	;wreg free
  3242  001452  6EDF               	movwf	indf2,c
  3243  001454  2A55               	incf	initSD@i_501,f,c
  3244  001456  D7EF               	goto	l2694
  3245  001458                     l2704:
  3246                           
  3247                           ;SD_PIC.c: 525: }
  3248                           ;SD_PIC.c: 526: spiReceive();
  3249  001458  ECD0  F016         	call	_spiReceive	;wreg free
  3250                           
  3251                           ;SD_PIC.c: 527: spiReceive();
  3252  00145C  ECD0  F016         	call	_spiReceive	;wreg free
  3253                           
  3254                           ;SD_PIC.c: 528: LATEbits.LATE2 = 1;
  3255  001460  848D               	bsf	3981,2,c	;volatile
  3256                           
  3257                           ;SD_PIC.c: 530: if(SDCard.SDversion == 2){
  3258  001462  0E02               	movlw	2
  3259  001464  0100               	movlb	0	; () banked
  3260  001466  1980               	xorwf	_SDCard& (0+255),w,b
  3261  001468  A4D8               	btfss	status,2,c
  3262  00146A  D06C               	goto	l2716
  3263                           
  3264                           ; BSR set to: 0
  3265                           ;SD_PIC.c: 535: unsigned long tempSize = arr_response[9] + 1UL;
  3266  00146C  0E01               	movlw	1
  3267  00146E  244A               	addwf	initSD@arr_response+9,w,c
  3268  001470  6E3D               	movwf	initSD@tempSize,c
  3269  001472  6A3E               	clrf	initSD@tempSize+1,c
  3270  001474  0E00               	movlw	0
  3271  001476  223E               	addwfc	initSD@tempSize+1,f,c
  3272  001478  6A3F               	clrf	initSD@tempSize+2,c
  3273  00147A  0E00               	movlw	0
  3274  00147C  223F               	addwfc	initSD@tempSize+2,f,c
  3275  00147E  6A40               	clrf	initSD@tempSize+3,c
  3276  001480  0E00               	movlw	0
  3277  001482  2240               	addwfc	initSD@tempSize+3,f,c
  3278                           
  3279                           ;SD_PIC.c: 536: tempSize |= (unsigned long)(arr_response[8] << 8);
  3280  001484  5049               	movf	initSD@arr_response+8,w,c
  3281  001486  6E31               	movwf	(??_initSD+1)& (0+255),c
  3282  001488  6A30               	clrf	??_initSD& (0+255),c
  3283  00148A  C030  F032         	movff	??_initSD,??_initSD+2
  3284  00148E  C031  F033         	movff	??_initSD+1,??_initSD+3
  3285  001492  0E00               	movlw	0
  3286  001494  BE33               	btfsc	(??_initSD+3)& (0+255),7,c
  3287  001496  0EFF               	movlw	255
  3288  001498  6E34               	movwf	(??_initSD+4)& (0+255),c
  3289  00149A  6E35               	movwf	(??_initSD+5)& (0+255),c
  3290  00149C  5032               	movf	??_initSD+2,w,c
  3291  00149E  123D               	iorwf	initSD@tempSize,f,c
  3292  0014A0  5033               	movf	??_initSD+3,w,c
  3293  0014A2  123E               	iorwf	initSD@tempSize+1,f,c
  3294  0014A4  5034               	movf	??_initSD+4,w,c
  3295  0014A6  123F               	iorwf	initSD@tempSize+2,f,c
  3296  0014A8  5035               	movf	??_initSD+5,w,c
  3297  0014AA  1240               	iorwf	initSD@tempSize+3,f,c
  3298                           
  3299                           ;SD_PIC.c: 537: tempSize |= (unsigned long)(arr_response[7] & 0x3F) << 16;
  3300  0014AC  C048  F030         	movff	initSD@arr_response+7,??_initSD
  3301  0014B0  0E3F               	movlw	63
  3302  0014B2  1630               	andwf	??_initSD,f,c
  3303  0014B4  C030  F031         	movff	??_initSD,??_initSD+1
  3304  0014B8  6A32               	clrf	(??_initSD+2)& (0+255),c
  3305  0014BA  6A33               	clrf	(??_initSD+3)& (0+255),c
  3306  0014BC  6A34               	clrf	(??_initSD+4)& (0+255),c
  3307  0014BE  C032  F034         	movff	??_initSD+2,??_initSD+4
  3308  0014C2  C031  F033         	movff	??_initSD+1,??_initSD+3
  3309  0014C6  6A32               	clrf	??_initSD+2,c
  3310  0014C8  6A31               	clrf	??_initSD+1,c
  3311  0014CA  5031               	movf	??_initSD+1,w,c
  3312  0014CC  123D               	iorwf	initSD@tempSize,f,c
  3313  0014CE  5032               	movf	??_initSD+2,w,c
  3314  0014D0  123E               	iorwf	initSD@tempSize+1,f,c
  3315  0014D2  5033               	movf	??_initSD+3,w,c
  3316  0014D4  123F               	iorwf	initSD@tempSize+2,f,c
  3317  0014D6  5034               	movf	??_initSD+4,w,c
  3318  0014D8  1240               	iorwf	initSD@tempSize+3,f,c
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;SD_PIC.c: 538: SDCard.size = tempSize * 0.524288;
  3322  0014DA  C03D  F009         	movff	initSD@tempSize,___lltoft@c
  3323  0014DE  C03E  F00A         	movff	initSD@tempSize+1,___lltoft@c+1
  3324  0014E2  C03F  F00B         	movff	initSD@tempSize+2,___lltoft@c+2
  3325  0014E6  C040  F00C         	movff	initSD@tempSize+3,___lltoft@c+3
  3326  0014EA  ECBE  F015         	call	___lltoft	;wreg free
  3327  0014EE  C009  F012         	movff	?___lltoft,___ftmul@f1
  3328  0014F2  C00A  F013         	movff	?___lltoft+1,___ftmul@f1+1
  3329  0014F6  C00B  F014         	movff	?___lltoft+2,___ftmul@f1+2
  3330  0014FA  0E38               	movlw	56
  3331  0014FC  6E15               	movwf	___ftmul@f2,c
  3332  0014FE  0E06               	movlw	6
  3333  001500  6E16               	movwf	___ftmul@f2+1,c
  3334  001502  0E3F               	movlw	63
  3335  001504  6E17               	movwf	___ftmul@f2+2,c
  3336  001506  EC8E  F011         	call	___ftmul	;wreg free
  3337  00150A  C012  F098         	movff	?___ftmul,_SDCard+24
  3338  00150E  C013  F099         	movff	?___ftmul+1,_SDCard+25
  3339  001512  C014  F09A         	movff	?___ftmul+2,_SDCard+26
  3340                           
  3341                           ;SD_PIC.c: 539: SDCard.numBlocks = (unsigned long)(SDCard.size * 2048);
  3342  001516  0E00               	movlw	0
  3343  001518  6E15               	movwf	___ftmul@f2,c
  3344  00151A  0E00               	movlw	0
  3345  00151C  6E16               	movwf	___ftmul@f2+1,c
  3346  00151E  0E45               	movlw	69
  3347  001520  6E17               	movwf	___ftmul@f2+2,c
  3348  001522  C098  F012         	movff	_SDCard+24,___ftmul@f1
  3349  001526  C099  F013         	movff	_SDCard+25,___ftmul@f1+1
  3350  00152A  C09A  F014         	movff	_SDCard+26,___ftmul@f1+2
  3351  00152E  EC8E  F011         	call	___ftmul	;wreg free
  3352  001532  C012  F021         	movff	?___ftmul,___fttol@f1
  3353  001536  C013  F022         	movff	?___ftmul+1,___fttol@f1+1
  3354  00153A  C014  F023         	movff	?___ftmul+2,___fttol@f1+2
  3355  00153E  EC14  F011         	call	___fttol	;wreg free
  3356  001542  D0BE               	goto	L5
  3357  001544                     l2716:
  3358                           
  3359                           ;SD_PIC.c: 541: else{
  3360                           ;SD_PIC.c: 548: unsigned long tempSize = (unsigned long)(arr_response[6] & 0x03) << 4;
  3361  001544  C047  F030         	movff	initSD@arr_response+6,??_initSD
  3362  001548  0E03               	movlw	3
  3363  00154A  1630               	andwf	??_initSD,f,c
  3364  00154C  C030  F031         	movff	??_initSD,??_initSD+1
  3365  001550  6A32               	clrf	(??_initSD+2)& (0+255),c
  3366  001552  6A33               	clrf	(??_initSD+3)& (0+255),c
  3367  001554  6A34               	clrf	(??_initSD+4)& (0+255),c
  3368  001556  0E04               	movlw	4
  3369  001558                     u2175:
  3370  001558  90D8               	bcf	status,0,c
  3371  00155A  3631               	rlcf	??_initSD+1,f,c
  3372  00155C  3632               	rlcf	??_initSD+2,f,c
  3373  00155E  3633               	rlcf	??_initSD+3,f,c
  3374  001560  3634               	rlcf	??_initSD+4,f,c
  3375  001562  2EE8               	decfsz	wreg,f,c
  3376  001564  D7F9               	goto	u2175
  3377  001566  C031  F057         	movff	??_initSD+1,initSD@tempSize_503
  3378  00156A  C032  F058         	movff	??_initSD+2,initSD@tempSize_503+1
  3379  00156E  C033  F059         	movff	??_initSD+3,initSD@tempSize_503+2
  3380  001572  C034  F05A         	movff	??_initSD+4,initSD@tempSize_503+3
  3381                           
  3382                           ;SD_PIC.c: 549: tempSize |= (unsigned long)(arr_response[7] << 2);
  3383  001576  5048               	movf	initSD@arr_response+7,w,c
  3384  001578  6E30               	movwf	??_initSD& (0+255),c
  3385  00157A  6A31               	clrf	(??_initSD+1)& (0+255),c
  3386  00157C  90D8               	bcf	status,0,c
  3387  00157E  3630               	rlcf	??_initSD,f,c
  3388  001580  3631               	rlcf	??_initSD+1,f,c
  3389  001582  90D8               	bcf	status,0,c
  3390  001584  3630               	rlcf	??_initSD,f,c
  3391  001586  3631               	rlcf	??_initSD+1,f,c
  3392  001588  C030  F032         	movff	??_initSD,??_initSD+2
  3393  00158C  C031  F033         	movff	??_initSD+1,??_initSD+3
  3394  001590  0E00               	movlw	0
  3395  001592  BE33               	btfsc	(??_initSD+3)& (0+255),7,c
  3396  001594  0EFF               	movlw	255
  3397  001596  6E34               	movwf	(??_initSD+4)& (0+255),c
  3398  001598  6E35               	movwf	(??_initSD+5)& (0+255),c
  3399  00159A  5032               	movf	??_initSD+2,w,c
  3400  00159C  1257               	iorwf	initSD@tempSize_503,f,c
  3401  00159E  5033               	movf	??_initSD+3,w,c
  3402  0015A0  1258               	iorwf	initSD@tempSize_503+1,f,c
  3403  0015A2  5034               	movf	??_initSD+4,w,c
  3404  0015A4  1259               	iorwf	initSD@tempSize_503+2,f,c
  3405  0015A6  5035               	movf	??_initSD+5,w,c
  3406  0015A8  125A               	iorwf	initSD@tempSize_503+3,f,c
  3407                           
  3408                           ;SD_PIC.c: 550: tempSize |= (unsigned long)((arr_response[8] & 0xC0) >> 2) + 1;
  3409  0015AA  C049  F030         	movff	initSD@arr_response+8,??_initSD
  3410  0015AE  90D8               	bcf	status,0,c
  3411  0015B0  3230               	rrcf	??_initSD,f,c
  3412  0015B2  90D8               	bcf	status,0,c
  3413  0015B4  3230               	rrcf	??_initSD,f,c
  3414  0015B6  0E30               	movlw	48
  3415  0015B8  1630               	andwf	??_initSD,f,c
  3416  0015BA  0E01               	movlw	1
  3417  0015BC  2430               	addwf	??_initSD,w,c
  3418  0015BE  6E31               	movwf	(??_initSD+1)& (0+255),c
  3419  0015C0  6A32               	clrf	(??_initSD+2)& (0+255),c
  3420  0015C2  0E00               	movlw	0
  3421  0015C4  2232               	addwfc	(??_initSD+2)& (0+255),f,c
  3422  0015C6  6A33               	clrf	(??_initSD+3)& (0+255),c
  3423  0015C8  0E00               	movlw	0
  3424  0015CA  2233               	addwfc	(??_initSD+3)& (0+255),f,c
  3425  0015CC  6A34               	clrf	(??_initSD+4)& (0+255),c
  3426  0015CE  0E00               	movlw	0
  3427  0015D0  2234               	addwfc	(??_initSD+4)& (0+255),f,c
  3428  0015D2  5031               	movf	??_initSD+1,w,c
  3429  0015D4  1257               	iorwf	initSD@tempSize_503,f,c
  3430  0015D6  5032               	movf	??_initSD+2,w,c
  3431  0015D8  1258               	iorwf	initSD@tempSize_503+1,f,c
  3432  0015DA  5033               	movf	??_initSD+3,w,c
  3433  0015DC  1259               	iorwf	initSD@tempSize_503+2,f,c
  3434  0015DE  5034               	movf	??_initSD+4,w,c
  3435  0015E0  125A               	iorwf	initSD@tempSize_503+3,f,c
  3436                           
  3437                           ;SD_PIC.c: 551: tempSize = tempSize << (((unsigned long)
  3438                           ;SD_PIC.c: 552: ((arr_response[9] & 0x03) << 1) |
  3439                           ;SD_PIC.c: 553: (unsigned long)((arr_response[10] & 0x80) >> 7)) + 2);
  3440  0015E2  C04A  F030         	movff	initSD@arr_response+9,??_initSD
  3441  0015E6  0E03               	movlw	3
  3442  0015E8  1630               	andwf	??_initSD,f,c
  3443  0015EA  6A31               	clrf	(??_initSD+1)& (0+255),c
  3444  0015EC  AE4B               	btfss	initSD@arr_response+10,7,c
  3445  0015EE  D001               	bra	u2185
  3446  0015F0  2A31               	incf	(??_initSD+1)& (0+255),f,c
  3447  0015F2                     u2185:
  3448  0015F2  3031               	rrcf	??_initSD+1,w,c
  3449  0015F4  3430               	rlcf	??_initSD,w,c
  3450  0015F6  6E32               	movwf	(??_initSD+2)& (0+255),c
  3451  0015F8  0E02               	movlw	2
  3452  0015FA  2632               	addwf	??_initSD+2,f,c
  3453  0015FC  C057  F033         	movff	initSD@tempSize_503,??_initSD+3
  3454  001600  C058  F034         	movff	initSD@tempSize_503+1,??_initSD+4
  3455  001604  C059  F035         	movff	initSD@tempSize_503+2,??_initSD+5
  3456  001608  C05A  F036         	movff	initSD@tempSize_503+3,??_initSD+6
  3457  00160C  2A32               	incf	??_initSD+2,f,c
  3458  00160E  D005               	goto	u2190
  3459  001610                     u2195:
  3460  001610  90D8               	bcf	status,0,c
  3461  001612  3633               	rlcf	??_initSD+3,f,c
  3462  001614  3634               	rlcf	??_initSD+4,f,c
  3463  001616  3635               	rlcf	??_initSD+5,f,c
  3464  001618  3636               	rlcf	??_initSD+6,f,c
  3465  00161A                     u2190:
  3466  00161A  2E32               	decfsz	??_initSD+2,f,c
  3467  00161C  D7F9               	goto	u2195
  3468  00161E  C033  F057         	movff	??_initSD+3,initSD@tempSize_503
  3469  001622  C034  F058         	movff	??_initSD+4,initSD@tempSize_503+1
  3470  001626  C035  F059         	movff	??_initSD+5,initSD@tempSize_503+2
  3471  00162A  C036  F05A         	movff	??_initSD+6,initSD@tempSize_503+3
  3472                           
  3473                           ;SD_PIC.c: 554: tempSize = tempSize << (unsigned long)(arr_response[5] & 0x0F);
  3474  00162E  C046  F030         	movff	initSD@arr_response+5,??_initSD
  3475  001632  0E0F               	movlw	15
  3476  001634  1630               	andwf	??_initSD,f,c
  3477  001636  C057  F031         	movff	initSD@tempSize_503,??_initSD+1
  3478  00163A  C058  F032         	movff	initSD@tempSize_503+1,??_initSD+2
  3479  00163E  C059  F033         	movff	initSD@tempSize_503+2,??_initSD+3
  3480  001642  C05A  F034         	movff	initSD@tempSize_503+3,??_initSD+4
  3481  001646  2A30               	incf	??_initSD,f,c
  3482  001648  D005               	goto	u2200
  3483  00164A                     u2205:
  3484  00164A  90D8               	bcf	status,0,c
  3485  00164C  3631               	rlcf	??_initSD+1,f,c
  3486  00164E  3632               	rlcf	??_initSD+2,f,c
  3487  001650  3633               	rlcf	??_initSD+3,f,c
  3488  001652  3634               	rlcf	??_initSD+4,f,c
  3489  001654                     u2200:
  3490  001654  2E30               	decfsz	??_initSD,f,c
  3491  001656  D7F9               	goto	u2205
  3492  001658  C031  F057         	movff	??_initSD+1,initSD@tempSize_503
  3493  00165C  C032  F058         	movff	??_initSD+2,initSD@tempSize_503+1
  3494  001660  C033  F059         	movff	??_initSD+3,initSD@tempSize_503+2
  3495  001664  C034  F05A         	movff	??_initSD+4,initSD@tempSize_503+3
  3496                           
  3497                           ;SD_PIC.c: 555: SDCard.size = (unsigned long)tempSize;
  3498  001668  C057  F009         	movff	initSD@tempSize_503,___lltoft@c
  3499  00166C  C058  F00A         	movff	initSD@tempSize_503+1,___lltoft@c+1
  3500  001670  C059  F00B         	movff	initSD@tempSize_503+2,___lltoft@c+2
  3501  001674  C05A  F00C         	movff	initSD@tempSize_503+3,___lltoft@c+3
  3502  001678  ECBE  F015         	call	___lltoft	;wreg free
  3503  00167C  C009  F098         	movff	?___lltoft,_SDCard+24
  3504  001680  C00A  F099         	movff	?___lltoft+1,_SDCard+25
  3505  001684  C00B  F09A         	movff	?___lltoft+2,_SDCard+26
  3506                           
  3507                           ;SD_PIC.c: 556: SDCard.numBlocks = (unsigned long)(SDCard.size / SDCard.blockSize);
  3508  001688  C092  F009         	movff	_SDCard+18,___lwtoft@c
  3509  00168C  C093  F00A         	movff	_SDCard+19,___lwtoft@c+1
  3510  001690  EC7B  F016         	call	___lwtoft	;wreg free
  3511  001694  C009  F00F         	movff	?___lwtoft,___ftdiv@f2
  3512  001698  C00A  F010         	movff	?___lwtoft+1,___ftdiv@f2+1
  3513  00169C  C00B  F011         	movff	?___lwtoft+2,___ftdiv@f2+2
  3514  0016A0  C098  F00C         	movff	_SDCard+24,___ftdiv@f1
  3515  0016A4  C099  F00D         	movff	_SDCard+25,___ftdiv@f1+1
  3516  0016A8  C09A  F00E         	movff	_SDCard+26,___ftdiv@f1+2
  3517  0016AC  EC08  F012         	call	___ftdiv	;wreg free
  3518  0016B0  C00C  F021         	movff	?___ftdiv,___fttol@f1
  3519  0016B4  C00D  F022         	movff	?___ftdiv+1,___fttol@f1+1
  3520  0016B8  C00E  F023         	movff	?___ftdiv+2,___fttol@f1+2
  3521  0016BC  EC14  F011         	call	___fttol	;wreg free
  3522  0016C0                     L5:
  3523  0016C0  C021  F094         	movff	?___fttol,_SDCard+20
  3524  0016C4  C022  F095         	movff	?___fttol+1,_SDCard+21
  3525  0016C8  C023  F096         	movff	?___fttol+2,_SDCard+22
  3526  0016CC  C024  F097         	movff	?___fttol+3,_SDCard+23
  3527                           
  3528                           ;SD_PIC.c: 557: }
  3529                           ;SD_PIC.c: 560: SD_Command(CMD10, 0);
  3530  0016D0  0E00               	movlw	0
  3531  0016D2  6E04               	movwf	SD_Command@arg,c
  3532  0016D4  0E00               	movlw	0
  3533  0016D6  6E05               	movwf	SD_Command@arg+1,c
  3534  0016D8  0E00               	movlw	0
  3535  0016DA  6E06               	movwf	SD_Command@arg+2,c
  3536  0016DC  0E00               	movlw	0
  3537  0016DE  6E07               	movwf	SD_Command@arg+3,c
  3538  0016E0  0E43               	movlw	low _CMD10
  3539  0016E2  6EF6               	movwf	tblptrl,c
  3540  0016E4                     	if	1	;There is more than 1 active tblptr byte
  3541  0016E4  0E10               	movlw	high _CMD10
  3542  0016E6  6EF7               	movwf	tblptrh,c
  3543  0016E8                     	endif
  3544  0016E8                     	if	0	;There are less than 3 active tblptr bytes
  3545  0016E8                     	endif
  3546  0016E8  0008               	tblrd		*
  3547  0016EA  50F5               	movf	tablat,w,c
  3548  0016EC  ECA9  F014         	call	_SD_Command
  3549                           
  3550                           ;SD_PIC.c: 562: LATEbits.LATE2 = 0;
  3551  0016F0  948D               	bcf	3981,2,c	;volatile
  3552  0016F2                     l2726:
  3553                           
  3554                           ;SD_PIC.c: 566: response = spiReceive();
  3555  0016F2  ECD0  F016         	call	_spiReceive	;wreg free
  3556  0016F6  6E5B               	movwf	initSD@response,c
  3557                           
  3558                           ;SD_PIC.c: 567: }while(response != START_BLOCK);
  3559  0016F8  0E30               	movlw	low _START_BLOCK
  3560  0016FA  6EF6               	movwf	tblptrl,c
  3561  0016FC                     	if	1	;There is more than 1 active tblptr byte
  3562  0016FC  0E10               	movlw	high _START_BLOCK
  3563  0016FE  6EF7               	movwf	tblptrh,c
  3564  001700                     	endif
  3565  001700                     	if	0	;There are less than 3 active tblptr bytes
  3566  001700                     	endif
  3567  001700  0008               	tblrd		*
  3568  001702  50F5               	movf	tablat,w,c
  3569  001704  625B               	cpfseq	initSD@response,c
  3570  001706  D7F5               	goto	l2726
  3571                           
  3572                           ;SD_PIC.c: 569: for(unsigned char i = 0; i < 16; i++){
  3573  001708  0E00               	movlw	0
  3574  00170A  6E56               	movwf	initSD@i_504,c
  3575  00170C                     l2732:
  3576  00170C  0E0F               	movlw	15
  3577  00170E  6456               	cpfsgt	initSD@i_504,c
  3578  001710  D001               	goto	l2736
  3579  001712  D00D               	goto	l2742
  3580  001714                     l2736:
  3581                           
  3582                           ;SD_PIC.c: 570: arr_response[i] = spiReceive();
  3583  001714  5056               	movf	initSD@i_504,w,c
  3584  001716  0D01               	mullw	1
  3585  001718  0E41               	movlw	low initSD@arr_response
  3586  00171A  24F3               	addwf	prodl,w,c
  3587  00171C  6ED9               	movwf	fsr2l,c
  3588  00171E  0E00               	movlw	high initSD@arr_response
  3589  001720  20F4               	addwfc	prodh,w,c
  3590  001722  6EDA               	movwf	fsr2h,c
  3591  001724  ECD0  F016         	call	_spiReceive	;wreg free
  3592  001728  6EDF               	movwf	indf2,c
  3593  00172A  2A56               	incf	initSD@i_504,f,c
  3594  00172C  D7EF               	goto	l2732
  3595  00172E                     l2742:
  3596                           
  3597                           ;SD_PIC.c: 571: }
  3598                           ;SD_PIC.c: 572: spiReceive();
  3599  00172E  ECD0  F016         	call	_spiReceive	;wreg free
  3600                           
  3601                           ;SD_PIC.c: 573: spiReceive();
  3602  001732  ECD0  F016         	call	_spiReceive	;wreg free
  3603                           
  3604                           ;SD_PIC.c: 574: LATEbits.LATE2 = 1;
  3605  001736  848D               	bsf	3981,2,c	;volatile
  3606                           
  3607                           ;SD_PIC.c: 576: SDCard.MID = arr_response[0];
  3608  001738  C041  F082         	movff	initSD@arr_response,_SDCard+2
  3609                           
  3610                           ;SD_PIC.c: 577: SDCard.OID = (unsigned short)(arr_response[1] << 8U) | arr_response[2];
  3611  00173C  5042               	movf	initSD@arr_response+1,w,c
  3612  00173E  6E30               	movwf	??_initSD& (0+255),c
  3613  001740  5043               	movf	initSD@arr_response+2,w,c
  3614  001742  0100               	movlb	0	; () banked
  3615  001744  6F83               	movwf	(_SDCard+3)& (0+255),b
  3616  001746  C030  F084         	movff	??_initSD,_SDCard+4
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;SD_PIC.c: 578: SDCard.PHMH = arr_response[3];
  3620  00174A  C044  F089         	movff	initSD@arr_response+3,_SDCard+9
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;SD_PIC.c: 582: SDCard.PHML = (unsigned long)arr_response[4] << 24U;
  3624  00174E  C045  F030         	movff	initSD@arr_response+4,??_initSD
  3625  001752  6A31               	clrf	(??_initSD+1)& (0+255),c
  3626  001754  6A32               	clrf	(??_initSD+2)& (0+255),c
  3627  001756  6A33               	clrf	(??_initSD+3)& (0+255),c
  3628  001758  C030  F033         	movff	??_initSD,??_initSD+3
  3629  00175C  6A32               	clrf	??_initSD+2,c
  3630  00175E  6A31               	clrf	??_initSD+1,c
  3631  001760  6A30               	clrf	??_initSD,c
  3632  001762  C030  F085         	movff	??_initSD,_SDCard+5
  3633  001766  C031  F086         	movff	??_initSD+1,_SDCard+6
  3634  00176A  C032  F087         	movff	??_initSD+2,_SDCard+7
  3635  00176E  C033  F088         	movff	??_initSD+3,_SDCard+8
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;SD_PIC.c: 583: SDCard.PHML |= (unsigned long)arr_response[5] << 16U;
  3639  001772  C046  F030         	movff	initSD@arr_response+5,??_initSD
  3640  001776  6A31               	clrf	(??_initSD+1)& (0+255),c
  3641  001778  6A32               	clrf	(??_initSD+2)& (0+255),c
  3642  00177A  6A33               	clrf	(??_initSD+3)& (0+255),c
  3643  00177C  C031  F033         	movff	??_initSD+1,??_initSD+3
  3644  001780  C030  F032         	movff	??_initSD,??_initSD+2
  3645  001784  6A31               	clrf	??_initSD+1,c
  3646  001786  6A30               	clrf	??_initSD,c
  3647  001788  5030               	movf	??_initSD,w,c
  3648  00178A  0100               	movlb	0	; () banked
  3649  00178C  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3650  00178E  5031               	movf	??_initSD+1,w,c
  3651  001790  0100               	movlb	0	; () banked
  3652  001792  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  3653  001794  5032               	movf	??_initSD+2,w,c
  3654  001796  0100               	movlb	0	; () banked
  3655  001798  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  3656  00179A  5033               	movf	??_initSD+3,w,c
  3657  00179C  0100               	movlb	0	; () banked
  3658  00179E  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;SD_PIC.c: 584: SDCard.PHML |= (unsigned long)arr_response[6] << 8U;
  3662  0017A0  C047  F030         	movff	initSD@arr_response+6,??_initSD
  3663  0017A4  6A31               	clrf	(??_initSD+1)& (0+255),c
  3664  0017A6  6A32               	clrf	(??_initSD+2)& (0+255),c
  3665  0017A8  6A33               	clrf	(??_initSD+3)& (0+255),c
  3666  0017AA  C032  F033         	movff	??_initSD+2,??_initSD+3
  3667  0017AE  C031  F032         	movff	??_initSD+1,??_initSD+2
  3668  0017B2  C030  F031         	movff	??_initSD,??_initSD+1
  3669  0017B6  6A30               	clrf	??_initSD,c
  3670  0017B8  5030               	movf	??_initSD,w,c
  3671  0017BA  0100               	movlb	0	; () banked
  3672  0017BC  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3673  0017BE  5031               	movf	??_initSD+1,w,c
  3674  0017C0  0100               	movlb	0	; () banked
  3675  0017C2  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  3676  0017C4  5032               	movf	??_initSD+2,w,c
  3677  0017C6  0100               	movlb	0	; () banked
  3678  0017C8  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  3679  0017CA  5033               	movf	??_initSD+3,w,c
  3680  0017CC  0100               	movlb	0	; () banked
  3681  0017CE  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;SD_PIC.c: 585: SDCard.PHML |= (unsigned long)arr_response[7];
  3685  0017D0  5048               	movf	initSD@arr_response+7,w,c
  3686  0017D2  0100               	movlb	0	; () banked
  3687  0017D4  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;SD_PIC.c: 587: SDCard.PRV = arr_response[8];
  3691  0017D6  C049  F08A         	movff	initSD@arr_response+8,_SDCard+10
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;SD_PIC.c: 591: SDCard.PSN = (unsigned long)arr_response[9] << 24U;
  3695  0017DA  C04A  F030         	movff	initSD@arr_response+9,??_initSD
  3696  0017DE  6A31               	clrf	(??_initSD+1)& (0+255),c
  3697  0017E0  6A32               	clrf	(??_initSD+2)& (0+255),c
  3698  0017E2  6A33               	clrf	(??_initSD+3)& (0+255),c
  3699  0017E4  C030  F033         	movff	??_initSD,??_initSD+3
  3700  0017E8  6A32               	clrf	??_initSD+2,c
  3701  0017EA  6A31               	clrf	??_initSD+1,c
  3702  0017EC  6A30               	clrf	??_initSD,c
  3703  0017EE  C030  F08B         	movff	??_initSD,_SDCard+11
  3704  0017F2  C031  F08C         	movff	??_initSD+1,_SDCard+12
  3705  0017F6  C032  F08D         	movff	??_initSD+2,_SDCard+13
  3706  0017FA  C033  F08E         	movff	??_initSD+3,_SDCard+14
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;SD_PIC.c: 592: SDCard.PSN |= (unsigned long)arr_response[10] << 16U;
  3710  0017FE  C04B  F030         	movff	initSD@arr_response+10,??_initSD
  3711  001802  6A31               	clrf	(??_initSD+1)& (0+255),c
  3712  001804  6A32               	clrf	(??_initSD+2)& (0+255),c
  3713  001806  6A33               	clrf	(??_initSD+3)& (0+255),c
  3714  001808  C031  F033         	movff	??_initSD+1,??_initSD+3
  3715  00180C  C030  F032         	movff	??_initSD,??_initSD+2
  3716  001810  6A31               	clrf	??_initSD+1,c
  3717  001812  6A30               	clrf	??_initSD,c
  3718  001814  5030               	movf	??_initSD,w,c
  3719  001816  0100               	movlb	0	; () banked
  3720  001818  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3721  00181A  5031               	movf	??_initSD+1,w,c
  3722  00181C  0100               	movlb	0	; () banked
  3723  00181E  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  3724  001820  5032               	movf	??_initSD+2,w,c
  3725  001822  0100               	movlb	0	; () banked
  3726  001824  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  3727  001826  5033               	movf	??_initSD+3,w,c
  3728  001828  0100               	movlb	0	; () banked
  3729  00182A  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  3730                           
  3731                           ; BSR set to: 0
  3732                           ;SD_PIC.c: 593: SDCard.PSN |= (unsigned long)arr_response[11] << 8U;
  3733  00182C  C04C  F030         	movff	initSD@arr_response+11,??_initSD
  3734  001830  6A31               	clrf	(??_initSD+1)& (0+255),c
  3735  001832  6A32               	clrf	(??_initSD+2)& (0+255),c
  3736  001834  6A33               	clrf	(??_initSD+3)& (0+255),c
  3737  001836  C032  F033         	movff	??_initSD+2,??_initSD+3
  3738  00183A  C031  F032         	movff	??_initSD+1,??_initSD+2
  3739  00183E  C030  F031         	movff	??_initSD,??_initSD+1
  3740  001842  6A30               	clrf	??_initSD,c
  3741  001844  5030               	movf	??_initSD,w,c
  3742  001846  0100               	movlb	0	; () banked
  3743  001848  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3744  00184A  5031               	movf	??_initSD+1,w,c
  3745  00184C  0100               	movlb	0	; () banked
  3746  00184E  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  3747  001850  5032               	movf	??_initSD+2,w,c
  3748  001852  0100               	movlb	0	; () banked
  3749  001854  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  3750  001856  5033               	movf	??_initSD+3,w,c
  3751  001858  0100               	movlb	0	; () banked
  3752  00185A  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;SD_PIC.c: 594: SDCard.PSN |= (unsigned long)arr_response[12];
  3756  00185C  504D               	movf	initSD@arr_response+12,w,c
  3757  00185E  0100               	movlb	0	; () banked
  3758  001860  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;SD_PIC.c: 596: SDCard.MDT = (unsigned short)(((arr_response[13] & 0x0F) << 8U)) |
  3762                           ;SD_PIC.c: 597: (arr_response[14]);
  3763  001862  504E               	movf	initSD@arr_response+13,w,c
  3764  001864  0B0F               	andlw	15
  3765  001866  6E30               	movwf	??_initSD& (0+255),c
  3766  001868  504F               	movf	initSD@arr_response+14,w,c
  3767  00186A  0100               	movlb	0	; () banked
  3768  00186C  6F8F               	movwf	(_SDCard+15)& (0+255),b
  3769  00186E  C030  F090         	movff	??_initSD,_SDCard+16
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;SD_PIC.c: 598: SDCard.CRC = arr_response[15] & 0xFE;
  3773  001872  5050               	movf	initSD@arr_response+15,w,c
  3774  001874  0BFE               	andlw	254
  3775  001876  0100               	movlb	0	; () banked
  3776  001878  6F91               	movwf	(_SDCard+17)& (0+255),b
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;SD_PIC.c: 601: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  3780  00187A  848D               	bsf	3981,2,c	;volatile
  3781                           
  3782                           ; BSR set to: 0
  3783  00187C  9AC6               	bcf	4038,5,c	;volatile
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;SD_PIC.c: 602: OSCCON = last_OSCCON;
  3787  00187E  C03B  FFD3         	movff	initSD@last_OSCCON,4051	;volatile
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;SD_PIC.c: 603: OSCTUNE = last_OSCTUNE;
  3791  001882  C03C  FF9B         	movff	initSD@last_OSCTUNE,3995	;volatile
  3792                           
  3793                           ;SD_PIC.c: 606: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  3794  001886  D004               	goto	l2784
  3795  001888                     l2782:
  3796  001888  0E42               	movlw	66
  3797  00188A                     u3047:
  3798  00188A  2EE8               	decfsz	wreg,f,c
  3799  00188C  D7FE               	bra	u3047
  3800  00188E  D000               	nop2	
  3801  001890                     l2784:
  3802  001890  A4D3               	btfss	4051,2,c	;volatile
  3803  001892  D7FA               	goto	l2782
  3804                           
  3805                           ;SD_PIC.c: 609: spiInit(16);
  3806  001894  0E10               	movlw	16
  3807  001896  EC09  F016         	call	_spiInit
  3808                           
  3809                           ;SD_PIC.c: 612: SDCard.write.MBW_flag_first = 1;
  3810  00189A  0E01               	movlw	1
  3811  00189C  0100               	movlb	0	; () banked
  3812  00189E  6FA4               	movwf	(_SDCard+36)& (0+255),b
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;SD_PIC.c: 613: SDCard.write.MBW_startBlock = 0;
  3816  0018A0  0E00               	movlw	0
  3817  0018A2  0100               	movlb	0	; () banked
  3818  0018A4  6FA0               	movwf	(_SDCard+32)& (0+255),b
  3819  0018A6  0E00               	movlw	0
  3820  0018A8  6FA1               	movwf	(_SDCard+33)& (0+255),b
  3821  0018AA  0E00               	movlw	0
  3822  0018AC  6FA2               	movwf	(_SDCard+34)& (0+255),b
  3823  0018AE  0E00               	movlw	0
  3824  0018B0  6FA3               	movwf	(_SDCard+35)& (0+255),b
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;SD_PIC.c: 614: SDCard.write.lastBlockWritten = 0;
  3828  0018B2  0E00               	movlw	0
  3829  0018B4  0100               	movlb	0	; () banked
  3830  0018B6  6F9C               	movwf	(_SDCard+28)& (0+255),b
  3831  0018B8  0E00               	movlw	0
  3832  0018BA  6F9D               	movwf	(_SDCard+29)& (0+255),b
  3833  0018BC  0E00               	movlw	0
  3834  0018BE  6F9E               	movwf	(_SDCard+30)& (0+255),b
  3835  0018C0  0E00               	movlw	0
  3836  0018C2  6F9F               	movwf	(_SDCard+31)& (0+255),b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;SD_PIC.c: 615: SDCard.read.MBR_flag_first = 1;
  3840  0018C4  0E01               	movlw	1
  3841  0018C6  0100               	movlb	0	; () banked
  3842  0018C8  6FAD               	movwf	(_SDCard+45)& (0+255),b
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;SD_PIC.c: 616: SDCard.read.MBR_startBlock = 0;
  3846  0018CA  0E00               	movlw	0
  3847  0018CC  0100               	movlb	0	; () banked
  3848  0018CE  6FA9               	movwf	(_SDCard+41)& (0+255),b
  3849  0018D0  0E00               	movlw	0
  3850  0018D2  6FAA               	movwf	(_SDCard+42)& (0+255),b
  3851  0018D4  0E00               	movlw	0
  3852  0018D6  6FAB               	movwf	(_SDCard+43)& (0+255),b
  3853  0018D8  0E00               	movlw	0
  3854  0018DA  6FAC               	movwf	(_SDCard+44)& (0+255),b
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;SD_PIC.c: 617: SDCard.read.lastBlockRead = 0;
  3858  0018DC  0E00               	movlw	0
  3859  0018DE  0100               	movlb	0	; () banked
  3860  0018E0  6FA5               	movwf	(_SDCard+37)& (0+255),b
  3861  0018E2  0E00               	movlw	0
  3862  0018E4  6FA6               	movwf	(_SDCard+38)& (0+255),b
  3863  0018E6  0E00               	movlw	0
  3864  0018E8  6FA7               	movwf	(_SDCard+39)& (0+255),b
  3865  0018EA  0E00               	movlw	0
  3866  0018EC  6FA8               	movwf	(_SDCard+40)& (0+255),b
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;SD_PIC.c: 620: SDCard.init = 1;
  3870  0018EE  0E01               	movlw	1
  3871  0018F0  0100               	movlb	0	; () banked
  3872  0018F2  6F9B               	movwf	(_SDCard+27)& (0+255),b
  3873  0018F4  0012               	return		;funcret
  3874  0018F6                     __end_of_initSD:
  3875                           	opt stack 0
  3876                           tblptru	equ	0xFF8
  3877                           tblptrh	equ	0xFF7
  3878                           tblptrl	equ	0xFF6
  3879                           tablat	equ	0xFF5
  3880                           prodh	equ	0xFF4
  3881                           prodl	equ	0xFF3
  3882                           postinc0	equ	0xFEE
  3883                           wreg	equ	0xFE8
  3884                           postdec1	equ	0xFE5
  3885                           plusw1	equ	0xFE3
  3886                           fsr1h	equ	0xFE2
  3887                           fsr1l	equ	0xFE1
  3888                           indf2	equ	0xFDF
  3889                           postinc2	equ	0xFDE
  3890                           postdec2	equ	0xFDD
  3891                           plusw2	equ	0xFDB
  3892                           fsr2h	equ	0xFDA
  3893                           fsr2l	equ	0xFD9
  3894                           status	equ	0xFD8
  3895                           
  3896 ;; *************** function _spiInit *****************
  3897 ;; Defined at:
  3898 ;;		line 37 in file "SPI_PIC.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;  divider         1    wreg     unsigned char 
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;  divider         1    0[COMRAM] unsigned char 
  3903 ;; Return value:  Size  Location     Type
  3904 ;;                  1    wreg      void 
  3905 ;; Registers used:
  3906 ;;		wreg, status,2, status,0
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;Total ram usage:        1 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; This function calls:
  3919 ;;		Nothing
  3920 ;; This function is called by:
  3921 ;;		_initSD
  3922 ;; This function uses a non-reentrant model
  3923 ;;
  3924                           
  3925                           	psect	text5
  3926  002C12                     __ptext5:
  3927                           	opt stack 0
  3928  002C12                     _spiInit:
  3929                           	opt stack 29
  3930                           
  3931                           ;incstack = 0
  3932                           ;spiInit@divider stored from wreg
  3933  002C12  6E01               	movwf	spiInit@divider,c
  3934                           
  3935                           ;SPI_PIC.c: 38: SSPCON1bits.SSPEN = 0;
  3936  002C14  9AC6               	bcf	4038,5,c	;volatile
  3937                           
  3938                           ;SPI_PIC.c: 39: SSPSTAT = 0x00;
  3939  002C16  0E00               	movlw	0
  3940  002C18  6EC7               	movwf	4039,c	;volatile
  3941                           
  3942                           ;SPI_PIC.c: 44: switch(divider){
  3943  002C1A  D007               	goto	l2318
  3944  002C1C                     l2310:
  3945                           
  3946                           ;SPI_PIC.c: 46: SSPCON1 = 0b00010000;
  3947  002C1C  0E10               	movlw	16
  3948  002C1E  D003               	goto	L8
  3949  002C20                     l2314:
  3950                           
  3951                           ;SPI_PIC.c: 52: SSPCON1 = 0b00010010;
  3952  002C20  0E12               	movlw	18
  3953  002C22  D001               	goto	L8
  3954  002C24                     l2316:
  3955                           
  3956                           ;SPI_PIC.c: 55: SSPCON1 = 0b00010001;
  3957  002C24  0E11               	movlw	17
  3958  002C26                     L8:
  3959  002C26  6EC6               	movwf	4038,c	;volatile
  3960                           
  3961                           ;SPI_PIC.c: 56: }
  3962  002C28  D00B               	goto	l371
  3963  002C2A                     l2318:
  3964  002C2A  5001               	movf	spiInit@divider,w,c
  3965                           
  3966                           ; Switch size 1, requested type "space"
  3967                           ; Number of cases is 3, Range of values is 4 to 64
  3968                           ; switch strategies available:
  3969                           ; Name         Instructions Cycles
  3970                           ; simple_byte           10     6 (average)
  3971                           ;	Chosen strategy is simple_byte
  3972  002C2C  0A04               	xorlw	4	; case 4
  3973  002C2E  B4D8               	btfsc	status,2,c
  3974  002C30  D7F5               	goto	l2310
  3975  002C32  0A14               	xorlw	20	; case 16
  3976  002C34  B4D8               	btfsc	status,2,c
  3977  002C36  D7F6               	goto	l2316
  3978  002C38  0A50               	xorlw	80	; case 64
  3979  002C3A  B4D8               	btfsc	status,2,c
  3980  002C3C  D7F1               	goto	l2314
  3981  002C3E  D7F2               	goto	l2316
  3982  002C40                     l371:
  3983                           
  3984                           ;SPI_PIC.c: 59: TRISCbits.TRISC5 = 0;
  3985  002C40  9A94               	bcf	3988,5,c	;volatile
  3986                           
  3987                           ;SPI_PIC.c: 60: TRISCbits.TRISC4 = 1;
  3988  002C42  8894               	bsf	3988,4,c	;volatile
  3989                           
  3990                           ;SPI_PIC.c: 61: TRISCbits.TRISC3 = 0;
  3991  002C44  9694               	bcf	3988,3,c	;volatile
  3992                           
  3993                           ;SPI_PIC.c: 63: SSPCON1bits.SSPEN = 1;
  3994  002C46  8AC6               	bsf	4038,5,c	;volatile
  3995  002C48  0012               	return		;funcret
  3996  002C4A                     __end_of_spiInit:
  3997                           	opt stack 0
  3998                           tblptru	equ	0xFF8
  3999                           tblptrh	equ	0xFF7
  4000                           tblptrl	equ	0xFF6
  4001                           tablat	equ	0xFF5
  4002                           prodh	equ	0xFF4
  4003                           prodl	equ	0xFF3
  4004                           postinc0	equ	0xFEE
  4005                           wreg	equ	0xFE8
  4006                           postdec1	equ	0xFE5
  4007                           plusw1	equ	0xFE3
  4008                           fsr1h	equ	0xFE2
  4009                           fsr1l	equ	0xFE1
  4010                           indf2	equ	0xFDF
  4011                           postinc2	equ	0xFDE
  4012                           postdec2	equ	0xFDD
  4013                           plusw2	equ	0xFDB
  4014                           fsr2h	equ	0xFDA
  4015                           fsr2l	equ	0xFD9
  4016                           status	equ	0xFD8
  4017                           
  4018 ;; *************** function ___lwtoft *****************
  4019 ;; Defined at:
  4020 ;;		line 28 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  4021 ;; Parameters:    Size  Location     Type
  4022 ;;  c               2    8[COMRAM] unsigned int 
  4023 ;; Auto vars:     Size  Location     Type
  4024 ;;		None
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  3    8[COMRAM] float 
  4027 ;; Registers used:
  4028 ;;		wreg, status,2, status,0, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 0/0
  4031 ;;		On exit  : 0/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4034 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;Total ram usage:        3 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:    1
  4041 ;; This function calls:
  4042 ;;		___ftpack
  4043 ;; This function is called by:
  4044 ;;		_initSD
  4045 ;; This function uses a non-reentrant model
  4046 ;;
  4047                           
  4048                           	psect	text6
  4049  002CF6                     __ptext6:
  4050                           	opt stack 0
  4051  002CF6                     ___lwtoft:
  4052                           	opt stack 28
  4053                           
  4054                           ;incstack = 0
  4055  002CF6  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  4056  002CFA  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  4057  002CFE  6A03               	clrf	___ftpack@arg+2,c
  4058  002D00  0E8E               	movlw	142
  4059  002D02  6E04               	movwf	___ftpack@exp,c
  4060  002D04  0E00               	movlw	0
  4061  002D06  6E05               	movwf	___ftpack@sign,c
  4062  002D08  EC48  F013         	call	___ftpack	;wreg free
  4063  002D0C  C001  F009         	movff	?___ftpack,?___lwtoft
  4064  002D10  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  4065  002D14  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  4066  002D18  0012               	return	
  4067  002D1A                     __end_of___lwtoft:
  4068                           	opt stack 0
  4069                           tblptru	equ	0xFF8
  4070                           tblptrh	equ	0xFF7
  4071                           tblptrl	equ	0xFF6
  4072                           tablat	equ	0xFF5
  4073                           prodh	equ	0xFF4
  4074                           prodl	equ	0xFF3
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           postdec1	equ	0xFE5
  4078                           plusw1	equ	0xFE3
  4079                           fsr1h	equ	0xFE2
  4080                           fsr1l	equ	0xFE1
  4081                           indf2	equ	0xFDF
  4082                           postinc2	equ	0xFDE
  4083                           postdec2	equ	0xFDD
  4084                           plusw2	equ	0xFDB
  4085                           fsr2h	equ	0xFDA
  4086                           fsr2l	equ	0xFD9
  4087                           status	equ	0xFD8
  4088                           
  4089 ;; *************** function ___lltoft *****************
  4090 ;; Defined at:
  4091 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;  c               4    8[COMRAM] unsigned long 
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  exp             1   16[COMRAM] unsigned char 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  3    8[COMRAM] float 
  4098 ;; Registers used:
  4099 ;;		wreg, status,2, status,0, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4105 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;Total ram usage:        9 bytes
  4110 ;; Hardware stack levels used:    1
  4111 ;; Hardware stack levels required when called:    1
  4112 ;; This function calls:
  4113 ;;		___ftpack
  4114 ;; This function is called by:
  4115 ;;		_initSD
  4116 ;; This function uses a non-reentrant model
  4117 ;;
  4118                           
  4119                           	psect	text7
  4120  002B7C                     __ptext7:
  4121                           	opt stack 0
  4122  002B7C                     ___lltoft:
  4123                           	opt stack 28
  4124                           
  4125                           ;incstack = 0
  4126  002B7C  0E8E               	movlw	142
  4127  002B7E  6E11               	movwf	___lltoft@exp,c
  4128  002B80  D006               	goto	l2506
  4129  002B82                     l2504:
  4130  002B82  90D8               	bcf	status,0,c
  4131  002B84  320C               	rrcf	___lltoft@c+3,f,c
  4132  002B86  320B               	rrcf	___lltoft@c+2,f,c
  4133  002B88  320A               	rrcf	___lltoft@c+1,f,c
  4134  002B8A  3209               	rrcf	___lltoft@c,f,c
  4135  002B8C  2A11               	incf	___lltoft@exp,f,c
  4136  002B8E                     l2506:
  4137  002B8E  0E00               	movlw	0
  4138  002B90  1409               	andwf	___lltoft@c,w,c
  4139  002B92  6E0D               	movwf	??___lltoft& (0+255),c
  4140  002B94  0E00               	movlw	0
  4141  002B96  140A               	andwf	___lltoft@c+1,w,c
  4142  002B98  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4143  002B9A  0E00               	movlw	0
  4144  002B9C  140B               	andwf	___lltoft@c+2,w,c
  4145  002B9E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4146  002BA0  0EFF               	movlw	255
  4147  002BA2  140C               	andwf	___lltoft@c+3,w,c
  4148  002BA4  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4149  002BA6  500D               	movf	??___lltoft,w,c
  4150  002BA8  100E               	iorwf	??___lltoft+1,w,c
  4151  002BAA  100F               	iorwf	??___lltoft+2,w,c
  4152  002BAC  1010               	iorwf	??___lltoft+3,w,c
  4153  002BAE  A4D8               	btfss	status,2,c
  4154  002BB0  D7E8               	goto	l2504
  4155  002BB2  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4156  002BB6  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4157  002BBA  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4158  002BBE  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4159  002BC2  0E00               	movlw	0
  4160  002BC4  6E05               	movwf	___ftpack@sign,c
  4161  002BC6  EC48  F013         	call	___ftpack	;wreg free
  4162  002BCA  C001  F009         	movff	?___ftpack,?___lltoft
  4163  002BCE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4164  002BD2  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4165  002BD6  0012               	return	
  4166  002BD8                     __end_of___lltoft:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           prodh	equ	0xFF4
  4173                           prodl	equ	0xFF3
  4174                           postinc0	equ	0xFEE
  4175                           wreg	equ	0xFE8
  4176                           postdec1	equ	0xFE5
  4177                           plusw1	equ	0xFE3
  4178                           fsr1h	equ	0xFE2
  4179                           fsr1l	equ	0xFE1
  4180                           indf2	equ	0xFDF
  4181                           postinc2	equ	0xFDE
  4182                           postdec2	equ	0xFDD
  4183                           plusw2	equ	0xFDB
  4184                           fsr2h	equ	0xFDA
  4185                           fsr2l	equ	0xFD9
  4186                           status	equ	0xFD8
  4187                           
  4188 ;; *************** function ___fttol *****************
  4189 ;; Defined at:
  4190 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;  f1              3   32[COMRAM] float 
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;  lval            4   42[COMRAM] unsigned long 
  4195 ;;  exp1            1   46[COMRAM] unsigned char 
  4196 ;;  sign1           1   41[COMRAM] unsigned char 
  4197 ;; Return value:  Size  Location     Type
  4198 ;;                  4   32[COMRAM] long 
  4199 ;; Registers used:
  4200 ;;		wreg, status,2, status,0
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4206 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;Total ram usage:       15 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_initSD
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           	psect	text8
  4220  002228                     __ptext8:
  4221                           	opt stack 0
  4222  002228                     ___fttol:
  4223                           	opt stack 29
  4224                           
  4225                           ;incstack = 0
  4226  002228  C023  F025         	movff	___fttol@f1+2,??___fttol
  4227  00222C  6A26               	clrf	(??___fttol+1)& (0+255),c
  4228  00222E  6A27               	clrf	(??___fttol+2)& (0+255),c
  4229  002230  3422               	rlcf	___fttol@f1+1,w,c
  4230  002232  3625               	rlcf	??___fttol& (0+255),f,c
  4231  002234  E301               	bnc	u1731
  4232  002236  8026               	bsf	(??___fttol+1)& (0+255),0,c
  4233  002238                     u1731:
  4234  002238  5025               	movf	??___fttol,w,c
  4235  00223A  6E2F               	movwf	___fttol@exp1,c
  4236  00223C  502F               	movf	___fttol@exp1,w,c
  4237  00223E  A4D8               	btfss	status,2,c
  4238  002240  D009               	goto	l2424
  4239  002242  0E00               	movlw	0
  4240  002244  6E21               	movwf	?___fttol,c
  4241  002246  0E00               	movlw	0
  4242  002248  6E22               	movwf	?___fttol+1,c
  4243  00224A  0E00               	movlw	0
  4244  00224C  6E23               	movwf	?___fttol+2,c
  4245  00224E  0E00               	movlw	0
  4246  002250  6E24               	movwf	?___fttol+3,c
  4247  002252  0012               	return	
  4248  002254                     l2424:
  4249  002254  0E17               	movlw	23
  4250  002256  6E25               	movwf	??___fttol& (0+255),c
  4251  002258  C021  F026         	movff	___fttol@f1,??___fttol+1
  4252  00225C  C022  F027         	movff	___fttol@f1+1,??___fttol+2
  4253  002260  C023  F028         	movff	___fttol@f1+2,??___fttol+3
  4254  002264  2825               	incf	??___fttol,w,c
  4255  002266  6E29               	movwf	(??___fttol+4)& (0+255),c
  4256  002268  D004               	goto	u1750
  4257  00226A                     u1755:
  4258  00226A  90D8               	bcf	status,0,c
  4259  00226C  3228               	rrcf	??___fttol+3,f,c
  4260  00226E  3227               	rrcf	??___fttol+2,f,c
  4261  002270  3226               	rrcf	??___fttol+1,f,c
  4262  002272                     u1750:
  4263  002272  2E29               	decfsz	(??___fttol+4)& (0+255),f,c
  4264  002274  D7FA               	goto	u1755
  4265  002276  5026               	movf	??___fttol+1,w,c
  4266  002278  6E2A               	movwf	___fttol@sign1,c
  4267  00227A  8E22               	bsf	___fttol@f1+1,7,c
  4268  00227C  0EFF               	movlw	255
  4269  00227E  1621               	andwf	___fttol@f1,f,c
  4270  002280  0EFF               	movlw	255
  4271  002282  1622               	andwf	___fttol@f1+1,f,c
  4272  002284  0E00               	movlw	0
  4273  002286  1623               	andwf	___fttol@f1+2,f,c
  4274  002288  5021               	movf	___fttol@f1,w,c
  4275  00228A  6E2B               	movwf	___fttol@lval,c
  4276  00228C  5022               	movf	___fttol@f1+1,w,c
  4277  00228E  6E2C               	movwf	___fttol@lval+1,c
  4278  002290  5023               	movf	___fttol@f1+2,w,c
  4279  002292  6E2D               	movwf	___fttol@lval+2,c
  4280  002294  6A2E               	clrf	___fttol@lval+3,c
  4281  002296  0E8E               	movlw	142
  4282  002298  5E2F               	subwf	___fttol@exp1,f,c
  4283  00229A  AE2F               	btfss	___fttol@exp1,7,c
  4284  00229C  D016               	goto	l2446
  4285  00229E  502F               	movf	___fttol@exp1,w,c
  4286  0022A0  0A80               	xorlw	128
  4287  0022A2  0F8F               	addlw	143
  4288  0022A4  B0D8               	btfsc	status,0,c
  4289  0022A6  D009               	goto	l2442
  4290  0022A8  0E00               	movlw	0
  4291  0022AA  6E21               	movwf	?___fttol,c
  4292  0022AC  0E00               	movlw	0
  4293  0022AE  6E22               	movwf	?___fttol+1,c
  4294  0022B0  0E00               	movlw	0
  4295  0022B2  6E23               	movwf	?___fttol+2,c
  4296  0022B4  0E00               	movlw	0
  4297  0022B6  6E24               	movwf	?___fttol+3,c
  4298  0022B8  0012               	return	
  4299  0022BA                     l2442:
  4300  0022BA  90D8               	bcf	status,0,c
  4301  0022BC  322E               	rrcf	___fttol@lval+3,f,c
  4302  0022BE  322D               	rrcf	___fttol@lval+2,f,c
  4303  0022C0  322C               	rrcf	___fttol@lval+1,f,c
  4304  0022C2  322B               	rrcf	___fttol@lval,f,c
  4305  0022C4  3E2F               	incfsz	___fttol@exp1,f,c
  4306  0022C6  D7F9               	goto	l2442
  4307  0022C8  D015               	goto	l2456
  4308  0022CA                     l2446:
  4309  0022CA  0E17               	movlw	23
  4310  0022CC  642F               	cpfsgt	___fttol@exp1,c
  4311  0022CE  D00F               	goto	l2454
  4312  0022D0  0E00               	movlw	0
  4313  0022D2  6E21               	movwf	?___fttol,c
  4314  0022D4  0E00               	movlw	0
  4315  0022D6  6E22               	movwf	?___fttol+1,c
  4316  0022D8  0E00               	movlw	0
  4317  0022DA  6E23               	movwf	?___fttol+2,c
  4318  0022DC  0E00               	movlw	0
  4319  0022DE  6E24               	movwf	?___fttol+3,c
  4320  0022E0  0012               	return	
  4321  0022E2                     l2452:
  4322  0022E2  90D8               	bcf	status,0,c
  4323  0022E4  362B               	rlcf	___fttol@lval,f,c
  4324  0022E6  362C               	rlcf	___fttol@lval+1,f,c
  4325  0022E8  362D               	rlcf	___fttol@lval+2,f,c
  4326  0022EA  362E               	rlcf	___fttol@lval+3,f,c
  4327  0022EC  062F               	decf	___fttol@exp1,f,c
  4328  0022EE                     l2454:
  4329  0022EE  502F               	movf	___fttol@exp1,w,c
  4330  0022F0  A4D8               	btfss	status,2,c
  4331  0022F2  D7F7               	goto	l2452
  4332  0022F4                     l2456:
  4333  0022F4  502A               	movf	___fttol@sign1,w,c
  4334  0022F6  B4D8               	btfsc	status,2,c
  4335  0022F8  D008               	goto	l2460
  4336  0022FA  1E2E               	comf	___fttol@lval+3,f,c
  4337  0022FC  1E2D               	comf	___fttol@lval+2,f,c
  4338  0022FE  1E2C               	comf	___fttol@lval+1,f,c
  4339  002300  6C2B               	negf	___fttol@lval,c
  4340  002302  0E00               	movlw	0
  4341  002304  222C               	addwfc	___fttol@lval+1,f,c
  4342  002306  222D               	addwfc	___fttol@lval+2,f,c
  4343  002308  222E               	addwfc	___fttol@lval+3,f,c
  4344  00230A                     l2460:
  4345  00230A  C02B  F021         	movff	___fttol@lval,?___fttol
  4346  00230E  C02C  F022         	movff	___fttol@lval+1,?___fttol+1
  4347  002312  C02D  F023         	movff	___fttol@lval+2,?___fttol+2
  4348  002316  C02E  F024         	movff	___fttol@lval+3,?___fttol+3
  4349  00231A  0012               	return	
  4350  00231C                     __end_of___fttol:
  4351                           	opt stack 0
  4352                           tblptru	equ	0xFF8
  4353                           tblptrh	equ	0xFF7
  4354                           tblptrl	equ	0xFF6
  4355                           tablat	equ	0xFF5
  4356                           prodh	equ	0xFF4
  4357                           prodl	equ	0xFF3
  4358                           postinc0	equ	0xFEE
  4359                           wreg	equ	0xFE8
  4360                           postdec1	equ	0xFE5
  4361                           plusw1	equ	0xFE3
  4362                           fsr1h	equ	0xFE2
  4363                           fsr1l	equ	0xFE1
  4364                           indf2	equ	0xFDF
  4365                           postinc2	equ	0xFDE
  4366                           postdec2	equ	0xFDD
  4367                           plusw2	equ	0xFDB
  4368                           fsr2h	equ	0xFDA
  4369                           fsr2l	equ	0xFD9
  4370                           status	equ	0xFD8
  4371                           
  4372 ;; *************** function ___ftmul *****************
  4373 ;; Defined at:
  4374 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;  f1              3   17[COMRAM] float 
  4377 ;;  f2              3   20[COMRAM] float 
  4378 ;; Auto vars:     Size  Location     Type
  4379 ;;  f3_as_produc    3   27[COMRAM] unsigned um
  4380 ;;  sign            1   31[COMRAM] unsigned char 
  4381 ;;  cntr            1   30[COMRAM] unsigned char 
  4382 ;;  exp             1   26[COMRAM] unsigned char 
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  3   17[COMRAM] float 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2, status,0, cstack
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4392 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;Total ram usage:       15 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    1
  4399 ;; This function calls:
  4400 ;;		___ftpack
  4401 ;; This function is called by:
  4402 ;;		_initSD
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text9
  4407  00231C                     __ptext9:
  4408                           	opt stack 0
  4409  00231C                     ___ftmul:
  4410                           	opt stack 28
  4411                           
  4412                           ;incstack = 0
  4413  00231C  C014  F018         	movff	___ftmul@f1+2,??___ftmul
  4414  002320  6A19               	clrf	(??___ftmul+1)& (0+255),c
  4415  002322  6A1A               	clrf	(??___ftmul+2)& (0+255),c
  4416  002324  3413               	rlcf	___ftmul@f1+1,w,c
  4417  002326  3618               	rlcf	??___ftmul& (0+255),f,c
  4418  002328  E301               	bnc	u1671
  4419  00232A  8019               	bsf	(??___ftmul+1)& (0+255),0,c
  4420  00232C                     u1671:
  4421  00232C  5018               	movf	??___ftmul,w,c
  4422  00232E  6E1B               	movwf	___ftmul@exp,c
  4423  002330  501B               	movf	___ftmul@exp,w,c
  4424  002332  A4D8               	btfss	status,2,c
  4425  002334  D007               	goto	l2376
  4426  002336  0E00               	movlw	0
  4427  002338  6E12               	movwf	?___ftmul,c
  4428  00233A  0E00               	movlw	0
  4429  00233C  6E13               	movwf	?___ftmul+1,c
  4430  00233E  0E00               	movlw	0
  4431  002340  6E14               	movwf	?___ftmul+2,c
  4432  002342  0012               	return	
  4433  002344                     l2376:
  4434  002344  C017  F018         	movff	___ftmul@f2+2,??___ftmul
  4435  002348  6A19               	clrf	(??___ftmul+1)& (0+255),c
  4436  00234A  6A1A               	clrf	(??___ftmul+2)& (0+255),c
  4437  00234C  3416               	rlcf	___ftmul@f2+1,w,c
  4438  00234E  3618               	rlcf	??___ftmul& (0+255),f,c
  4439  002350  E301               	bnc	u1691
  4440  002352  8019               	bsf	(??___ftmul+1)& (0+255),0,c
  4441  002354                     u1691:
  4442  002354  5018               	movf	??___ftmul,w,c
  4443  002356  6E20               	movwf	___ftmul@sign,c
  4444  002358  5020               	movf	___ftmul@sign,w,c
  4445  00235A  A4D8               	btfss	status,2,c
  4446  00235C  D007               	goto	l2382
  4447  00235E  0E00               	movlw	0
  4448  002360  6E12               	movwf	?___ftmul,c
  4449  002362  0E00               	movlw	0
  4450  002364  6E13               	movwf	?___ftmul+1,c
  4451  002366  0E00               	movlw	0
  4452  002368  6E14               	movwf	?___ftmul+2,c
  4453  00236A  0012               	return	
  4454  00236C                     l2382:
  4455  00236C  5020               	movf	___ftmul@sign,w,c
  4456  00236E  0F7B               	addlw	123
  4457  002370  261B               	addwf	___ftmul@exp,f,c
  4458  002372  C014  F020         	movff	___ftmul@f1+2,___ftmul@sign
  4459  002376  5017               	movf	___ftmul@f2+2,w,c
  4460  002378  1A20               	xorwf	___ftmul@sign,f,c
  4461  00237A  0E80               	movlw	128
  4462  00237C  1620               	andwf	___ftmul@sign,f,c
  4463  00237E  8E13               	bsf	___ftmul@f1+1,7,c
  4464  002380  8E16               	bsf	___ftmul@f2+1,7,c
  4465  002382  0EFF               	movlw	255
  4466  002384  1615               	andwf	___ftmul@f2,f,c
  4467  002386  0EFF               	movlw	255
  4468  002388  1616               	andwf	___ftmul@f2+1,f,c
  4469  00238A  0E00               	movlw	0
  4470  00238C  1617               	andwf	___ftmul@f2+2,f,c
  4471  00238E  0E00               	movlw	0
  4472  002390  6E1C               	movwf	___ftmul@f3_as_product,c
  4473  002392  0E00               	movlw	0
  4474  002394  6E1D               	movwf	___ftmul@f3_as_product+1,c
  4475  002396  0E00               	movlw	0
  4476  002398  6E1E               	movwf	___ftmul@f3_as_product+2,c
  4477  00239A  0E07               	movlw	7
  4478  00239C  6E1F               	movwf	___ftmul@cntr,c
  4479  00239E                     l2396:
  4480  00239E  A012               	btfss	___ftmul@f1,0,c
  4481  0023A0  D006               	goto	l2400
  4482  0023A2  5015               	movf	___ftmul@f2,w,c
  4483  0023A4  261C               	addwf	___ftmul@f3_as_product,f,c
  4484  0023A6  5016               	movf	___ftmul@f2+1,w,c
  4485  0023A8  221D               	addwfc	___ftmul@f3_as_product+1,f,c
  4486  0023AA  5017               	movf	___ftmul@f2+2,w,c
  4487  0023AC  221E               	addwfc	___ftmul@f3_as_product+2,f,c
  4488  0023AE                     l2400:
  4489  0023AE  90D8               	bcf	status,0,c
  4490  0023B0  3214               	rrcf	___ftmul@f1+2,f,c
  4491  0023B2  3213               	rrcf	___ftmul@f1+1,f,c
  4492  0023B4  3212               	rrcf	___ftmul@f1,f,c
  4493  0023B6  90D8               	bcf	status,0,c
  4494  0023B8  3615               	rlcf	___ftmul@f2,f,c
  4495  0023BA  3616               	rlcf	___ftmul@f2+1,f,c
  4496  0023BC  3617               	rlcf	___ftmul@f2+2,f,c
  4497  0023BE  2E1F               	decfsz	___ftmul@cntr,f,c
  4498  0023C0  D7EE               	goto	l2396
  4499  0023C2  0E09               	movlw	9
  4500  0023C4  6E1F               	movwf	___ftmul@cntr,c
  4501  0023C6                     l2406:
  4502  0023C6  A012               	btfss	___ftmul@f1,0,c
  4503  0023C8  D006               	goto	l2410
  4504  0023CA  5015               	movf	___ftmul@f2,w,c
  4505  0023CC  261C               	addwf	___ftmul@f3_as_product,f,c
  4506  0023CE  5016               	movf	___ftmul@f2+1,w,c
  4507  0023D0  221D               	addwfc	___ftmul@f3_as_product+1,f,c
  4508  0023D2  5017               	movf	___ftmul@f2+2,w,c
  4509  0023D4  221E               	addwfc	___ftmul@f3_as_product+2,f,c
  4510  0023D6                     l2410:
  4511  0023D6  90D8               	bcf	status,0,c
  4512  0023D8  3214               	rrcf	___ftmul@f1+2,f,c
  4513  0023DA  3213               	rrcf	___ftmul@f1+1,f,c
  4514  0023DC  3212               	rrcf	___ftmul@f1,f,c
  4515  0023DE  90D8               	bcf	status,0,c
  4516  0023E0  321E               	rrcf	___ftmul@f3_as_product+2,f,c
  4517  0023E2  321D               	rrcf	___ftmul@f3_as_product+1,f,c
  4518  0023E4  321C               	rrcf	___ftmul@f3_as_product,f,c
  4519  0023E6  2E1F               	decfsz	___ftmul@cntr,f,c
  4520  0023E8  D7EE               	goto	l2406
  4521  0023EA  C01C  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4522  0023EE  C01D  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4523  0023F2  C01E  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4524  0023F6  C01B  F004         	movff	___ftmul@exp,___ftpack@exp
  4525  0023FA  C020  F005         	movff	___ftmul@sign,___ftpack@sign
  4526  0023FE  EC48  F013         	call	___ftpack	;wreg free
  4527  002402  C001  F012         	movff	?___ftpack,?___ftmul
  4528  002406  C002  F013         	movff	?___ftpack+1,?___ftmul+1
  4529  00240A  C003  F014         	movff	?___ftpack+2,?___ftmul+2
  4530  00240E  0012               	return	
  4531  002410                     __end_of___ftmul:
  4532                           	opt stack 0
  4533                           tblptru	equ	0xFF8
  4534                           tblptrh	equ	0xFF7
  4535                           tblptrl	equ	0xFF6
  4536                           tablat	equ	0xFF5
  4537                           prodh	equ	0xFF4
  4538                           prodl	equ	0xFF3
  4539                           postinc0	equ	0xFEE
  4540                           wreg	equ	0xFE8
  4541                           postdec1	equ	0xFE5
  4542                           plusw1	equ	0xFE3
  4543                           fsr1h	equ	0xFE2
  4544                           fsr1l	equ	0xFE1
  4545                           indf2	equ	0xFDF
  4546                           postinc2	equ	0xFDE
  4547                           postdec2	equ	0xFDD
  4548                           plusw2	equ	0xFDB
  4549                           fsr2h	equ	0xFDA
  4550                           fsr2l	equ	0xFD9
  4551                           status	equ	0xFD8
  4552                           
  4553 ;; *************** function ___ftdiv *****************
  4554 ;; Defined at:
  4555 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  f1              3   11[COMRAM] float 
  4558 ;;  f2              3   14[COMRAM] float 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  f3              3   21[COMRAM] float 
  4561 ;;  sign            1   25[COMRAM] unsigned char 
  4562 ;;  exp             1   24[COMRAM] unsigned char 
  4563 ;;  cntr            1   20[COMRAM] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  3   11[COMRAM] float 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4573 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;Total ram usage:       15 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    1
  4580 ;; This function calls:
  4581 ;;		___ftpack
  4582 ;; This function is called by:
  4583 ;;		_initSD
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text10
  4588  002410                     __ptext10:
  4589                           	opt stack 0
  4590  002410                     ___ftdiv:
  4591                           	opt stack 28
  4592                           
  4593                           ;incstack = 0
  4594  002410  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  4595  002414  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  4596  002416  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  4597  002418  340D               	rlcf	___ftdiv@f1+1,w,c
  4598  00241A  3612               	rlcf	??___ftdiv& (0+255),f,c
  4599  00241C  E301               	bnc	u1621
  4600  00241E  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  4601  002420                     u1621:
  4602  002420  5012               	movf	??___ftdiv,w,c
  4603  002422  6E19               	movwf	___ftdiv@exp,c
  4604  002424  5019               	movf	___ftdiv@exp,w,c
  4605  002426  A4D8               	btfss	status,2,c
  4606  002428  D007               	goto	l2330
  4607  00242A  0E00               	movlw	0
  4608  00242C  6E0C               	movwf	?___ftdiv,c
  4609  00242E  0E00               	movlw	0
  4610  002430  6E0D               	movwf	?___ftdiv+1,c
  4611  002432  0E00               	movlw	0
  4612  002434  6E0E               	movwf	?___ftdiv+2,c
  4613  002436  0012               	return	
  4614  002438                     l2330:
  4615  002438  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  4616  00243C  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  4617  00243E  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  4618  002440  3410               	rlcf	___ftdiv@f2+1,w,c
  4619  002442  3612               	rlcf	??___ftdiv& (0+255),f,c
  4620  002444  E301               	bnc	u1641
  4621  002446  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  4622  002448                     u1641:
  4623  002448  5012               	movf	??___ftdiv,w,c
  4624  00244A  6E1A               	movwf	___ftdiv@sign,c
  4625  00244C  501A               	movf	___ftdiv@sign,w,c
  4626  00244E  A4D8               	btfss	status,2,c
  4627  002450  D007               	goto	l2336
  4628  002452  0E00               	movlw	0
  4629  002454  6E0C               	movwf	?___ftdiv,c
  4630  002456  0E00               	movlw	0
  4631  002458  6E0D               	movwf	?___ftdiv+1,c
  4632  00245A  0E00               	movlw	0
  4633  00245C  6E0E               	movwf	?___ftdiv+2,c
  4634  00245E  0012               	return	
  4635  002460                     l2336:
  4636  002460  0E00               	movlw	0
  4637  002462  6E16               	movwf	___ftdiv@f3,c
  4638  002464  0E00               	movlw	0
  4639  002466  6E17               	movwf	___ftdiv@f3+1,c
  4640  002468  0E00               	movlw	0
  4641  00246A  6E18               	movwf	___ftdiv@f3+2,c
  4642  00246C  501A               	movf	___ftdiv@sign,w,c
  4643  00246E  0F89               	addlw	137
  4644  002470  5E19               	subwf	___ftdiv@exp,f,c
  4645  002472  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  4646  002476  5011               	movf	___ftdiv@f2+2,w,c
  4647  002478  1A1A               	xorwf	___ftdiv@sign,f,c
  4648  00247A  0E80               	movlw	128
  4649  00247C  161A               	andwf	___ftdiv@sign,f,c
  4650  00247E  8E0D               	bsf	___ftdiv@f1+1,7,c
  4651  002480  0EFF               	movlw	255
  4652  002482  160C               	andwf	___ftdiv@f1,f,c
  4653  002484  0EFF               	movlw	255
  4654  002486  160D               	andwf	___ftdiv@f1+1,f,c
  4655  002488  0E00               	movlw	0
  4656  00248A  160E               	andwf	___ftdiv@f1+2,f,c
  4657  00248C  8E10               	bsf	___ftdiv@f2+1,7,c
  4658  00248E  0EFF               	movlw	255
  4659  002490  160F               	andwf	___ftdiv@f2,f,c
  4660  002492  0EFF               	movlw	255
  4661  002494  1610               	andwf	___ftdiv@f2+1,f,c
  4662  002496  0E00               	movlw	0
  4663  002498  1611               	andwf	___ftdiv@f2+2,f,c
  4664  00249A  0E18               	movlw	24
  4665  00249C  6E15               	movwf	___ftdiv@cntr,c
  4666  00249E                     l2356:
  4667  00249E  90D8               	bcf	status,0,c
  4668  0024A0  3616               	rlcf	___ftdiv@f3,f,c
  4669  0024A2  3617               	rlcf	___ftdiv@f3+1,f,c
  4670  0024A4  3618               	rlcf	___ftdiv@f3+2,f,c
  4671  0024A6  500F               	movf	___ftdiv@f2,w,c
  4672  0024A8  5C0C               	subwf	___ftdiv@f1,w,c
  4673  0024AA  5010               	movf	___ftdiv@f2+1,w,c
  4674  0024AC  580D               	subwfb	___ftdiv@f1+1,w,c
  4675  0024AE  5011               	movf	___ftdiv@f2+2,w,c
  4676  0024B0  580E               	subwfb	___ftdiv@f1+2,w,c
  4677  0024B2  A0D8               	btfss	status,0,c
  4678  0024B4  D007               	goto	l745
  4679  0024B6  500F               	movf	___ftdiv@f2,w,c
  4680  0024B8  5E0C               	subwf	___ftdiv@f1,f,c
  4681  0024BA  5010               	movf	___ftdiv@f2+1,w,c
  4682  0024BC  5A0D               	subwfb	___ftdiv@f1+1,f,c
  4683  0024BE  5011               	movf	___ftdiv@f2+2,w,c
  4684  0024C0  5A0E               	subwfb	___ftdiv@f1+2,f,c
  4685  0024C2  8016               	bsf	___ftdiv@f3,0,c
  4686  0024C4                     l745:
  4687  0024C4  90D8               	bcf	status,0,c
  4688  0024C6  360C               	rlcf	___ftdiv@f1,f,c
  4689  0024C8  360D               	rlcf	___ftdiv@f1+1,f,c
  4690  0024CA  360E               	rlcf	___ftdiv@f1+2,f,c
  4691  0024CC  2E15               	decfsz	___ftdiv@cntr,f,c
  4692  0024CE  D7E7               	goto	l2356
  4693  0024D0  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  4694  0024D4  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4695  0024D8  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4696  0024DC  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  4697  0024E0  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  4698  0024E4  EC48  F013         	call	___ftpack	;wreg free
  4699  0024E8  C001  F00C         	movff	?___ftpack,?___ftdiv
  4700  0024EC  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  4701  0024F0  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  4702  0024F4  0012               	return	
  4703  0024F6                     __end_of___ftdiv:
  4704                           	opt stack 0
  4705                           tblptru	equ	0xFF8
  4706                           tblptrh	equ	0xFF7
  4707                           tblptrl	equ	0xFF6
  4708                           tablat	equ	0xFF5
  4709                           prodh	equ	0xFF4
  4710                           prodl	equ	0xFF3
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           postdec1	equ	0xFE5
  4714                           plusw1	equ	0xFE3
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           indf2	equ	0xFDF
  4718                           postinc2	equ	0xFDE
  4719                           postdec2	equ	0xFDD
  4720                           plusw2	equ	0xFDB
  4721                           fsr2h	equ	0xFDA
  4722                           fsr2l	equ	0xFD9
  4723                           status	equ	0xFD8
  4724                           
  4725 ;; *************** function ___ftpack *****************
  4726 ;; Defined at:
  4727 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  arg             3    0[COMRAM] unsigned um
  4730 ;;  exp             1    3[COMRAM] unsigned char 
  4731 ;;  sign            1    4[COMRAM] unsigned char 
  4732 ;; Auto vars:     Size  Location     Type
  4733 ;;		None
  4734 ;; Return value:  Size  Location     Type
  4735 ;;                  3    0[COMRAM] float 
  4736 ;; Registers used:
  4737 ;;		wreg, status,2, status,0
  4738 ;; Tracked objects:
  4739 ;;		On entry : 0/0
  4740 ;;		On exit  : 0/0
  4741 ;;		Unchanged: 0/0
  4742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4743 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4745 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;Total ram usage:        8 bytes
  4748 ;; Hardware stack levels used:    1
  4749 ;; This function calls:
  4750 ;;		Nothing
  4751 ;; This function is called by:
  4752 ;;		___ftdiv
  4753 ;;		___ftmul
  4754 ;;		___lltoft
  4755 ;;		___lwtoft
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text11
  4760  002690                     __ptext11:
  4761                           	opt stack 0
  4762  002690                     ___ftpack:
  4763                           	opt stack 28
  4764                           
  4765                           ;incstack = 0
  4766  002690  5004               	movf	___ftpack@exp,w,c
  4767  002692  B4D8               	btfsc	status,2,c
  4768  002694  D005               	goto	l2258
  4769  002696  5001               	movf	___ftpack@arg,w,c
  4770  002698  1002               	iorwf	___ftpack@arg+1,w,c
  4771  00269A  1003               	iorwf	___ftpack@arg+2,w,c
  4772  00269C  A4D8               	btfss	status,2,c
  4773  00269E  D00C               	goto	l2264
  4774  0026A0                     l2258:
  4775  0026A0  0E00               	movlw	0
  4776  0026A2  6E01               	movwf	?___ftpack,c
  4777  0026A4  0E00               	movlw	0
  4778  0026A6  6E02               	movwf	?___ftpack+1,c
  4779  0026A8  0E00               	movlw	0
  4780  0026AA  6E03               	movwf	?___ftpack+2,c
  4781  0026AC  0012               	return	
  4782  0026AE                     l2262:
  4783  0026AE  2A04               	incf	___ftpack@exp,f,c
  4784  0026B0  90D8               	bcf	status,0,c
  4785  0026B2  3203               	rrcf	___ftpack@arg+2,f,c
  4786  0026B4  3202               	rrcf	___ftpack@arg+1,f,c
  4787  0026B6  3201               	rrcf	___ftpack@arg,f,c
  4788  0026B8                     l2264:
  4789  0026B8  0E00               	movlw	0
  4790  0026BA  1401               	andwf	___ftpack@arg,w,c
  4791  0026BC  6E06               	movwf	??___ftpack& (0+255),c
  4792  0026BE  0E00               	movlw	0
  4793  0026C0  1402               	andwf	___ftpack@arg+1,w,c
  4794  0026C2  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4795  0026C4  0EFE               	movlw	254
  4796  0026C6  1403               	andwf	___ftpack@arg+2,w,c
  4797  0026C8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4798  0026CA  5006               	movf	??___ftpack,w,c
  4799  0026CC  1007               	iorwf	??___ftpack+1,w,c
  4800  0026CE  1008               	iorwf	??___ftpack+2,w,c
  4801  0026D0  B4D8               	btfsc	status,2,c
  4802  0026D2  D00C               	goto	l2270
  4803  0026D4  D7EC               	goto	l2262
  4804  0026D6                     l2266:
  4805  0026D6  2A04               	incf	___ftpack@exp,f,c
  4806  0026D8  0E01               	movlw	1
  4807  0026DA  2601               	addwf	___ftpack@arg,f,c
  4808  0026DC  0E00               	movlw	0
  4809  0026DE  2202               	addwfc	___ftpack@arg+1,f,c
  4810  0026E0  0E00               	movlw	0
  4811  0026E2  2203               	addwfc	___ftpack@arg+2,f,c
  4812  0026E4  90D8               	bcf	status,0,c
  4813  0026E6  3203               	rrcf	___ftpack@arg+2,f,c
  4814  0026E8  3202               	rrcf	___ftpack@arg+1,f,c
  4815  0026EA  3201               	rrcf	___ftpack@arg,f,c
  4816  0026EC                     l2270:
  4817  0026EC  0E00               	movlw	0
  4818  0026EE  1401               	andwf	___ftpack@arg,w,c
  4819  0026F0  6E06               	movwf	??___ftpack& (0+255),c
  4820  0026F2  0E00               	movlw	0
  4821  0026F4  1402               	andwf	___ftpack@arg+1,w,c
  4822  0026F6  6E07               	movwf	(??___ftpack+1)& (0+255),c
  4823  0026F8  0EFF               	movlw	255
  4824  0026FA  1403               	andwf	___ftpack@arg+2,w,c
  4825  0026FC  6E08               	movwf	(??___ftpack+2)& (0+255),c
  4826  0026FE  5006               	movf	??___ftpack,w,c
  4827  002700  1007               	iorwf	??___ftpack+1,w,c
  4828  002702  1008               	iorwf	??___ftpack+2,w,c
  4829  002704  B4D8               	btfsc	status,2,c
  4830  002706  D006               	goto	l2274
  4831  002708  D7E6               	goto	l2266
  4832  00270A                     l2272:
  4833  00270A  0604               	decf	___ftpack@exp,f,c
  4834  00270C  90D8               	bcf	status,0,c
  4835  00270E  3601               	rlcf	___ftpack@arg,f,c
  4836  002710  3602               	rlcf	___ftpack@arg+1,f,c
  4837  002712  3603               	rlcf	___ftpack@arg+2,f,c
  4838  002714                     l2274:
  4839  002714  BE02               	btfsc	___ftpack@arg+1,7,c
  4840  002716  D003               	goto	l687
  4841  002718  0E02               	movlw	2
  4842  00271A  6004               	cpfslt	___ftpack@exp,c
  4843  00271C  D7F6               	goto	l2272
  4844  00271E                     l687:
  4845  00271E  A004               	btfss	___ftpack@exp,0,c
  4846  002720  9E02               	bcf	___ftpack@arg+1,7,c
  4847  002722  90D8               	bcf	status,0,c
  4848  002724  3204               	rrcf	___ftpack@exp,f,c
  4849  002726  5004               	movf	___ftpack@exp,w,c
  4850  002728  1203               	iorwf	___ftpack@arg+2,f,c
  4851  00272A  5005               	movf	___ftpack@sign,w,c
  4852  00272C  A4D8               	btfss	status,2,c
  4853  00272E  8E03               	bsf	___ftpack@arg+2,7,c
  4854  002730  C001  F001         	movff	___ftpack@arg,?___ftpack
  4855  002734  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  4856  002738  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  4857  00273C  0012               	return	
  4858  00273E                     __end_of___ftpack:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           postinc0	equ	0xFEE
  4867                           wreg	equ	0xFE8
  4868                           postdec1	equ	0xFE5
  4869                           plusw1	equ	0xFE3
  4870                           fsr1h	equ	0xFE2
  4871                           fsr1l	equ	0xFE1
  4872                           indf2	equ	0xFDF
  4873                           postinc2	equ	0xFDE
  4874                           postdec2	equ	0xFDD
  4875                           plusw2	equ	0xFDB
  4876                           fsr2h	equ	0xFDA
  4877                           fsr2l	equ	0xFD9
  4878                           status	equ	0xFD8
  4879                           
  4880 ;; *************** function _initLCD *****************
  4881 ;; Defined at:
  4882 ;;		line 69 in file "lcd.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;		None
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;		None
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      void 
  4889 ;; Registers used:
  4890 ;;		wreg, status,2, status,0, cstack
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;Total ram usage:        1 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    4
  4903 ;; This function calls:
  4904 ;;		_lcdInst
  4905 ;;		_send_byte
  4906 ;;		_send_nibble
  4907 ;; This function is called by:
  4908 ;;		_main
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text12
  4913  0029D0                     __ptext12:
  4914                           	opt stack 0
  4915  0029D0                     _initLCD:
  4916                           	opt stack 26
  4917                           
  4918                           ;lcd.c: 70: _delay((unsigned long)((15)*(40000000/4000.0)));
  4919                           
  4920                           ;incstack = 0
  4921  0029D0  0EC3               	movlw	195
  4922  0029D2  6E05               	movwf	??_initLCD& (0+255),c
  4923  0029D4  0ECD               	movlw	205
  4924  0029D6                     u3057:
  4925  0029D6  2EE8               	decfsz	wreg,f,c
  4926  0029D8  D7FE               	bra	u3057
  4927  0029DA  2E05               	decfsz	??_initLCD& (0+255),f,c
  4928  0029DC  D7FC               	bra	u3057
  4929  0029DE  F000               	nop	
  4930                           
  4931                           ;lcd.c: 72: LATDbits.LATD2 = 0;
  4932  0029E0  948C               	bcf	3980,2,c	;volatile
  4933                           
  4934                           ;lcd.c: 74: send_nibble(0b0011);
  4935  0029E2  0E03               	movlw	3
  4936  0029E4  ECAB  F016         	call	_send_nibble
  4937                           
  4938                           ;lcd.c: 75: _delay((unsigned long)((5)*(40000000/4000.0)));
  4939  0029E8  0E41               	movlw	65
  4940  0029EA  6E05               	movwf	??_initLCD& (0+255),c
  4941  0029EC  0EEE               	movlw	238
  4942  0029EE                     u3067:
  4943  0029EE  2EE8               	decfsz	wreg,f,c
  4944  0029F0  D7FE               	bra	u3067
  4945  0029F2  2E05               	decfsz	??_initLCD& (0+255),f,c
  4946  0029F4  D7FC               	bra	u3067
  4947  0029F6  D000               	nop2	
  4948                           
  4949                           ;lcd.c: 76: send_nibble(0b0011);
  4950  0029F8  0E03               	movlw	3
  4951  0029FA  ECAB  F016         	call	_send_nibble
  4952                           
  4953                           ;lcd.c: 77: _delay((unsigned long)((150)*(40000000/4000000.0)));
  4954  0029FE  0ED6               	movlw	214
  4955  002A00                     u3077:
  4956  002A00  D000               	nop2	
  4957  002A02  D000               	nop2	
  4958  002A04  2EE8               	decfsz	wreg,f,c
  4959  002A06  D7FC               	bra	u3077
  4960  002A08  D000               	nop2	
  4961                           
  4962                           ;lcd.c: 78: send_byte(0b00110010);
  4963  002A0A  0E32               	movlw	50
  4964  002A0C  ECB6  F016         	call	_send_byte
  4965                           
  4966                           ;lcd.c: 80: send_byte(0b00101000);
  4967  002A10  0E28               	movlw	40
  4968  002A12  ECB6  F016         	call	_send_byte
  4969                           
  4970                           ;lcd.c: 81: send_byte(0b00001000);
  4971  002A16  0E08               	movlw	8
  4972  002A18  ECB6  F016         	call	_send_byte
  4973                           
  4974                           ;lcd.c: 82: send_byte(0b00000001);
  4975  002A1C  0E01               	movlw	1
  4976  002A1E  ECB6  F016         	call	_send_byte
  4977                           
  4978                           ;lcd.c: 83: _delay((unsigned long)((5)*(40000000/4000.0)));
  4979  002A22  0E41               	movlw	65
  4980  002A24  6E05               	movwf	??_initLCD& (0+255),c
  4981  002A26  0EEE               	movlw	238
  4982  002A28                     u3087:
  4983  002A28  2EE8               	decfsz	wreg,f,c
  4984  002A2A  D7FE               	bra	u3087
  4985  002A2C  2E05               	decfsz	??_initLCD& (0+255),f,c
  4986  002A2E  D7FC               	bra	u3087
  4987  002A30  D000               	nop2	
  4988                           
  4989                           ;lcd.c: 84: send_byte(0b00000110);
  4990  002A32  0E06               	movlw	6
  4991  002A34  ECB6  F016         	call	_send_byte
  4992                           
  4993                           ;lcd.c: 87: { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  4994  002A38  0E0F               	movlw	15
  4995  002A3A  ECC5  F016         	call	_lcdInst
  4996  002A3E  0012               	return		;funcret
  4997  002A40                     __end_of_initLCD:
  4998                           	opt stack 0
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           postinc0	equ	0xFEE
  5006                           wreg	equ	0xFE8
  5007                           postdec1	equ	0xFE5
  5008                           plusw1	equ	0xFE3
  5009                           fsr1h	equ	0xFE2
  5010                           fsr1l	equ	0xFE1
  5011                           indf2	equ	0xFDF
  5012                           postinc2	equ	0xFDE
  5013                           postdec2	equ	0xFDD
  5014                           plusw2	equ	0xFDB
  5015                           fsr2h	equ	0xFDA
  5016                           fsr2l	equ	0xFD9
  5017                           status	equ	0xFD8
  5018                           
  5019 ;; *************** function _lcdInst *****************
  5020 ;; Defined at:
  5021 ;;		line 64 in file "lcd.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  data            1    wreg     unsigned char 
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  data            1    3[COMRAM] unsigned char 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, status,2, status,0, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;Total ram usage:        1 bytes
  5040 ;; Hardware stack levels used:    1
  5041 ;; Hardware stack levels required when called:    3
  5042 ;; This function calls:
  5043 ;;		_send_byte
  5044 ;; This function is called by:
  5045 ;;		_main
  5046 ;;		_initLCD
  5047 ;;		_lcd_shift_cursor
  5048 ;;		_lcd_shift_display
  5049 ;; This function uses a non-reentrant model
  5050 ;;
  5051                           
  5052                           	psect	text13
  5053  002D8A                     __ptext13:
  5054                           	opt stack 0
  5055  002D8A                     _lcdInst:
  5056                           	opt stack 27
  5057                           
  5058                           ;incstack = 0
  5059                           ;lcdInst@data stored from wreg
  5060  002D8A  6E04               	movwf	lcdInst@data,c
  5061                           
  5062                           ;lcd.c: 65: LATDbits.LATD2 = 0;
  5063  002D8C  948C               	bcf	3980,2,c	;volatile
  5064                           
  5065                           ;lcd.c: 66: send_byte(data);
  5066  002D8E  5004               	movf	lcdInst@data,w,c
  5067  002D90  ECB6  F016         	call	_send_byte
  5068  002D94  0012               	return		;funcret
  5069  002D96                     __end_of_lcdInst:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           postdec1	equ	0xFE5
  5080                           plusw1	equ	0xFE3
  5081                           fsr1h	equ	0xFE2
  5082                           fsr1l	equ	0xFE1
  5083                           indf2	equ	0xFDF
  5084                           postinc2	equ	0xFDE
  5085                           postdec2	equ	0xFDD
  5086                           plusw2	equ	0xFDB
  5087                           fsr2h	equ	0xFDA
  5088                           fsr2l	equ	0xFD9
  5089                           status	equ	0xFD8
  5090                           
  5091 ;; *************** function _send_byte *****************
  5092 ;; Defined at:
  5093 ;;		line 55 in file "lcd.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;  data            1    wreg     unsigned char 
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;  data            1    2[COMRAM] unsigned char 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  1    wreg      void 
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;Total ram usage:        1 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:    2
  5114 ;; This function calls:
  5115 ;;		_send_nibble
  5116 ;; This function is called by:
  5117 ;;		_lcdInst
  5118 ;;		_initLCD
  5119 ;;		_putch
  5120 ;; This function uses a non-reentrant model
  5121 ;;
  5122                           
  5123                           	psect	text14
  5124  002D6C                     __ptext14:
  5125                           	opt stack 0
  5126  002D6C                     _send_byte:
  5127                           	opt stack 26
  5128                           
  5129                           ;incstack = 0
  5130                           ;send_byte@data stored from wreg
  5131  002D6C  6E03               	movwf	send_byte@data,c
  5132                           
  5133                           ;lcd.c: 57: send_nibble(data >> 4);
  5134  002D6E  3803               	swapf	send_byte@data,w,c
  5135  002D70  0B0F               	andlw	15
  5136  002D72  ECAB  F016         	call	_send_nibble
  5137                           
  5138                           ;lcd.c: 60: send_nibble(data);
  5139  002D76  5003               	movf	send_byte@data,w,c
  5140  002D78  ECAB  F016         	call	_send_nibble
  5141  002D7C  0012               	return		;funcret
  5142  002D7E                     __end_of_send_byte:
  5143                           	opt stack 0
  5144                           tblptru	equ	0xFF8
  5145                           tblptrh	equ	0xFF7
  5146                           tblptrl	equ	0xFF6
  5147                           tablat	equ	0xFF5
  5148                           prodh	equ	0xFF4
  5149                           prodl	equ	0xFF3
  5150                           postinc0	equ	0xFEE
  5151                           wreg	equ	0xFE8
  5152                           postdec1	equ	0xFE5
  5153                           plusw1	equ	0xFE3
  5154                           fsr1h	equ	0xFE2
  5155                           fsr1l	equ	0xFE1
  5156                           indf2	equ	0xFDF
  5157                           postinc2	equ	0xFDE
  5158                           postdec2	equ	0xFDD
  5159                           plusw2	equ	0xFDB
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function _send_nibble *****************
  5165 ;; Defined at:
  5166 ;;		line 44 in file "lcd.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  data            1    wreg     unsigned char 
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;  data            1    1[COMRAM] unsigned char 
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      void 
  5173 ;; Registers used:
  5174 ;;		wreg, status,2, status,0, cstack
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;Total ram usage:        1 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:    1
  5187 ;; This function calls:
  5188 ;;		_pulse_e
  5189 ;; This function is called by:
  5190 ;;		_send_byte
  5191 ;;		_initLCD
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text15
  5196  002D56                     __ptext15:
  5197                           	opt stack 0
  5198  002D56                     _send_nibble:
  5199                           	opt stack 26
  5200                           
  5201                           ;incstack = 0
  5202                           ;send_nibble@data stored from wreg
  5203  002D56  6E02               	movwf	send_nibble@data,c
  5204                           
  5205                           ;lcd.c: 46: LATD = (unsigned char)(LATD & 0x0F);
  5206  002D58  508C               	movf	3980,w,c	;volatile
  5207  002D5A  0B0F               	andlw	15
  5208  002D5C  6E8C               	movwf	3980,c	;volatile
  5209                           
  5210                           ;lcd.c: 47: LATD = (unsigned char)((data << 4) | LATD);
  5211  002D5E  3802               	swapf	send_nibble@data,w,c
  5212  002D60  0BF0               	andlw	240
  5213  002D62  108C               	iorwf	3980,w,c	;volatile
  5214  002D64  6E8C               	movwf	3980,c	;volatile
  5215                           
  5216                           ;lcd.c: 48: pulse_e();
  5217  002D66  EC52  F016         	call	_pulse_e	;wreg free
  5218  002D6A  0012               	return		;funcret
  5219  002D6C                     __end_of_send_nibble:
  5220                           	opt stack 0
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           postinc0	equ	0xFEE
  5228                           wreg	equ	0xFE8
  5229                           postdec1	equ	0xFE5
  5230                           plusw1	equ	0xFE3
  5231                           fsr1h	equ	0xFE2
  5232                           fsr1l	equ	0xFE1
  5233                           indf2	equ	0xFDF
  5234                           postinc2	equ	0xFDE
  5235                           postdec2	equ	0xFDD
  5236                           plusw2	equ	0xFDB
  5237                           fsr2h	equ	0xFDA
  5238                           fsr2l	equ	0xFD9
  5239                           status	equ	0xFD8
  5240                           
  5241 ;; *************** function _pulse_e *****************
  5242 ;; Defined at:
  5243 ;;		line 28 in file "lcd.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;		None
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;  interruptSta    1    0[COMRAM] unsigned char 
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      void 
  5250 ;; Registers used:
  5251 ;;		wreg
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;Total ram usage:        1 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_send_nibble
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text16
  5271  002CA4                     __ptext16:
  5272                           	opt stack 0
  5273  002CA4                     _pulse_e:
  5274                           	opt stack 26
  5275                           
  5276                           ;lcd.c: 29: unsigned char interruptState = INTCONbits.GIE;
  5277                           
  5278                           ;incstack = 0
  5279  002CA4  0E00               	movlw	0
  5280  002CA6  BEF2               	btfsc	intcon,7,c	;volatile
  5281  002CA8  0E01               	movlw	1
  5282  002CAA  6E01               	movwf	pulse_e@interruptState,c
  5283                           
  5284                           ;lcd.c: 30: (INTCONbits.GIE = 0);
  5285  002CAC  9EF2               	bcf	intcon,7,c	;volatile
  5286                           
  5287                           ;lcd.c: 31: LATDbits.LATD3 = 1;
  5288  002CAE  868C               	bsf	3980,3,c	;volatile
  5289                           
  5290                           ;lcd.c: 34: _delay((unsigned long)((25)*(40000000/4000000.0)));
  5291  002CB0  0E53               	movlw	83
  5292  002CB2                     u3097:
  5293  002CB2  2EE8               	decfsz	wreg,f,c
  5294  002CB4  D7FE               	bra	u3097
  5295  002CB6  F000               	nop	
  5296                           
  5297                           ;lcd.c: 35: LATDbits.LATD3 = 0;
  5298  002CB8  968C               	bcf	3980,3,c	;volatile
  5299                           
  5300                           ;lcd.c: 36: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5301  002CBA  0EC8               	movlw	200
  5302  002CBC                     u3107:
  5303  002CBC  D000               	nop2	
  5304  002CBE  2EE8               	decfsz	wreg,f,c
  5305  002CC0  D7FD               	bra	u3107
  5306                           
  5307                           ;lcd.c: 37: INTCONbits.GIE = interruptState;
  5308  002CC2  B001               	btfsc	pulse_e@interruptState,0,c
  5309  002CC4  D002               	bra	u1485
  5310  002CC6  9EF2               	bcf	intcon,7,c	;volatile
  5311  002CC8  D001               	bra	u1486
  5312  002CCA                     u1485:
  5313  002CCA  8EF2               	bsf	intcon,7,c	;volatile
  5314  002CCC                     u1486:
  5315  002CCC  0012               	return		;funcret
  5316  002CCE                     __end_of_pulse_e:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           postinc0	equ	0xFEE
  5326                           wreg	equ	0xFE8
  5327                           postdec1	equ	0xFE5
  5328                           plusw1	equ	0xFE3
  5329                           fsr1h	equ	0xFE2
  5330                           fsr1l	equ	0xFE1
  5331                           indf2	equ	0xFDF
  5332                           postinc2	equ	0xFDE
  5333                           postdec2	equ	0xFDD
  5334                           plusw2	equ	0xFDB
  5335                           fsr2h	equ	0xFDA
  5336                           fsr2l	equ	0xFD9
  5337                           status	equ	0xFD8
  5338                           
  5339 ;; *************** function _average *****************
  5340 ;; Defined at:
  5341 ;;		line 35 in file "main.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;  array           2   13[COMRAM] PTR unsigned char 
  5344 ;;		 -> main@readBuffer(512), 
  5345 ;;  n               2   15[COMRAM] unsigned short 
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;  sum             4   18[COMRAM] unsigned long 
  5348 ;;  idx             2   22[COMRAM] unsigned short 
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      unsigned char 
  5351 ;; Registers used:
  5352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5359 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5360 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5361 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5362 ;;Total ram usage:       11 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    1
  5365 ;; This function calls:
  5366 ;;		___lldiv
  5367 ;; This function is called by:
  5368 ;;		_main
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text17
  5373  002AAC                     __ptext17:
  5374                           	opt stack 0
  5375  002AAC                     _average:
  5376                           	opt stack 29
  5377                           
  5378                           ;main.c: 36: unsigned short idx = 0;
  5379                           
  5380                           ;incstack = 0
  5381  002AAC  0E00               	movlw	0
  5382  002AAE  6E18               	movwf	average@idx+1,c
  5383  002AB0  0E00               	movlw	0
  5384  002AB2  6E17               	movwf	average@idx,c
  5385                           
  5386                           ;main.c: 37: unsigned long sum = 0;
  5387  002AB4  0E00               	movlw	0
  5388  002AB6  6E13               	movwf	average@sum,c
  5389  002AB8  0E00               	movlw	0
  5390  002ABA  6E14               	movwf	average@sum+1,c
  5391  002ABC  0E00               	movlw	0
  5392  002ABE  6E15               	movwf	average@sum+2,c
  5393  002AC0  0E00               	movlw	0
  5394  002AC2  6E16               	movwf	average@sum+3,c
  5395                           
  5396                           ;main.c: 38: while(idx < n){
  5397  002AC4  D010               	goto	l2522
  5398  002AC6                     l2518:
  5399                           
  5400                           ;main.c: 39: sum += array[idx];
  5401  002AC6  5017               	movf	average@idx,w,c
  5402  002AC8  240E               	addwf	average@array,w,c
  5403  002ACA  6ED9               	movwf	fsr2l,c
  5404  002ACC  5018               	movf	average@idx+1,w,c
  5405  002ACE  200F               	addwfc	average@array+1,w,c
  5406  002AD0  6EDA               	movwf	fsr2h,c
  5407  002AD2  50DF               	movf	indf2,w,c
  5408  002AD4  6E12               	movwf	??_average& (0+255),c
  5409  002AD6  5012               	movf	??_average,w,c
  5410  002AD8  2613               	addwf	average@sum,f,c
  5411  002ADA  0E00               	movlw	0
  5412  002ADC  2214               	addwfc	average@sum+1,f,c
  5413  002ADE  2215               	addwfc	average@sum+2,f,c
  5414  002AE0  2216               	addwfc	average@sum+3,f,c
  5415                           
  5416                           ;main.c: 40: idx++;
  5417  002AE2  4A17               	infsnz	average@idx,f,c
  5418  002AE4  2A18               	incf	average@idx+1,f,c
  5419  002AE6                     l2522:
  5420  002AE6  5010               	movf	average@n,w,c
  5421  002AE8  5C17               	subwf	average@idx,w,c
  5422  002AEA  5011               	movf	average@n+1,w,c
  5423  002AEC  5818               	subwfb	average@idx+1,w,c
  5424  002AEE  A0D8               	btfss	status,0,c
  5425  002AF0  D7EA               	goto	l2518
  5426                           
  5427                           ;main.c: 41: }
  5428                           ;main.c: 42: return sum / n;
  5429  002AF2  C013  F001         	movff	average@sum,___lldiv@dividend
  5430  002AF6  C014  F002         	movff	average@sum+1,___lldiv@dividend+1
  5431  002AFA  C015  F003         	movff	average@sum+2,___lldiv@dividend+2
  5432  002AFE  C016  F004         	movff	average@sum+3,___lldiv@dividend+3
  5433  002B02  C010  F005         	movff	average@n,___lldiv@divisor
  5434  002B06  C011  F006         	movff	average@n+1,___lldiv@divisor+1
  5435  002B0A  6A07               	clrf	___lldiv@divisor+2,c
  5436  002B0C  6A08               	clrf	___lldiv@divisor+3,c
  5437  002B0E  EC29  F014         	call	___lldiv	;wreg free
  5438  002B12  5001               	movf	?___lldiv,w,c
  5439  002B14  0012               	return	
  5440  002B16                     __end_of_average:
  5441                           	opt stack 0
  5442                           tblptru	equ	0xFF8
  5443                           tblptrh	equ	0xFF7
  5444                           tblptrl	equ	0xFF6
  5445                           tablat	equ	0xFF5
  5446                           prodh	equ	0xFF4
  5447                           prodl	equ	0xFF3
  5448                           intcon	equ	0xFF2
  5449                           postinc0	equ	0xFEE
  5450                           wreg	equ	0xFE8
  5451                           postdec1	equ	0xFE5
  5452                           plusw1	equ	0xFE3
  5453                           fsr1h	equ	0xFE2
  5454                           fsr1l	equ	0xFE1
  5455                           indf2	equ	0xFDF
  5456                           postinc2	equ	0xFDE
  5457                           postdec2	equ	0xFDD
  5458                           plusw2	equ	0xFDB
  5459                           fsr2h	equ	0xFDA
  5460                           fsr2l	equ	0xFD9
  5461                           status	equ	0xFD8
  5462                           
  5463 ;; *************** function ___lldiv *****************
  5464 ;; Defined at:
  5465 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  5466 ;; Parameters:    Size  Location     Type
  5467 ;;  dividend        4    0[COMRAM] unsigned long 
  5468 ;;  divisor         4    4[COMRAM] unsigned long 
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;  quotient        4    8[COMRAM] unsigned long 
  5471 ;;  counter         1   12[COMRAM] unsigned char 
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  4    0[COMRAM] unsigned long 
  5474 ;; Registers used:
  5475 ;;		wreg, status,2, status,0
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5481 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;Total ram usage:       13 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_average
  5491 ;;		_main
  5492 ;;		_printf
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text18
  5497  002852                     __ptext18:
  5498                           	opt stack 0
  5499  002852                     ___lldiv:
  5500                           	opt stack 29
  5501                           
  5502                           ;incstack = 0
  5503  002852  0E00               	movlw	0
  5504  002854  6E09               	movwf	___lldiv@quotient,c
  5505  002856  0E00               	movlw	0
  5506  002858  6E0A               	movwf	___lldiv@quotient+1,c
  5507  00285A  0E00               	movlw	0
  5508  00285C  6E0B               	movwf	___lldiv@quotient+2,c
  5509  00285E  0E00               	movlw	0
  5510  002860  6E0C               	movwf	___lldiv@quotient+3,c
  5511  002862  5005               	movf	___lldiv@divisor,w,c
  5512  002864  1006               	iorwf	___lldiv@divisor+1,w,c
  5513  002866  1007               	iorwf	___lldiv@divisor+2,w,c
  5514  002868  1008               	iorwf	___lldiv@divisor+3,w,c
  5515  00286A  B4D8               	btfsc	status,2,c
  5516  00286C  D02A               	goto	l812
  5517  00286E  0E01               	movlw	1
  5518  002870  6E0D               	movwf	___lldiv@counter,c
  5519  002872  D006               	goto	l2472
  5520  002874                     l2470:
  5521  002874  90D8               	bcf	status,0,c
  5522  002876  3605               	rlcf	___lldiv@divisor,f,c
  5523  002878  3606               	rlcf	___lldiv@divisor+1,f,c
  5524  00287A  3607               	rlcf	___lldiv@divisor+2,f,c
  5525  00287C  3608               	rlcf	___lldiv@divisor+3,f,c
  5526  00287E  2A0D               	incf	___lldiv@counter,f,c
  5527  002880                     l2472:
  5528  002880  AE08               	btfss	___lldiv@divisor+3,7,c
  5529  002882  D7F8               	goto	l2470
  5530  002884                     l2474:
  5531  002884  90D8               	bcf	status,0,c
  5532  002886  3609               	rlcf	___lldiv@quotient,f,c
  5533  002888  360A               	rlcf	___lldiv@quotient+1,f,c
  5534  00288A  360B               	rlcf	___lldiv@quotient+2,f,c
  5535  00288C  360C               	rlcf	___lldiv@quotient+3,f,c
  5536  00288E  5005               	movf	___lldiv@divisor,w,c
  5537  002890  5C01               	subwf	___lldiv@dividend,w,c
  5538  002892  5006               	movf	___lldiv@divisor+1,w,c
  5539  002894  5802               	subwfb	___lldiv@dividend+1,w,c
  5540  002896  5007               	movf	___lldiv@divisor+2,w,c
  5541  002898  5803               	subwfb	___lldiv@dividend+2,w,c
  5542  00289A  5008               	movf	___lldiv@divisor+3,w,c
  5543  00289C  5804               	subwfb	___lldiv@dividend+3,w,c
  5544  00289E  A0D8               	btfss	status,0,c
  5545  0028A0  D009               	goto	l2482
  5546  0028A2  5005               	movf	___lldiv@divisor,w,c
  5547  0028A4  5E01               	subwf	___lldiv@dividend,f,c
  5548  0028A6  5006               	movf	___lldiv@divisor+1,w,c
  5549  0028A8  5A02               	subwfb	___lldiv@dividend+1,f,c
  5550  0028AA  5007               	movf	___lldiv@divisor+2,w,c
  5551  0028AC  5A03               	subwfb	___lldiv@dividend+2,f,c
  5552  0028AE  5008               	movf	___lldiv@divisor+3,w,c
  5553  0028B0  5A04               	subwfb	___lldiv@dividend+3,f,c
  5554  0028B2  8009               	bsf	___lldiv@quotient,0,c
  5555  0028B4                     l2482:
  5556  0028B4  90D8               	bcf	status,0,c
  5557  0028B6  3208               	rrcf	___lldiv@divisor+3,f,c
  5558  0028B8  3207               	rrcf	___lldiv@divisor+2,f,c
  5559  0028BA  3206               	rrcf	___lldiv@divisor+1,f,c
  5560  0028BC  3205               	rrcf	___lldiv@divisor,f,c
  5561  0028BE  2E0D               	decfsz	___lldiv@counter,f,c
  5562  0028C0  D7E1               	goto	l2474
  5563  0028C2                     l812:
  5564  0028C2  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5565  0028C6  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5566  0028CA  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5567  0028CE  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5568  0028D2  0012               	return		;funcret
  5569  0028D4                     __end_of___lldiv:
  5570                           	opt stack 0
  5571                           tblptru	equ	0xFF8
  5572                           tblptrh	equ	0xFF7
  5573                           tblptrl	equ	0xFF6
  5574                           tablat	equ	0xFF5
  5575                           prodh	equ	0xFF4
  5576                           prodl	equ	0xFF3
  5577                           intcon	equ	0xFF2
  5578                           postinc0	equ	0xFEE
  5579                           wreg	equ	0xFE8
  5580                           postdec1	equ	0xFE5
  5581                           plusw1	equ	0xFE3
  5582                           fsr1h	equ	0xFE2
  5583                           fsr1l	equ	0xFE1
  5584                           indf2	equ	0xFDF
  5585                           postinc2	equ	0xFDE
  5586                           postdec2	equ	0xFDD
  5587                           plusw2	equ	0xFDB
  5588                           fsr2h	equ	0xFDA
  5589                           fsr2l	equ	0xFD9
  5590                           status	equ	0xFD8
  5591                           
  5592 ;; *************** function _SD_SingleBlockWrite *****************
  5593 ;; Defined at:
  5594 ;;		line 104 in file "SD_PIC.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;  block           4   10[COMRAM] unsigned long 
  5597 ;;  arr             2   14[COMRAM] PTR unsigned char 
  5598 ;;		 -> writeBuffer(512), 
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;  i               2   18[COMRAM] unsigned short 
  5601 ;;  response        1   17[COMRAM] unsigned char 
  5602 ;; Return value:  Size  Location     Type
  5603 ;;                  1    wreg      unsigned char 
  5604 ;; Registers used:
  5605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5606 ;; Tracked objects:
  5607 ;;		On entry : 0/0
  5608 ;;		On exit  : 0/0
  5609 ;;		Unchanged: 0/0
  5610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5611 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5612 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5614 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5615 ;;Total ram usage:       10 bytes
  5616 ;; Hardware stack levels used:    1
  5617 ;; Hardware stack levels required when called:    3
  5618 ;; This function calls:
  5619 ;;		_SD_Command
  5620 ;;		_SD_SendDummyBytes
  5621 ;;		_spiReceive
  5622 ;;		_spiSend
  5623 ;;		_spiTransfer
  5624 ;; This function is called by:
  5625 ;;		_main
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text19
  5630  0024F6                     __ptext19:
  5631                           	opt stack 0
  5632  0024F6                     _SD_SingleBlockWrite:
  5633                           	opt stack 27
  5634                           
  5635                           ;SD_PIC.c: 109: if(SDCard.Type == TYPE_SDSC){
  5636                           
  5637                           ;incstack = 0
  5638  0024F6  0100               	movlb	0	; () banked
  5639  0024F8  5181               	movf	(_SDCard+1)& (0+255),w,b
  5640  0024FA  A4D8               	btfss	status,2,c
  5641  0024FC  D008               	goto	l2884
  5642                           
  5643                           ; BSR set to: 0
  5644                           ;SD_PIC.c: 111: block <<= 9;
  5645  0024FE  0E09               	movlw	9
  5646  002500                     u2405:
  5647  002500  90D8               	bcf	status,0,c
  5648  002502  360B               	rlcf	SD_SingleBlockWrite@block,f,c
  5649  002504  360C               	rlcf	SD_SingleBlockWrite@block+1,f,c
  5650  002506  360D               	rlcf	SD_SingleBlockWrite@block+2,f,c
  5651  002508  360E               	rlcf	SD_SingleBlockWrite@block+3,f,c
  5652  00250A  2EE8               	decfsz	wreg,f,c
  5653  00250C  D7F9               	goto	u2405
  5654  00250E                     l2884:
  5655  00250E  C00B  F004         	movff	SD_SingleBlockWrite@block,SD_Command@arg
  5656  002512  C00C  F005         	movff	SD_SingleBlockWrite@block+1,SD_Command@arg+1
  5657  002516  C00D  F006         	movff	SD_SingleBlockWrite@block+2,SD_Command@arg+2
  5658  00251A  C00E  F007         	movff	SD_SingleBlockWrite@block+3,SD_Command@arg+3
  5659  00251E  0E3D               	movlw	low _CMD24
  5660  002520  6EF6               	movwf	tblptrl,c
  5661  002522                     	if	1	;There is more than 1 active tblptr byte
  5662  002522  0E10               	movlw	high _CMD24
  5663  002524  6EF7               	movwf	tblptrh,c
  5664  002526                     	endif
  5665  002526                     	if	0	;There are less than 3 active tblptr bytes
  5666  002526                     	endif
  5667  002526  0008               	tblrd		*
  5668  002528  50F5               	movf	tablat,w,c
  5669  00252A  ECA9  F014         	call	_SD_Command
  5670  00252E  6E11               	movwf	??_SD_SingleBlockWrite& (0+255),c
  5671  002530  0E33               	movlw	low _R1_READY_STATE
  5672  002532  6EF6               	movwf	tblptrl,c
  5673  002534                     	if	1	;There is more than 1 active tblptr byte
  5674  002534  0E10               	movlw	high _R1_READY_STATE
  5675  002536  6EF7               	movwf	tblptrh,c
  5676  002538                     	endif
  5677  002538                     	if	0	;There are less than 3 active tblptr bytes
  5678  002538                     	endif
  5679  002538  0008               	tblrd		*
  5680  00253A  50F5               	movf	tablat,w,c
  5681  00253C  1811               	xorwf	??_SD_SingleBlockWrite,w,c
  5682  00253E  A4D8               	btfss	status,2,c
  5683  002540  D7E6               	goto	l2884
  5684                           
  5685                           ;SD_PIC.c: 118: LATEbits.LATE2 = 0;
  5686  002542  948D               	bcf	3981,2,c	;volatile
  5687                           
  5688                           ;SD_PIC.c: 119: spiSend(START_BLOCK);
  5689  002544  0E30               	movlw	low _START_BLOCK
  5690  002546  6EF6               	movwf	tblptrl,c
  5691  002548                     	if	1	;There is more than 1 active tblptr byte
  5692  002548  0E10               	movlw	high _START_BLOCK
  5693  00254A  6EF7               	movwf	tblptrh,c
  5694  00254C                     	endif
  5695  00254C                     	if	0	;There are less than 3 active tblptr bytes
  5696  00254C                     	endif
  5697  00254C  0008               	tblrd		*
  5698  00254E  50F5               	movf	tablat,w,c
  5699  002550  ECCB  F016         	call	_spiSend
  5700                           
  5701                           ;SD_PIC.c: 122: for(unsigned short i = 0; i < 512; i++){
  5702  002554  0E00               	movlw	0
  5703  002556  6E14               	movwf	SD_SingleBlockWrite@i+1,c
  5704  002558  0E00               	movlw	0
  5705  00255A  6E13               	movwf	SD_SingleBlockWrite@i,c
  5706  00255C                     l2890:
  5707  00255C  0E02               	movlw	2
  5708  00255E  5C14               	subwf	SD_SingleBlockWrite@i+1,w,c
  5709  002560  B0D8               	btfsc	status,0,c
  5710  002562  D00C               	goto	l2900
  5711                           
  5712                           ;SD_PIC.c: 123: spiTransfer(arr[i]);
  5713  002564  5013               	movf	SD_SingleBlockWrite@i,w,c
  5714  002566  240F               	addwf	SD_SingleBlockWrite@arr,w,c
  5715  002568  6ED9               	movwf	fsr2l,c
  5716  00256A  5014               	movf	SD_SingleBlockWrite@i+1,w,c
  5717  00256C  2010               	addwfc	SD_SingleBlockWrite@arr+1,w,c
  5718  00256E  6EDA               	movwf	fsr2h,c
  5719  002570  50DF               	movf	indf2,w,c
  5720  002572  EC8D  F016         	call	_spiTransfer
  5721  002576  4A13               	infsnz	SD_SingleBlockWrite@i,f,c
  5722  002578  2A14               	incf	SD_SingleBlockWrite@i+1,f,c
  5723  00257A  D7F0               	goto	l2890
  5724  00257C                     l2900:
  5725                           
  5726                           ;SD_PIC.c: 124: }
  5727                           ;SD_PIC.c: 127: SD_SendDummyBytes(2);
  5728  00257C  0E02               	movlw	2
  5729  00257E  EC9F  F016         	call	_SD_SendDummyBytes
  5730                           
  5731                           ;SD_PIC.c: 130: unsigned char response = (spiReceive() >> 1) & 0x0F;
  5732  002582  ECD0  F016         	call	_spiReceive	;wreg free
  5733  002586  6E11               	movwf	??_SD_SingleBlockWrite& (0+255),c
  5734  002588  90D8               	bcf	status,0,c
  5735  00258A  3011               	rrcf	??_SD_SingleBlockWrite,w,c
  5736  00258C  0B0F               	andlw	15
  5737  00258E  6E12               	movwf	SD_SingleBlockWrite@response,c
  5738                           
  5739                           ;SD_PIC.c: 131: LATEbits.LATE2 = 1;
  5740  002590  848D               	bsf	3981,2,c	;volatile
  5741                           
  5742                           ;SD_PIC.c: 132: switch(response){
  5743  002592  D015               	goto	l2924
  5744  002594                     l201:
  5745                           
  5746                           ;SD_PIC.c: 137: SDCard.write.lastBlockWritten = block;
  5747  002594  C00B  F09C         	movff	SD_SingleBlockWrite@block,_SDCard+28
  5748  002598  C00C  F09D         	movff	SD_SingleBlockWrite@block+1,_SDCard+29
  5749  00259C  C00D  F09E         	movff	SD_SingleBlockWrite@block+2,_SDCard+30
  5750  0025A0  C00E  F09F         	movff	SD_SingleBlockWrite@block+3,_SDCard+31
  5751  0025A4                     l2904:
  5752  0025A4  ECD0  F016         	call	_spiReceive	;wreg free
  5753  0025A8  0900               	iorlw	0
  5754  0025AA  B4D8               	btfsc	status,2,c
  5755  0025AC  D7FB               	goto	l2904
  5756                           
  5757                           ;SD_PIC.c: 141: return 1;
  5758  0025AE  0E01               	movlw	1
  5759  0025B0  0012               	return	
  5760  0025B2                     l2910:
  5761                           
  5762                           ;SD_PIC.c: 144: return 0;
  5763  0025B2  0E00               	movlw	0
  5764  0025B4  0012               	return	
  5765  0025B6                     l2914:
  5766                           
  5767                           ;SD_PIC.c: 147: return 0;
  5768  0025B6  0E00               	movlw	0
  5769  0025B8  0012               	return	
  5770  0025BA                     l2918:
  5771                           
  5772                           ;SD_PIC.c: 149: return 0;
  5773  0025BA  0E00               	movlw	0
  5774                           
  5775                           ;SD_PIC.c: 150: }
  5776  0025BC  0012               	return	
  5777  0025BE                     l2924:
  5778  0025BE  5012               	movf	SD_SingleBlockWrite@response,w,c
  5779                           
  5780                           ; Switch size 1, requested type "space"
  5781                           ; Number of cases is 3, Range of values is 2 to 6
  5782                           ; switch strategies available:
  5783                           ; Name         Instructions Cycles
  5784                           ; simple_byte           10     6 (average)
  5785                           ;	Chosen strategy is simple_byte
  5786  0025C0  0A02               	xorlw	2	; case 2
  5787  0025C2  B4D8               	btfsc	status,2,c
  5788  0025C4  D7E7               	goto	l201
  5789  0025C6  0A07               	xorlw	7	; case 5
  5790  0025C8  B4D8               	btfsc	status,2,c
  5791  0025CA  D7F3               	goto	l2910
  5792  0025CC  0A03               	xorlw	3	; case 6
  5793  0025CE  B4D8               	btfsc	status,2,c
  5794  0025D0  D7F2               	goto	l2914
  5795  0025D2  D7F3               	goto	l2918
  5796  0025D4                     __end_of_SD_SingleBlockWrite:
  5797                           	opt stack 0
  5798                           tblptru	equ	0xFF8
  5799                           tblptrh	equ	0xFF7
  5800                           tblptrl	equ	0xFF6
  5801                           tablat	equ	0xFF5
  5802                           prodh	equ	0xFF4
  5803                           prodl	equ	0xFF3
  5804                           intcon	equ	0xFF2
  5805                           postinc0	equ	0xFEE
  5806                           wreg	equ	0xFE8
  5807                           postdec1	equ	0xFE5
  5808                           plusw1	equ	0xFE3
  5809                           fsr1h	equ	0xFE2
  5810                           fsr1l	equ	0xFE1
  5811                           indf2	equ	0xFDF
  5812                           postinc2	equ	0xFDE
  5813                           postdec2	equ	0xFDD
  5814                           plusw2	equ	0xFDB
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _SD_SingleBlockRead *****************
  5820 ;; Defined at:
  5821 ;;		line 239 in file "SD_PIC.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;  block           4   10[COMRAM] unsigned long 
  5824 ;;  buf             2   14[COMRAM] PTR unsigned char 
  5825 ;;		 -> main@readBuffer(512), 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  i               2   17[COMRAM] unsigned short 
  5828 ;;  response        1   19[COMRAM] unsigned char 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  1    wreg      unsigned char 
  5831 ;; Registers used:
  5832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5838 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;Total ram usage:       10 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    3
  5845 ;; This function calls:
  5846 ;;		_SD_Command
  5847 ;;		_spiReceive
  5848 ;;		_spiSend
  5849 ;; This function is called by:
  5850 ;;		_main
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           	psect	text20
  5855  0025D4                     __ptext20:
  5856                           	opt stack 0
  5857  0025D4                     _SD_SingleBlockRead:
  5858                           	opt stack 27
  5859                           
  5860                           ;SD_PIC.c: 244: if(SDCard.Type == TYPE_SDSC){
  5861                           
  5862                           ;incstack = 0
  5863  0025D4  0100               	movlb	0	; () banked
  5864  0025D6  5181               	movf	(_SDCard+1)& (0+255),w,b
  5865  0025D8  A4D8               	btfss	status,2,c
  5866  0025DA  D008               	goto	l3004
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;SD_PIC.c: 246: block <<= 9;
  5870  0025DC  0E09               	movlw	9
  5871  0025DE                     u2565:
  5872  0025DE  90D8               	bcf	status,0,c
  5873  0025E0  360B               	rlcf	SD_SingleBlockRead@block,f,c
  5874  0025E2  360C               	rlcf	SD_SingleBlockRead@block+1,f,c
  5875  0025E4  360D               	rlcf	SD_SingleBlockRead@block+2,f,c
  5876  0025E6  360E               	rlcf	SD_SingleBlockRead@block+3,f,c
  5877  0025E8  2EE8               	decfsz	wreg,f,c
  5878  0025EA  D7F9               	goto	u2565
  5879  0025EC                     l3004:
  5880                           
  5881                           ;SD_PIC.c: 253: response = SD_Command(CMD17, block);
  5882  0025EC  C00B  F004         	movff	SD_SingleBlockRead@block,SD_Command@arg
  5883  0025F0  C00C  F005         	movff	SD_SingleBlockRead@block+1,SD_Command@arg+1
  5884  0025F4  C00D  F006         	movff	SD_SingleBlockRead@block+2,SD_Command@arg+2
  5885  0025F8  C00E  F007         	movff	SD_SingleBlockRead@block+3,SD_Command@arg+3
  5886  0025FC  0E3F               	movlw	low _CMD17
  5887  0025FE  6EF6               	movwf	tblptrl,c
  5888  002600                     	if	1	;There is more than 1 active tblptr byte
  5889  002600  0E10               	movlw	high _CMD17
  5890  002602  6EF7               	movwf	tblptrh,c
  5891  002604                     	endif
  5892  002604                     	if	0	;There are less than 3 active tblptr bytes
  5893  002604                     	endif
  5894  002604  0008               	tblrd		*
  5895  002606  50F5               	movf	tablat,w,c
  5896  002608  ECA9  F014         	call	_SD_Command
  5897  00260C  6E14               	movwf	SD_SingleBlockRead@response,c
  5898                           
  5899                           ;SD_PIC.c: 254: if((response & 0x0F) != 0){
  5900  00260E  C014  F011         	movff	SD_SingleBlockRead@response,??_SD_SingleBlockRead
  5901  002612  0E0F               	movlw	15
  5902  002614  1611               	andwf	??_SD_SingleBlockRead,f,c
  5903  002616  B4D8               	btfsc	status,2,c
  5904  002618  D002               	goto	l3012
  5905                           
  5906                           ;SD_PIC.c: 259: return 0;
  5907  00261A  0E00               	movlw	0
  5908  00261C  0012               	return	
  5909  00261E                     l3012:
  5910                           
  5911                           ;SD_PIC.c: 260: }
  5912                           ;SD_PIC.c: 261: }while(response != R1_READY_STATE);
  5913  00261E  0E33               	movlw	low _R1_READY_STATE
  5914  002620  6EF6               	movwf	tblptrl,c
  5915  002622                     	if	1	;There is more than 1 active tblptr byte
  5916  002622  0E10               	movlw	high _R1_READY_STATE
  5917  002624  6EF7               	movwf	tblptrh,c
  5918  002626                     	endif
  5919  002626                     	if	0	;There are less than 3 active tblptr bytes
  5920  002626                     	endif
  5921  002626  0008               	tblrd		*
  5922  002628  50F5               	movf	tablat,w,c
  5923  00262A  6214               	cpfseq	SD_SingleBlockRead@response,c
  5924  00262C  D7DF               	goto	l3004
  5925                           
  5926                           ;SD_PIC.c: 264: LATEbits.LATE2 = 0;
  5927  00262E  948D               	bcf	3981,2,c	;volatile
  5928  002630                     l3014:
  5929                           
  5930                           ;SD_PIC.c: 266: response = spiReceive();
  5931  002630  ECD0  F016         	call	_spiReceive	;wreg free
  5932  002634  6E14               	movwf	SD_SingleBlockRead@response,c
  5933                           
  5934                           ;SD_PIC.c: 267: }while(response != START_BLOCK);
  5935  002636  0E30               	movlw	low _START_BLOCK
  5936  002638  6EF6               	movwf	tblptrl,c
  5937  00263A                     	if	1	;There is more than 1 active tblptr byte
  5938  00263A  0E10               	movlw	high _START_BLOCK
  5939  00263C  6EF7               	movwf	tblptrh,c
  5940  00263E                     	endif
  5941  00263E                     	if	0	;There are less than 3 active tblptr bytes
  5942  00263E                     	endif
  5943  00263E  0008               	tblrd		*
  5944  002640  50F5               	movf	tablat,w,c
  5945  002642  6214               	cpfseq	SD_SingleBlockRead@response,c
  5946  002644  D7F5               	goto	l3014
  5947                           
  5948                           ;SD_PIC.c: 269: for(unsigned short i = 0; i < 512; i++){
  5949  002646  0E00               	movlw	0
  5950  002648  6E13               	movwf	SD_SingleBlockRead@i+1,c
  5951  00264A  0E00               	movlw	0
  5952  00264C  6E12               	movwf	SD_SingleBlockRead@i,c
  5953  00264E                     l3020:
  5954  00264E  0E02               	movlw	2
  5955  002650  5C13               	subwf	SD_SingleBlockRead@i+1,w,c
  5956  002652  B0D8               	btfsc	status,0,c
  5957  002654  D00C               	goto	l3030
  5958                           
  5959                           ;SD_PIC.c: 270: buf[i] = spiReceive();
  5960  002656  5012               	movf	SD_SingleBlockRead@i,w,c
  5961  002658  240F               	addwf	SD_SingleBlockRead@buf,w,c
  5962  00265A  6ED9               	movwf	fsr2l,c
  5963  00265C  5013               	movf	SD_SingleBlockRead@i+1,w,c
  5964  00265E  2010               	addwfc	SD_SingleBlockRead@buf+1,w,c
  5965  002660  6EDA               	movwf	fsr2h,c
  5966  002662  ECD0  F016         	call	_spiReceive	;wreg free
  5967  002666  6EDF               	movwf	indf2,c
  5968  002668  4A12               	infsnz	SD_SingleBlockRead@i,f,c
  5969  00266A  2A13               	incf	SD_SingleBlockRead@i+1,f,c
  5970  00266C  D7F0               	goto	l3020
  5971  00266E                     l3030:
  5972                           
  5973                           ;SD_PIC.c: 271: }
  5974                           ;SD_PIC.c: 274: spiSend(0xFF);
  5975  00266E  0EFF               	movlw	255
  5976  002670  ECCB  F016         	call	_spiSend
  5977                           
  5978                           ;SD_PIC.c: 275: spiSend(0xFF);
  5979  002674  0EFF               	movlw	255
  5980  002676  ECCB  F016         	call	_spiSend
  5981                           
  5982                           ;SD_PIC.c: 277: LATEbits.LATE2 = 1;
  5983  00267A  848D               	bsf	3981,2,c	;volatile
  5984                           
  5985                           ;SD_PIC.c: 279: SDCard.read.lastBlockRead = block;
  5986  00267C  C00B  F0A5         	movff	SD_SingleBlockRead@block,_SDCard+37
  5987  002680  C00C  F0A6         	movff	SD_SingleBlockRead@block+1,_SDCard+38
  5988  002684  C00D  F0A7         	movff	SD_SingleBlockRead@block+2,_SDCard+39
  5989  002688  C00E  F0A8         	movff	SD_SingleBlockRead@block+3,_SDCard+40
  5990                           
  5991                           ;SD_PIC.c: 281: return 1;
  5992  00268C  0E01               	movlw	1
  5993  00268E  0012               	return	
  5994  002690                     __end_of_SD_SingleBlockRead:
  5995                           	opt stack 0
  5996                           tblptru	equ	0xFF8
  5997                           tblptrh	equ	0xFF7
  5998                           tblptrl	equ	0xFF6
  5999                           tablat	equ	0xFF5
  6000                           prodh	equ	0xFF4
  6001                           prodl	equ	0xFF3
  6002                           intcon	equ	0xFF2
  6003                           postinc0	equ	0xFEE
  6004                           wreg	equ	0xFE8
  6005                           postdec1	equ	0xFE5
  6006                           plusw1	equ	0xFE3
  6007                           fsr1h	equ	0xFE2
  6008                           fsr1l	equ	0xFE1
  6009                           indf2	equ	0xFDF
  6010                           postinc2	equ	0xFDE
  6011                           postdec2	equ	0xFDD
  6012                           plusw2	equ	0xFDB
  6013                           fsr2h	equ	0xFDA
  6014                           fsr2l	equ	0xFD9
  6015                           status	equ	0xFD8
  6016                           
  6017 ;; *************** function _SD_MBW_Stop *****************
  6018 ;; Defined at:
  6019 ;;		line 222 in file "SD_PIC.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;		None
  6022 ;; Auto vars:     Size  Location     Type
  6023 ;;		None
  6024 ;; Return value:  Size  Location     Type
  6025 ;;                  1    wreg      void 
  6026 ;; Registers used:
  6027 ;;		wreg, status,2, tblptrl, tblptrh, tblptru, cstack
  6028 ;; Tracked objects:
  6029 ;;		On entry : 0/0
  6030 ;;		On exit  : 0/0
  6031 ;;		Unchanged: 0/0
  6032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6037 ;;Total ram usage:        0 bytes
  6038 ;; Hardware stack levels used:    1
  6039 ;; Hardware stack levels required when called:    2
  6040 ;; This function calls:
  6041 ;;		_spiReceive
  6042 ;;		_spiSend
  6043 ;; This function is called by:
  6044 ;;		_main
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	text21
  6049  002C4A                     __ptext21:
  6050                           	opt stack 0
  6051  002C4A                     _SD_MBW_Stop:
  6052                           	opt stack 28
  6053                           
  6054                           ;SD_PIC.c: 223: LATEbits.LATE2 = 0;
  6055                           
  6056                           ;incstack = 0
  6057  002C4A  948D               	bcf	3981,2,c	;volatile
  6058  002C4C                     l2992:
  6059  002C4C  ECD0  F016         	call	_spiReceive	;wreg free
  6060  002C50  0AFF               	xorlw	255
  6061  002C52  A4D8               	btfss	status,2,c
  6062  002C54  D7FB               	goto	l2992
  6063                           
  6064                           ;SD_PIC.c: 227: spiSend(STOP_TRAN);
  6065  002C56  0E2E               	movlw	low _STOP_TRAN
  6066  002C58  6EF6               	movwf	tblptrl,c
  6067  002C5A                     	if	1	;There is more than 1 active tblptr byte
  6068  002C5A  0E10               	movlw	high _STOP_TRAN
  6069  002C5C  6EF7               	movwf	tblptrh,c
  6070  002C5E                     	endif
  6071  002C5E                     	if	0	;There are less than 3 active tblptr bytes
  6072  002C5E                     	endif
  6073  002C5E  0008               	tblrd		*
  6074  002C60  50F5               	movf	tablat,w,c
  6075  002C62  ECCB  F016         	call	_spiSend
  6076  002C66                     l2996:
  6077  002C66  ECD0  F016         	call	_spiReceive	;wreg free
  6078  002C6A  0900               	iorlw	0
  6079  002C6C  B4D8               	btfsc	status,2,c
  6080  002C6E  D7FB               	goto	l2996
  6081                           
  6082                           ;SD_PIC.c: 232: }
  6083                           ;SD_PIC.c: 234: LATEbits.LATE2 = 1;
  6084  002C70  848D               	bsf	3981,2,c	;volatile
  6085                           
  6086                           ;SD_PIC.c: 236: SDCard.write.MBW_flag_first = 1;
  6087  002C72  0E01               	movlw	1
  6088  002C74  0100               	movlb	0	; () banked
  6089  002C76  6FA4               	movwf	(_SDCard+36)& (0+255),b
  6090                           
  6091                           ; BSR set to: 0
  6092  002C78  0012               	return		;funcret
  6093  002C7A                     __end_of_SD_MBW_Stop:
  6094                           	opt stack 0
  6095                           tblptru	equ	0xFF8
  6096                           tblptrh	equ	0xFF7
  6097                           tblptrl	equ	0xFF6
  6098                           tablat	equ	0xFF5
  6099                           prodh	equ	0xFF4
  6100                           prodl	equ	0xFF3
  6101                           intcon	equ	0xFF2
  6102                           postinc0	equ	0xFEE
  6103                           wreg	equ	0xFE8
  6104                           postdec1	equ	0xFE5
  6105                           plusw1	equ	0xFE3
  6106                           fsr1h	equ	0xFE2
  6107                           fsr1l	equ	0xFE1
  6108                           indf2	equ	0xFDF
  6109                           postinc2	equ	0xFDE
  6110                           postdec2	equ	0xFDD
  6111                           plusw2	equ	0xFDB
  6112                           fsr2h	equ	0xFDA
  6113                           fsr2l	equ	0xFD9
  6114                           status	equ	0xFD8
  6115                           
  6116 ;; *************** function _SD_MBW_Start *****************
  6117 ;; Defined at:
  6118 ;;		line 153 in file "SD_PIC.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;  startBlock      4   15[COMRAM] unsigned long 
  6121 ;;  numBlocks       4   19[COMRAM] unsigned long 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;		None
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  1    wreg      void 
  6126 ;; Registers used:
  6127 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6133 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;Total ram usage:        9 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    4
  6140 ;; This function calls:
  6141 ;;		_SD_ACMD
  6142 ;;		_SD_Command
  6143 ;; This function is called by:
  6144 ;;		_main
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           	psect	text22
  6149  0028D4                     __ptext22:
  6150                           	opt stack 0
  6151  0028D4                     _SD_MBW_Start:
  6152                           	opt stack 26
  6153                           
  6154                           ;SD_PIC.c: 158: if(SDCard.Type == TYPE_SDSC){
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;incstack = 0
  6158  0028D4  0100               	movlb	0	; () banked
  6159  0028D6  5181               	movf	(_SDCard+1)& (0+255),w,b
  6160  0028D8  A4D8               	btfss	status,2,c
  6161  0028DA  D008               	goto	l2930
  6162                           
  6163                           ; BSR set to: 0
  6164                           ;SD_PIC.c: 160: startBlock <<= 9;
  6165  0028DC  0E09               	movlw	9
  6166  0028DE                     u2465:
  6167  0028DE  90D8               	bcf	status,0,c
  6168  0028E0  3610               	rlcf	SD_MBW_Start@startBlock,f,c
  6169  0028E2  3611               	rlcf	SD_MBW_Start@startBlock+1,f,c
  6170  0028E4  3612               	rlcf	SD_MBW_Start@startBlock+2,f,c
  6171  0028E6  3613               	rlcf	SD_MBW_Start@startBlock+3,f,c
  6172  0028E8  2EE8               	decfsz	wreg,f,c
  6173  0028EA  D7F9               	goto	u2465
  6174  0028EC                     l2930:
  6175                           
  6176                           ; BSR set to: 0
  6177                           ;SD_PIC.c: 161: }
  6178                           ;SD_PIC.c: 164: SD_ACMD(ACMD23, numBlocks);
  6179  0028EC  C014  F00B         	movff	SD_MBW_Start@numBlocks,SD_ACMD@arg
  6180  0028F0  C015  F00C         	movff	SD_MBW_Start@numBlocks+1,SD_ACMD@arg+1
  6181  0028F4  C016  F00D         	movff	SD_MBW_Start@numBlocks+2,SD_ACMD@arg+2
  6182  0028F8  C017  F00E         	movff	SD_MBW_Start@numBlocks+3,SD_ACMD@arg+3
  6183  0028FC  0E35               	movlw	low _ACMD23
  6184  0028FE  6EF6               	movwf	tblptrl,c
  6185  002900                     	if	1	;There is more than 1 active tblptr byte
  6186  002900  0E10               	movlw	high _ACMD23
  6187  002902  6EF7               	movwf	tblptrh,c
  6188  002904                     	endif
  6189  002904                     	if	0	;There are less than 3 active tblptr bytes
  6190  002904                     	endif
  6191  002904  0008               	tblrd		*
  6192  002906  50F5               	movf	tablat,w,c
  6193  002908  ECEC  F015         	call	_SD_ACMD
  6194  00290C                     l2932:
  6195  00290C  C010  F004         	movff	SD_MBW_Start@startBlock,SD_Command@arg
  6196  002910  C011  F005         	movff	SD_MBW_Start@startBlock+1,SD_Command@arg+1
  6197  002914  C012  F006         	movff	SD_MBW_Start@startBlock+2,SD_Command@arg+2
  6198  002918  C013  F007         	movff	SD_MBW_Start@startBlock+3,SD_Command@arg+3
  6199  00291C  0E3C               	movlw	low _CMD25
  6200  00291E  6EF6               	movwf	tblptrl,c
  6201  002920                     	if	1	;There is more than 1 active tblptr byte
  6202  002920  0E10               	movlw	high _CMD25
  6203  002922  6EF7               	movwf	tblptrh,c
  6204  002924                     	endif
  6205  002924                     	if	0	;There are less than 3 active tblptr bytes
  6206  002924                     	endif
  6207  002924  0008               	tblrd		*
  6208  002926  50F5               	movf	tablat,w,c
  6209  002928  ECA9  F014         	call	_SD_Command
  6210  00292C  6E18               	movwf	??_SD_MBW_Start& (0+255),c
  6211  00292E  0E33               	movlw	low _R1_READY_STATE
  6212  002930  6EF6               	movwf	tblptrl,c
  6213  002932                     	if	1	;There is more than 1 active tblptr byte
  6214  002932  0E10               	movlw	high _R1_READY_STATE
  6215  002934  6EF7               	movwf	tblptrh,c
  6216  002936                     	endif
  6217  002936                     	if	0	;There are less than 3 active tblptr bytes
  6218  002936                     	endif
  6219  002936  0008               	tblrd		*
  6220  002938  50F5               	movf	tablat,w,c
  6221  00293A  1818               	xorwf	??_SD_MBW_Start,w,c
  6222  00293C  A4D8               	btfss	status,2,c
  6223  00293E  D7E6               	goto	l2932
  6224                           
  6225                           ;SD_PIC.c: 169: SDCard.write.MBW_startBlock = startBlock;
  6226  002940  C010  F0A0         	movff	SD_MBW_Start@startBlock,_SDCard+32
  6227  002944  C011  F0A1         	movff	SD_MBW_Start@startBlock+1,_SDCard+33
  6228  002948  C012  F0A2         	movff	SD_MBW_Start@startBlock+2,_SDCard+34
  6229  00294C  C013  F0A3         	movff	SD_MBW_Start@startBlock+3,_SDCard+35
  6230  002950  0012               	return		;funcret
  6231  002952                     __end_of_SD_MBW_Start:
  6232                           	opt stack 0
  6233                           tblptru	equ	0xFF8
  6234                           tblptrh	equ	0xFF7
  6235                           tblptrl	equ	0xFF6
  6236                           tablat	equ	0xFF5
  6237                           prodh	equ	0xFF4
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           postinc0	equ	0xFEE
  6241                           wreg	equ	0xFE8
  6242                           postdec1	equ	0xFE5
  6243                           plusw1	equ	0xFE3
  6244                           fsr1h	equ	0xFE2
  6245                           fsr1l	equ	0xFE1
  6246                           indf2	equ	0xFDF
  6247                           postinc2	equ	0xFDE
  6248                           postdec2	equ	0xFDD
  6249                           plusw2	equ	0xFDB
  6250                           fsr2h	equ	0xFDA
  6251                           fsr2l	equ	0xFD9
  6252                           status	equ	0xFD8
  6253                           
  6254 ;; *************** function _SD_ACMD *****************
  6255 ;; Defined at:
  6256 ;;		line 97 in file "SD_PIC.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;  cmd             1    wreg     unsigned char 
  6259 ;;  arg             4   10[COMRAM] unsigned long 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;  cmd             1   14[COMRAM] unsigned char 
  6262 ;; Return value:  Size  Location     Type
  6263 ;;                  1    wreg      unsigned char 
  6264 ;; Registers used:
  6265 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6266 ;; Tracked objects:
  6267 ;;		On entry : 0/0
  6268 ;;		On exit  : 0/0
  6269 ;;		Unchanged: 0/0
  6270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6271 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6275 ;;Total ram usage:        5 bytes
  6276 ;; Hardware stack levels used:    1
  6277 ;; Hardware stack levels required when called:    3
  6278 ;; This function calls:
  6279 ;;		_SD_Command
  6280 ;; This function is called by:
  6281 ;;		_SD_MBW_Start
  6282 ;;		_initSD
  6283 ;; This function uses a non-reentrant model
  6284 ;;
  6285                           
  6286                           	psect	text23
  6287  002BD8                     __ptext23:
  6288                           	opt stack 0
  6289  002BD8                     _SD_ACMD:
  6290                           	opt stack 26
  6291                           
  6292                           ;incstack = 0
  6293                           ;SD_ACMD@cmd stored from wreg
  6294  002BD8  6E0F               	movwf	SD_ACMD@cmd,c
  6295                           
  6296                           ;SD_PIC.c: 100: SD_Command(CMD55, 0);
  6297  002BDA  0E00               	movlw	0
  6298  002BDC  6E04               	movwf	SD_Command@arg,c
  6299  002BDE  0E00               	movlw	0
  6300  002BE0  6E05               	movwf	SD_Command@arg+1,c
  6301  002BE2  0E00               	movlw	0
  6302  002BE4  6E06               	movwf	SD_Command@arg+2,c
  6303  002BE6  0E00               	movlw	0
  6304  002BE8  6E07               	movwf	SD_Command@arg+3,c
  6305  002BEA  0E38               	movlw	low _CMD55
  6306  002BEC  6EF6               	movwf	tblptrl,c
  6307  002BEE                     	if	1	;There is more than 1 active tblptr byte
  6308  002BEE  0E10               	movlw	high _CMD55
  6309  002BF0  6EF7               	movwf	tblptrh,c
  6310  002BF2                     	endif
  6311  002BF2                     	if	0	;There are less than 3 active tblptr bytes
  6312  002BF2                     	endif
  6313  002BF2  0008               	tblrd		*
  6314  002BF4  50F5               	movf	tablat,w,c
  6315  002BF6  ECA9  F014         	call	_SD_Command
  6316                           
  6317                           ;SD_PIC.c: 101: return SD_Command(cmd, arg);
  6318  002BFA  C00B  F004         	movff	SD_ACMD@arg,SD_Command@arg
  6319  002BFE  C00C  F005         	movff	SD_ACMD@arg+1,SD_Command@arg+1
  6320  002C02  C00D  F006         	movff	SD_ACMD@arg+2,SD_Command@arg+2
  6321  002C06  C00E  F007         	movff	SD_ACMD@arg+3,SD_Command@arg+3
  6322  002C0A  500F               	movf	SD_ACMD@cmd,w,c
  6323  002C0C  ECA9  F014         	call	_SD_Command
  6324  002C10  0012               	return	
  6325  002C12                     __end_of_SD_ACMD:
  6326                           	opt stack 0
  6327                           tblptru	equ	0xFF8
  6328                           tblptrh	equ	0xFF7
  6329                           tblptrl	equ	0xFF6
  6330                           tablat	equ	0xFF5
  6331                           prodh	equ	0xFF4
  6332                           prodl	equ	0xFF3
  6333                           intcon	equ	0xFF2
  6334                           postinc0	equ	0xFEE
  6335                           wreg	equ	0xFE8
  6336                           postdec1	equ	0xFE5
  6337                           plusw1	equ	0xFE3
  6338                           fsr1h	equ	0xFE2
  6339                           fsr1l	equ	0xFE1
  6340                           indf2	equ	0xFDF
  6341                           postinc2	equ	0xFDE
  6342                           postdec2	equ	0xFDD
  6343                           plusw2	equ	0xFDB
  6344                           fsr2h	equ	0xFDA
  6345                           fsr2l	equ	0xFD9
  6346                           status	equ	0xFD8
  6347                           
  6348 ;; *************** function _SD_MBW_Send *****************
  6349 ;; Defined at:
  6350 ;;		line 172 in file "SD_PIC.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  arrWrite        2   10[COMRAM] PTR unsigned char 
  6353 ;;		 -> writeBuffer(512), 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  i               2   13[COMRAM] unsigned short 
  6356 ;;  response        1   12[COMRAM] unsigned char 
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  1    wreg      unsigned char 
  6359 ;; Registers used:
  6360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6366 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;Total ram usage:        5 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    3
  6373 ;; This function calls:
  6374 ;;		_SD_Command
  6375 ;;		_SD_SendDummyBytes
  6376 ;;		_spiReceive
  6377 ;;		_spiSend
  6378 ;;		_spiTransfer
  6379 ;; This function is called by:
  6380 ;;		_main
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           	psect	text24
  6385  002130                     __ptext24:
  6386                           	opt stack 0
  6387  002130                     _SD_MBW_Send:
  6388                           	opt stack 27
  6389                           
  6390                           ;SD_PIC.c: 173: LATEbits.LATE2 = 0;
  6391                           
  6392                           ;incstack = 0
  6393  002130  948D               	bcf	3981,2,c	;volatile
  6394  002132                     l2936:
  6395  002132  ECD0  F016         	call	_spiReceive	;wreg free
  6396  002136  0AFF               	xorlw	255
  6397  002138  A4D8               	btfss	status,2,c
  6398  00213A  D7FB               	goto	l2936
  6399                           
  6400                           ;SD_PIC.c: 177: spiSend(START_BLOCK_TOKEN);
  6401  00213C  0E2F               	movlw	low _START_BLOCK_TOKEN
  6402  00213E  6EF6               	movwf	tblptrl,c
  6403  002140                     	if	1	;There is more than 1 active tblptr byte
  6404  002140  0E10               	movlw	high _START_BLOCK_TOKEN
  6405  002142  6EF7               	movwf	tblptrh,c
  6406  002144                     	endif
  6407  002144                     	if	0	;There are less than 3 active tblptr bytes
  6408  002144                     	endif
  6409  002144  0008               	tblrd		*
  6410  002146  50F5               	movf	tablat,w,c
  6411  002148  ECCB  F016         	call	_spiSend
  6412                           
  6413                           ;SD_PIC.c: 180: unsigned char response = 0;
  6414  00214C  0E00               	movlw	0
  6415  00214E  6E0D               	movwf	SD_MBW_Send@response,c
  6416                           
  6417                           ;SD_PIC.c: 181: for(unsigned short i = 0; i < 512; i++){
  6418  002150  0E00               	movlw	0
  6419  002152  6E0F               	movwf	SD_MBW_Send@i+1,c
  6420  002154  0E00               	movlw	0
  6421  002156  6E0E               	movwf	SD_MBW_Send@i,c
  6422  002158                     l2944:
  6423  002158  0E02               	movlw	2
  6424  00215A  5C0F               	subwf	SD_MBW_Send@i+1,w,c
  6425  00215C  B0D8               	btfsc	status,0,c
  6426  00215E  D00D               	goto	l2954
  6427                           
  6428                           ;SD_PIC.c: 182: response = spiTransfer(arrWrite[i]);
  6429  002160  500E               	movf	SD_MBW_Send@i,w,c
  6430  002162  240B               	addwf	SD_MBW_Send@arrWrite,w,c
  6431  002164  6ED9               	movwf	fsr2l,c
  6432  002166  500F               	movf	SD_MBW_Send@i+1,w,c
  6433  002168  200C               	addwfc	SD_MBW_Send@arrWrite+1,w,c
  6434  00216A  6EDA               	movwf	fsr2h,c
  6435  00216C  50DF               	movf	indf2,w,c
  6436  00216E  EC8D  F016         	call	_spiTransfer
  6437  002172  6E0D               	movwf	SD_MBW_Send@response,c
  6438  002174  4A0E               	infsnz	SD_MBW_Send@i,f,c
  6439  002176  2A0F               	incf	SD_MBW_Send@i+1,f,c
  6440  002178  D7EF               	goto	l2944
  6441  00217A                     l2954:
  6442                           
  6443                           ;SD_PIC.c: 183: }
  6444                           ;SD_PIC.c: 186: SD_SendDummyBytes(2);
  6445  00217A  0E02               	movlw	2
  6446  00217C  EC9F  F016         	call	_SD_SendDummyBytes
  6447  002180                     l224:
  6448                           
  6449                           ;SD_PIC.c: 190: response = spiReceive() & 0x1F;
  6450  002180  ECD0  F016         	call	_spiReceive	;wreg free
  6451  002184  0B1F               	andlw	31
  6452  002186  6E0D               	movwf	SD_MBW_Send@response,c
  6453                           
  6454                           ;SD_PIC.c: 191: }while(response == 0x1F);
  6455  002188  0E1F               	movlw	31
  6456  00218A  180D               	xorwf	SD_MBW_Send@response,w,c
  6457  00218C  B4D8               	btfsc	status,2,c
  6458  00218E  D7F8               	goto	l224
  6459                           
  6460                           ;SD_PIC.c: 192: LATEbits.LATE2 = 1;
  6461  002190  848D               	bsf	3981,2,c	;volatile
  6462                           
  6463                           ;SD_PIC.c: 194: switch(response){
  6464  002192  D03F               	goto	l2988
  6465  002194                     l2958:
  6466                           
  6467                           ;SD_PIC.c: 199: if(SDCard.write.MBW_flag_first){
  6468  002194  0100               	movlb	0	; () banked
  6469  002196  51A4               	movf	(_SDCard+36)& (0+255),w,b
  6470  002198  B4D8               	btfsc	status,2,c
  6471  00219A  D00C               	goto	l2964
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;SD_PIC.c: 201: SDCard.write.lastBlockWritten = SDCard.write.MBW_startBlock;
  6475  00219C  C0A0  F09C         	movff	_SDCard+32,_SDCard+28
  6476  0021A0  C0A1  F09D         	movff	_SDCard+33,_SDCard+29
  6477  0021A4  C0A2  F09E         	movff	_SDCard+34,_SDCard+30
  6478  0021A8  C0A3  F09F         	movff	_SDCard+35,_SDCard+31
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;SD_PIC.c: 202: SDCard.write.MBW_flag_first = 0;
  6482  0021AC  0E00               	movlw	0
  6483  0021AE  0100               	movlb	0	; () banked
  6484  0021B0  6FA4               	movwf	(_SDCard+36)& (0+255),b
  6485                           
  6486                           ;SD_PIC.c: 203: }
  6487  0021B2  D007               	goto	l2966
  6488  0021B4                     l2964:
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;SD_PIC.c: 204: else{
  6492                           ;SD_PIC.c: 205: SDCard.write.lastBlockWritten++;
  6493  0021B4  0E01               	movlw	1
  6494  0021B6  0100               	movlb	0	; () banked
  6495  0021B8  279C               	addwf	(_SDCard+28)& (0+255),f,b
  6496  0021BA  0E00               	movlw	0
  6497  0021BC  239D               	addwfc	(_SDCard+29)& (0+255),f,b
  6498  0021BE  239E               	addwfc	(_SDCard+30)& (0+255),f,b
  6499  0021C0  239F               	addwfc	(_SDCard+31)& (0+255),f,b
  6500  0021C2                     l2966:
  6501                           
  6502                           ; BSR set to: 0
  6503                           ;SD_PIC.c: 206: }
  6504                           ;SD_PIC.c: 208: return 1;
  6505  0021C2  0E01               	movlw	1
  6506                           
  6507                           ; BSR set to: 0
  6508  0021C4  0012               	return	
  6509  0021C6                     l2970:
  6510                           
  6511                           ;SD_PIC.c: 211: SD_Command(CMD12, 0);
  6512  0021C6  0E00               	movlw	0
  6513  0021C8  6E04               	movwf	SD_Command@arg,c
  6514  0021CA  0E00               	movlw	0
  6515  0021CC  6E05               	movwf	SD_Command@arg+1,c
  6516  0021CE  0E00               	movlw	0
  6517  0021D0  6E06               	movwf	SD_Command@arg+2,c
  6518  0021D2  0E00               	movlw	0
  6519  0021D4  6E07               	movwf	SD_Command@arg+3,c
  6520  0021D6  0E42               	movlw	low _CMD12
  6521  0021D8  6EF6               	movwf	tblptrl,c
  6522  0021DA                     	if	1	;There is more than 1 active tblptr byte
  6523  0021DA  0E10               	movlw	high _CMD12
  6524  0021DC  6EF7               	movwf	tblptrh,c
  6525  0021DE                     	endif
  6526  0021DE                     	if	0	;There are less than 3 active tblptr bytes
  6527  0021DE                     	endif
  6528  0021DE  0008               	tblrd		*
  6529  0021E0  50F5               	movf	tablat,w,c
  6530  0021E2  ECA9  F014         	call	_SD_Command
  6531                           
  6532                           ;SD_PIC.c: 212: return 0;
  6533  0021E6  0E00               	movlw	0
  6534  0021E8  0012               	return	
  6535  0021EA                     l2976:
  6536                           
  6537                           ;SD_PIC.c: 215: SD_Command(CMD12, 0);
  6538  0021EA  0E00               	movlw	0
  6539  0021EC  6E04               	movwf	SD_Command@arg,c
  6540  0021EE  0E00               	movlw	0
  6541  0021F0  6E05               	movwf	SD_Command@arg+1,c
  6542  0021F2  0E00               	movlw	0
  6543  0021F4  6E06               	movwf	SD_Command@arg+2,c
  6544  0021F6  0E00               	movlw	0
  6545  0021F8  6E07               	movwf	SD_Command@arg+3,c
  6546  0021FA  0E42               	movlw	low _CMD12
  6547  0021FC  6EF6               	movwf	tblptrl,c
  6548  0021FE                     	if	1	;There is more than 1 active tblptr byte
  6549  0021FE  0E10               	movlw	high _CMD12
  6550  002200  6EF7               	movwf	tblptrh,c
  6551  002202                     	endif
  6552  002202                     	if	0	;There are less than 3 active tblptr bytes
  6553  002202                     	endif
  6554  002202  0008               	tblrd		*
  6555  002204  50F5               	movf	tablat,w,c
  6556  002206  ECA9  F014         	call	_SD_Command
  6557                           
  6558                           ;SD_PIC.c: 216: return 0;
  6559  00220A  0E00               	movlw	0
  6560  00220C  0012               	return	
  6561  00220E                     l2982:
  6562                           
  6563                           ;SD_PIC.c: 218: return 0;
  6564  00220E  0E00               	movlw	0
  6565                           
  6566                           ;SD_PIC.c: 219: }
  6567  002210  0012               	return	
  6568  002212                     l2988:
  6569  002212  500D               	movf	SD_MBW_Send@response,w,c
  6570                           
  6571                           ; Switch size 1, requested type "space"
  6572                           ; Number of cases is 3, Range of values is 5 to 13
  6573                           ; switch strategies available:
  6574                           ; Name         Instructions Cycles
  6575                           ; simple_byte           10     6 (average)
  6576                           ;	Chosen strategy is simple_byte
  6577  002214  0A05               	xorlw	5	; case 5
  6578  002216  B4D8               	btfsc	status,2,c
  6579  002218  D7BD               	goto	l2958
  6580  00221A  0A0E               	xorlw	14	; case 11
  6581  00221C  B4D8               	btfsc	status,2,c
  6582  00221E  D7D3               	goto	l2970
  6583  002220  0A06               	xorlw	6	; case 13
  6584  002222  B4D8               	btfsc	status,2,c
  6585  002224  D7E2               	goto	l2976
  6586  002226  D7F3               	goto	l2982
  6587  002228                     __end_of_SD_MBW_Send:
  6588                           	opt stack 0
  6589                           tblptru	equ	0xFF8
  6590                           tblptrh	equ	0xFF7
  6591                           tblptrl	equ	0xFF6
  6592                           tablat	equ	0xFF5
  6593                           prodh	equ	0xFF4
  6594                           prodl	equ	0xFF3
  6595                           intcon	equ	0xFF2
  6596                           postinc0	equ	0xFEE
  6597                           wreg	equ	0xFE8
  6598                           postdec1	equ	0xFE5
  6599                           plusw1	equ	0xFE3
  6600                           fsr1h	equ	0xFE2
  6601                           fsr1l	equ	0xFE1
  6602                           indf2	equ	0xFDF
  6603                           postinc2	equ	0xFDE
  6604                           postdec2	equ	0xFDD
  6605                           plusw2	equ	0xFDB
  6606                           fsr2h	equ	0xFDA
  6607                           fsr2l	equ	0xFD9
  6608                           status	equ	0xFD8
  6609                           
  6610 ;; *************** function _SD_SendDummyBytes *****************
  6611 ;; Defined at:
  6612 ;;		line 47 in file "SD_PIC.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;  numBytes        1    wreg     unsigned char 
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;  numBytes        1    3[COMRAM] unsigned char 
  6617 ;;  n               1    4[COMRAM] unsigned char 
  6618 ;; Return value:  Size  Location     Type
  6619 ;;                  1    wreg      void 
  6620 ;; Registers used:
  6621 ;;		wreg, status,2, status,0, cstack
  6622 ;; Tracked objects:
  6623 ;;		On entry : 0/0
  6624 ;;		On exit  : 0/0
  6625 ;;		Unchanged: 0/0
  6626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;Total ram usage:        2 bytes
  6632 ;; Hardware stack levels used:    1
  6633 ;; Hardware stack levels required when called:    2
  6634 ;; This function calls:
  6635 ;;		_spiSend
  6636 ;; This function is called by:
  6637 ;;		_SD_SingleBlockWrite
  6638 ;;		_SD_MBW_Send
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           	psect	text25
  6643  002D3E                     __ptext25:
  6644                           	opt stack 0
  6645  002D3E                     _SD_SendDummyBytes:
  6646                           	opt stack 27
  6647                           
  6648                           ;incstack = 0
  6649                           ;SD_SendDummyBytes@numBytes stored from wreg
  6650  002D3E  6E04               	movwf	SD_SendDummyBytes@numBytes,c
  6651                           
  6652                           ;SD_PIC.c: 48: unsigned char n = numBytes;
  6653  002D40  C004  F005         	movff	SD_SendDummyBytes@numBytes,SD_SendDummyBytes@n
  6654                           
  6655                           ;SD_PIC.c: 49: while(n > 0){
  6656  002D44  D004               	goto	l2300
  6657  002D46                     l2296:
  6658                           
  6659                           ;SD_PIC.c: 50: spiSend(0xFF);
  6660  002D46  0EFF               	movlw	255
  6661  002D48  ECCB  F016         	call	_spiSend
  6662                           
  6663                           ;SD_PIC.c: 51: n--;
  6664  002D4C  0605               	decf	SD_SendDummyBytes@n,f,c
  6665  002D4E                     l2300:
  6666  002D4E  5005               	movf	SD_SendDummyBytes@n,w,c
  6667  002D50  B4D8               	btfsc	status,2,c
  6668  002D52  0012               	return	
  6669  002D54  D7F8               	goto	l2296
  6670  002D56                     __end_of_SD_SendDummyBytes:
  6671                           	opt stack 0
  6672                           tblptru	equ	0xFF8
  6673                           tblptrh	equ	0xFF7
  6674                           tblptrl	equ	0xFF6
  6675                           tablat	equ	0xFF5
  6676                           prodh	equ	0xFF4
  6677                           prodl	equ	0xFF3
  6678                           intcon	equ	0xFF2
  6679                           postinc0	equ	0xFEE
  6680                           wreg	equ	0xFE8
  6681                           postdec1	equ	0xFE5
  6682                           plusw1	equ	0xFE3
  6683                           fsr1h	equ	0xFE2
  6684                           fsr1l	equ	0xFE1
  6685                           indf2	equ	0xFDF
  6686                           postinc2	equ	0xFDE
  6687                           postdec2	equ	0xFDD
  6688                           plusw2	equ	0xFDB
  6689                           fsr2h	equ	0xFDA
  6690                           fsr2l	equ	0xFD9
  6691                           status	equ	0xFD8
  6692                           
  6693 ;; *************** function _SD_MBR_Stop *****************
  6694 ;; Defined at:
  6695 ;;		line 347 in file "SD_PIC.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;		None
  6698 ;; Auto vars:     Size  Location     Type
  6699 ;;		None
  6700 ;; Return value:  Size  Location     Type
  6701 ;;                  1    wreg      void 
  6702 ;; Registers used:
  6703 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6704 ;; Tracked objects:
  6705 ;;		On entry : 0/0
  6706 ;;		On exit  : 0/0
  6707 ;;		Unchanged: 0/0
  6708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;Total ram usage:        0 bytes
  6714 ;; Hardware stack levels used:    1
  6715 ;; Hardware stack levels required when called:    3
  6716 ;; This function calls:
  6717 ;;		_SD_Command
  6718 ;; This function is called by:
  6719 ;;		_main
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           	psect	text26
  6724  002CCE                     __ptext26:
  6725                           	opt stack 0
  6726  002CCE                     _SD_MBR_Stop:
  6727                           	opt stack 27
  6728                           
  6729                           ;SD_PIC.c: 349: SD_Command(CMD12, 0);
  6730                           
  6731                           ;incstack = 0
  6732  002CCE  0E00               	movlw	0
  6733  002CD0  6E04               	movwf	SD_Command@arg,c
  6734  002CD2  0E00               	movlw	0
  6735  002CD4  6E05               	movwf	SD_Command@arg+1,c
  6736  002CD6  0E00               	movlw	0
  6737  002CD8  6E06               	movwf	SD_Command@arg+2,c
  6738  002CDA  0E00               	movlw	0
  6739  002CDC  6E07               	movwf	SD_Command@arg+3,c
  6740  002CDE  0E42               	movlw	low _CMD12
  6741  002CE0  6EF6               	movwf	tblptrl,c
  6742  002CE2                     	if	1	;There is more than 1 active tblptr byte
  6743  002CE2  0E10               	movlw	high _CMD12
  6744  002CE4  6EF7               	movwf	tblptrh,c
  6745  002CE6                     	endif
  6746  002CE6                     	if	0	;There are less than 3 active tblptr bytes
  6747  002CE6                     	endif
  6748  002CE6  0008               	tblrd		*
  6749  002CE8  50F5               	movf	tablat,w,c
  6750  002CEA  ECA9  F014         	call	_SD_Command
  6751                           
  6752                           ;SD_PIC.c: 350: SDCard.read.MBR_flag_first = 1;
  6753  002CEE  0E01               	movlw	1
  6754  002CF0  0100               	movlb	0	; () banked
  6755  002CF2  6FAD               	movwf	(_SDCard+45)& (0+255),b
  6756                           
  6757                           ; BSR set to: 0
  6758  002CF4  0012               	return		;funcret
  6759  002CF6                     __end_of_SD_MBR_Stop:
  6760                           	opt stack 0
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           intcon	equ	0xFF2
  6768                           postinc0	equ	0xFEE
  6769                           wreg	equ	0xFE8
  6770                           postdec1	equ	0xFE5
  6771                           plusw1	equ	0xFE3
  6772                           fsr1h	equ	0xFE2
  6773                           fsr1l	equ	0xFE1
  6774                           indf2	equ	0xFDF
  6775                           postinc2	equ	0xFDE
  6776                           postdec2	equ	0xFDD
  6777                           plusw2	equ	0xFDB
  6778                           fsr2h	equ	0xFDA
  6779                           fsr2l	equ	0xFD9
  6780                           status	equ	0xFD8
  6781                           
  6782 ;; *************** function _SD_MBR_Start *****************
  6783 ;; Defined at:
  6784 ;;		line 284 in file "SD_PIC.c"
  6785 ;; Parameters:    Size  Location     Type
  6786 ;;  startBlock      4   10[COMRAM] unsigned long 
  6787 ;; Auto vars:     Size  Location     Type
  6788 ;;  response        1   15[COMRAM] unsigned char 
  6789 ;; Return value:  Size  Location     Type
  6790 ;;                  1    wreg      unsigned char 
  6791 ;; Registers used:
  6792 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6793 ;; Tracked objects:
  6794 ;;		On entry : 0/0
  6795 ;;		On exit  : 0/0
  6796 ;;		Unchanged: 0/0
  6797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6800 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6801 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6802 ;;Total ram usage:        6 bytes
  6803 ;; Hardware stack levels used:    1
  6804 ;; Hardware stack levels required when called:    3
  6805 ;; This function calls:
  6806 ;;		_SD_Command
  6807 ;; This function is called by:
  6808 ;;		_main
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	text27
  6813  002A40                     __ptext27:
  6814                           	opt stack 0
  6815  002A40                     _SD_MBR_Start:
  6816                           	opt stack 27
  6817                           
  6818                           ;SD_PIC.c: 289: if(SDCard.Type == TYPE_SDSC){
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;incstack = 0
  6822  002A40  0100               	movlb	0	; () banked
  6823  002A42  5181               	movf	(_SDCard+1)& (0+255),w,b
  6824  002A44  A4D8               	btfss	status,2,c
  6825  002A46  D008               	goto	l3044
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;SD_PIC.c: 291: startBlock <<= 9;
  6829  002A48  0E09               	movlw	9
  6830  002A4A                     u2635:
  6831  002A4A  90D8               	bcf	status,0,c
  6832  002A4C  360B               	rlcf	SD_MBR_Start@startBlock,f,c
  6833  002A4E  360C               	rlcf	SD_MBR_Start@startBlock+1,f,c
  6834  002A50  360D               	rlcf	SD_MBR_Start@startBlock+2,f,c
  6835  002A52  360E               	rlcf	SD_MBR_Start@startBlock+3,f,c
  6836  002A54  2EE8               	decfsz	wreg,f,c
  6837  002A56  D7F9               	goto	u2635
  6838  002A58                     l3044:
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;SD_PIC.c: 292: }
  6842                           ;SD_PIC.c: 296: unsigned char response = 0;
  6843  002A58  0E00               	movlw	0
  6844  002A5A  6E10               	movwf	SD_MBR_Start@response,c
  6845  002A5C                     l3046:
  6846                           
  6847                           ;SD_PIC.c: 298: response = SD_Command(CMD18, startBlock);
  6848  002A5C  C00B  F004         	movff	SD_MBR_Start@startBlock,SD_Command@arg
  6849  002A60  C00C  F005         	movff	SD_MBR_Start@startBlock+1,SD_Command@arg+1
  6850  002A64  C00D  F006         	movff	SD_MBR_Start@startBlock+2,SD_Command@arg+2
  6851  002A68  C00E  F007         	movff	SD_MBR_Start@startBlock+3,SD_Command@arg+3
  6852  002A6C  0E3E               	movlw	low _CMD18
  6853  002A6E  6EF6               	movwf	tblptrl,c
  6854  002A70                     	if	1	;There is more than 1 active tblptr byte
  6855  002A70  0E10               	movlw	high _CMD18
  6856  002A72  6EF7               	movwf	tblptrh,c
  6857  002A74                     	endif
  6858  002A74                     	if	0	;There are less than 3 active tblptr bytes
  6859  002A74                     	endif
  6860  002A74  0008               	tblrd		*
  6861  002A76  50F5               	movf	tablat,w,c
  6862  002A78  ECA9  F014         	call	_SD_Command
  6863  002A7C  6E10               	movwf	SD_MBR_Start@response,c
  6864                           
  6865                           ;SD_PIC.c: 299: if(response & 0x0F){
  6866  002A7E  C010  F00F         	movff	SD_MBR_Start@response,??_SD_MBR_Start
  6867  002A82  0E0F               	movlw	15
  6868  002A84  160F               	andwf	??_SD_MBR_Start,f,c
  6869  002A86  A4D8               	btfss	status,2,c
  6870  002A88  0012               	return	
  6871                           
  6872                           ;SD_PIC.c: 305: }
  6873                           ;SD_PIC.c: 306: }while(response != R1_READY_STATE);
  6874                           
  6875                           ;SD_PIC.c: 304: return 0;
  6876                           ;	Return value of _SD_MBR_Start is never used
  6877  002A8A  0E33               	movlw	low _R1_READY_STATE
  6878  002A8C  6EF6               	movwf	tblptrl,c
  6879  002A8E                     	if	1	;There is more than 1 active tblptr byte
  6880  002A8E  0E10               	movlw	high _R1_READY_STATE
  6881  002A90  6EF7               	movwf	tblptrh,c
  6882  002A92                     	endif
  6883  002A92                     	if	0	;There are less than 3 active tblptr bytes
  6884  002A92                     	endif
  6885  002A92  0008               	tblrd		*
  6886  002A94  50F5               	movf	tablat,w,c
  6887  002A96  6210               	cpfseq	SD_MBR_Start@response,c
  6888  002A98  D7E1               	goto	l3046
  6889                           
  6890                           ;SD_PIC.c: 308: SDCard.read.MBR_startBlock = startBlock;
  6891  002A9A  C00B  F0A9         	movff	SD_MBR_Start@startBlock,_SDCard+41
  6892  002A9E  C00C  F0AA         	movff	SD_MBR_Start@startBlock+1,_SDCard+42
  6893  002AA2  C00D  F0AB         	movff	SD_MBR_Start@startBlock+2,_SDCard+43
  6894  002AA6  C00E  F0AC         	movff	SD_MBR_Start@startBlock+3,_SDCard+44
  6895                           
  6896                           ;SD_PIC.c: 310: return 1;
  6897                           ;	Return value of _SD_MBR_Start is never used
  6898  002AAA  0012               	return		;funcret
  6899  002AAC                     __end_of_SD_MBR_Start:
  6900                           	opt stack 0
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           intcon	equ	0xFF2
  6908                           postinc0	equ	0xFEE
  6909                           wreg	equ	0xFE8
  6910                           postdec1	equ	0xFE5
  6911                           plusw1	equ	0xFE3
  6912                           fsr1h	equ	0xFE2
  6913                           fsr1l	equ	0xFE1
  6914                           indf2	equ	0xFDF
  6915                           postinc2	equ	0xFDE
  6916                           postdec2	equ	0xFDD
  6917                           plusw2	equ	0xFDB
  6918                           fsr2h	equ	0xFDA
  6919                           fsr2l	equ	0xFD9
  6920                           status	equ	0xFD8
  6921                           
  6922 ;; *************** function _SD_MBR_Receive *****************
  6923 ;; Defined at:
  6924 ;;		line 313 in file "SD_PIC.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;  bufReceive      2    3[COMRAM] PTR unsigned char 
  6927 ;;		 -> main@readBuffer(512), 
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;  i               2    6[COMRAM] unsigned short 
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  1    wreg      void 
  6932 ;; Registers used:
  6933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6934 ;; Tracked objects:
  6935 ;;		On entry : 0/0
  6936 ;;		On exit  : 0/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6939 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6941 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6942 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;Total ram usage:        5 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; Hardware stack levels required when called:    2
  6946 ;; This function calls:
  6947 ;;		_spiReceive
  6948 ;;		_spiSend
  6949 ;; This function is called by:
  6950 ;;		_main
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	text28
  6955  00273E                     __ptext28:
  6956                           	opt stack 0
  6957  00273E                     _SD_MBR_Receive:
  6958                           	opt stack 28
  6959  00273E                     l3056:
  6960  00273E  ECD0  F016         	call	_spiReceive	;wreg free
  6961  002742  0900               	iorlw	0
  6962  002744  B4D8               	btfsc	status,2,c
  6963  002746  D7FB               	goto	l3056
  6964                           
  6965                           ;SD_PIC.c: 318: }
  6966                           ;SD_PIC.c: 320: LATEbits.LATE2 = 0;
  6967  002748  948D               	bcf	3981,2,c	;volatile
  6968  00274A                     l3058:
  6969  00274A  ECD0  F016         	call	_spiReceive	;wreg free
  6970  00274E  6E06               	movwf	??_SD_MBR_Receive& (0+255),c
  6971  002750  0E30               	movlw	low _START_BLOCK
  6972  002752  6EF6               	movwf	tblptrl,c
  6973  002754                     	if	1	;There is more than 1 active tblptr byte
  6974  002754  0E10               	movlw	high _START_BLOCK
  6975  002756  6EF7               	movwf	tblptrh,c
  6976  002758                     	endif
  6977  002758                     	if	0	;There are less than 3 active tblptr bytes
  6978  002758                     	endif
  6979  002758  0008               	tblrd		*
  6980  00275A  50F5               	movf	tablat,w,c
  6981  00275C  1806               	xorwf	??_SD_MBR_Receive,w,c
  6982  00275E  A4D8               	btfss	status,2,c
  6983  002760  D7F4               	goto	l3058
  6984                           
  6985                           ;SD_PIC.c: 325: }
  6986                           ;SD_PIC.c: 328: for(unsigned short i = 0; i < 512; i++){
  6987  002762  0E00               	movlw	0
  6988  002764  6E08               	movwf	SD_MBR_Receive@i+1,c
  6989  002766  0E00               	movlw	0
  6990  002768  6E07               	movwf	SD_MBR_Receive@i,c
  6991  00276A                     l3062:
  6992  00276A  0E02               	movlw	2
  6993  00276C  5C08               	subwf	SD_MBR_Receive@i+1,w,c
  6994  00276E  B0D8               	btfsc	status,0,c
  6995  002770  D00C               	goto	l3072
  6996                           
  6997                           ;SD_PIC.c: 329: bufReceive[i] = spiReceive();
  6998  002772  5007               	movf	SD_MBR_Receive@i,w,c
  6999  002774  2404               	addwf	SD_MBR_Receive@bufReceive,w,c
  7000  002776  6ED9               	movwf	fsr2l,c
  7001  002778  5008               	movf	SD_MBR_Receive@i+1,w,c
  7002  00277A  2005               	addwfc	SD_MBR_Receive@bufReceive+1,w,c
  7003  00277C  6EDA               	movwf	fsr2h,c
  7004  00277E  ECD0  F016         	call	_spiReceive	;wreg free
  7005  002782  6EDF               	movwf	indf2,c
  7006  002784  4A07               	infsnz	SD_MBR_Receive@i,f,c
  7007  002786  2A08               	incf	SD_MBR_Receive@i+1,f,c
  7008  002788  D7F0               	goto	l3062
  7009  00278A                     l3072:
  7010                           
  7011                           ;SD_PIC.c: 330: }
  7012                           ;SD_PIC.c: 333: spiSend(0xFF);
  7013  00278A  0EFF               	movlw	255
  7014  00278C  ECCB  F016         	call	_spiSend
  7015                           
  7016                           ;SD_PIC.c: 334: spiSend(0xFF);
  7017  002790  0EFF               	movlw	255
  7018  002792  ECCB  F016         	call	_spiSend
  7019                           
  7020                           ;SD_PIC.c: 336: LATEbits.LATE2 = 1;
  7021  002796  848D               	bsf	3981,2,c	;volatile
  7022                           
  7023                           ;SD_PIC.c: 338: if(SDCard.read.MBR_flag_first){
  7024  002798  0100               	movlb	0	; () banked
  7025  00279A  51AD               	movf	(_SDCard+45)& (0+255),w,b
  7026  00279C  B4D8               	btfsc	status,2,c
  7027  00279E  D00C               	goto	l3082
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;SD_PIC.c: 339: SDCard.read.lastBlockRead = SDCard.read.MBR_startBlock;
  7031  0027A0  C0A9  F0A5         	movff	_SDCard+41,_SDCard+37
  7032  0027A4  C0AA  F0A6         	movff	_SDCard+42,_SDCard+38
  7033  0027A8  C0AB  F0A7         	movff	_SDCard+43,_SDCard+39
  7034  0027AC  C0AC  F0A8         	movff	_SDCard+44,_SDCard+40
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;SD_PIC.c: 340: SDCard.read.MBR_flag_first = 0;
  7038  0027B0  0E00               	movlw	0
  7039  0027B2  0100               	movlb	0	; () banked
  7040  0027B4  6FAD               	movwf	(_SDCard+45)& (0+255),b
  7041                           
  7042                           ;SD_PIC.c: 341: }
  7043  0027B6  0012               	return	
  7044  0027B8                     l3082:
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;SD_PIC.c: 342: else{
  7048                           ;SD_PIC.c: 343: SDCard.read.lastBlockRead++;
  7049  0027B8  0E01               	movlw	1
  7050  0027BA  0100               	movlb	0	; () banked
  7051  0027BC  27A5               	addwf	(_SDCard+37)& (0+255),f,b
  7052  0027BE  0E00               	movlw	0
  7053  0027C0  23A6               	addwfc	(_SDCard+38)& (0+255),f,b
  7054  0027C2  23A7               	addwfc	(_SDCard+39)& (0+255),f,b
  7055  0027C4  23A8               	addwfc	(_SDCard+40)& (0+255),f,b
  7056  0027C6  0012               	return	
  7057  0027C8                     __end_of_SD_MBR_Receive:
  7058                           	opt stack 0
  7059                           tblptru	equ	0xFF8
  7060                           tblptrh	equ	0xFF7
  7061                           tblptrl	equ	0xFF6
  7062                           tablat	equ	0xFF5
  7063                           prodh	equ	0xFF4
  7064                           prodl	equ	0xFF3
  7065                           intcon	equ	0xFF2
  7066                           postinc0	equ	0xFEE
  7067                           wreg	equ	0xFE8
  7068                           postdec1	equ	0xFE5
  7069                           plusw1	equ	0xFE3
  7070                           fsr1h	equ	0xFE2
  7071                           fsr1l	equ	0xFE1
  7072                           indf2	equ	0xFDF
  7073                           postinc2	equ	0xFDE
  7074                           postdec2	equ	0xFDD
  7075                           plusw2	equ	0xFDB
  7076                           fsr2h	equ	0xFDA
  7077                           fsr2l	equ	0xFD9
  7078                           status	equ	0xFD8
  7079                           
  7080 ;; *************** function _SD_EraseBlocks *****************
  7081 ;; Defined at:
  7082 ;;		line 353 in file "SD_PIC.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;  firstBlock      4   10[COMRAM] unsigned long 
  7085 ;;  lastBlock       4   14[COMRAM] unsigned long 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;		None
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  1    wreg      void 
  7090 ;; Registers used:
  7091 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7097 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7101 ;;Total ram usage:        8 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    3
  7104 ;; This function calls:
  7105 ;;		_SD_Command
  7106 ;; This function is called by:
  7107 ;;		_main
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           	psect	text29
  7112  0027C8                     __ptext29:
  7113                           	opt stack 0
  7114  0027C8                     _SD_EraseBlocks:
  7115                           	opt stack 27
  7116                           
  7117                           ;SD_PIC.c: 358: if(SDCard.Type == TYPE_SDSC){
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;incstack = 0
  7121  0027C8  0100               	movlb	0	; () banked
  7122  0027CA  5181               	movf	(_SDCard+1)& (0+255),w,b
  7123  0027CC  A4D8               	btfss	status,2,c
  7124  0027CE  D010               	goto	l2874
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;SD_PIC.c: 360: firstBlock <<= 9;
  7128  0027D0  0E09               	movlw	9
  7129  0027D2                     u2375:
  7130  0027D2  90D8               	bcf	status,0,c
  7131  0027D4  360B               	rlcf	SD_EraseBlocks@firstBlock,f,c
  7132  0027D6  360C               	rlcf	SD_EraseBlocks@firstBlock+1,f,c
  7133  0027D8  360D               	rlcf	SD_EraseBlocks@firstBlock+2,f,c
  7134  0027DA  360E               	rlcf	SD_EraseBlocks@firstBlock+3,f,c
  7135  0027DC  2EE8               	decfsz	wreg,f,c
  7136  0027DE  D7F9               	goto	u2375
  7137                           
  7138                           ;SD_PIC.c: 361: lastBlock <<= 9;
  7139  0027E0  0E09               	movlw	9
  7140  0027E2                     u2385:
  7141  0027E2  90D8               	bcf	status,0,c
  7142  0027E4  360F               	rlcf	SD_EraseBlocks@lastBlock,f,c
  7143  0027E6  3610               	rlcf	SD_EraseBlocks@lastBlock+1,f,c
  7144  0027E8  3611               	rlcf	SD_EraseBlocks@lastBlock+2,f,c
  7145  0027EA  3612               	rlcf	SD_EraseBlocks@lastBlock+3,f,c
  7146  0027EC  2EE8               	decfsz	wreg,f,c
  7147  0027EE  D7F9               	goto	u2385
  7148  0027F0                     l2874:
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;SD_PIC.c: 362: }
  7152                           ;SD_PIC.c: 365: SD_Command(CMD32, firstBlock);
  7153  0027F0  C00B  F004         	movff	SD_EraseBlocks@firstBlock,SD_Command@arg
  7154  0027F4  C00C  F005         	movff	SD_EraseBlocks@firstBlock+1,SD_Command@arg+1
  7155  0027F8  C00D  F006         	movff	SD_EraseBlocks@firstBlock+2,SD_Command@arg+2
  7156  0027FC  C00E  F007         	movff	SD_EraseBlocks@firstBlock+3,SD_Command@arg+3
  7157  002800  0E3B               	movlw	low _CMD32
  7158  002802  6EF6               	movwf	tblptrl,c
  7159  002804                     	if	1	;There is more than 1 active tblptr byte
  7160  002804  0E10               	movlw	high _CMD32
  7161  002806  6EF7               	movwf	tblptrh,c
  7162  002808                     	endif
  7163  002808                     	if	0	;There are less than 3 active tblptr bytes
  7164  002808                     	endif
  7165  002808  0008               	tblrd		*
  7166  00280A  50F5               	movf	tablat,w,c
  7167  00280C  ECA9  F014         	call	_SD_Command
  7168                           
  7169                           ;SD_PIC.c: 368: SD_Command(CMD33, lastBlock);
  7170  002810  C00F  F004         	movff	SD_EraseBlocks@lastBlock,SD_Command@arg
  7171  002814  C010  F005         	movff	SD_EraseBlocks@lastBlock+1,SD_Command@arg+1
  7172  002818  C011  F006         	movff	SD_EraseBlocks@lastBlock+2,SD_Command@arg+2
  7173  00281C  C012  F007         	movff	SD_EraseBlocks@lastBlock+3,SD_Command@arg+3
  7174  002820  0E3A               	movlw	low _CMD33
  7175  002822  6EF6               	movwf	tblptrl,c
  7176  002824                     	if	1	;There is more than 1 active tblptr byte
  7177  002824  0E10               	movlw	high _CMD33
  7178  002826  6EF7               	movwf	tblptrh,c
  7179  002828                     	endif
  7180  002828                     	if	0	;There are less than 3 active tblptr bytes
  7181  002828                     	endif
  7182  002828  0008               	tblrd		*
  7183  00282A  50F5               	movf	tablat,w,c
  7184  00282C  ECA9  F014         	call	_SD_Command
  7185                           
  7186                           ;SD_PIC.c: 371: SD_Command(CMD38, 0);
  7187  002830  0E00               	movlw	0
  7188  002832  6E04               	movwf	SD_Command@arg,c
  7189  002834  0E00               	movlw	0
  7190  002836  6E05               	movwf	SD_Command@arg+1,c
  7191  002838  0E00               	movlw	0
  7192  00283A  6E06               	movwf	SD_Command@arg+2,c
  7193  00283C  0E00               	movlw	0
  7194  00283E  6E07               	movwf	SD_Command@arg+3,c
  7195  002840  0E39               	movlw	low _CMD38
  7196  002842  6EF6               	movwf	tblptrl,c
  7197  002844                     	if	1	;There is more than 1 active tblptr byte
  7198  002844  0E10               	movlw	high _CMD38
  7199  002846  6EF7               	movwf	tblptrh,c
  7200  002848                     	endif
  7201  002848                     	if	0	;There are less than 3 active tblptr bytes
  7202  002848                     	endif
  7203  002848  0008               	tblrd		*
  7204  00284A  50F5               	movf	tablat,w,c
  7205  00284C  ECA9  F014         	call	_SD_Command
  7206  002850  0012               	return		;funcret
  7207  002852                     __end_of_SD_EraseBlocks:
  7208                           	opt stack 0
  7209                           tblptru	equ	0xFF8
  7210                           tblptrh	equ	0xFF7
  7211                           tblptrl	equ	0xFF6
  7212                           tablat	equ	0xFF5
  7213                           prodh	equ	0xFF4
  7214                           prodl	equ	0xFF3
  7215                           intcon	equ	0xFF2
  7216                           postinc0	equ	0xFEE
  7217                           wreg	equ	0xFE8
  7218                           postdec1	equ	0xFE5
  7219                           plusw1	equ	0xFE3
  7220                           fsr1h	equ	0xFE2
  7221                           fsr1l	equ	0xFE1
  7222                           indf2	equ	0xFDF
  7223                           postinc2	equ	0xFDE
  7224                           postdec2	equ	0xFDD
  7225                           plusw2	equ	0xFDB
  7226                           fsr2h	equ	0xFDA
  7227                           fsr2l	equ	0xFD9
  7228                           status	equ	0xFD8
  7229                           
  7230 ;; *************** function _SD_Command *****************
  7231 ;; Defined at:
  7232 ;;		line 55 in file "SD_PIC.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;  cmd             1    wreg     unsigned char 
  7235 ;;  arg             4    3[COMRAM] unsigned long 
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;  cmd             1    8[COMRAM] unsigned char 
  7238 ;;  response        1    9[COMRAM] unsigned char 
  7239 ;;  n               1    7[COMRAM] unsigned char 
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  1    wreg      unsigned char 
  7242 ;; Registers used:
  7243 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7249 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;Total ram usage:        7 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    2
  7256 ;; This function calls:
  7257 ;;		_spiReceive
  7258 ;;		_spiSend
  7259 ;; This function is called by:
  7260 ;;		_SD_ACMD
  7261 ;;		_SD_SingleBlockWrite
  7262 ;;		_SD_MBW_Start
  7263 ;;		_SD_MBW_Send
  7264 ;;		_SD_SingleBlockRead
  7265 ;;		_SD_MBR_Start
  7266 ;;		_SD_MBR_Stop
  7267 ;;		_SD_EraseBlocks
  7268 ;;		_initSD
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           	psect	text30
  7273  002952                     __ptext30:
  7274                           	opt stack 0
  7275  002952                     _SD_Command:
  7276                           	opt stack 27
  7277                           
  7278                           ;incstack = 0
  7279                           ;SD_Command@cmd stored from wreg
  7280  002952  6E09               	movwf	SD_Command@cmd,c
  7281                           
  7282                           ;SD_PIC.c: 56: LATEbits.LATE2 = 0;
  7283  002954  948D               	bcf	3981,2,c	;volatile
  7284  002956                     l2220:
  7285  002956  ECD0  F016         	call	_spiReceive	;wreg free
  7286  00295A  0AFF               	xorlw	255
  7287  00295C  A4D8               	btfss	status,2,c
  7288  00295E  D7FB               	goto	l2220
  7289                           
  7290                           ;SD_PIC.c: 63: }
  7291                           ;SD_PIC.c: 66: spiSend(cmd | 0x40U);
  7292  002960  5009               	movf	SD_Command@cmd,w,c
  7293  002962  0940               	iorlw	64
  7294  002964  ECCB  F016         	call	_spiSend
  7295                           
  7296                           ;SD_PIC.c: 69: spiSend(arg >> 24);
  7297  002968  5007               	movf	SD_Command@arg+3,w,c
  7298  00296A  ECCB  F016         	call	_spiSend
  7299                           
  7300                           ;SD_PIC.c: 70: spiSend((arg >> 16) & 0xFF);
  7301  00296E  5006               	movf	SD_Command@arg+2,w,c
  7302  002970  ECCB  F016         	call	_spiSend
  7303                           
  7304                           ;SD_PIC.c: 71: spiSend((arg >> 8) & 0xFF);
  7305  002974  5005               	movf	SD_Command@arg+1,w,c
  7306  002976  ECCB  F016         	call	_spiSend
  7307                           
  7308                           ;SD_PIC.c: 72: spiSend(arg & 0xFF);
  7309  00297A  5004               	movf	SD_Command@arg,w,c
  7310  00297C  ECCB  F016         	call	_spiSend
  7311                           
  7312                           ;SD_PIC.c: 77: if(cmd == CMD8){
  7313  002980  0E46               	movlw	low _CMD8
  7314  002982  6EF6               	movwf	tblptrl,c
  7315  002984                     	if	1	;There is more than 1 active tblptr byte
  7316  002984  0E10               	movlw	high _CMD8
  7317  002986  6EF7               	movwf	tblptrh,c
  7318  002988                     	endif
  7319  002988                     	if	0	;There are less than 3 active tblptr bytes
  7320  002988                     	endif
  7321  002988  0008               	tblrd		*
  7322  00298A  50F5               	movf	tablat,w,c
  7323  00298C  6209               	cpfseq	SD_Command@cmd,c
  7324  00298E  D009               	goto	l2236
  7325                           
  7326                           ;SD_PIC.c: 78: spiSend(CMD8CRC);
  7327  002990  0E45               	movlw	low _CMD8CRC
  7328  002992  6EF6               	movwf	tblptrl,c
  7329  002994                     	if	1	;There is more than 1 active tblptr byte
  7330  002994  0E10               	movlw	high _CMD8CRC
  7331  002996  6EF7               	movwf	tblptrh,c
  7332  002998                     	endif
  7333  002998                     	if	0	;There are less than 3 active tblptr bytes
  7334  002998                     	endif
  7335  002998  0008               	tblrd		*
  7336  00299A  50F5               	movf	tablat,w,c
  7337  00299C  ECCB  F016         	call	_spiSend
  7338                           
  7339                           ;SD_PIC.c: 79: }
  7340  0029A0  D008               	goto	l2238
  7341  0029A2                     l2236:
  7342                           
  7343                           ;SD_PIC.c: 80: else{
  7344                           ;SD_PIC.c: 81: spiSend(CMD0CRC);
  7345  0029A2  0E48               	movlw	low _CMD0CRC
  7346  0029A4  6EF6               	movwf	tblptrl,c
  7347  0029A6                     	if	1	;There is more than 1 active tblptr byte
  7348  0029A6  0E10               	movlw	high _CMD0CRC
  7349  0029A8  6EF7               	movwf	tblptrh,c
  7350  0029AA                     	endif
  7351  0029AA                     	if	0	;There are less than 3 active tblptr bytes
  7352  0029AA                     	endif
  7353  0029AA  0008               	tblrd		*
  7354  0029AC  50F5               	movf	tablat,w,c
  7355  0029AE  ECCB  F016         	call	_spiSend
  7356  0029B2                     l2238:
  7357                           
  7358                           ;SD_PIC.c: 82: }
  7359                           ;SD_PIC.c: 85: unsigned char n = 0;
  7360  0029B2  0E00               	movlw	0
  7361  0029B4  6E08               	movwf	SD_Command@n,c
  7362  0029B6                     l2240:
  7363                           
  7364                           ;SD_PIC.c: 88: response = spiReceive();
  7365  0029B6  ECD0  F016         	call	_spiReceive	;wreg free
  7366  0029BA  6E0A               	movwf	SD_Command@response,c
  7367                           
  7368                           ;SD_PIC.c: 89: n++;
  7369  0029BC  2A08               	incf	SD_Command@n,f,c
  7370                           
  7371                           ;SD_PIC.c: 90: }while((n < 8) && (response == 0xFF));
  7372  0029BE  0E08               	movlw	8
  7373  0029C0  6008               	cpfslt	SD_Command@n,c
  7374  0029C2  D003               	goto	l187
  7375  0029C4  280A               	incf	SD_Command@response,w,c
  7376  0029C6  B4D8               	btfsc	status,2,c
  7377  0029C8  D7F6               	goto	l2240
  7378  0029CA                     l187:
  7379                           
  7380                           ;SD_PIC.c: 92: LATEbits.LATE2 = 1;
  7381  0029CA  848D               	bsf	3981,2,c	;volatile
  7382                           
  7383                           ;SD_PIC.c: 94: return response;
  7384  0029CC  500A               	movf	SD_Command@response,w,c
  7385  0029CE  0012               	return	
  7386  0029D0                     __end_of_SD_Command:
  7387                           	opt stack 0
  7388                           tblptru	equ	0xFF8
  7389                           tblptrh	equ	0xFF7
  7390                           tblptrl	equ	0xFF6
  7391                           tablat	equ	0xFF5
  7392                           prodh	equ	0xFF4
  7393                           prodl	equ	0xFF3
  7394                           intcon	equ	0xFF2
  7395                           postinc0	equ	0xFEE
  7396                           wreg	equ	0xFE8
  7397                           postdec1	equ	0xFE5
  7398                           plusw1	equ	0xFE3
  7399                           fsr1h	equ	0xFE2
  7400                           fsr1l	equ	0xFE1
  7401                           indf2	equ	0xFDF
  7402                           postinc2	equ	0xFDE
  7403                           postdec2	equ	0xFDD
  7404                           plusw2	equ	0xFDB
  7405                           fsr2h	equ	0xFDA
  7406                           fsr2l	equ	0xFD9
  7407                           status	equ	0xFD8
  7408                           
  7409 ;; *************** function _spiSend *****************
  7410 ;; Defined at:
  7411 ;;		line 29 in file "SPI_PIC.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;  val             1    wreg     unsigned char 
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;  val             1    2[COMRAM] unsigned char 
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      void 
  7418 ;; Registers used:
  7419 ;;		wreg, status,2, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7426 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7429 ;;Total ram usage:        1 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    1
  7432 ;; This function calls:
  7433 ;;		_spiTransfer
  7434 ;; This function is called by:
  7435 ;;		_SD_SendDummyBytes
  7436 ;;		_SD_Command
  7437 ;;		_SD_SingleBlockWrite
  7438 ;;		_SD_MBW_Send
  7439 ;;		_SD_MBW_Stop
  7440 ;;		_SD_SingleBlockRead
  7441 ;;		_SD_MBR_Receive
  7442 ;;		_initSD
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text31
  7447  002D96                     __ptext31:
  7448                           	opt stack 0
  7449  002D96                     _spiSend:
  7450                           	opt stack 28
  7451                           
  7452                           ;incstack = 0
  7453                           ;spiSend@val stored from wreg
  7454  002D96  6E03               	movwf	spiSend@val,c
  7455                           
  7456                           ;SPI_PIC.c: 30: spiTransfer(val);
  7457  002D98  5003               	movf	spiSend@val,w,c
  7458  002D9A  EC8D  F016         	call	_spiTransfer
  7459  002D9E  0012               	return		;funcret
  7460  002DA0                     __end_of_spiSend:
  7461                           	opt stack 0
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           intcon	equ	0xFF2
  7469                           postinc0	equ	0xFEE
  7470                           wreg	equ	0xFE8
  7471                           postdec1	equ	0xFE5
  7472                           plusw1	equ	0xFE3
  7473                           fsr1h	equ	0xFE2
  7474                           fsr1l	equ	0xFE1
  7475                           indf2	equ	0xFDF
  7476                           postinc2	equ	0xFDE
  7477                           postdec2	equ	0xFDD
  7478                           plusw2	equ	0xFDB
  7479                           fsr2h	equ	0xFDA
  7480                           fsr2l	equ	0xFD9
  7481                           status	equ	0xFD8
  7482                           
  7483 ;; *************** function _spiReceive *****************
  7484 ;; Defined at:
  7485 ;;		line 33 in file "SPI_PIC.c"
  7486 ;; Parameters:    Size  Location     Type
  7487 ;;		None
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;		None
  7490 ;; Return value:  Size  Location     Type
  7491 ;;                  1    wreg      unsigned char 
  7492 ;; Registers used:
  7493 ;;		wreg, status,2, cstack
  7494 ;; Tracked objects:
  7495 ;;		On entry : 0/0
  7496 ;;		On exit  : 0/0
  7497 ;;		Unchanged: 0/0
  7498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7503 ;;Total ram usage:        0 bytes
  7504 ;; Hardware stack levels used:    1
  7505 ;; Hardware stack levels required when called:    1
  7506 ;; This function calls:
  7507 ;;		_spiTransfer
  7508 ;; This function is called by:
  7509 ;;		_main
  7510 ;;		_SD_Command
  7511 ;;		_SD_SingleBlockWrite
  7512 ;;		_SD_MBW_Send
  7513 ;;		_SD_MBW_Stop
  7514 ;;		_SD_SingleBlockRead
  7515 ;;		_SD_MBR_Receive
  7516 ;;		_initSD
  7517 ;; This function uses a non-reentrant model
  7518 ;;
  7519                           
  7520                           	psect	text32
  7521  002DA0                     __ptext32:
  7522                           	opt stack 0
  7523  002DA0                     _spiReceive:
  7524                           	opt stack 29
  7525                           
  7526                           ;SPI_PIC.c: 34: return spiTransfer(0xFF);
  7527                           
  7528                           ;incstack = 0
  7529  002DA0  0EFF               	movlw	255
  7530  002DA2  EC8D  F016         	call	_spiTransfer
  7531  002DA6  0012               	return	
  7532  002DA8                     __end_of_spiReceive:
  7533                           	opt stack 0
  7534                           tblptru	equ	0xFF8
  7535                           tblptrh	equ	0xFF7
  7536                           tblptrl	equ	0xFF6
  7537                           tablat	equ	0xFF5
  7538                           prodh	equ	0xFF4
  7539                           prodl	equ	0xFF3
  7540                           intcon	equ	0xFF2
  7541                           postinc0	equ	0xFEE
  7542                           wreg	equ	0xFE8
  7543                           postdec1	equ	0xFE5
  7544                           plusw1	equ	0xFE3
  7545                           fsr1h	equ	0xFE2
  7546                           fsr1l	equ	0xFE1
  7547                           indf2	equ	0xFDF
  7548                           postinc2	equ	0xFDE
  7549                           postdec2	equ	0xFDD
  7550                           plusw2	equ	0xFDB
  7551                           fsr2h	equ	0xFDA
  7552                           fsr2l	equ	0xFD9
  7553                           status	equ	0xFD8
  7554                           
  7555 ;; *************** function _spiTransfer *****************
  7556 ;; Defined at:
  7557 ;;		line 14 in file "SPI_PIC.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  byteToTransf    1    wreg     unsigned char 
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  7562 ;; Return value:  Size  Location     Type
  7563 ;;                  1    wreg      unsigned char 
  7564 ;; Registers used:
  7565 ;;		wreg, status,2
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7575 ;;Total ram usage:        2 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; This function calls:
  7578 ;;		Nothing
  7579 ;; This function is called by:
  7580 ;;		_SD_SingleBlockWrite
  7581 ;;		_SD_MBW_Send
  7582 ;;		_spiSend
  7583 ;;		_spiReceive
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           	psect	text33
  7588  002D1A                     __ptext33:
  7589                           	opt stack 0
  7590  002D1A                     _spiTransfer:
  7591                           	opt stack 29
  7592                           
  7593                           ;incstack = 0
  7594                           ;spiTransfer@byteToTransfer stored from wreg
  7595  002D1A  6E02               	movwf	spiTransfer@byteToTransfer,c
  7596                           
  7597                           ;SPI_PIC.c: 18: SSPBUF = byteToTransfer;
  7598  002D1C  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  7599  002D20                     l2192:
  7600  002D20  B69E               	btfsc	3998,3,c	;volatile
  7601  002D22  D002               	goto	u1460
  7602  002D24  0E01               	movlw	1
  7603  002D26  D001               	goto	u1462
  7604  002D28                     u1460:
  7605  002D28  0E00               	movlw	0
  7606  002D2A                     u1462:
  7607  002D2A  6E01               	movwf	??_spiTransfer& (0+255),c
  7608  002D2C  B0C7               	btfsc	4039,0,c	;volatile
  7609  002D2E  D002               	goto	u1470
  7610  002D30  0E01               	movlw	1
  7611  002D32  D001               	goto	u1472
  7612  002D34                     u1470:
  7613  002D34  0E00               	movlw	0
  7614  002D36                     u1472:
  7615  002D36  1001               	iorwf	??_spiTransfer,w,c
  7616  002D38  E1F3               	bnz	l2192
  7617                           
  7618                           ;SPI_PIC.c: 24: }
  7619                           ;SPI_PIC.c: 26: return SSPBUF;
  7620  002D3A  50C9               	movf	4041,w,c	;volatile
  7621  002D3C  0012               	return	
  7622  002D3E                     __end_of_spiTransfer:
  7623                           	opt stack 0
  7624                           tblptru	equ	0xFF8
  7625                           tblptrh	equ	0xFF7
  7626                           tblptrl	equ	0xFF6
  7627                           tablat	equ	0xFF5
  7628                           prodh	equ	0xFF4
  7629                           prodl	equ	0xFF3
  7630                           intcon	equ	0xFF2
  7631                           postinc0	equ	0xFEE
  7632                           wreg	equ	0xFE8
  7633                           postdec1	equ	0xFE5
  7634                           plusw1	equ	0xFE3
  7635                           fsr1h	equ	0xFE2
  7636                           fsr1l	equ	0xFE1
  7637                           indf2	equ	0xFDF
  7638                           postinc2	equ	0xFDE
  7639                           postdec2	equ	0xFDD
  7640                           plusw2	equ	0xFDB
  7641                           fsr2h	equ	0xFDA
  7642                           fsr2l	equ	0xFD9
  7643                           status	equ	0xFD8
  7644                           tblptru	equ	0xFF8
  7645                           tblptrh	equ	0xFF7
  7646                           tblptrl	equ	0xFF6
  7647                           tablat	equ	0xFF5
  7648                           prodh	equ	0xFF4
  7649                           prodl	equ	0xFF3
  7650                           intcon	equ	0xFF2
  7651                           postinc0	equ	0xFEE
  7652                           wreg	equ	0xFE8
  7653                           postdec1	equ	0xFE5
  7654                           plusw1	equ	0xFE3
  7655                           fsr1h	equ	0xFE2
  7656                           fsr1l	equ	0xFE1
  7657                           indf2	equ	0xFDF
  7658                           postinc2	equ	0xFDE
  7659                           postdec2	equ	0xFDD
  7660                           plusw2	equ	0xFDB
  7661                           fsr2h	equ	0xFDA
  7662                           fsr2l	equ	0xFD9
  7663                           status	equ	0xFD8
  7664                           
  7665                           	psect	rparam
  7666  0000                     tblptru	equ	0xFF8
  7667                           tblptrh	equ	0xFF7
  7668                           tblptrl	equ	0xFF6
  7669                           tablat	equ	0xFF5
  7670                           prodh	equ	0xFF4
  7671                           prodl	equ	0xFF3
  7672                           intcon	equ	0xFF2
  7673                           postinc0	equ	0xFEE
  7674                           wreg	equ	0xFE8
  7675                           postdec1	equ	0xFE5
  7676                           plusw1	equ	0xFE3
  7677                           fsr1h	equ	0xFE2
  7678                           fsr1l	equ	0xFE1
  7679                           indf2	equ	0xFDF
  7680                           postinc2	equ	0xFDE
  7681                           postdec2	equ	0xFDD
  7682                           plusw2	equ	0xFDB
  7683                           fsr2h	equ	0xFDA
  7684                           fsr2l	equ	0xFD9
  7685                           status	equ	0xFD8


Data Sizes:
    Strings     156
    Constant    74
    Data        0
    BSS         1086
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    114     114
    BANK0           128      0      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_16(CODE[8]), STR_15(CODE[10]), STR_14(CODE[2]), STR_13(CODE[6]), 
		 -> STR_12(CODE[16]), STR_11(CODE[9]), STR_10(CODE[8]), STR_9(CODE[17]), 
		 -> STR_8(CODE[9]), STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[13]), 
		 -> STR_4(CODE[15]), STR_3(CODE[13]), STR_2(CODE[12]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    SD_MBR_Receive@bufReceive	PTR unsigned char  size(2) Largest target is 512
		 -> main@readBuffer(BIGRAM[512]), 

    SD_SingleBlockRead@buf	PTR unsigned char  size(2) Largest target is 512
		 -> main@readBuffer(BIGRAM[512]), 

    SD_MBW_Send@arrWrite	PTR unsigned char  size(2) Largest target is 512
		 -> writeBuffer(BIGRAM[512]), 

    SD_SingleBlockWrite@arr	PTR unsigned char  size(2) Largest target is 512
		 -> writeBuffer(BIGRAM[512]), 

    average@array	PTR unsigned char  size(2) Largest target is 512
		 -> main@readBuffer(BIGRAM[512]), 


Critical Paths under _main in COMRAM

    _main->_initSD
    _printf->_average
    _putch->_send_byte
    ___llmod->___lldiv
    _initSD->___fttol
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lltoft
    ___ftdiv->___lwtoft
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e
    _average->___lldiv
    _SD_SingleBlockWrite->_SD_Command
    _SD_SingleBlockRead->_SD_Command
    _SD_MBW_Stop->_spiSend
    _SD_MBW_Start->_SD_ACMD
    _SD_ACMD->_SD_Command
    _SD_MBW_Send->_SD_Command
    _SD_SendDummyBytes->_spiSend
    _SD_MBR_Stop->_SD_Command
    _SD_MBR_Start->_SD_Command
    _SD_MBR_Receive->_spiSend
    _SD_EraseBlocks->_SD_Command
    _SD_Command->_spiSend
    _spiSend->_spiTransfer
    _spiReceive->_spiTransfer

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   40224
                                             91 COMRAM    23    23      0
                     _SD_EraseBlocks
                     _SD_MBR_Receive
                       _SD_MBR_Start
                        _SD_MBR_Stop
                        _SD_MBW_Send
                       _SD_MBW_Start
                        _SD_MBW_Stop
                 _SD_SingleBlockRead
                _SD_SingleBlockWrite
                            ___lldiv
                            ___llmod
                            _average
                            _initLCD
                             _initSD
                            _lcdInst
                             _printf
                         _spiReceive
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    21      6    3086
                                             24 COMRAM    18    12      6
                            ___lldiv
                            ___llmod
                            _average (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _initSD                                              44    44      0   17164
                                             47 COMRAM    44    44      0
                            _SD_ACMD
                         _SD_Command
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                           ___lwtoft
                            _spiInit
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2687
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     404
                                             32 COMRAM    15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3222
                                             17 COMRAM    15     9      6
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3024
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (3) _send_byte                                            1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (4) _send_nibble                                          1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (5) _pulse_e                                              1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _average                                             11     7      4    1058
                                             13 COMRAM    11     7      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _SD_SingleBlockWrite                                 10     4      6    2275
                                             10 COMRAM    10     4      6
                         _SD_Command
                  _SD_SendDummyBytes
                         _spiReceive
                            _spiSend
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _SD_SingleBlockRead                                  10     4      6    2208
                                             10 COMRAM    10     4      6
                         _SD_Command
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_MBW_Stop                                          0     0      0      66
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_MBW_Start                                         9     1      8    3989
                                             15 COMRAM     9     1      8
                            _SD_ACMD
                         _SD_Command
 ---------------------------------------------------------------------------------
 (2) _SD_ACMD                                              5     1      4    1983
                                             10 COMRAM     5     1      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (1) _SD_MBW_Send                                          5     3      2    2178
                                             10 COMRAM     5     3      2
                         _SD_Command
                  _SD_SendDummyBytes
                         _spiReceive
                            _spiSend
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (2) _SD_SendDummyBytes                                    2     2      0      90
                                              3 COMRAM     2     2      0
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_MBR_Stop                                          0     0      0    1787
                         _SD_Command
 ---------------------------------------------------------------------------------
 (1) _SD_MBR_Start                                         6     2      4    1954
                                             10 COMRAM     6     2      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (1) _SD_MBR_Receive                                       5     3      2     232
                                              3 COMRAM     5     3      2
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_EraseBlocks                                       8     0      8    1985
                                             10 COMRAM     8     0      8
                         _SD_Command
 ---------------------------------------------------------------------------------
 (2) _SD_Command                                           7     3      4    1787
                                              3 COMRAM     7     3      4
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiReceive                                           0     0      0      22
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (2) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SD_EraseBlocks
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBR_Receive
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _SD_MBR_Start
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBR_Stop
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBW_Send
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _SD_SendDummyBytes
       _spiSend
         _spiTransfer
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
     _spiTransfer
   _SD_MBW_Start
     _SD_ACMD
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBW_Stop
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _SD_SingleBlockRead
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _SD_SingleBlockWrite
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _SD_SendDummyBytes
       _spiSend
         _spiTransfer
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
     _spiTransfer
   ___lldiv
   ___llmod
     ___lldiv (ARG)
   _average
     ___lldiv
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _initSD
     _SD_ACMD
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lltoft
       ___ftpack
     ___lwtoft
       ___ftpack
     _spiInit
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _average (ARG)
       ___lldiv
     _putch (ARG)
       _send_byte
         _send_nibble
           _pulse_e
   _spiReceive
     _spiTransfer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     400      37       25.8%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      3E       5       48.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     72      72       1       89.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B0      34        0.0%
DATA                 0      0     4B0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 11 01:30:33 2018

      __end_of_R1_READY_STATE 1034                   _SSPSTATbits 000FC7                            l57 192E  
                          l85 1F2E                   __CFG_CPD$ON 000000            initSD@arr_response 0041  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                           l201 2594  
                         l224 2180                           l323 13B8                           l290 115E  
                         l187 29CA                           l371 2C40                           l444 1F8C  
                         l447 1FEC                           l296 11DE                           l299 1254  
                         l812 28C2                           l822 2B6A                           l745 24C4  
                         l687 271E                  __CFG_CPB$OFF 000000               __end_of_CMD0CRC 1049  
             __end_of_CMD8CRC 1046                           prod 000FF3                           wreg 000FE8  
          SD_SendDummyBytes@n 0005                 SD_Command@cmd 0009                 SD_Command@arg 0004  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0015                  ___ftdiv@sign 001A  
                __CFG_WDT$OFF 000000                          l2220 2956                          l2300 2D4E  
                        l3020 264E                          l3012 261E                          l3004 25EC  
                        l3100 1922                          l3030 266E                          l3014 2630  
                        l2310 2C1C                          l3110 196E                          l3102 1930  
                        l2240 29B6                          l2400 23AE                          l2330 2438  
                        l2410 23D6                          l2314 2C20                          l3114 1988  
                        l2236 29A2                          l3044 2A58                          l2316 2C24  
                        l3124 19B4                          l2238 29B2                          l3062 276A  
                        l3046 2A5C                          l2270 26EC                          l2262 26AE  
                        l2406 23C6                          l2318 2C2A                          l3222 1CAA  
                        l3214 1C66                          l2192 2D20                          l3072 278A  
                        l3056 273E                          l2272 270A                          l2264 26B8  
                        l2336 2460                          l2424 2254                          l2504 2B82  
                        l3232 1CD6                          l3144 1A48                          l3082 27B8  
                        l3058 274A                          l2522 2AE6                          l2274 2714  
                        l2266 26D6                          l2258 26A0                          l2442 22BA  
                        l2506 2B8E                          l2610 1232                          l3218 1C84  
                        l3154 1A74                          l2356 249E                          l2460 230A  
                        l2452 22E2                          l3260 1DEC                          l3164 1AC2  
                        l2470 2874                          l2518 2AC6                          l2382 236C  
                        l2454 22EE                          l2446 22CA                          l2614 123A  
                        l3174 1B32                          l2296 2D46                          l2472 2880  
                        l2376 2344                          l2456 22F4                          l2704 1458  
                        l2640 129A                          l2560 1122                          l3248 1D6A  
                        l3176 1B3E                          l2482 28B4                          l2474 2884  
                        l2642 12AA                          l2626 125E                          l2490 2B28  
                        l2810 1F50                          l3258 1DE0                          l3178 1B5E  
                        l2900 257C                          l2396 239E                          l2732 170C  
                        l2716 1544                          l2660 1362                          l2636 1282  
                        l2572 114C                          l2492 2B34                          l2812 1F54  
                        l2804 1F3A                          l2910 25B2                          l2742 172E  
                        l2726 16F2                          l2670 139E                          l2590 11BC  
                        l2582 1160                          l2558 111A                          l2494 2B38  
                        l2904 25A4                          l2736 1714                          l2672 13A8  
                        l2656 135A                          l2648 1304                          l2584 1194  
                        l2576 1154                          l2824 1FB0                          l2816 1F58  
                        l2808 1F4A                          l2930 28EC                          l2914 25B6  
                        l2690 141A                          l2682 13BA                          l2594 11C4  
                        l2498 2B5C                          l2842 2030                          l2932 290C  
                        l2924 25BE                          l2676 13B0                          l2860 207E  
                        l2844 2034                          l2918 25BA                          l2782 1888  
                        l2694 1436                          l2862 208A                          l2838 200C  
                        l2944 2158                          l2936 2132                          l2784 1890  
                        l2856 206C                          l2874 27F0                          l2970 21C6  
                        l2954 217A                          l2890 255C                          l2698 143E  
                        l2866 2106                          l2964 21B4                          l2884 250E  
                        l2868 2116                          l2982 220E                          l2966 21C2  
                        l2958 2194                          l2976 21EA                          l2992 2C4C  
                        l2988 2212                          l2996 2C66                          _CMD0 1049  
                        _CMD1 1047                          _CMD8 1046                          _CMD9 1044  
                        STR_1 107B                          STR_2 10A3                          STR_3 1096  
                        STR_4 106C                          STR_5 1089                          STR_6 10C3  
                        STR_7 10AF                          STR_8 10D6                          STR_9 104B  
      SD_MBR_Start@startBlock 000B                          u2200 1654                          u2205 164A  
                        u3007 1D06                          _LATD 000F8C                          u3017 1ED4  
                        u3107 2CBC                          u3027 111C                          u1460 2D28  
                        u2405 2500                          u1621 2420                          u3037 1136  
                        u1470 2D34                          u1462 2D2A                          u2190 161A  
                        u3047 188A                          u2175 1558                          u1472 2D36  
                        u3057 29D6                          u1641 2448                          u2185 15F2  
                        u3067 29EE                          u1731 2238                          u2195 1610  
                        u1485 2CCA                          u3077 2A00                          u1486 2CCC  
                        u1750 2272                          u2375 27D2                          u3087 2A28  
                        u1671 232C                          u2385 27E2                          u2465 28DE  
                        u3097 2CB2                          u2635 2A4A                          u1691 2354  
                        u1755 226A                          u2565 25DE                          u1891 10FA  
                        u2917 193A                          u2927 19E2                          u2937 1A20  
                        u2947 1A80                          u2957 1B72                          u2967 1BC0  
                        u2977 1BDC                          u2987 1BFC                          u2997 1C8E  
             __end_of_SD_ACMD 2C12                          _main 18F6                  ___ftpack@arg 0001  
                ___ftpack@exp 0004                          fsr1h 000FE2                          fsr2h 000FDA  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
         SD_SingleBlockRead@i 0012                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000                  average@array 000E  
              initSD@argument 0037                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 001F  
                ___param_bank 000000                  ___ftmul@sign 0020                  ___fttol@exp1 002F  
 __size_of_SD_SingleBlockRead 00BC                  ___fttol@lval 002B                   _writeBuffer 02BE  
                       ?_main 0001                         _CMD10 1043                         _CMD12 1042  
                       _CMD13 1041                         _CMD16 1040                         _CMD24 103D  
                       _CMD32 103B                         _CMD17 103F                         _CMD25 103C  
                       _CMD33 103A                         _CMD18 103E                         _CMD38 1039  
                       _CMD55 1038                         _CMD58 1037                         STR_10 10DF  
                       STR_11 10CD                         STR_12 105C                         STR_13 10BD  
                       STR_14 1094                         STR_15 10B9                         STR_16 10DF  
              initSD@tempSize 003D               __end_of___ftdiv 24F6               __end_of___lldiv 28D4  
             __end_of___ftmul 2410               __end_of___llmod 2B7C               __end_of___fttol 231C  
              initSD@response 005B                         _TRISD 000F95                         _SSPIF 007CF3  
          initSD@last_OSCTUNE 003C      SD_SingleBlockWrite@block 000B                 __CFG_PWRT$OFF 000000  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011               __end_of_lcdInst 2D96  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000               __end_of_average 2B16  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD 2A40                __CFG_EBTRB$OFF 000000               __end_of_dpowers 1029  
               ___ftpack@sign 0005                         _putch 2D7E                         main@i 006F  
                 initSD@F3023 00AE               __end_of_spiInit 2C4A                         tablat 000FF5  
             __end_of_spiSend 2DA0               send_nibble@data 0002                         plusw1 000FE3  
                       plusw2 000FDB               __end_of_pulse_e 2CCE                   ?_SD_Command 0004  
                       status 000FD8                   initSD@i_500 0052                   initSD@i_501 0055  
                 initSD@i_504 0056                   initSD@i_497 0053                   initSD@i_498 0054  
              __CFG_PBADEN$ON 000000                  __end_of_CMD0 104A                  __end_of_CMD1 1048  
                __end_of_CMD8 1047                  __end_of_CMD9 1045          SD_SingleBlockWrite@i 0013  
             __initialization 2C7A                  __end_of_main 1F30      SD_MBR_Receive@bufReceive 0004  
              __CFG_OSC$HSPLL 000000                        ??_main 005C                 ___fttol@sign1 002A  
            ??_SD_EraseBlocks 0013                 __activetblptr 000002  __size_of_SD_SingleBlockWrite 00DE  
          SD_Command@response 000A                     ??_SD_ACMD 000F                        _ACMD22 1036  
                      _ACMD23 1035                        _ACMD41 1034                  ?_send_nibble 0001  
            ___llmod@dividend 000E                        ?_putch 0001              __end_of___ftpack 273E  
            __end_of___lltoft 2BD8              __end_of___lwtoft 2D1A                        _OSCCON 000FD3  
                      _SDCard 0080                        _SSPBUF 000FC9                  ?_SD_MBR_Stop 0001  
                ?_SD_MBW_Send 000B                  ?_SD_MBW_Stop 0001       __size_of_SD_MBR_Receive 008A  
              __CFG_XINST$OFF 000000                __CFG_STVREN$ON 000000                     ??___ftdiv 0012  
                   ??___lldiv 0009                     ??___ftmul 0018                     ??___llmod 0016  
                   ??___fttol 0025                        _initSD 10E8                        clear_0 2C82  
                      clear_1 2C94                     ??_lcdInst 0004                        _printf 1F30  
               main@numWrites 006C                     ??_average 0012         ___ftmul@f3_as_product 001C  
                   ??_initLCD 0005           __size_of_SD_Command 007E             __end_of_STOP_TRAN 102F  
       SD_SingleBlockRead@buf 000F                  ?_spiTransfer 0001                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_spiInit 0001                     ??_spiSend 0003                     ??_pulse_e 0001  
       pulse_e@interruptState 0001                    __accesstop 0080       __end_of__initialization 2C9A  
        SD_MBR_Start@response 0010                 __end_of_CMD10 1044                 __end_of_CMD12 1043  
               __end_of_CMD13 1042                 __end_of_CMD16 1041                 __end_of_CMD24 103E  
               __end_of_CMD32 103C                 __end_of_CMD17 1040                 __end_of_CMD25 103D  
               __end_of_CMD33 103B                 __end_of_CMD18 103F                 __end_of_CMD38 103A  
               __end_of_CMD55 1039                 __end_of_CMD58 1038                 ___rparam_used 000001  
                  ___ftdiv@f1 000C                    ___ftdiv@f2 000F                    ___ftdiv@f3 0016  
                  ___ftmul@f1 0012                    ___ftmul@f2 0015                    ___fttol@f1 0021  
              __pcstackCOMRAM 0001                    ___lltoft@c 0009                 __end_of_putch 2D8A  
           _START_BLOCK_TOKEN 102F                    ___lwtoft@c 0009      SD_EraseBlocks@firstBlock 000B  
                     ??_putch 0004                    __pbssBANK0 0080     __end_of_START_BLOCK_TOKEN 1030  
                     ?_initSD 0001            __size_of_send_byte 0012                       _CMD0CRC 1048  
           _SD_SendDummyBytes 2D3E                       _CMD8CRC 1045                     ?___ftpack 0001  
                     ?_printf 0019                     ?___lltoft 0009                main@firstBlock 006E  
                   ?___lwtoft 0009            ?_SD_SendDummyBytes 0001                       _SD_ACMD 2BD8  
                     _OSCTUNE 000F9B     spiTransfer@byteToTransfer 0002                main@readBuffer 00BE  
         ??_SD_SendDummyBytes 0004                       _SSPCON1 000FC6                       _SSPSTAT 000FC7  
               ?_SD_MBR_Start 000B          __size_of_send_nibble 0016                  ??_SD_Command 0008  
               ?_SD_MBW_Start 0010           _SD_SingleBlockWrite 24F6                _SD_MBR_Receive 273E  
          initSD@tempSize_503 0057                       __Hparam 0000                       __Lparam 0000  
  __end_of_SD_SingleBlockRead 2690          __size_of_SD_MBR_Stop 0028          __size_of_SD_MBW_Send 00F8  
        __size_of_SD_MBW_Stop 0030     __end_of_SD_SendDummyBytes 2D56                       ___ftdiv 2410  
                     ___lldiv 2852                       ___ftmul 231C                       ___llmod 2B16  
                     ___fttol 2228                  __psmallconst 1000               __size_of_initSD 080E  
                     __pcinit 2C7A                    ??___ftpack 0006                       __ramtop 1000  
                     _lcdInst 2D8A                    ??___lltoft 000D                       __ptext0 18F6  
                     __ptext1 1F30                       __ptext2 2D7E                       __ptext3 2B16  
                     __ptext4 10E8                       __ptext5 2C12                       __ptext6 2CF6  
                     __ptext7 2B7C                       __ptext8 2228                       __ptext9 231C  
             __size_of_printf 0200                       _average 2AAC                    ??___lwtoft 000C  
        ?_SD_SingleBlockWrite 000B                       _initLCD 29D0                       _dpowers 1001  
          __end_of_SD_Command 29D0                       _spiInit 2C12                       _spiSend 2D96  
        __size_of_spiTransfer 0024                       _pulse_e 2CA4                       main@avg 0068  
        end_of_initialization 2C9A                ??_SD_MBR_Start 000F                       initSD@i 0051  
       __end_of_R1_IDLE_STATE 1033         __end_of_LCD_SIZE_HORZ 102E             __end_of_send_byte 2D7E  
       __end_of_LCD_SIZE_VERT 102D     SD_SendDummyBytes@numBytes 0004                ??_SD_MBW_Start 0018  
               __Lmediumconst 0000        __end_of_SD_MBR_Receive 27C8               ___lldiv@divisor 0005  
             ___lldiv@counter 000D                       printf@c 002A                       printf@f 0019  
  SD_SingleBlockRead@response 0014                    _spiReceive 2DA0                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
       ??_SD_SingleBlockWrite 0011                spiInit@divider 0001                     _TRISCbits 000F94  
                   _TRISEbits 000F96                     _STOP_TRAN 102E                   SD_Command@n 0008  
              __end_of_ACMD22 1037                __end_of_ACMD23 1036                __end_of_ACMD41 1035  
                  average@idx 0017                    average@sum 0013               ?_SD_MBR_Receive 0004  
                 ___ftdiv@exp 0019                 send_byte@data 0003        SD_SingleBlockWrite@arr 000F  
                 ___ftmul@exp 001B    __size_of_SD_SendDummyBytes 0018             initSD@last_OSCCON 003B  
              __end_of_initSD 18F6                __end_of_printf 2130           start_initialization 2C7A  
  __end_of_R1_ILLEGAL_COMMAND 1032       __size_of_SD_EraseBlocks 008A               ___llmod@divisor 0012  
             ___llmod@counter 0016                   ?_spiReceive 0001              __CFG_LPT1OSC$OFF 000000  
                    ??_initSD 0030          __end_of_SD_MBR_Start 2AAC                      ??_printf 001F  
        __end_of_SD_MBW_Start 2952             __size_of___ftpack 00AE                   __pbssBIGRAM 00BE  
           __size_of___lltoft 005C             __size_of___lwtoft 0024                      ?_SD_ACMD 000B  
     SD_EraseBlocks@lastBlock 000F               SD_MBR_Receive@i 0007             __CFG_CCP2MX$PORTC 000000  
                  SD_ACMD@cmd 000F                    SD_ACMD@arg 000B                      ?___ftdiv 000C  
                    ?___lldiv 0001                      ?___ftmul 0012                      ?___llmod 000E  
                    ?___fttol 0021                      ?_lcdInst 0001                      ?_average 000E  
                    ?_initLCD 0001                   __smallconst 1000            _SD_SingleBlockRead 25D4  
                    ?_spiInit 0001                      ?_spiSend 0001                 ??_send_nibble 0002  
                    ?_pulse_e 0001           ?_SD_SingleBlockRead 000B           __size_of_spiReceive 0008  
              __size_of_putch 000C                      _LATDbits 000F8C                      _LATEbits 000F8D  
               ??_SD_MBR_Stop 000B                 ??_SD_MBW_Send 000D                 ??_SD_MBW_Stop 0004  
                   _send_byte 2D6C                _LCD_LINE1_ADDR 102B                _LCD_LINE2_ADDR 104A  
                  spiSend@val 0003                _LCD_LINE3_ADDR 102A                _LCD_LINE4_ADDR 1029  
            __CFG_WDTPS$32768 000000          ??_SD_SingleBlockRead 0011   SD_SingleBlockWrite@response 0012  
                  printf@flag 0029                 ??_spiTransfer 0001                    printf@prec 0021  
            ??_SD_MBR_Receive 0006              __size_of_SD_ACMD 003A                _SD_EraseBlocks 27C8  
      __end_of_LCD_LINE1_ADDR 102C        __end_of_LCD_LINE2_ADDR 104B        __end_of_LCD_LINE3_ADDR 102B  
      __end_of_LCD_LINE4_ADDR 102A           __end_of_send_nibble 2D6C                    ?_send_byte 0001  
                    __Hrparam 0000                      __Lrparam 0000         __size_of_SD_MBR_Start 006C  
          __CFG_BOREN$SBORDIS 000000   __end_of_SD_SingleBlockWrite 25D4         __size_of_SD_MBW_Start 007E  
         __end_of_SD_MBR_Stop 2CF6           __end_of_SD_MBW_Send 2228           __end_of_SD_MBW_Stop 2C7A  
            __size_of___ftdiv 00E6              __size_of___lldiv 0082              __size_of___ftmul 00F4  
            __size_of___llmod 0066              __size_of___fttol 00F4                      ___ftpack 2690  
                    ___lltoft 2B7C                      ___lwtoft 2CF6              __size_of_lcdInst 000C  
            __size_of_average 006A              __size_of_initLCD 0070        __end_of_SD_EraseBlocks 2852  
                    __ptext10 2410                      __ptext11 2690                      __ptext20 25D4  
                    __ptext12 29D0                      __ptext21 2C4A                      __ptext13 2D8A  
                    __ptext30 2952                      __ptext22 28D4                      __ptext14 2D6C  
                    __ptext31 2D96                      __ptext23 2BD8                      __ptext15 2D56  
                    __ptext32 2DA0                      __ptext24 2130                      __ptext16 2CA4  
                    __ptext33 2D1A                      __ptext25 2D3E                      __ptext17 2AAC  
                    __ptext26 2CCE                      __ptext18 2852                      __ptext27 2A40  
                    __ptext19 24F6                      __ptext28 273E                      __ptext29 27C8  
            __size_of_spiInit 0038              __size_of_spiSend 000A           __end_of_START_BLOCK 1031  
            __size_of_pulse_e 002A                  SD_MBW_Send@i 000E           __end_of_spiTransfer 2D3E  
                _SD_MBR_Start 2A40                 __size_of_main 063A                  _SD_MBW_Start 28D4  
          _R1_ILLEGAL_COMMAND 1031                  ??_spiReceive 0003        SD_MBW_Start@startBlock 0010  
                    average@n 0010                     printf@val 0023                     putch@data 0004  
                 _OSCTUNEbits 000F9B                    _INTCONbits 000FF2               ?_SD_EraseBlocks 000B  
     SD_SingleBlockRead@block 000B                   _send_nibble 2D56         SD_MBW_Start@numBlocks 0014  
          __end_of_spiReceive 2DA8                 _R1_IDLE_STATE 1032                 _LCD_SIZE_HORZ 102D  
               _LCD_SIZE_VERT 102C              ___lldiv@dividend 0001           SD_MBW_Send@arrWrite 000B  
                 _SD_MBR_Stop 2CCE                   ??_send_byte 0003                   _SD_MBW_Send 2130  
                 _SD_MBW_Stop 2C4A                    _OSCCONbits 000FD3                      printf@ap 0027  
              _R1_READY_STATE 1033                   lcdInst@data 0004           SD_MBW_Send@response 000D  
                 _START_BLOCK 1030              ___lldiv@quotient 0009                   _spiTransfer 2D1A  
                 _SSPCON1bits 000FC6                    _SD_Command 2952  
