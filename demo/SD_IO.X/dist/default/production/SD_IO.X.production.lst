

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Apr 17 02:46:08 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48  0000                     
    49                           ; Version 1.42
    50                           ; Generated 13/04/2017 GMT
    51                           ; 
    52                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    53                           ; All rights reserved.
    54                           ; 
    55                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    56                           ; 
    57                           ; Redistribution and use in source and binary forms, with or without modification, are
    58                           ; permitted provided that the following conditions are met:
    59                           ; 
    60                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    61                           ;        conditions and the following disclaimer.
    62                           ; 
    63                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    64                           ;        of conditions and the following disclaimer in the documentation and/or other
    65                           ;        materials provided with the distribution.
    66                           ; 
    67                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    68                           ;        software without specific prior written permission.
    69                           ; 
    70                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    71                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    72                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    73                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    74                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    75                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    76                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    77                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    78                           ; 
    79                           ; 
    80                           ; Code-generator required, PIC18F4620 Definitions
    81                           ; 
    82                           ; SFR Addresses
    83  0000                     
    84                           	psect	smallconst
    85  001000                     __psmallconst:
    86                           	opt stack 0
    87  001000  00                 	db	0
    88  001001                     _dpowers:
    89                           	opt stack 0
    90  001001  0001               	dw	1
    91  001003  0000               	dw	0
    92  001005  000A               	dw	10
    93  001007  0000               	dw	0
    94  001009  0064               	dw	100
    95  00100B  0000               	dw	0
    96  00100D  03E8               	dw	1000
    97  00100F  0000               	dw	0
    98  001011  2710               	dw	10000
    99  001013  0000               	dw	0
   100  001015  86A0               	dw	34464
   101  001017  0001               	dw	1
   102  001019  4240               	dw	16960
   103  00101B  000F               	dw	15
   104  00101D  9680               	dw	38528
   105  00101F  0098               	dw	152
   106  001021  E100               	dw	57600
   107  001023  05F5               	dw	1525
   108  001025  CA00               	dw	51712
   109  001027  3B9A               	dw	15258
   110  001029                     __end_of_dpowers:
   111                           	opt stack 0
   112  001029                     _STOP_TRAN:
   113                           	opt stack 0
   114  001029  FD                 	db	253
   115  00102A                     __end_of_STOP_TRAN:
   116                           	opt stack 0
   117  00102A                     _START_BLOCK_TOKEN:
   118                           	opt stack 0
   119  00102A  FC                 	db	252
   120  00102B                     __end_of_START_BLOCK_TOKEN:
   121                           	opt stack 0
   122  00102B                     _START_BLOCK:
   123                           	opt stack 0
   124  00102B  FE                 	db	254
   125  00102C                     __end_of_START_BLOCK:
   126                           	opt stack 0
   127  00102C                     _R1_ILLEGAL_COMMAND:
   128                           	opt stack 0
   129  00102C  04                 	db	4
   130  00102D                     __end_of_R1_ILLEGAL_COMMAND:
   131                           	opt stack 0
   132  00102D                     _R1_IDLE_STATE:
   133                           	opt stack 0
   134  00102D  01                 	db	1
   135  00102E                     __end_of_R1_IDLE_STATE:
   136                           	opt stack 0
   137  00102E                     _R1_READY_STATE:
   138                           	opt stack 0
   139  00102E  00                 	db	0
   140  00102F                     __end_of_R1_READY_STATE:
   141                           	opt stack 0
   142  00102F                     _ACMD41:
   143                           	opt stack 0
   144  00102F  29                 	db	41
   145  001030                     __end_of_ACMD41:
   146                           	opt stack 0
   147  001030                     _ACMD23:
   148                           	opt stack 0
   149  001030  17                 	db	23
   150  001031                     __end_of_ACMD23:
   151                           	opt stack 0
   152  001031                     _ACMD22:
   153                           	opt stack 0
   154  001031  16                 	db	22
   155  001032                     __end_of_ACMD22:
   156                           	opt stack 0
   157  001032                     _CMD58:
   158                           	opt stack 0
   159  001032  3A                 	db	58
   160  001033                     __end_of_CMD58:
   161                           	opt stack 0
   162  001033                     _CMD55:
   163                           	opt stack 0
   164  001033  37                 	db	55
   165  001034                     __end_of_CMD55:
   166                           	opt stack 0
   167  001034                     _CMD38:
   168                           	opt stack 0
   169  001034  26                 	db	38
   170  001035                     __end_of_CMD38:
   171                           	opt stack 0
   172  001035                     _CMD33:
   173                           	opt stack 0
   174  001035  21                 	db	33
   175  001036                     __end_of_CMD33:
   176                           	opt stack 0
   177  001036                     _CMD32:
   178                           	opt stack 0
   179  001036  20                 	db	32
   180  001037                     __end_of_CMD32:
   181                           	opt stack 0
   182  001037                     _CMD25:
   183                           	opt stack 0
   184  001037  19                 	db	25
   185  001038                     __end_of_CMD25:
   186                           	opt stack 0
   187  001038                     _CMD24:
   188                           	opt stack 0
   189  001038  18                 	db	24
   190  001039                     __end_of_CMD24:
   191                           	opt stack 0
   192  001039                     _CMD18:
   193                           	opt stack 0
   194  001039  12                 	db	18
   195  00103A                     __end_of_CMD18:
   196                           	opt stack 0
   197  00103A                     _CMD17:
   198                           	opt stack 0
   199  00103A  11                 	db	17
   200  00103B                     __end_of_CMD17:
   201                           	opt stack 0
   202  00103B                     _CMD16:
   203                           	opt stack 0
   204  00103B  10                 	db	16
   205  00103C                     __end_of_CMD16:
   206                           	opt stack 0
   207  00103C                     _CMD13:
   208                           	opt stack 0
   209  00103C  0D                 	db	13
   210  00103D                     __end_of_CMD13:
   211                           	opt stack 0
   212  00103D                     _CMD12:
   213                           	opt stack 0
   214  00103D  0C                 	db	12
   215  00103E                     __end_of_CMD12:
   216                           	opt stack 0
   217  00103E                     _CMD10:
   218                           	opt stack 0
   219  00103E  0A                 	db	10
   220  00103F                     __end_of_CMD10:
   221                           	opt stack 0
   222  00103F                     _CMD9:
   223                           	opt stack 0
   224  00103F  09                 	db	9
   225  001040                     __end_of_CMD9:
   226                           	opt stack 0
   227  001040                     _CMD8CRC:
   228                           	opt stack 0
   229  001040  87                 	db	135
   230  001041                     __end_of_CMD8CRC:
   231                           	opt stack 0
   232  001041                     _CMD8:
   233                           	opt stack 0
   234  001041  08                 	db	8
   235  001042                     __end_of_CMD8:
   236                           	opt stack 0
   237  001042                     _CMD1:
   238                           	opt stack 0
   239  001042  01                 	db	1
   240  001043                     __end_of_CMD1:
   241                           	opt stack 0
   242  001043                     _CMD0CRC:
   243                           	opt stack 0
   244  001043  95                 	db	149
   245  001044                     __end_of_CMD0CRC:
   246                           	opt stack 0
   247  001044                     _CMD0:
   248                           	opt stack 0
   249  001044  00                 	db	0
   250  001045                     __end_of_CMD0:
   251                           	opt stack 0
   252  001045                     _LCD_LEFT:
   253                           	opt stack 0
   254  001045  00                 	db	0
   255  001046                     __end_of_LCD_LEFT:
   256                           	opt stack 0
   257  001046                     _LCD_RIGHT:
   258                           	opt stack 0
   259  001046  01                 	db	1
   260  001047                     __end_of_LCD_RIGHT:
   261                           	opt stack 0
   262  001047                     _LCD_SIZE_VERT:
   263                           	opt stack 0
   264  001047  02                 	db	2
   265  001048                     __end_of_LCD_SIZE_VERT:
   266                           	opt stack 0
   267  001048                     _LCD_SIZE_HORZ:
   268                           	opt stack 0
   269  001048  10                 	db	16
   270  001049                     __end_of_LCD_SIZE_HORZ:
   271                           	opt stack 0
   272  001049                     _LCD_VERT_LIMIT:
   273                           	opt stack 0
   274  001049  02                 	db	2
   275  00104A                     __end_of_LCD_VERT_LIMIT:
   276                           	opt stack 0
   277  00104A                     _LCD_HORZ_LIMIT:
   278                           	opt stack 0
   279  00104A  28                 	db	40
   280  00104B                     __end_of_LCD_HORZ_LIMIT:
   281                           	opt stack 0
   282  0000                     _ADCON2	set	4032
   283  0000                     _CMCONbits	set	4020
   284  0000                     _CVRCON	set	4021
   285  0000                     _ADCON1	set	4033
   286  0000                     _ADCON0	set	4034
   287  0000                     _TRISE	set	3990
   288  0000                     _TRISD	set	3989
   289  0000                     _TRISC	set	3988
   290  0000                     _TRISB	set	3987
   291  0000                     _TRISA	set	3986
   292  0000                     _LATE	set	3981
   293  0000                     _LATC	set	3979
   294  0000                     _LATB	set	3978
   295  0000                     _LATA	set	3977
   296  0000                     _TRISCbits	set	3988
   297  0000                     _SSPSTAT	set	4039
   298  0000                     _SSPSTATbits	set	4039
   299  0000                     _SSPBUF	set	4041
   300  0000                     _SSPCON1	set	4038
   301  0000                     _SSPCON1bits	set	4038
   302  0000                     _TRISEbits	set	3990
   303  0000                     _OSCCONbits	set	4051
   304  0000                     _OSCTUNEbits	set	3995
   305  0000                     _OSCTUNE	set	3995
   306  0000                     _OSCCON	set	4051
   307  0000                     _LATEbits	set	3981
   308  0000                     _INTCONbits	set	4082
   309  0000                     _LATD	set	3980
   310  0000                     _LATDbits	set	3980
   311  0000                     _PEIE	set	32662
   312  0000                     _INT1IE	set	32643
   313  0000                     _nRBPU	set	32655
   314  0000                     _SSPIF	set	31987
   315  00104B                     STR_9:
   316  00104B  52                 	db	82	;'R'
   317  00104C  65                 	db	101	;'e'
   318  00104D  61                 	db	97	;'a'
   319  00104E  64                 	db	100	;'d'
   320  00104F  69                 	db	105	;'i'
   321  001050  6E                 	db	110	;'n'
   322  001051  67                 	db	103	;'g'
   323  001052  20                 	db	32
   324  001053  73                 	db	115	;'s'
   325  001054  65                 	db	101	;'e'
   326  001055  63                 	db	99	;'c'
   327  001056  74                 	db	116	;'t'
   328  001057  6F                 	db	111	;'o'
   329  001058  72                 	db	114	;'r'
   330  001059  20                 	db	32
   331  00105A  30                 	db	48	;'0'
   332  00105B  00                 	db	0
   333  00105C                     STR_12:
   334  00105C  52                 	db	82	;'R'
   335  00105D  65                 	db	101	;'e'
   336  00105E  61                 	db	97	;'a'
   337  00105F  64                 	db	100	;'d'
   338  001060  69                 	db	105	;'i'
   339  001061  6E                 	db	110	;'n'
   340  001062  67                 	db	103	;'g'
   341  001063  20                 	db	32
   342  001064  73                 	db	115	;'s'
   343  001065  65                 	db	101	;'e'
   344  001066  63                 	db	99	;'c'
   345  001067  74                 	db	116	;'t'
   346  001068  6F                 	db	111	;'o'
   347  001069  72                 	db	114	;'r'
   348  00106A  73                 	db	115	;'s'
   349  00106B  00                 	db	0
   350  00106C                     STR_4:
   351  00106C  77                 	db	119	;'w'
   352  00106D  72                 	db	114	;'r'
   353  00106E  69                 	db	105	;'i'
   354  00106F  74                 	db	116	;'t'
   355  001070  65                 	db	101	;'e'
   356  001071  20                 	db	32
   357  001072  66                 	db	102	;'f'
   358  001073  69                 	db	105	;'i'
   359  001074  6E                 	db	110	;'n'
   360  001075  69                 	db	105	;'i'
   361  001076  73                 	db	115	;'s'
   362  001077  68                 	db	104	;'h'
   363  001078  65                 	db	101	;'e'
   364  001079  64                 	db	100	;'d'
   365  00107A  00                 	db	0
   366  00107B                     STR_1:
   367  00107B  49                 	db	73	;'I'
   368  00107C  6E                 	db	110	;'n'
   369  00107D  69                 	db	105	;'i'
   370  00107E  74                 	db	116	;'t'
   371  00107F  20                 	db	32
   372  001080  73                 	db	115	;'s'
   373  001081  75                 	db	117	;'u'
   374  001082  63                 	db	99	;'c'
   375  001083  63                 	db	99	;'c'
   376  001084  65                 	db	101	;'e'
   377  001085  73                 	db	115	;'s'
   378  001086  73                 	db	115	;'s'
   379  001087  21                 	db	33
   380  001088  00                 	db	0
   381  001089                     STR_5:
   382  001089  4D                 	db	77	;'M'
   383  00108A  42                 	db	66	;'B'
   384  00108B  57                 	db	87	;'W'
   385  00108C  20                 	db	32
   386  00108D  53                 	db	83	;'S'
   387  00108E  74                 	db	116	;'t'
   388  00108F  61                 	db	97	;'a'
   389  001090  72                 	db	114	;'r'
   390  001091  74                 	db	116	;'t'
   391  001092  2E                 	db	46
   392  001093  2E                 	db	46
   393  001094  2E                 	db	46
   394  001095  00                 	db	0
   395  001096                     STR_3:
   396  001096  53                 	db	83	;'S'
   397  001097  69                 	db	105	;'i'
   398  001098  6E                 	db	110	;'n'
   399  001099  67                 	db	103	;'g'
   400  00109A  6C                 	db	108	;'l'
   401  00109B  65                 	db	101	;'e'
   402  00109C  20                 	db	32
   403  00109D  62                 	db	98	;'b'
   404  00109E  6C                 	db	108	;'l'
   405  00109F  6F                 	db	111	;'o'
   406  0010A0  63                 	db	99	;'c'
   407  0010A1  6B                 	db	107	;'k'
   408  0010A2  00                 	db	0
   409  0010A3                     STR_2:
   410  0010A3  49                 	db	73	;'I'
   411  0010A4  6E                 	db	110	;'n'
   412  0010A5  69                 	db	105	;'i'
   413  0010A6  74                 	db	116	;'t'
   414  0010A7  20                 	db	32
   415  0010A8  66                 	db	102	;'f'
   416  0010A9  61                 	db	97	;'a'
   417  0010AA  69                 	db	105	;'i'
   418  0010AB  6C                 	db	108	;'l'
   419  0010AC  65                 	db	101	;'e'
   420  0010AD  64                 	db	100	;'d'
   421  0010AE  00                 	db	0
   422  0010AF                     STR_7:
   423  0010AF  44                 	db	68	;'D'
   424  0010B0  6F                 	db	111	;'o'
   425  0010B1  6E                 	db	110	;'n'
   426  0010B2  65                 	db	101	;'e'
   427  0010B3  20                 	db	32
   428  0010B4  4D                 	db	77	;'M'
   429  0010B5  42                 	db	66	;'B'
   430  0010B6  57                 	db	87	;'W'
   431  0010B7  21                 	db	33
   432  0010B8  00                 	db	0
   433  0010B9                     STR_14:
   434  0010B9  53                 	db	83	;'S'
   435  0010BA  65                 	db	101	;'e'
   436  0010BB  63                 	db	99	;'c'
   437  0010BC  20                 	db	32
   438  0010BD  25                 	db	37
   439  0010BE  64                 	db	100	;'d'
   440  0010BF  2D                 	db	45
   441  0010C0  25                 	db	37
   442  0010C1  64                 	db	100	;'d'
   443  0010C2  00                 	db	0
   444  0010C3                     STR_6:
   445  0010C3  44                 	db	68	;'D'
   446  0010C4  6F                 	db	111	;'o'
   447  0010C5  6E                 	db	110	;'n'
   448  0010C6  65                 	db	101	;'e'
   449  0010C7  3A                 	db	58	;':'
   450  0010C8  20                 	db	32
   451  0010C9  25                 	db	37
   452  0010CA  6C                 	db	108	;'l'
   453  0010CB  75                 	db	117	;'u'
   454  0010CC  00                 	db	0
   455  0010CD                     STR_11:
   456  0010CD  46                 	db	70	;'F'
   457  0010CE  61                 	db	97	;'a'
   458  0010CF  69                 	db	105	;'i'
   459  0010D0  6C                 	db	108	;'l'
   460  0010D1  75                 	db	117	;'u'
   461  0010D2  72                 	db	114	;'r'
   462  0010D3  65                 	db	101	;'e'
   463  0010D4  21                 	db	33
   464  0010D5  00                 	db	0
   465  0010D6                     STR_13:
   466  0010D6  25                 	db	37
   467  0010D7  64                 	db	100	;'d'
   468  0010D8  2D                 	db	45
   469  0010D9  25                 	db	37
   470  0010DA  64                 	db	100	;'d'
   471  0010DB  2E                 	db	46
   472  0010DC  2E                 	db	46
   473  0010DD  2E                 	db	46
   474  0010DE  00                 	db	0
   475  0010DF                     STR_8:
   476  0010DF  44                 	db	68	;'D'
   477  0010E0  6F                 	db	111	;'o'
   478  0010E1  6E                 	db	110	;'n'
   479  0010E2  65                 	db	101	;'e'
   480  0010E3  20                 	db	32
   481  0010E4  25                 	db	37
   482  0010E5  6C                 	db	108	;'l'
   483  0010E6  75                 	db	117	;'u'
   484  0010E7  00                 	db	0
   485  0010E8                     STR_10:
   486  0010E8  41                 	db	65	;'A'
   487  0010E9  76                 	db	118	;'v'
   488  0010EA  67                 	db	103	;'g'
   489  0010EB  3A                 	db	58	;':'
   490  0010EC  20                 	db	32
   491  0010ED  25                 	db	37
   492  0010EE  64                 	db	100	;'d'
   493  0010EF  00                 	db	0
   494  0000                     
   495                           ; #config settings
   496  0010F0  00                 	db	0	; dummy byte at the end
   497  0000                     
   498                           	psect	cinit
   499  002CFE                     __pcinit:
   500                           	opt stack 0
   501  002CFE                     start_initialization:
   502                           	opt stack 0
   503  002CFE                     __initialization:
   504                           	opt stack 0
   505                           
   506                           ; Clear objects allocated to BIGRAM (1024 bytes)
   507  002CFE  EE0B  F080         	lfsr	0,__pbssBIGRAM
   508  002D02  EE14 F000          	lfsr	1,1024
   509  002D06                     clear_0:
   510  002D06  6AEE               	clrf	postinc0,c
   511  002D08  50E5               	movf	postdec1,w,c
   512  002D0A  50E1               	movf	fsr1l,w,c
   513  002D0C  E1FC               	bnz	clear_0
   514  002D0E  50E2               	movf	fsr1h,w,c
   515  002D10  E1FA               	bnz	clear_0
   516                           
   517                           ; Clear objects allocated to BANK0 (46 bytes)
   518  002D12  EE00  F080         	lfsr	0,__pbssBANK0
   519  002D16  0E2E               	movlw	46
   520  002D18                     clear_1:
   521  002D18  6AEE               	clrf	postinc0,c
   522  002D1A  06E8               	decf	wreg,f,c
   523  002D1C  E1FD               	bnz	clear_1
   524                           
   525                           ; Clear objects allocated to COMRAM (18 bytes)
   526  002D1E  EE00  F06E         	lfsr	0,__pbssCOMRAM
   527  002D22  0E12               	movlw	18
   528  002D24                     clear_2:
   529  002D24  6AEE               	clrf	postinc0,c
   530  002D26  06E8               	decf	wreg,f,c
   531  002D28  E1FD               	bnz	clear_2
   532  002D2A                     end_of_initialization:
   533                           	opt stack 0
   534  002D2A                     __end_of__initialization:
   535                           	opt stack 0
   536  002D2A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   537  002D2C  6EF8               	movwf	tblptru,c
   538  002D2E  0100               	movlb	0
   539  002D30  EF81  F00C         	goto	_main	;jump to C main() function
   540                           tblptru	equ	0xFF8
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           postdec1	equ	0xFE5
   544                           fsr1h	equ	0xFE2
   545                           fsr1l	equ	0xFE1
   546                           
   547                           	psect	bssCOMRAM
   548  00006E                     __pbssCOMRAM:
   549                           	opt stack 0
   550  00006E                     initSD@F3023:
   551                           	opt stack 0
   552  00006E                     	ds	16
   553  00007E                     	ds	1
   554  00007F                     _LCDinterruptState:
   555                           	opt stack 0
   556  00007F                     	ds	1
   557                           tblptru	equ	0xFF8
   558                           postinc0	equ	0xFEE
   559                           wreg	equ	0xFE8
   560                           postdec1	equ	0xFE5
   561                           fsr1h	equ	0xFE2
   562                           fsr1l	equ	0xFE1
   563                           
   564                           	psect	bssBANK0
   565  000080                     __pbssBANK0:
   566                           	opt stack 0
   567  000080                     _SDCard:
   568                           	opt stack 0
   569  000080                     	ds	46
   570                           tblptru	equ	0xFF8
   571                           postinc0	equ	0xFEE
   572                           wreg	equ	0xFE8
   573                           postdec1	equ	0xFE5
   574                           fsr1h	equ	0xFE2
   575                           fsr1l	equ	0xFE1
   576                           
   577                           	psect	bssBIGRAM
   578  000B80                     __pbssBIGRAM:
   579                           	opt stack 0
   580  000B80                     main@readBuffer:
   581                           	opt stack 0
   582  000B80                     	ds	512
   583  000D80                     _writeBuffer:
   584                           	opt stack 0
   585  000D80                     	ds	512
   586                           tblptru	equ	0xFF8
   587                           postinc0	equ	0xFEE
   588                           wreg	equ	0xFE8
   589                           postdec1	equ	0xFE5
   590                           fsr1h	equ	0xFE2
   591                           fsr1l	equ	0xFE1
   592                           
   593                           	psect	cstackCOMRAM
   594  000001                     __pcstackCOMRAM:
   595                           	opt stack 0
   596  000001                     ??_spiTransfer:
   597  000001                     ?___ftpack:
   598                           	opt stack 0
   599  000001                     ?___lldiv:
   600                           	opt stack 0
   601  000001                     lcdNibble@temp:
   602                           	opt stack 0
   603  000001                     spiInit@divider:
   604                           	opt stack 0
   605  000001                     ___ftpack@arg:
   606                           	opt stack 0
   607  000001                     ___lldiv@dividend:
   608                           	opt stack 0
   609                           
   610                           ; 4 bytes @ 0x0
   611  000001                     	ds	1
   612  000002                     lcdNibble@data:
   613                           	opt stack 0
   614  000002                     spiTransfer@byteToTransfer:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x1
   618  000002                     	ds	1
   619  000003                     lcdInst@data:
   620                           	opt stack 0
   621  000003                     putch@data:
   622                           	opt stack 0
   623  000003                     spiSend@val:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x2
   627  000003                     	ds	1
   628  000004                     ??_initLCD:
   629  000004                     lcd_shift_cursor@direction:
   630                           	opt stack 0
   631  000004                     SD_SendDummyBytes@numBytes:
   632                           	opt stack 0
   633  000004                     ___ftpack@exp:
   634                           	opt stack 0
   635  000004                     SD_MBR_Receive@bufReceive:
   636                           	opt stack 0
   637  000004                     SD_Command@arg:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0x3
   641  000004                     	ds	1
   642  000005                     lcd_shift_cursor@numChars:
   643                           	opt stack 0
   644  000005                     SD_SendDummyBytes@n:
   645                           	opt stack 0
   646  000005                     ___ftpack@sign:
   647                           	opt stack 0
   648  000005                     ___lldiv@divisor:
   649                           	opt stack 0
   650                           
   651                           ; 4 bytes @ 0x4
   652  000005                     	ds	1
   653  000006                     ??___ftpack:
   654  000006                     ??_SD_MBR_Receive:
   655  000006                     lcd_shift_cursor@n:
   656                           	opt stack 0
   657                           
   658                           ; 1 bytes @ 0x5
   659  000006                     	ds	1
   660  000007                     lcd_set_cursor@y:
   661                           	opt stack 0
   662  000007                     SD_MBR_Receive@i:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x6
   666  000007                     	ds	1
   667  000008                     ??_lcd_set_cursor:
   668  000008                     SD_Command@ptr:
   669                           	opt stack 0
   670                           
   671                           ; 2 bytes @ 0x7
   672  000008                     	ds	1
   673  000009                     ?___lltoft:
   674                           	opt stack 0
   675  000009                     ?___lwtoft:
   676                           	opt stack 0
   677  000009                     lcd_set_cursor@i:
   678                           	opt stack 0
   679  000009                     ___lwtoft@c:
   680                           	opt stack 0
   681  000009                     ___lldiv@quotient:
   682                           	opt stack 0
   683  000009                     ___lltoft@c:
   684                           	opt stack 0
   685                           
   686                           ; 4 bytes @ 0x8
   687  000009                     	ds	1
   688  00000A                     lcd_set_cursor@x:
   689                           	opt stack 0
   690  00000A                     SD_Command@cmd:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x9
   694  00000A                     	ds	1
   695  00000B                     SD_Command@response:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0xA
   699  00000B                     	ds	1
   700  00000C                     ?___ftdiv:
   701                           	opt stack 0
   702  00000C                     SD_Command@n:
   703                           	opt stack 0
   704  00000C                     ___ftdiv@f1:
   705                           	opt stack 0
   706                           
   707                           ; 3 bytes @ 0xB
   708  00000C                     	ds	1
   709  00000D                     ??___lltoft:
   710  00000D                     ___lldiv@counter:
   711                           	opt stack 0
   712  00000D                     SD_MBW_Send@arrWrite:
   713                           	opt stack 0
   714  00000D                     SD_ACMD@arg:
   715                           	opt stack 0
   716  00000D                     SD_SingleBlockWrite@block:
   717                           	opt stack 0
   718  00000D                     SD_SingleBlockRead@block:
   719                           	opt stack 0
   720  00000D                     SD_MBR_Start@startBlock:
   721                           	opt stack 0
   722  00000D                     SD_EraseBlocks@firstBlock:
   723                           	opt stack 0
   724                           
   725                           ; 4 bytes @ 0xC
   726  00000D                     	ds	1
   727  00000E                     ?___llmod:
   728                           	opt stack 0
   729  00000E                     average@array:
   730                           	opt stack 0
   731  00000E                     ___llmod@dividend:
   732                           	opt stack 0
   733                           
   734                           ; 4 bytes @ 0xD
   735  00000E                     	ds	1
   736  00000F                     SD_MBW_Send@status:
   737                           	opt stack 0
   738  00000F                     ___ftdiv@f2:
   739                           	opt stack 0
   740                           
   741                           ; 3 bytes @ 0xE
   742  00000F                     	ds	1
   743  000010                     SD_MBW_Send@response:
   744                           	opt stack 0
   745  000010                     average@numElements:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0xF
   749  000010                     	ds	1
   750  000011                     ??_SD_MBR_Start:
   751  000011                     SD_ACMD@cmd:
   752                           	opt stack 0
   753  000011                     ___lltoft@exp:
   754                           	opt stack 0
   755  000011                     SD_SingleBlockWrite@arr:
   756                           	opt stack 0
   757  000011                     SD_MBW_Send@i:
   758                           	opt stack 0
   759  000011                     SD_SingleBlockRead@buf:
   760                           	opt stack 0
   761  000011                     SD_EraseBlocks@lastBlock:
   762                           	opt stack 0
   763                           
   764                           ; 4 bytes @ 0x10
   765  000011                     	ds	1
   766  000012                     ??___ftdiv:
   767  000012                     ??_average:
   768  000012                     ?___ftmul:
   769                           	opt stack 0
   770  000012                     SD_MBR_Start@response:
   771                           	opt stack 0
   772  000012                     ___ftmul@f1:
   773                           	opt stack 0
   774  000012                     SD_MBW_Start@startBlock:
   775                           	opt stack 0
   776  000012                     ___llmod@divisor:
   777                           	opt stack 0
   778                           
   779                           ; 4 bytes @ 0x11
   780  000012                     	ds	1
   781  000013                     ??_SD_SingleBlockWrite:
   782  000013                     ??_SD_SingleBlockRead:
   783  000013                     average@sum:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0x12
   787  000013                     	ds	1
   788  000014                     SD_SingleBlockWrite@response:
   789                           	opt stack 0
   790  000014                     SD_SingleBlockRead@i:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x13
   794  000014                     	ds	1
   795  000015                     ___ftdiv@cntr:
   796                           	opt stack 0
   797  000015                     SD_SingleBlockWrite@i:
   798                           	opt stack 0
   799  000015                     ___ftmul@f2:
   800                           	opt stack 0
   801                           
   802                           ; 3 bytes @ 0x14
   803  000015                     	ds	1
   804  000016                     SD_SingleBlockRead@response:
   805                           	opt stack 0
   806  000016                     ___llmod@counter:
   807                           	opt stack 0
   808  000016                     ___ftdiv@f3:
   809                           	opt stack 0
   810  000016                     SD_MBW_Start@numBlocks:
   811                           	opt stack 0
   812                           
   813                           ; 4 bytes @ 0x15
   814  000016                     	ds	1
   815  000017                     average@n:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x16
   819  000017                     	ds	1
   820  000018                     ??___ftmul:
   821                           
   822                           ; 1 bytes @ 0x17
   823  000018                     	ds	1
   824  000019                     ?_printf:
   825                           	opt stack 0
   826  000019                     ___ftdiv@exp:
   827                           	opt stack 0
   828  000019                     printf@f:
   829                           	opt stack 0
   830                           
   831                           ; 2 bytes @ 0x18
   832  000019                     	ds	1
   833  00001A                     ??_SD_MBW_Start:
   834  00001A                     ___ftdiv@sign:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x19
   838  00001A                     	ds	1
   839  00001B                     ___ftmul@exp:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x1A
   843  00001B                     	ds	1
   844  00001C                     ___ftmul@f3_as_product:
   845                           	opt stack 0
   846                           
   847                           ; 3 bytes @ 0x1B
   848  00001C                     	ds	3
   849  00001F                     ??_printf:
   850  00001F                     ___ftmul@cntr:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x1E
   854  00001F                     	ds	1
   855  000020                     ___ftmul@sign:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x1F
   859  000020                     	ds	1
   860  000021                     ?___fttol:
   861                           	opt stack 0
   862  000021                     printf@prec:
   863                           	opt stack 0
   864  000021                     ___fttol@f1:
   865                           	opt stack 0
   866                           
   867                           ; 3 bytes @ 0x20
   868  000021                     	ds	2
   869  000023                     printf@val:
   870                           	opt stack 0
   871                           
   872                           ; 4 bytes @ 0x22
   873  000023                     	ds	2
   874  000025                     ??___fttol:
   875                           
   876                           ; 1 bytes @ 0x24
   877  000025                     	ds	2
   878  000027                     printf@ap:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x26
   882  000027                     	ds	2
   883  000029                     printf@flag:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x28
   887  000029                     	ds	1
   888  00002A                     printf@c:
   889                           	opt stack 0
   890  00002A                     ___fttol@sign1:
   891                           	opt stack 0
   892                           
   893                           ; 1 bytes @ 0x29
   894  00002A                     	ds	1
   895  00002B                     ___fttol@lval:
   896                           	opt stack 0
   897                           
   898                           ; 4 bytes @ 0x2A
   899  00002B                     	ds	4
   900  00002F                     ___fttol@exp1:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x2E
   904  00002F                     	ds	1
   905  000030                     ??_initSD:
   906                           
   907                           ; 1 bytes @ 0x2F
   908  000030                     	ds	7
   909  000037                     initSD@argument:
   910                           	opt stack 0
   911                           
   912                           ; 4 bytes @ 0x36
   913  000037                     	ds	4
   914  00003B                     initSD@last_OSCCON:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x3A
   918  00003B                     	ds	1
   919  00003C                     initSD@last_OSCTUNE:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x3B
   923  00003C                     	ds	1
   924  00003D                     initSD@tempSize:
   925                           	opt stack 0
   926                           
   927                           ; 4 bytes @ 0x3C
   928  00003D                     	ds	4
   929  000041                     initSD@arr_response:
   930                           	opt stack 0
   931                           
   932                           ; 16 bytes @ 0x40
   933  000041                     	ds	16
   934  000051                     initSD@tempSize_479:
   935                           	opt stack 0
   936                           
   937                           ; 4 bytes @ 0x50
   938  000051                     	ds	4
   939  000055                     initSD@response:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x54
   943  000055                     	ds	1
   944  000056                     initSD@i:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x55
   948  000056                     	ds	1
   949  000057                     ??_main:
   950                           
   951                           ; 1 bytes @ 0x56
   952  000057                     	ds	12
   953  000063                     main@avg:
   954                           	opt stack 0
   955                           
   956                           ; 4 bytes @ 0x62
   957  000063                     	ds	4
   958  000067                     main@numWrites:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x66
   962  000067                     	ds	2
   963  000069                     main@firstBlock:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x68
   967  000069                     	ds	1
   968  00006A                     main@i:
   969                           	opt stack 0
   970                           
   971                           ; 4 bytes @ 0x69
   972  00006A                     	ds	4
   973                           tblptru	equ	0xFF8
   974                           postinc0	equ	0xFEE
   975                           wreg	equ	0xFE8
   976                           postdec1	equ	0xFE5
   977                           fsr1h	equ	0xFE2
   978                           fsr1l	equ	0xFE1
   979                           
   980 ;;
   981 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
   982 ;;
   983 ;; *************** function _main *****************
   984 ;; Defined at:
   985 ;;		line 50 in file "main.c"
   986 ;; Parameters:    Size  Location     Type
   987 ;;		None
   988 ;; Auto vars:     Size  Location     Type
   989 ;;  i               4  105[COMRAM] unsigned long 
   990 ;;  avg             4   98[COMRAM] unsigned long 
   991 ;;  numWrites       2  102[COMRAM] unsigned short 
   992 ;;  firstBlock      1  104[COMRAM] unsigned char 
   993 ;; Return value:  Size  Location     Type
   994 ;;                  1    wreg      void 
   995 ;; Registers used:
   996 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1005 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1006 ;;Total ram usage:       23 bytes
  1007 ;; Hardware stack levels required when called:    5
  1008 ;; This function calls:
  1009 ;;		_SD_EraseBlocks
  1010 ;;		_SD_MBR_Receive
  1011 ;;		_SD_MBR_Start
  1012 ;;		_SD_MBR_Stop
  1013 ;;		_SD_MBW_Send
  1014 ;;		_SD_MBW_Start
  1015 ;;		_SD_MBW_Stop
  1016 ;;		_SD_SingleBlockRead
  1017 ;;		_SD_SingleBlockWrite
  1018 ;;		___lldiv
  1019 ;;		___llmod
  1020 ;;		_average
  1021 ;;		_initLCD
  1022 ;;		_initSD
  1023 ;;		_lcdInst
  1024 ;;		_lcd_set_cursor
  1025 ;;		_machineConfig
  1026 ;;		_printf
  1027 ;;		_spiReceive
  1028 ;; This function is called by:
  1029 ;;		Startup code after reset
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           	psect	text0
  1034  001902                     __ptext0:
  1035                           	opt stack 0
  1036  001902                     _main:
  1037                           	opt stack 26
  1038                           
  1039                           ;main.c: 52: machineConfig();
  1040                           
  1041                           ;incstack = 0
  1042  001902  EC04  F016         	call	_machineConfig	;wreg free
  1043                           
  1044                           ;main.c: 55: initLCD();
  1045  001906  ECDE  F015         	call	_initLCD	;wreg free
  1046                           
  1047                           ;main.c: 56: lcdInst(8 | (1 << 2) | (0 << 1)| 0);;
  1048  00190A  0E0C               	movlw	12
  1049  00190C  EC0E  F017         	call	_lcdInst
  1050                           
  1051                           ;main.c: 59: initSD();
  1052  001910  EC79  F008         	call	_initSD	;wreg free
  1053                           
  1054                           ;main.c: 60: if(SDCard.init){
  1055  001914  0100               	movlb	0	; () banked
  1056  001916  519B               	movf	(_SDCard+27)& (0+255),w,b
  1057  001918  B4D8               	btfsc	status,2,c
  1058  00191A  D007               	goto	l3330
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;main.c: 61: printf("Init success!");
  1062  00191C  0E7B               	movlw	low STR_1
  1063  00191E  6E19               	movwf	printf@f,c
  1064  001920  0E10               	movlw	high STR_1
  1065  001922  6E1A               	movwf	printf@f+1,c
  1066  001924  EC74  F00F         	call	_printf	;wreg free
  1067                           
  1068                           ;main.c: 62: }
  1069  001928  D007               	goto	l3332
  1070  00192A                     l3330:
  1071                           
  1072                           ;main.c: 63: else{
  1073                           ;main.c: 64: printf("Init failed");
  1074  00192A  0EA3               	movlw	low STR_2
  1075  00192C  6E19               	movwf	printf@f,c
  1076  00192E  0E10               	movlw	high STR_2
  1077  001930  6E1A               	movwf	printf@f+1,c
  1078  001932  EC74  F00F         	call	_printf	;wreg free
  1079  001936                     l470:
  1080  001936  D7FF               	goto	l470
  1081  001938                     l3332:
  1082                           
  1083                           ;main.c: 66: }
  1084                           ;main.c: 67: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1085  001938  0E33               	movlw	51
  1086  00193A  6E58               	movwf	(??_main+1)& (0+255),c
  1087  00193C  0EBB               	movlw	187
  1088  00193E  6E57               	movwf	??_main& (0+255),c
  1089  001940  0EE0               	movlw	224
  1090  001942                     u2937:
  1091  001942  2EE8               	decfsz	wreg,f,c
  1092  001944  D7FE               	bra	u2937
  1093  001946  2E57               	decfsz	??_main& (0+255),f,c
  1094  001948  D7FC               	bra	u2937
  1095  00194A  2E58               	decfsz	(??_main+1)& (0+255),f,c
  1096  00194C  D7FA               	bra	u2937
  1097                           
  1098                           ;main.c: 72: static unsigned char readBuffer[512] = {0};
  1099                           ;main.c: 74: unsigned long i;
  1100                           ;main.c: 84: { SSPCON1bits.SSPEN = 1; LATEbits.LATE2 = 0;};
  1101  00194E  8AC6               	bsf	4038,5,c	;volatile
  1102  001950  948D               	bcf	3981,2,c	;volatile
  1103                           
  1104                           ;main.c: 85: SD_EraseBlocks(0, 0);
  1105  001952  0E00               	movlw	0
  1106  001954  6E0D               	movwf	SD_EraseBlocks@firstBlock,c
  1107  001956  0E00               	movlw	0
  1108  001958  6E0E               	movwf	SD_EraseBlocks@firstBlock+1,c
  1109  00195A  0E00               	movlw	0
  1110  00195C  6E0F               	movwf	SD_EraseBlocks@firstBlock+2,c
  1111  00195E  0E00               	movlw	0
  1112  001960  6E10               	movwf	SD_EraseBlocks@firstBlock+3,c
  1113  001962  0E00               	movlw	0
  1114  001964  6E11               	movwf	SD_EraseBlocks@lastBlock,c
  1115  001966  0E00               	movlw	0
  1116  001968  6E12               	movwf	SD_EraseBlocks@lastBlock+1,c
  1117  00196A  0E00               	movlw	0
  1118  00196C  6E13               	movwf	SD_EraseBlocks@lastBlock+2,c
  1119  00196E  0E00               	movlw	0
  1120  001970  6E14               	movwf	SD_EraseBlocks@lastBlock+3,c
  1121  001972  EC0E  F014         	call	_SD_EraseBlocks	;wreg free
  1122  001976                     l3340:
  1123  001976  EC1D  F017         	call	_spiReceive	;wreg free
  1124  00197A  0AFF               	xorlw	255
  1125  00197C  A4D8               	btfss	status,2,c
  1126  00197E  D7FB               	goto	l3340
  1127                           
  1128                           ;main.c: 89: for(i = 0; i < 512; i++){
  1129  001980  0E00               	movlw	0
  1130  001982  6E6A               	movwf	main@i,c
  1131  001984  0E00               	movlw	0
  1132  001986  6E6B               	movwf	main@i+1,c
  1133  001988  0E00               	movlw	0
  1134  00198A  6E6C               	movwf	main@i+2,c
  1135  00198C  0E00               	movlw	0
  1136  00198E  6E6D               	movwf	main@i+3,c
  1137  001990                     l3344:
  1138  001990  506D               	movf	main@i+3,w,c
  1139  001992  106C               	iorwf	main@i+2,w,c
  1140  001994  E113               	bnz	l3354
  1141  001996  0E02               	movlw	2
  1142  001998  5C6B               	subwf	main@i+1,w,c
  1143  00199A  B0D8               	btfsc	status,0,c
  1144  00199C  D00F               	goto	l3354
  1145                           
  1146                           ;main.c: 90: writeBuffer[i] = i & 0xFF;
  1147  00199E  0E80               	movlw	low _writeBuffer
  1148  0019A0  246A               	addwf	main@i,w,c
  1149  0019A2  6ED9               	movwf	fsr2l,c
  1150  0019A4  0E0D               	movlw	high _writeBuffer
  1151  0019A6  206B               	addwfc	main@i+1,w,c
  1152  0019A8  6EDA               	movwf	fsr2h,c
  1153  0019AA  C06A  FFDF         	movff	main@i,indf2
  1154  0019AE  0E01               	movlw	1
  1155  0019B0  266A               	addwf	main@i,f,c
  1156  0019B2  0E00               	movlw	0
  1157  0019B4  226B               	addwfc	main@i+1,f,c
  1158  0019B6  226C               	addwfc	main@i+2,f,c
  1159  0019B8  226D               	addwfc	main@i+3,f,c
  1160  0019BA  D7EA               	goto	l3344
  1161  0019BC                     l3354:
  1162  0019BC  0E00               	movlw	0
  1163  0019BE  6E0D               	movwf	SD_SingleBlockWrite@block,c
  1164  0019C0  0E00               	movlw	0
  1165  0019C2  6E0E               	movwf	SD_SingleBlockWrite@block+1,c
  1166  0019C4  0E00               	movlw	0
  1167  0019C6  6E0F               	movwf	SD_SingleBlockWrite@block+2,c
  1168  0019C8  0E00               	movlw	0
  1169  0019CA  6E10               	movwf	SD_SingleBlockWrite@block+3,c
  1170  0019CC  0E80               	movlw	low _writeBuffer
  1171  0019CE  6E11               	movwf	SD_SingleBlockWrite@arr,c
  1172  0019D0  0E0D               	movlw	high _writeBuffer
  1173  0019D2  6E12               	movwf	SD_SingleBlockWrite@arr+1,c
  1174  0019D4  EC5D  F012         	call	_SD_SingleBlockWrite	;wreg free
  1175  0019D8  0900               	iorlw	0
  1176  0019DA  B4D8               	btfsc	status,2,c
  1177  0019DC  D7EF               	goto	l3354
  1178                           
  1179                           ;main.c: 95: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x80
      +                          );_delay((unsigned long)((5)*(40000000/4000.0)));;
  1180  0019DE  0E01               	movlw	1
  1181  0019E0  EC0E  F017         	call	_lcdInst
  1182  0019E4  0EC3               	movlw	195
  1183  0019E6  6E57               	movwf	??_main& (0+255),c
  1184  0019E8  0ECD               	movlw	205
  1185  0019EA                     u2947:
  1186  0019EA  2EE8               	decfsz	wreg,f,c
  1187  0019EC  D7FE               	bra	u2947
  1188  0019EE  2E57               	decfsz	??_main& (0+255),f,c
  1189  0019F0  D7FC               	bra	u2947
  1190  0019F2  F000               	nop	
  1191  0019F4  0E80               	movlw	128
  1192  0019F6  EC0E  F017         	call	_lcdInst
  1193  0019FA  0E41               	movlw	65
  1194  0019FC  6E57               	movwf	??_main& (0+255),c
  1195  0019FE  0EEE               	movlw	238
  1196  001A00                     u2957:
  1197  001A00  2EE8               	decfsz	wreg,f,c
  1198  001A02  D7FE               	bra	u2957
  1199  001A04  2E57               	decfsz	??_main& (0+255),f,c
  1200  001A06  D7FC               	bra	u2957
  1201  001A08  D000               	nop2	
  1202                           
  1203                           ;main.c: 96: printf("Single block");
  1204  001A0A  0E96               	movlw	low STR_3
  1205  001A0C  6E19               	movwf	printf@f,c
  1206  001A0E  0E10               	movlw	high STR_3
  1207  001A10  6E1A               	movwf	printf@f+1,c
  1208  001A12  EC74  F00F         	call	_printf	;wreg free
  1209                           
  1210                           ;main.c: 97: lcdInst(0xC0);;
  1211  001A16  0EC0               	movlw	192
  1212  001A18  EC0E  F017         	call	_lcdInst
  1213                           
  1214                           ;main.c: 98: printf("write finished");
  1215  001A1C  0E6C               	movlw	low STR_4
  1216  001A1E  6E19               	movwf	printf@f,c
  1217  001A20  0E10               	movlw	high STR_4
  1218  001A22  6E1A               	movwf	printf@f+1,c
  1219  001A24  EC74  F00F         	call	_printf	;wreg free
  1220                           
  1221                           ;main.c: 99: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1222  001A28  0E33               	movlw	51
  1223  001A2A  6E58               	movwf	(??_main+1)& (0+255),c
  1224  001A2C  0EBB               	movlw	187
  1225  001A2E  6E57               	movwf	??_main& (0+255),c
  1226  001A30  0EE0               	movlw	224
  1227  001A32                     u2967:
  1228  001A32  2EE8               	decfsz	wreg,f,c
  1229  001A34  D7FE               	bra	u2967
  1230  001A36  2E57               	decfsz	??_main& (0+255),f,c
  1231  001A38  D7FC               	bra	u2967
  1232  001A3A  2E58               	decfsz	(??_main+1)& (0+255),f,c
  1233  001A3C  D7FA               	bra	u2967
  1234                           
  1235                           ;main.c: 119: unsigned char firstBlock = 1;
  1236  001A3E  0E01               	movlw	1
  1237  001A40  6E69               	movwf	main@firstBlock,c
  1238                           
  1239                           ;main.c: 120: unsigned short numWrites = 1000;
  1240  001A42  0E03               	movlw	3
  1241  001A44  6E68               	movwf	main@numWrites+1,c
  1242  001A46  0EE8               	movlw	232
  1243  001A48  6E67               	movwf	main@numWrites,c
  1244                           
  1245                           ;main.c: 123: for(i = 0; i < 512; i++){
  1246  001A4A  0E00               	movlw	0
  1247  001A4C  6E6A               	movwf	main@i,c
  1248  001A4E  0E00               	movlw	0
  1249  001A50  6E6B               	movwf	main@i+1,c
  1250  001A52  0E00               	movlw	0
  1251  001A54  6E6C               	movwf	main@i+2,c
  1252  001A56  0E00               	movlw	0
  1253  001A58  6E6D               	movwf	main@i+3,c
  1254  001A5A                     l3376:
  1255  001A5A  506D               	movf	main@i+3,w,c
  1256  001A5C  106C               	iorwf	main@i+2,w,c
  1257  001A5E  E113               	bnz	l3386
  1258  001A60  0E02               	movlw	2
  1259  001A62  5C6B               	subwf	main@i+1,w,c
  1260  001A64  B0D8               	btfsc	status,0,c
  1261  001A66  D00F               	goto	l3386
  1262                           
  1263                           ;main.c: 124: writeBuffer[i] = 0x34;
  1264  001A68  0E80               	movlw	low _writeBuffer
  1265  001A6A  246A               	addwf	main@i,w,c
  1266  001A6C  6ED9               	movwf	fsr2l,c
  1267  001A6E  0E0D               	movlw	high _writeBuffer
  1268  001A70  206B               	addwfc	main@i+1,w,c
  1269  001A72  6EDA               	movwf	fsr2h,c
  1270  001A74  0E34               	movlw	52
  1271  001A76  6EDF               	movwf	indf2,c
  1272  001A78  0E01               	movlw	1
  1273  001A7A  266A               	addwf	main@i,f,c
  1274  001A7C  0E00               	movlw	0
  1275  001A7E  226B               	addwfc	main@i+1,f,c
  1276  001A80  226C               	addwfc	main@i+2,f,c
  1277  001A82  226D               	addwfc	main@i+3,f,c
  1278  001A84  D7EA               	goto	l3376
  1279  001A86                     l3386:
  1280                           
  1281                           ;main.c: 125: }
  1282                           ;main.c: 127: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1283  001A86  0E01               	movlw	1
  1284  001A88  EC0E  F017         	call	_lcdInst
  1285  001A8C  0EC3               	movlw	195
  1286  001A8E  6E57               	movwf	??_main& (0+255),c
  1287  001A90  0ECD               	movlw	205
  1288  001A92                     u2977:
  1289  001A92  2EE8               	decfsz	wreg,f,c
  1290  001A94  D7FE               	bra	u2977
  1291  001A96  2E57               	decfsz	??_main& (0+255),f,c
  1292  001A98  D7FC               	bra	u2977
  1293  001A9A  F000               	nop	
  1294  001A9C  0E80               	movlw	128
  1295  001A9E  EC0E  F017         	call	_lcdInst
  1296  001AA2  0E41               	movlw	65
  1297  001AA4  6E57               	movwf	??_main& (0+255),c
  1298  001AA6  0EEE               	movlw	238
  1299  001AA8                     u2987:
  1300  001AA8  2EE8               	decfsz	wreg,f,c
  1301  001AAA  D7FE               	bra	u2987
  1302  001AAC  2E57               	decfsz	??_main& (0+255),f,c
  1303  001AAE  D7FC               	bra	u2987
  1304  001AB0  D000               	nop2	
  1305                           
  1306                           ;main.c: 128: printf("MBW Start...");
  1307  001AB2  0E89               	movlw	low STR_5
  1308  001AB4  6E19               	movwf	printf@f,c
  1309  001AB6  0E10               	movlw	high STR_5
  1310  001AB8  6E1A               	movwf	printf@f+1,c
  1311  001ABA  EC74  F00F         	call	_printf	;wreg free
  1312                           
  1313                           ;main.c: 129: SD_MBW_Start(firstBlock, numWrites);
  1314  001ABE  5069               	movf	main@firstBlock,w,c
  1315  001AC0  6E12               	movwf	SD_MBW_Start@startBlock,c
  1316  001AC2  6A13               	clrf	SD_MBW_Start@startBlock+1,c
  1317  001AC4  6A14               	clrf	SD_MBW_Start@startBlock+2,c
  1318  001AC6  6A15               	clrf	SD_MBW_Start@startBlock+3,c
  1319  001AC8  C067  F016         	movff	main@numWrites,SD_MBW_Start@numBlocks
  1320  001ACC  C068  F017         	movff	main@numWrites+1,SD_MBW_Start@numBlocks+1
  1321  001AD0  6A18               	clrf	SD_MBW_Start@numBlocks+2,c
  1322  001AD2  6A19               	clrf	SD_MBW_Start@numBlocks+3,c
  1323  001AD4  ECD3  F014         	call	_SD_MBW_Start	;wreg free
  1324                           
  1325                           ;main.c: 131: for(i = 0; i < numWrites; i++){
  1326  001AD8  0E00               	movlw	0
  1327  001ADA  6E6A               	movwf	main@i,c
  1328  001ADC  0E00               	movlw	0
  1329  001ADE  6E6B               	movwf	main@i+1,c
  1330  001AE0  0E00               	movlw	0
  1331  001AE2  6E6C               	movwf	main@i+2,c
  1332  001AE4  0E00               	movlw	0
  1333  001AE6  6E6D               	movwf	main@i+3,c
  1334  001AE8  D03A               	goto	l3410
  1335  001AEA                     l3398:
  1336                           
  1337                           ;main.c: 133: if(!SD_MBW_Send(writeBuffer)){
  1338  001AEA  0E80               	movlw	low _writeBuffer
  1339  001AEC  6E0D               	movwf	SD_MBW_Send@arrWrite,c
  1340  001AEE  0E0D               	movlw	high _writeBuffer
  1341  001AF0  6E0E               	movwf	SD_MBW_Send@arrWrite+1,c
  1342  001AF2  EC74  F010         	call	_SD_MBW_Send	;wreg free
  1343  001AF6  0900               	iorlw	0
  1344  001AF8  B4D8               	btfsc	status,2,c
  1345  001AFA  D041               	goto	l3412
  1346                           
  1347                           ;main.c: 135: }
  1348                           ;main.c: 136: if(i % 100 == 0){
  1349                           
  1350                           ;main.c: 134: break;
  1351  001AFC  C06A  F00E         	movff	main@i,___llmod@dividend
  1352  001B00  C06B  F00F         	movff	main@i+1,___llmod@dividend+1
  1353  001B04  C06C  F010         	movff	main@i+2,___llmod@dividend+2
  1354  001B08  C06D  F011         	movff	main@i+3,___llmod@dividend+3
  1355  001B0C  0E64               	movlw	100
  1356  001B0E  6E12               	movwf	___llmod@divisor,c
  1357  001B10  0E00               	movlw	0
  1358  001B12  6E13               	movwf	___llmod@divisor+1,c
  1359  001B14  0E00               	movlw	0
  1360  001B16  6E14               	movwf	___llmod@divisor+2,c
  1361  001B18  0E00               	movlw	0
  1362  001B1A  6E15               	movwf	___llmod@divisor+3,c
  1363  001B1C  EC7D  F015         	call	___llmod	;wreg free
  1364  001B20  500E               	movf	?___llmod,w,c
  1365  001B22  100F               	iorwf	?___llmod+1,w,c
  1366  001B24  1010               	iorwf	?___llmod+2,w,c
  1367  001B26  1011               	iorwf	?___llmod+3,w,c
  1368  001B28  A4D8               	btfss	status,2,c
  1369  001B2A  D013               	goto	l3408
  1370                           
  1371                           ;main.c: 138: lcd_set_cursor(0, 1);
  1372  001B2C  0E01               	movlw	1
  1373  001B2E  6E07               	movwf	lcd_set_cursor@y,c
  1374  001B30  0E00               	movlw	0
  1375  001B32  EC26  F016         	call	_lcd_set_cursor
  1376                           
  1377                           ;main.c: 139: printf("Done: %lu", i);
  1378  001B36  0EC3               	movlw	low STR_6
  1379  001B38  6E19               	movwf	printf@f,c
  1380  001B3A  0E10               	movlw	high STR_6
  1381  001B3C  6E1A               	movwf	printf@f+1,c
  1382  001B3E  C06A  F01B         	movff	main@i,?_printf+2
  1383  001B42  C06B  F01C         	movff	main@i+1,?_printf+3
  1384  001B46  C06C  F01D         	movff	main@i+2,?_printf+4
  1385  001B4A  C06D  F01E         	movff	main@i+3,?_printf+5
  1386  001B4E  EC74  F00F         	call	_printf	;wreg free
  1387  001B52                     l3408:
  1388  001B52  0E01               	movlw	1
  1389  001B54  266A               	addwf	main@i,f,c
  1390  001B56  0E00               	movlw	0
  1391  001B58  226B               	addwfc	main@i+1,f,c
  1392  001B5A  226C               	addwfc	main@i+2,f,c
  1393  001B5C  226D               	addwfc	main@i+3,f,c
  1394  001B5E                     l3410:
  1395  001B5E  5067               	movf	main@numWrites,w,c
  1396  001B60  6E57               	movwf	??_main& (0+255),c
  1397  001B62  5068               	movf	main@numWrites+1,w,c
  1398  001B64  6E58               	movwf	(??_main+1)& (0+255),c
  1399  001B66  6A59               	clrf	(??_main+2)& (0+255),c
  1400  001B68  6A5A               	clrf	(??_main+3)& (0+255),c
  1401  001B6A  5057               	movf	??_main,w,c
  1402  001B6C  5C6A               	subwf	main@i,w,c
  1403  001B6E  5058               	movf	??_main+1,w,c
  1404  001B70  586B               	subwfb	main@i+1,w,c
  1405  001B72  5059               	movf	??_main+2,w,c
  1406  001B74  586C               	subwfb	main@i+2,w,c
  1407  001B76  505A               	movf	??_main+3,w,c
  1408  001B78  586D               	subwfb	main@i+3,w,c
  1409  001B7A  A0D8               	btfss	status,0,c
  1410  001B7C  D7B6               	goto	l3398
  1411  001B7E                     l3412:
  1412                           
  1413                           ;main.c: 140: }
  1414                           ;main.c: 141: }
  1415                           ;main.c: 142: SD_MBW_Stop();
  1416  001B7E  EC9A  F016         	call	_SD_MBW_Stop	;wreg free
  1417                           
  1418                           ;main.c: 143: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  1419  001B82  848D               	bsf	3981,2,c	;volatile
  1420  001B84  9AC6               	bcf	4038,5,c	;volatile
  1421                           
  1422                           ;main.c: 144: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  1423  001B86  0E01               	movlw	1
  1424  001B88  EC0E  F017         	call	_lcdInst
  1425  001B8C  0EC3               	movlw	195
  1426  001B8E  6E57               	movwf	??_main& (0+255),c
  1427  001B90  0ECD               	movlw	205
  1428  001B92                     u2997:
  1429  001B92  2EE8               	decfsz	wreg,f,c
  1430  001B94  D7FE               	bra	u2997
  1431  001B96  2E57               	decfsz	??_main& (0+255),f,c
  1432  001B98  D7FC               	bra	u2997
  1433  001B9A  F000               	nop	
  1434                           
  1435                           ;main.c: 145: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1436  001B9C  0E80               	movlw	128
  1437  001B9E  EC0E  F017         	call	_lcdInst
  1438  001BA2  0E41               	movlw	65
  1439  001BA4  6E57               	movwf	??_main& (0+255),c
  1440  001BA6  0EEE               	movlw	238
  1441  001BA8                     u3007:
  1442  001BA8  2EE8               	decfsz	wreg,f,c
  1443  001BAA  D7FE               	bra	u3007
  1444  001BAC  2E57               	decfsz	??_main& (0+255),f,c
  1445  001BAE  D7FC               	bra	u3007
  1446  001BB0  D000               	nop2	
  1447                           
  1448                           ;main.c: 146: printf("Done MBW!");
  1449  001BB2  0EAF               	movlw	low STR_7
  1450  001BB4  6E19               	movwf	printf@f,c
  1451  001BB6  0E10               	movlw	high STR_7
  1452  001BB8  6E1A               	movwf	printf@f+1,c
  1453  001BBA  EC74  F00F         	call	_printf	;wreg free
  1454                           
  1455                           ;main.c: 147: lcdInst(0xC0);;
  1456  001BBE  0EC0               	movlw	192
  1457  001BC0  EC0E  F017         	call	_lcdInst
  1458                           
  1459                           ;main.c: 148: printf("Done %lu", i);
  1460  001BC4  0EDF               	movlw	low STR_8
  1461  001BC6  6E19               	movwf	printf@f,c
  1462  001BC8  0E10               	movlw	high STR_8
  1463  001BCA  6E1A               	movwf	printf@f+1,c
  1464  001BCC  C06A  F01B         	movff	main@i,?_printf+2
  1465  001BD0  C06B  F01C         	movff	main@i+1,?_printf+3
  1466  001BD4  C06C  F01D         	movff	main@i+2,?_printf+4
  1467  001BD8  C06D  F01E         	movff	main@i+3,?_printf+5
  1468  001BDC  EC74  F00F         	call	_printf	;wreg free
  1469                           
  1470                           ;main.c: 149: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1471  001BE0  0E33               	movlw	51
  1472  001BE2  6E58               	movwf	(??_main+1)& (0+255),c
  1473  001BE4  0EBB               	movlw	187
  1474  001BE6  6E57               	movwf	??_main& (0+255),c
  1475  001BE8  0EE0               	movlw	224
  1476  001BEA                     u3017:
  1477  001BEA  2EE8               	decfsz	wreg,f,c
  1478  001BEC  D7FE               	bra	u3017
  1479  001BEE  2E57               	decfsz	??_main& (0+255),f,c
  1480  001BF0  D7FC               	bra	u3017
  1481  001BF2  2E58               	decfsz	(??_main+1)& (0+255),f,c
  1482  001BF4  D7FA               	bra	u3017
  1483                           
  1484                           ;main.c: 154: { SSPCON1bits.SSPEN = 1; LATEbits.LATE2 = 0;};
  1485  001BF6  8AC6               	bsf	4038,5,c	;volatile
  1486  001BF8  948D               	bcf	3981,2,c	;volatile
  1487                           
  1488                           ;main.c: 162: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1489  001BFA  0E01               	movlw	1
  1490  001BFC  EC0E  F017         	call	_lcdInst
  1491  001C00  0EC3               	movlw	195
  1492  001C02  6E57               	movwf	??_main& (0+255),c
  1493  001C04  0ECD               	movlw	205
  1494  001C06                     u3027:
  1495  001C06  2EE8               	decfsz	wreg,f,c
  1496  001C08  D7FE               	bra	u3027
  1497  001C0A  2E57               	decfsz	??_main& (0+255),f,c
  1498  001C0C  D7FC               	bra	u3027
  1499  001C0E  F000               	nop	
  1500  001C10  0E80               	movlw	128
  1501  001C12  EC0E  F017         	call	_lcdInst
  1502  001C16  0E41               	movlw	65
  1503  001C18  6E57               	movwf	??_main& (0+255),c
  1504  001C1A  0EEE               	movlw	238
  1505  001C1C                     u3037:
  1506  001C1C  2EE8               	decfsz	wreg,f,c
  1507  001C1E  D7FE               	bra	u3037
  1508  001C20  2E57               	decfsz	??_main& (0+255),f,c
  1509  001C22  D7FC               	bra	u3037
  1510  001C24  D000               	nop2	
  1511                           
  1512                           ;main.c: 163: printf("Reading sector 0");
  1513  001C26  0E4B               	movlw	low STR_9
  1514  001C28  6E19               	movwf	printf@f,c
  1515  001C2A  0E10               	movlw	high STR_9
  1516  001C2C  6E1A               	movwf	printf@f+1,c
  1517  001C2E  EC74  F00F         	call	_printf	;wreg free
  1518                           
  1519                           ;main.c: 164: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1520  001C32  0E33               	movlw	51
  1521  001C34  6E58               	movwf	(??_main+1)& (0+255),c
  1522  001C36  0EBB               	movlw	187
  1523  001C38  6E57               	movwf	??_main& (0+255),c
  1524  001C3A  0EE0               	movlw	224
  1525  001C3C                     u3047:
  1526  001C3C  2EE8               	decfsz	wreg,f,c
  1527  001C3E  D7FE               	bra	u3047
  1528  001C40  2E57               	decfsz	??_main& (0+255),f,c
  1529  001C42  D7FC               	bra	u3047
  1530  001C44  2E58               	decfsz	(??_main+1)& (0+255),f,c
  1531  001C46  D7FA               	bra	u3047
  1532                           
  1533                           ;main.c: 167: if(SD_SingleBlockRead(0, readBuffer)){
  1534  001C48  0E00               	movlw	0
  1535  001C4A  6E0D               	movwf	SD_SingleBlockRead@block,c
  1536  001C4C  0E00               	movlw	0
  1537  001C4E  6E0E               	movwf	SD_SingleBlockRead@block+1,c
  1538  001C50  0E00               	movlw	0
  1539  001C52  6E0F               	movwf	SD_SingleBlockRead@block+2,c
  1540  001C54  0E00               	movlw	0
  1541  001C56  6E10               	movwf	SD_SingleBlockRead@block+3,c
  1542  001C58  0E80               	movlw	low main@readBuffer
  1543  001C5A  6E11               	movwf	SD_SingleBlockRead@buf,c
  1544  001C5C  0E0B               	movlw	high main@readBuffer
  1545  001C5E  6E12               	movwf	SD_SingleBlockRead@buf+1,c
  1546  001C60  ECCC  F012         	call	_SD_SingleBlockRead	;wreg free
  1547  001C64  0900               	iorlw	0
  1548  001C66  B4D8               	btfsc	status,2,c
  1549  001C68  D018               	goto	l3456
  1550                           
  1551                           ;main.c: 168: lcdInst(0xC0);;
  1552  001C6A  0EC0               	movlw	192
  1553  001C6C  EC0E  F017         	call	_lcdInst
  1554                           
  1555                           ;main.c: 169: printf("Avg: %d", average(readBuffer, 512));
  1556  001C70  0EE8               	movlw	low STR_10
  1557  001C72  6E19               	movwf	printf@f,c
  1558  001C74  0E10               	movlw	high STR_10
  1559  001C76  6E1A               	movwf	printf@f+1,c
  1560  001C78  0E80               	movlw	low main@readBuffer
  1561  001C7A  6E0E               	movwf	average@array,c
  1562  001C7C  0E0B               	movlw	high main@readBuffer
  1563  001C7E  6E0F               	movwf	average@array+1,c
  1564  001C80  0E02               	movlw	2
  1565  001C82  6E11               	movwf	average@numElements+1,c
  1566  001C84  0E00               	movlw	0
  1567  001C86  6E10               	movwf	average@numElements,c
  1568  001C88  EC48  F015         	call	_average	;wreg free
  1569  001C8C  6E57               	movwf	??_main& (0+255),c
  1570  001C8E  5057               	movf	??_main,w,c
  1571  001C90  6E1B               	movwf	?_printf+2,c
  1572  001C92  6A1C               	clrf	?_printf+3,c
  1573  001C94  EC74  F00F         	call	_printf	;wreg free
  1574                           
  1575                           ;main.c: 170: }
  1576  001C98  D009               	goto	l3460
  1577  001C9A                     l3456:
  1578                           
  1579                           ;main.c: 171: else{
  1580                           ;main.c: 173: lcdInst(0xC0);;
  1581  001C9A  0EC0               	movlw	192
  1582  001C9C  EC0E  F017         	call	_lcdInst
  1583                           
  1584                           ;main.c: 174: printf("Failure!");
  1585  001CA0  0ECD               	movlw	low STR_11
  1586  001CA2  6E19               	movwf	printf@f,c
  1587  001CA4  0E10               	movlw	high STR_11
  1588  001CA6  6E1A               	movwf	printf@f+1,c
  1589  001CA8  EC74  F00F         	call	_printf	;wreg free
  1590  001CAC                     l3460:
  1591                           
  1592                           ;main.c: 175: }
  1593                           ;main.c: 176: _delay((unsigned long)((1000)*(40000000/4000.0)));
  1594  001CAC  0E33               	movlw	51
  1595  001CAE  6E58               	movwf	(??_main+1)& (0+255),c
  1596  001CB0  0EBB               	movlw	187
  1597  001CB2  6E57               	movwf	??_main& (0+255),c
  1598  001CB4  0EE0               	movlw	224
  1599  001CB6                     u3057:
  1600  001CB6  2EE8               	decfsz	wreg,f,c
  1601  001CB8  D7FE               	bra	u3057
  1602  001CBA  2E57               	decfsz	??_main& (0+255),f,c
  1603  001CBC  D7FC               	bra	u3057
  1604  001CBE  2E58               	decfsz	(??_main+1)& (0+255),f,c
  1605  001CC0  D7FA               	bra	u3057
  1606                           
  1607                           ;main.c: 199: unsigned long avg = 0;
  1608  001CC2  0E00               	movlw	0
  1609  001CC4  6E63               	movwf	main@avg,c
  1610  001CC6  0E00               	movlw	0
  1611  001CC8  6E64               	movwf	main@avg+1,c
  1612  001CCA  0E00               	movlw	0
  1613  001CCC  6E65               	movwf	main@avg+2,c
  1614  001CCE  0E00               	movlw	0
  1615  001CD0  6E66               	movwf	main@avg+3,c
  1616                           
  1617                           ;main.c: 203: SD_MBR_Start(SDCard.write.MBW_startBlock);
  1618  001CD2  C0A0  F00D         	movff	_SDCard+32,SD_MBR_Start@startBlock
  1619  001CD6  C0A1  F00E         	movff	_SDCard+33,SD_MBR_Start@startBlock+1
  1620  001CDA  C0A2  F00F         	movff	_SDCard+34,SD_MBR_Start@startBlock+2
  1621  001CDE  C0A3  F010         	movff	_SDCard+35,SD_MBR_Start@startBlock+3
  1622  001CE2  EC12  F015         	call	_SD_MBR_Start	;wreg free
  1623                           
  1624                           ;main.c: 205: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1625  001CE6  0E01               	movlw	1
  1626  001CE8  EC0E  F017         	call	_lcdInst
  1627  001CEC  0EC3               	movlw	195
  1628  001CEE  6E57               	movwf	??_main& (0+255),c
  1629  001CF0  0ECD               	movlw	205
  1630  001CF2                     u3067:
  1631  001CF2  2EE8               	decfsz	wreg,f,c
  1632  001CF4  D7FE               	bra	u3067
  1633  001CF6  2E57               	decfsz	??_main& (0+255),f,c
  1634  001CF8  D7FC               	bra	u3067
  1635  001CFA  F000               	nop	
  1636  001CFC  0E80               	movlw	128
  1637  001CFE  EC0E  F017         	call	_lcdInst
  1638  001D02  0E41               	movlw	65
  1639  001D04  6E57               	movwf	??_main& (0+255),c
  1640  001D06  0EEE               	movlw	238
  1641  001D08                     u3077:
  1642  001D08  2EE8               	decfsz	wreg,f,c
  1643  001D0A  D7FE               	bra	u3077
  1644  001D0C  2E57               	decfsz	??_main& (0+255),f,c
  1645  001D0E  D7FC               	bra	u3077
  1646  001D10  D000               	nop2	
  1647                           
  1648                           ;main.c: 206: printf("Reading sectors");
  1649  001D12  0E5C               	movlw	low STR_12
  1650  001D14  6E19               	movwf	printf@f,c
  1651  001D16  0E10               	movlw	high STR_12
  1652  001D18  6E1A               	movwf	printf@f+1,c
  1653  001D1A  EC74  F00F         	call	_printf	;wreg free
  1654                           
  1655                           ;main.c: 207: lcdInst(0xC0);;
  1656  001D1E  0EC0               	movlw	192
  1657  001D20  EC0E  F017         	call	_lcdInst
  1658                           
  1659                           ;main.c: 208: printf("%d-%d...", firstBlock, firstBlock + numWrites - 1);
  1660  001D24  0ED6               	movlw	low STR_13
  1661  001D26  6E19               	movwf	printf@f,c
  1662  001D28  0E10               	movlw	high STR_13
  1663  001D2A  6E1A               	movwf	printf@f+1,c
  1664  001D2C  C069  F01B         	movff	main@firstBlock,?_printf+2
  1665  001D30  6A1C               	clrf	?_printf+3,c
  1666  001D32  5069               	movf	main@firstBlock,w,c
  1667  001D34  2467               	addwf	main@numWrites,w,c
  1668  001D36  6E57               	movwf	??_main& (0+255),c
  1669  001D38  0E00               	movlw	0
  1670  001D3A  2068               	addwfc	main@numWrites+1,w,c
  1671  001D3C  6E58               	movwf	(??_main+1)& (0+255),c
  1672  001D3E  0EFF               	movlw	255
  1673  001D40  2457               	addwf	??_main,w,c
  1674  001D42  6E1D               	movwf	?_printf+4,c
  1675  001D44  0EFF               	movlw	255
  1676  001D46  2058               	addwfc	??_main+1,w,c
  1677  001D48  6E1E               	movwf	?_printf+5,c
  1678  001D4A  EC74  F00F         	call	_printf	;wreg free
  1679                           
  1680                           ;main.c: 210: for(i = 0;
  1681  001D4E  0E00               	movlw	0
  1682  001D50  6E6A               	movwf	main@i,c
  1683  001D52  0E00               	movlw	0
  1684  001D54  6E6B               	movwf	main@i+1,c
  1685  001D56  0E00               	movlw	0
  1686  001D58  6E6C               	movwf	main@i+2,c
  1687  001D5A  0E00               	movlw	0
  1688  001D5C  6E6D               	movwf	main@i+3,c
  1689                           
  1690                           ;main.c: 211: i < SDCard.write.lastBlockWritten - SDCard.write.MBW_startBlock + 1;
  1691                           ;main.c: 212: i++)
  1692  001D5E  D01D               	goto	l3488
  1693  001D60                     l3482:
  1694                           
  1695                           ;main.c: 213: {
  1696                           ;main.c: 215: SD_MBR_Receive(readBuffer);
  1697  001D60  0E80               	movlw	low main@readBuffer
  1698  001D62  6E04               	movwf	SD_MBR_Receive@bufReceive,c
  1699  001D64  0E0B               	movlw	high main@readBuffer
  1700  001D66  6E05               	movwf	SD_MBR_Receive@bufReceive+1,c
  1701  001D68  ECC9  F013         	call	_SD_MBR_Receive	;wreg free
  1702                           
  1703                           ;main.c: 219: avg += average(readBuffer, 512);
  1704  001D6C  0E80               	movlw	low main@readBuffer
  1705  001D6E  6E0E               	movwf	average@array,c
  1706  001D70  0E0B               	movlw	high main@readBuffer
  1707  001D72  6E0F               	movwf	average@array+1,c
  1708  001D74  0E02               	movlw	2
  1709  001D76  6E11               	movwf	average@numElements+1,c
  1710  001D78  0E00               	movlw	0
  1711  001D7A  6E10               	movwf	average@numElements,c
  1712  001D7C  EC48  F015         	call	_average	;wreg free
  1713  001D80  6E57               	movwf	??_main& (0+255),c
  1714  001D82  5057               	movf	??_main,w,c
  1715  001D84  2663               	addwf	main@avg,f,c
  1716  001D86  0E00               	movlw	0
  1717  001D88  2264               	addwfc	main@avg+1,f,c
  1718  001D8A  2265               	addwfc	main@avg+2,f,c
  1719  001D8C  2266               	addwfc	main@avg+3,f,c
  1720  001D8E  0E01               	movlw	1
  1721  001D90  266A               	addwf	main@i,f,c
  1722  001D92  0E00               	movlw	0
  1723  001D94  226B               	addwfc	main@i+1,f,c
  1724  001D96  226C               	addwfc	main@i+2,f,c
  1725  001D98  226D               	addwfc	main@i+3,f,c
  1726  001D9A                     l3488:
  1727  001D9A  C0A0  F057         	movff	_SDCard+32,??_main
  1728  001D9E  C0A1  F058         	movff	_SDCard+33,??_main+1
  1729  001DA2  C0A2  F059         	movff	_SDCard+34,??_main+2
  1730  001DA6  C0A3  F05A         	movff	_SDCard+35,??_main+3
  1731  001DAA  1E57               	comf	??_main,f,c
  1732  001DAC  1E58               	comf	??_main+1,f,c
  1733  001DAE  1E59               	comf	??_main+2,f,c
  1734  001DB0  1E5A               	comf	??_main+3,f,c
  1735  001DB2  2A57               	incf	??_main,f,c
  1736  001DB4  0E00               	movlw	0
  1737  001DB6  2258               	addwfc	??_main+1,f,c
  1738  001DB8  2259               	addwfc	??_main+2,f,c
  1739  001DBA  225A               	addwfc	??_main+3,f,c
  1740  001DBC  0100               	movlb	0	; () banked
  1741  001DBE  519C               	movf	(_SDCard+28)& (0+255),w,b
  1742  001DC0  2457               	addwf	??_main,w,c
  1743  001DC2  6E5B               	movwf	(??_main+4)& (0+255),c
  1744  001DC4  0100               	movlb	0	; () banked
  1745  001DC6  519D               	movf	(_SDCard+29)& (0+255),w,b
  1746  001DC8  2058               	addwfc	??_main+1,w,c
  1747  001DCA  6E5C               	movwf	(??_main+5)& (0+255),c
  1748  001DCC  0100               	movlb	0	; () banked
  1749  001DCE  519E               	movf	(_SDCard+30)& (0+255),w,b
  1750  001DD0  2059               	addwfc	??_main+2,w,c
  1751  001DD2  6E5D               	movwf	(??_main+6)& (0+255),c
  1752  001DD4  0100               	movlb	0	; () banked
  1753  001DD6  519F               	movf	(_SDCard+31)& (0+255),w,b
  1754  001DD8  205A               	addwfc	??_main+3,w,c
  1755  001DDA  6E5E               	movwf	(??_main+7)& (0+255),c
  1756  001DDC  0E01               	movlw	1
  1757  001DDE  245B               	addwf	??_main+4,w,c
  1758  001DE0  6E5F               	movwf	(??_main+8)& (0+255),c
  1759  001DE2  0E00               	movlw	0
  1760  001DE4  205C               	addwfc	??_main+5,w,c
  1761  001DE6  6E60               	movwf	(??_main+9)& (0+255),c
  1762  001DE8  0E00               	movlw	0
  1763  001DEA  205D               	addwfc	??_main+6,w,c
  1764  001DEC  6E61               	movwf	(??_main+10)& (0+255),c
  1765  001DEE  0E00               	movlw	0
  1766  001DF0  205E               	addwfc	??_main+7,w,c
  1767  001DF2  6E62               	movwf	(??_main+11)& (0+255),c
  1768  001DF4  505F               	movf	??_main+8,w,c
  1769  001DF6  5C6A               	subwf	main@i,w,c
  1770  001DF8  5060               	movf	??_main+9,w,c
  1771  001DFA  586B               	subwfb	main@i+1,w,c
  1772  001DFC  5061               	movf	??_main+10,w,c
  1773  001DFE  586C               	subwfb	main@i+2,w,c
  1774  001E00  5062               	movf	??_main+11,w,c
  1775  001E02  586D               	subwfb	main@i+3,w,c
  1776  001E04  A0D8               	btfss	status,0,c
  1777  001E06  D7AC               	goto	l3482
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;main.c: 220: }
  1781                           ;main.c: 221: SD_MBR_Stop();
  1782                           
  1783                           ; BSR set to: 0
  1784  001E08  ECB2  F016         	call	_SD_MBR_Stop	;wreg free
  1785                           
  1786                           ;main.c: 225: avg /= (SDCard.read.lastBlockRead - SDCard.read.MBR_startBlock);
  1787  001E0C  C063  F001         	movff	main@avg,___lldiv@dividend
  1788  001E10  C064  F002         	movff	main@avg+1,___lldiv@dividend+1
  1789  001E14  C065  F003         	movff	main@avg+2,___lldiv@dividend+2
  1790  001E18  C066  F004         	movff	main@avg+3,___lldiv@dividend+3
  1791  001E1C  C0A9  F057         	movff	_SDCard+41,??_main
  1792  001E20  C0AA  F058         	movff	_SDCard+42,??_main+1
  1793  001E24  C0AB  F059         	movff	_SDCard+43,??_main+2
  1794  001E28  C0AC  F05A         	movff	_SDCard+44,??_main+3
  1795  001E2C  1E57               	comf	??_main,f,c
  1796  001E2E  1E58               	comf	??_main+1,f,c
  1797  001E30  1E59               	comf	??_main+2,f,c
  1798  001E32  1E5A               	comf	??_main+3,f,c
  1799  001E34  2A57               	incf	??_main,f,c
  1800  001E36  0E00               	movlw	0
  1801  001E38  2258               	addwfc	??_main+1,f,c
  1802  001E3A  2259               	addwfc	??_main+2,f,c
  1803  001E3C  225A               	addwfc	??_main+3,f,c
  1804  001E3E  0100               	movlb	0	; () banked
  1805  001E40  51A5               	movf	(_SDCard+37)& (0+255),w,b
  1806  001E42  2457               	addwf	??_main,w,c
  1807  001E44  6E05               	movwf	___lldiv@divisor,c
  1808  001E46  0100               	movlb	0	; () banked
  1809  001E48  51A6               	movf	(_SDCard+38)& (0+255),w,b
  1810  001E4A  2058               	addwfc	??_main+1,w,c
  1811  001E4C  6E06               	movwf	___lldiv@divisor+1,c
  1812  001E4E  0100               	movlb	0	; () banked
  1813  001E50  51A7               	movf	(_SDCard+39)& (0+255),w,b
  1814  001E52  2059               	addwfc	??_main+2,w,c
  1815  001E54  6E07               	movwf	___lldiv@divisor+2,c
  1816  001E56  0100               	movlb	0	; () banked
  1817  001E58  51A8               	movf	(_SDCard+40)& (0+255),w,b
  1818  001E5A  205A               	addwfc	??_main+3,w,c
  1819  001E5C  6E08               	movwf	___lldiv@divisor+3,c
  1820  001E5E  EC53  F014         	call	___lldiv	;wreg free
  1821  001E62  C001  F063         	movff	?___lldiv,main@avg
  1822  001E66  C002  F064         	movff	?___lldiv+1,main@avg+1
  1823  001E6A  C003  F065         	movff	?___lldiv+2,main@avg+2
  1824  001E6E  C004  F066         	movff	?___lldiv+3,main@avg+3
  1825                           
  1826                           ;main.c: 227: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  1827  001E72  848D               	bsf	3981,2,c	;volatile
  1828  001E74  9AC6               	bcf	4038,5,c	;volatile
  1829                           
  1830                           ;main.c: 229: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;lcdInst(0x8
      +                          0);_delay((unsigned long)((5)*(40000000/4000.0)));;
  1831  001E76  0E01               	movlw	1
  1832  001E78  EC0E  F017         	call	_lcdInst
  1833  001E7C  0EC3               	movlw	195
  1834  001E7E  6E57               	movwf	??_main& (0+255),c
  1835  001E80  0ECD               	movlw	205
  1836  001E82                     u3087:
  1837  001E82  2EE8               	decfsz	wreg,f,c
  1838  001E84  D7FE               	bra	u3087
  1839  001E86  2E57               	decfsz	??_main& (0+255),f,c
  1840  001E88  D7FC               	bra	u3087
  1841  001E8A  F000               	nop	
  1842  001E8C  0E80               	movlw	128
  1843  001E8E  EC0E  F017         	call	_lcdInst
  1844  001E92  0E41               	movlw	65
  1845  001E94  6E57               	movwf	??_main& (0+255),c
  1846  001E96  0EEE               	movlw	238
  1847  001E98                     u3097:
  1848  001E98  2EE8               	decfsz	wreg,f,c
  1849  001E9A  D7FE               	bra	u3097
  1850  001E9C  2E57               	decfsz	??_main& (0+255),f,c
  1851  001E9E  D7FC               	bra	u3097
  1852  001EA0  D000               	nop2	
  1853                           
  1854                           ;main.c: 230: printf("Sec %d-%d", (int)firstBlock, (int)(firstBlock + numWrites - 1));
  1855  001EA2  0EB9               	movlw	low STR_14
  1856  001EA4  6E19               	movwf	printf@f,c
  1857  001EA6  0E10               	movlw	high STR_14
  1858  001EA8  6E1A               	movwf	printf@f+1,c
  1859  001EAA  C069  F01B         	movff	main@firstBlock,?_printf+2
  1860  001EAE  6A1C               	clrf	?_printf+3,c
  1861  001EB0  5069               	movf	main@firstBlock,w,c
  1862  001EB2  2467               	addwf	main@numWrites,w,c
  1863  001EB4  6E57               	movwf	??_main& (0+255),c
  1864  001EB6  0E00               	movlw	0
  1865  001EB8  2068               	addwfc	main@numWrites+1,w,c
  1866  001EBA  6E58               	movwf	(??_main+1)& (0+255),c
  1867  001EBC  0EFF               	movlw	255
  1868  001EBE  2457               	addwf	??_main,w,c
  1869  001EC0  6E1D               	movwf	?_printf+4,c
  1870  001EC2  0EFF               	movlw	255
  1871  001EC4  2058               	addwfc	??_main+1,w,c
  1872  001EC6  6E1E               	movwf	?_printf+5,c
  1873  001EC8  EC74  F00F         	call	_printf	;wreg free
  1874                           
  1875                           ;main.c: 231: lcdInst(0xC0);;
  1876  001ECC  0EC0               	movlw	192
  1877  001ECE  EC0E  F017         	call	_lcdInst
  1878                           
  1879                           ;main.c: 232: printf("Avg: %d", (int)avg);
  1880  001ED2  0EE8               	movlw	low STR_10
  1881  001ED4  6E19               	movwf	printf@f,c
  1882  001ED6  0E10               	movlw	high STR_10
  1883  001ED8  6E1A               	movwf	printf@f+1,c
  1884  001EDA  C063  F01B         	movff	main@avg,?_printf+2
  1885  001EDE  C064  F01C         	movff	main@avg+1,?_printf+3
  1886  001EE2  EC74  F00F         	call	_printf	;wreg free
  1887  001EE6                     l495:
  1888  001EE6  D7FF               	goto	l495
  1889  001EE8                     __end_of_main:
  1890                           	opt stack 0
  1891                           tblptru	equ	0xFF8
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1h	equ	0xFE2
  1896                           fsr1l	equ	0xFE1
  1897                           indf2	equ	0xFDF
  1898                           fsr2h	equ	0xFDA
  1899                           fsr2l	equ	0xFD9
  1900                           status	equ	0xFD8
  1901                           
  1902 ;; *************** function _printf *****************
  1903 ;; Defined at:
  1904 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1905 ;; Parameters:    Size  Location     Type
  1906 ;;  f               2   24[COMRAM] PTR const unsigned char 
  1907 ;;		 -> STR_15(8), STR_14(10), STR_13(9), STR_12(16), 
  1908 ;;		 -> STR_11(9), STR_10(8), STR_9(17), STR_8(9), 
  1909 ;;		 -> STR_7(10), STR_6(10), STR_5(13), STR_4(15), 
  1910 ;;		 -> STR_3(13), STR_2(12), STR_1(14), 
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;  val             4   34[COMRAM] unsigned long 
  1913 ;;  tmpval          4    0        struct .
  1914 ;;  cp              3    0        PTR const unsigned char 
  1915 ;;  ap              2   38[COMRAM] PTR void [1]
  1916 ;;		 -> ?_printf(2), 
  1917 ;;  prec            2   32[COMRAM] int 
  1918 ;;  len             2    0        unsigned int 
  1919 ;;  c               1   41[COMRAM] char 
  1920 ;;  flag            1   40[COMRAM] unsigned char 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  2   24[COMRAM] int 
  1923 ;; Registers used:
  1924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1930 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1934 ;;Total ram usage:       18 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    2
  1937 ;; This function calls:
  1938 ;;		___lldiv
  1939 ;;		___llmod
  1940 ;;		_putch
  1941 ;; This function is called by:
  1942 ;;		_main
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text1
  1947  001EE8                     __ptext1:
  1948                           	opt stack 0
  1949  001EE8                     _printf:
  1950                           	opt stack 28
  1951                           
  1952                           ;doprnt.c: 466: va_list ap;
  1953                           ;doprnt.c: 499: signed char c;
  1954                           ;doprnt.c: 504: int prec;
  1955                           ;doprnt.c: 508: unsigned char flag;
  1956                           ;doprnt.c: 523: union {
  1957                           ;doprnt.c: 524: unsigned long vd;
  1958                           ;doprnt.c: 525: double integ;
  1959                           ;doprnt.c: 526: } tmpval;
  1960                           ;doprnt.c: 528: unsigned long val;
  1961                           ;doprnt.c: 529: unsigned len;
  1962                           ;doprnt.c: 530: const char * cp;
  1963                           ;doprnt.c: 533: *ap = __va_start();
  1964                           
  1965                           ;incstack = 0
  1966  001EE8  0E1B               	movlw	low (?_printf+2)
  1967  001EEA  6E27               	movwf	printf@ap,c
  1968  001EEC  0E00               	movlw	high (?_printf+2)
  1969  001EEE  6E28               	movwf	printf@ap+1,c
  1970                           
  1971                           ;doprnt.c: 536: while(c = *f++) {
  1972  001EF0  D0EE               	goto	l3304
  1973  001EF2                     l3240:
  1974                           
  1975                           ;doprnt.c: 538: if(c != '%')
  1976  001EF2  0E25               	movlw	37
  1977  001EF4  182A               	xorwf	printf@c,w,c
  1978  001EF6  B4D8               	btfsc	status,2,c
  1979  001EF8  D004               	goto	l3244
  1980                           
  1981                           ;doprnt.c: 540: {
  1982                           ;doprnt.c: 541: (putch(c) );
  1983  001EFA  502A               	movf	printf@c,w,c
  1984  001EFC  EC04  F017         	call	_putch
  1985                           
  1986                           ;doprnt.c: 542: continue;
  1987  001F00  D0E6               	goto	l3304
  1988  001F02                     l3244:
  1989                           
  1990                           ;doprnt.c: 543: }
  1991                           ;doprnt.c: 548: flag = 0;
  1992  001F02  0E00               	movlw	0
  1993  001F04  6E29               	movwf	printf@flag,c
  1994                           
  1995                           ;doprnt.c: 635: switch(c = *f++) {
  1996                           
  1997                           ;doprnt.c: 633: loop:
  1998  001F06  D004               	goto	l3252
  1999  001F08                     l3246:
  2000                           
  2001                           ;doprnt.c: 643: flag |= 0x10;
  2002  001F08  8829               	bsf	printf@flag,4,c
  2003                           
  2004                           ;doprnt.c: 644: goto loop;
  2005  001F0A  D002               	goto	l3252
  2006  001F0C                     l3248:
  2007                           
  2008                           ;doprnt.c: 818: flag |= 0x40;
  2009  001F0C  8C29               	bsf	printf@flag,6,c
  2010                           
  2011                           ;doprnt.c: 822: }
  2012                           
  2013                           ;doprnt.c: 819: break;
  2014  001F0E  D01A               	goto	l560
  2015  001F10                     l3252:
  2016  001F10  C019  FFF6         	movff	printf@f,tblptrl
  2017  001F14  C01A  FFF7         	movff	printf@f+1,tblptrh
  2018  001F18  4A19               	infsnz	printf@f,f,c
  2019  001F1A  2A1A               	incf	printf@f+1,f,c
  2020  001F1C                     	if	0	;tblptru may be non-zero
  2021  001F1C                     	endif
  2022  001F1C                     	if	0	;tblptru may be non-zero
  2023  001F1C                     	endif
  2024  001F1C  0008               	tblrd		*
  2025  001F1E  CFF5 F02A          	movff	tablat,printf@c
  2026  001F22  502A               	movf	printf@c,w,c
  2027                           
  2028                           ; Switch size 1, requested type "space"
  2029                           ; Number of cases is 5, Range of values is 0 to 117
  2030                           ; switch strategies available:
  2031                           ; Name         Instructions Cycles
  2032                           ; simple_byte           16     9 (average)
  2033                           ;	Chosen strategy is simple_byte
  2034  001F24  0A00               	xorlw	0	; case 0
  2035  001F26  B4D8               	btfsc	status,2,c
  2036  001F28  0012               	return	
  2037  001F2A  0A64               	xorlw	100	; case 100
  2038  001F2C  B4D8               	btfsc	status,2,c
  2039  001F2E  D00A               	goto	l560
  2040  001F30  0A0D               	xorlw	13	; case 105
  2041  001F32  B4D8               	btfsc	status,2,c
  2042  001F34  D007               	goto	l560
  2043  001F36  0A05               	xorlw	5	; case 108
  2044  001F38  B4D8               	btfsc	status,2,c
  2045  001F3A  D7E6               	goto	l3246
  2046  001F3C  0A19               	xorlw	25	; case 117
  2047  001F3E  B4D8               	btfsc	status,2,c
  2048  001F40  D7E5               	goto	l3248
  2049  001F42  D0C5               	goto	l3304
  2050  001F44                     l560:
  2051                           
  2052                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  2053  001F44  BC29               	btfsc	printf@flag,6,c
  2054  001F46  D02E               	goto	l563
  2055                           
  2056                           ;doprnt.c: 1253: {
  2057                           ;doprnt.c: 1255: if(flag & 0x10)
  2058  001F48  A829               	btfss	printf@flag,4,c
  2059  001F4A  D00E               	goto	l3260
  2060                           
  2061                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2062  001F4C  C027  FFD9         	movff	printf@ap,fsr2l
  2063  001F50  C028  FFDA         	movff	printf@ap+1,fsr2h
  2064  001F54  CFDE F023          	movff	postinc2,printf@val
  2065  001F58  CFDE F024          	movff	postinc2,printf@val+1
  2066  001F5C  CFDE F025          	movff	postinc2,printf@val+2
  2067  001F60  CFDE F026          	movff	postinc2,printf@val+3
  2068  001F64  0E04               	movlw	4
  2069  001F66  D00E               	goto	L1
  2070  001F68                     l3260:
  2071                           
  2072                           ;doprnt.c: 1257: else
  2073                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2074  001F68  C027  FFD9         	movff	printf@ap,fsr2l
  2075  001F6C  C028  FFDA         	movff	printf@ap+1,fsr2h
  2076  001F70  CFDE F023          	movff	postinc2,printf@val
  2077  001F74  CFDD F024          	movff	postdec2,printf@val+1
  2078  001F78  0E00               	movlw	0
  2079  001F7A  BE24               	btfsc	printf@val+1,7,c
  2080  001F7C  0EFF               	movlw	-1
  2081  001F7E  6E25               	movwf	printf@val+2,c
  2082  001F80  6E26               	movwf	printf@val+3,c
  2083  001F82  0E02               	movlw	2
  2084  001F84                     L1:
  2085  001F84  2627               	addwf	printf@ap,f,c
  2086  001F86  0E00               	movlw	0
  2087  001F88  2228               	addwfc	printf@ap+1,f,c
  2088                           
  2089                           ;doprnt.c: 1261: if((long)val < 0) {
  2090  001F8A  AE26               	btfss	printf@val+3,7,c
  2091  001F8C  D02D               	goto	l3278
  2092                           
  2093                           ;doprnt.c: 1262: flag |= 0x03;
  2094  001F8E  0E03               	movlw	3
  2095  001F90  1229               	iorwf	printf@flag,f,c
  2096                           
  2097                           ;doprnt.c: 1263: val = -val;
  2098  001F92  1E26               	comf	printf@val+3,f,c
  2099  001F94  1E25               	comf	printf@val+2,f,c
  2100  001F96  1E24               	comf	printf@val+1,f,c
  2101  001F98  6C23               	negf	printf@val,c
  2102  001F9A  0E00               	movlw	0
  2103  001F9C  2224               	addwfc	printf@val+1,f,c
  2104  001F9E  2225               	addwfc	printf@val+2,f,c
  2105  001FA0  2226               	addwfc	printf@val+3,f,c
  2106                           
  2107                           ;doprnt.c: 1264: }
  2108                           ;doprnt.c: 1266: }
  2109  001FA2  D022               	goto	l3278
  2110  001FA4                     l563:
  2111                           
  2112                           ;doprnt.c: 1268: else
  2113                           ;doprnt.c: 1273: {
  2114                           ;doprnt.c: 1281: if(flag & 0x10)
  2115  001FA4  A829               	btfss	printf@flag,4,c
  2116  001FA6  D00E               	goto	l3274
  2117                           
  2118                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2119  001FA8  C027  FFD9         	movff	printf@ap,fsr2l
  2120  001FAC  C028  FFDA         	movff	printf@ap+1,fsr2h
  2121  001FB0  CFDE F023          	movff	postinc2,printf@val
  2122  001FB4  CFDE F024          	movff	postinc2,printf@val+1
  2123  001FB8  CFDE F025          	movff	postinc2,printf@val+2
  2124  001FBC  CFDE F026          	movff	postinc2,printf@val+3
  2125  001FC0  0E04               	movlw	4
  2126  001FC2  D00F               	goto	L2
  2127  001FC4                     l3274:
  2128                           
  2129                           ;doprnt.c: 1283: else
  2130                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2131  001FC4  C027  FFD9         	movff	printf@ap,fsr2l
  2132  001FC8  C028  FFDA         	movff	printf@ap+1,fsr2h
  2133  001FCC  CFDE F01F          	movff	postinc2,??_printf
  2134  001FD0  CFDD F020          	movff	postdec2,??_printf+1
  2135  001FD4  C01F  F023         	movff	??_printf,printf@val
  2136  001FD8  C020  F024         	movff	??_printf+1,printf@val+1
  2137  001FDC  6A25               	clrf	printf@val+2,c
  2138  001FDE  6A26               	clrf	printf@val+3,c
  2139  001FE0  0E02               	movlw	2
  2140  001FE2                     L2:
  2141  001FE2  2627               	addwf	printf@ap,f,c
  2142  001FE4  0E00               	movlw	0
  2143  001FE6  2228               	addwfc	printf@ap+1,f,c
  2144  001FE8                     l3278:
  2145                           
  2146                           ;doprnt.c: 1287: }
  2147                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2148  001FE8  0E01               	movlw	1
  2149  001FEA  6E2A               	movwf	printf@c,c
  2150  001FEC                     l3280:
  2151  001FEC  0E0A               	movlw	10
  2152  001FEE  182A               	xorwf	printf@c,w,c
  2153  001FF0  B4D8               	btfsc	status,2,c
  2154  001FF2  D018               	goto	l3292
  2155                           
  2156                           ;doprnt.c: 1306: if(val < dpowers[c])
  2157  001FF4  502A               	movf	printf@c,w,c
  2158  001FF6  0D04               	mullw	4
  2159  001FF8  0E01               	movlw	low _dpowers
  2160  001FFA  24F3               	addwf	prodl,w,c
  2161  001FFC  6EF6               	movwf	tblptrl,c
  2162  001FFE  0E10               	movlw	high _dpowers
  2163  002000  20F4               	addwfc	prodh,w,c
  2164  002002  6EF7               	movwf	tblptrh,c
  2165  002004                     	if	0	;There are less than 3 active tblptr bytes
  2166  002004                     	endif
  2167  002004  0009               	tblrd		*+
  2168  002006  50F5               	movf	tablat,w,c
  2169  002008  5C23               	subwf	printf@val,w,c
  2170  00200A  0009               	tblrd		*+
  2171  00200C  50F5               	movf	tablat,w,c
  2172  00200E  5824               	subwfb	printf@val+1,w,c
  2173  002010  0009               	tblrd		*+
  2174  002012  50F5               	movf	tablat,w,c
  2175  002014  5825               	subwfb	printf@val+2,w,c
  2176  002016  0009               	tblrd		*+
  2177  002018  50F5               	movf	tablat,w,c
  2178  00201A  5826               	subwfb	printf@val+3,w,c
  2179  00201C  A0D8               	btfss	status,0,c
  2180  00201E  D002               	goto	l3292
  2181                           
  2182                           ;doprnt.c: 1307: break;
  2183  002020  2A2A               	incf	printf@c,f,c
  2184  002022  D7E4               	goto	l3280
  2185  002024                     l3292:
  2186                           
  2187                           ;doprnt.c: 1422: {
  2188                           ;doprnt.c: 1438: if(flag & 0x03)
  2189  002024  C029  F01F         	movff	printf@flag,??_printf
  2190  002028  0E03               	movlw	3
  2191  00202A  161F               	andwf	??_printf,f,c
  2192  00202C  B4D8               	btfsc	status,2,c
  2193  00202E  D003               	goto	l3296
  2194                           
  2195                           ;doprnt.c: 1439: (putch('-') );
  2196  002030  0E2D               	movlw	45
  2197  002032  EC04  F017         	call	_putch
  2198  002036                     l3296:
  2199                           
  2200                           ;doprnt.c: 1469: }
  2201                           ;doprnt.c: 1472: prec = c;
  2202  002036  502A               	movf	printf@c,w,c
  2203  002038  6E21               	movwf	printf@prec,c
  2204  00203A  6A22               	clrf	printf@prec+1,c
  2205  00203C  BE21               	btfsc	printf@prec,7,c
  2206  00203E  0622               	decf	printf@prec+1,f,c
  2207                           
  2208                           ;doprnt.c: 1474: while(prec--) {
  2209  002040  D03E               	goto	l3302
  2210  002042                     l3298:
  2211                           
  2212                           ;doprnt.c: 1478: {
  2213                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2214  002042  C021  F01F         	movff	printf@prec,??_printf
  2215  002046  C022  F020         	movff	printf@prec+1,??_printf+1
  2216  00204A  90D8               	bcf	status,0,c
  2217  00204C  361F               	rlcf	??_printf,f,c
  2218  00204E  3620               	rlcf	??_printf+1,f,c
  2219  002050  90D8               	bcf	status,0,c
  2220  002052  361F               	rlcf	??_printf,f,c
  2221  002054  3620               	rlcf	??_printf+1,f,c
  2222  002056  0E01               	movlw	low _dpowers
  2223  002058  241F               	addwf	??_printf,w,c
  2224  00205A  6EF6               	movwf	tblptrl,c
  2225  00205C  0E10               	movlw	high _dpowers
  2226  00205E  2020               	addwfc	??_printf+1,w,c
  2227  002060  6EF7               	movwf	tblptrh,c
  2228  002062                     	if	0	;There are less than 3 active tblptr bytes
  2229  002062                     	endif
  2230  002062  0009               	tblrd		*+
  2231  002064  CFF5 F005          	movff	tablat,___lldiv@divisor
  2232  002068  0009               	tblrd		*+
  2233  00206A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2234  00206E  0009               	tblrd		*+
  2235  002070  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2236  002074  000A               	tblrd		*-
  2237  002076  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2238  00207A  C023  F001         	movff	printf@val,___lldiv@dividend
  2239  00207E  C024  F002         	movff	printf@val+1,___lldiv@dividend+1
  2240  002082  C025  F003         	movff	printf@val+2,___lldiv@dividend+2
  2241  002086  C026  F004         	movff	printf@val+3,___lldiv@dividend+3
  2242  00208A  EC53  F014         	call	___lldiv	;wreg free
  2243  00208E  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2244  002092  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2245  002096  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2246  00209A  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2247  00209E  0E0A               	movlw	10
  2248  0020A0  6E12               	movwf	___llmod@divisor,c
  2249  0020A2  0E00               	movlw	0
  2250  0020A4  6E13               	movwf	___llmod@divisor+1,c
  2251  0020A6  0E00               	movlw	0
  2252  0020A8  6E14               	movwf	___llmod@divisor+2,c
  2253  0020AA  0E00               	movlw	0
  2254  0020AC  6E15               	movwf	___llmod@divisor+3,c
  2255  0020AE  EC7D  F015         	call	___llmod	;wreg free
  2256  0020B2  500E               	movf	?___llmod,w,c
  2257  0020B4  0F30               	addlw	48
  2258  0020B6  6E2A               	movwf	printf@c,c
  2259                           
  2260                           ;doprnt.c: 1523: }
  2261                           ;doprnt.c: 1524: (putch(c) );
  2262  0020B8  502A               	movf	printf@c,w,c
  2263  0020BA  EC04  F017         	call	_putch
  2264  0020BE                     l3302:
  2265  0020BE  0621               	decf	printf@prec,f,c
  2266  0020C0  A0D8               	btfss	status,0,c
  2267  0020C2  0622               	decf	printf@prec+1,f,c
  2268  0020C4  2821               	incf	printf@prec,w,c
  2269  0020C6  E1BD               	bnz	l3298
  2270  0020C8  2822               	incf	printf@prec+1,w,c
  2271  0020CA  A4D8               	btfss	status,2,c
  2272  0020CC  D7BA               	goto	l3298
  2273  0020CE                     l3304:
  2274  0020CE  C019  FFF6         	movff	printf@f,tblptrl
  2275  0020D2  C01A  FFF7         	movff	printf@f+1,tblptrh
  2276  0020D6  4A19               	infsnz	printf@f,f,c
  2277  0020D8  2A1A               	incf	printf@f+1,f,c
  2278  0020DA                     	if	0	;tblptru may be non-zero
  2279  0020DA                     	endif
  2280  0020DA                     	if	0	;tblptru may be non-zero
  2281  0020DA                     	endif
  2282  0020DA  0008               	tblrd		*
  2283  0020DC  CFF5 F02A          	movff	tablat,printf@c
  2284  0020E0  502A               	movf	printf@c,w,c
  2285  0020E2  B4D8               	btfsc	status,2,c
  2286  0020E4  0012               	return	
  2287  0020E6  D705               	goto	l3240
  2288  0020E8                     __end_of_printf:
  2289                           	opt stack 0
  2290                           tblptru	equ	0xFF8
  2291                           tblptrh	equ	0xFF7
  2292                           tblptrl	equ	0xFF6
  2293                           tablat	equ	0xFF5
  2294                           prodh	equ	0xFF4
  2295                           prodl	equ	0xFF3
  2296                           postinc0	equ	0xFEE
  2297                           wreg	equ	0xFE8
  2298                           postdec1	equ	0xFE5
  2299                           fsr1h	equ	0xFE2
  2300                           fsr1l	equ	0xFE1
  2301                           indf2	equ	0xFDF
  2302                           postinc2	equ	0xFDE
  2303                           postdec2	equ	0xFDD
  2304                           fsr2h	equ	0xFDA
  2305                           fsr2l	equ	0xFD9
  2306                           status	equ	0xFD8
  2307                           
  2308 ;; *************** function _putch *****************
  2309 ;; Defined at:
  2310 ;;		line 24 in file "../../src/CharacterLCD/lcd.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  data            1    wreg     unsigned char 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  data            1    2[COMRAM] unsigned char 
  2315 ;; Return value:  Size  Location     Type
  2316 ;;                  1    wreg      void 
  2317 ;; Registers used:
  2318 ;;		wreg, status,2, status,0, cstack
  2319 ;; Tracked objects:
  2320 ;;		On entry : 0/0
  2321 ;;		On exit  : 0/0
  2322 ;;		Unchanged: 0/0
  2323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2325 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;Total ram usage:        1 bytes
  2329 ;; Hardware stack levels used:    1
  2330 ;; Hardware stack levels required when called:    1
  2331 ;; This function calls:
  2332 ;;		_lcdNibble
  2333 ;; This function is called by:
  2334 ;;		_printf
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text2
  2339  002E08                     __ptext2:
  2340                           	opt stack 0
  2341  002E08                     _putch:
  2342                           	opt stack 28
  2343                           
  2344                           ;incstack = 0
  2345                           ;putch@data stored from wreg
  2346  002E08  6E03               	movwf	putch@data,c
  2347                           
  2348                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2349  002E0A  848C               	bsf	3980,2,c	;volatile
  2350                           
  2351                           ;lcd.c: 33: lcdNibble(data);
  2352  002E0C  5003               	movf	putch@data,w,c
  2353  002E0E  EC94  F014         	call	_lcdNibble
  2354                           
  2355                           ;lcd.c: 34: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2356  002E12  0EC8               	movlw	200
  2357  002E14                     u3107:
  2358  002E14  D000               	nop2	
  2359  002E16  2EE8               	decfsz	wreg,f,c
  2360  002E18  D7FD               	bra	u3107
  2361  002E1A  0012               	return		;funcret
  2362  002E1C                     __end_of_putch:
  2363                           	opt stack 0
  2364                           tblptru	equ	0xFF8
  2365                           tblptrh	equ	0xFF7
  2366                           tblptrl	equ	0xFF6
  2367                           tablat	equ	0xFF5
  2368                           prodh	equ	0xFF4
  2369                           prodl	equ	0xFF3
  2370                           postinc0	equ	0xFEE
  2371                           wreg	equ	0xFE8
  2372                           postdec1	equ	0xFE5
  2373                           fsr1h	equ	0xFE2
  2374                           fsr1l	equ	0xFE1
  2375                           indf2	equ	0xFDF
  2376                           postinc2	equ	0xFDE
  2377                           postdec2	equ	0xFDD
  2378                           fsr2h	equ	0xFDA
  2379                           fsr2l	equ	0xFD9
  2380                           status	equ	0xFD8
  2381                           
  2382 ;; *************** function ___llmod *****************
  2383 ;; Defined at:
  2384 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  dividend        4   13[COMRAM] unsigned long 
  2387 ;;  divisor         4   17[COMRAM] unsigned long 
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  counter         1   21[COMRAM] unsigned char 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  4   13[COMRAM] unsigned long 
  2392 ;; Registers used:
  2393 ;;		wreg, status,2, status,0
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2399 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;Total ram usage:        9 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; This function calls:
  2406 ;;		Nothing
  2407 ;; This function is called by:
  2408 ;;		_main
  2409 ;;		_printf
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           	psect	text3
  2414  002AFA                     __ptext3:
  2415                           	opt stack 0
  2416  002AFA                     ___llmod:
  2417                           	opt stack 29
  2418                           
  2419                           ;incstack = 0
  2420  002AFA  5012               	movf	___llmod@divisor,w,c
  2421  002AFC  1013               	iorwf	___llmod@divisor+1,w,c
  2422  002AFE  1014               	iorwf	___llmod@divisor+2,w,c
  2423  002B00  1015               	iorwf	___llmod@divisor+3,w,c
  2424  002B02  B4D8               	btfsc	status,2,c
  2425  002B04  D024               	goto	l938
  2426  002B06  0E01               	movlw	1
  2427  002B08  6E16               	movwf	___llmod@counter,c
  2428  002B0A  D006               	goto	l2700
  2429  002B0C                     l2698:
  2430  002B0C  90D8               	bcf	status,0,c
  2431  002B0E  3612               	rlcf	___llmod@divisor,f,c
  2432  002B10  3613               	rlcf	___llmod@divisor+1,f,c
  2433  002B12  3614               	rlcf	___llmod@divisor+2,f,c
  2434  002B14  3615               	rlcf	___llmod@divisor+3,f,c
  2435  002B16  2A16               	incf	___llmod@counter,f,c
  2436  002B18                     l2700:
  2437  002B18  AE15               	btfss	___llmod@divisor+3,7,c
  2438  002B1A  D7F8               	goto	l2698
  2439  002B1C                     l2702:
  2440  002B1C  5012               	movf	___llmod@divisor,w,c
  2441  002B1E  5C0E               	subwf	___llmod@dividend,w,c
  2442  002B20  5013               	movf	___llmod@divisor+1,w,c
  2443  002B22  580F               	subwfb	___llmod@dividend+1,w,c
  2444  002B24  5014               	movf	___llmod@divisor+2,w,c
  2445  002B26  5810               	subwfb	___llmod@dividend+2,w,c
  2446  002B28  5015               	movf	___llmod@divisor+3,w,c
  2447  002B2A  5811               	subwfb	___llmod@dividend+3,w,c
  2448  002B2C  A0D8               	btfss	status,0,c
  2449  002B2E  D008               	goto	l2706
  2450  002B30  5012               	movf	___llmod@divisor,w,c
  2451  002B32  5E0E               	subwf	___llmod@dividend,f,c
  2452  002B34  5013               	movf	___llmod@divisor+1,w,c
  2453  002B36  5A0F               	subwfb	___llmod@dividend+1,f,c
  2454  002B38  5014               	movf	___llmod@divisor+2,w,c
  2455  002B3A  5A10               	subwfb	___llmod@dividend+2,f,c
  2456  002B3C  5015               	movf	___llmod@divisor+3,w,c
  2457  002B3E  5A11               	subwfb	___llmod@dividend+3,f,c
  2458  002B40                     l2706:
  2459  002B40  90D8               	bcf	status,0,c
  2460  002B42  3215               	rrcf	___llmod@divisor+3,f,c
  2461  002B44  3214               	rrcf	___llmod@divisor+2,f,c
  2462  002B46  3213               	rrcf	___llmod@divisor+1,f,c
  2463  002B48  3212               	rrcf	___llmod@divisor,f,c
  2464  002B4A  2E16               	decfsz	___llmod@counter,f,c
  2465  002B4C  D7E7               	goto	l2702
  2466  002B4E                     l938:
  2467  002B4E  C00E  F00E         	movff	___llmod@dividend,?___llmod
  2468  002B52  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  2469  002B56  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  2470  002B5A  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  2471  002B5E  0012               	return		;funcret
  2472  002B60                     __end_of___llmod:
  2473                           	opt stack 0
  2474                           tblptru	equ	0xFF8
  2475                           tblptrh	equ	0xFF7
  2476                           tblptrl	equ	0xFF6
  2477                           tablat	equ	0xFF5
  2478                           prodh	equ	0xFF4
  2479                           prodl	equ	0xFF3
  2480                           postinc0	equ	0xFEE
  2481                           wreg	equ	0xFE8
  2482                           postdec1	equ	0xFE5
  2483                           fsr1h	equ	0xFE2
  2484                           fsr1l	equ	0xFE1
  2485                           indf2	equ	0xFDF
  2486                           postinc2	equ	0xFDE
  2487                           postdec2	equ	0xFDD
  2488                           fsr2h	equ	0xFDA
  2489                           fsr2l	equ	0xFD9
  2490                           status	equ	0xFD8
  2491                           
  2492 ;; *************** function _machineConfig *****************
  2493 ;; Defined at:
  2494 ;;		line 4 in file "../../src/PIC18F4620/machineConfig.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;		None
  2497 ;; Auto vars:     Size  Location     Type
  2498 ;;		None
  2499 ;; Return value:  Size  Location     Type
  2500 ;;                  1    wreg      void 
  2501 ;; Registers used:
  2502 ;;		wreg, status,2
  2503 ;; Tracked objects:
  2504 ;;		On entry : 0/0
  2505 ;;		On exit  : 0/0
  2506 ;;		Unchanged: 0/0
  2507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2512 ;;Total ram usage:        0 bytes
  2513 ;; Hardware stack levels used:    1
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_main
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           	psect	text4
  2522  002C08                     __ptext4:
  2523                           	opt stack 0
  2524  002C08                     _machineConfig:
  2525                           	opt stack 30
  2526                           
  2527                           ;machineConfig.c: 15: LATA = 0x00;
  2528                           
  2529                           ;incstack = 0
  2530  002C08  0E00               	movlw	0
  2531  002C0A  6E89               	movwf	3977,c	;volatile
  2532                           
  2533                           ;machineConfig.c: 16: LATB = 0x00;
  2534  002C0C  0E00               	movlw	0
  2535  002C0E  6E8A               	movwf	3978,c	;volatile
  2536                           
  2537                           ;machineConfig.c: 17: LATC = 0x00;
  2538  002C10  0E00               	movlw	0
  2539  002C12  6E8B               	movwf	3979,c	;volatile
  2540                           
  2541                           ;machineConfig.c: 18: LATD = 0x00;
  2542  002C14  0E00               	movlw	0
  2543  002C16  6E8C               	movwf	3980,c	;volatile
  2544                           
  2545                           ;machineConfig.c: 19: LATE = 0x00;
  2546  002C18  0E00               	movlw	0
  2547  002C1A  6E8D               	movwf	3981,c	;volatile
  2548                           
  2549                           ;machineConfig.c: 22: TRISA = 0b00000000;
  2550  002C1C  0E00               	movlw	0
  2551  002C1E  6E92               	movwf	3986,c	;volatile
  2552                           
  2553                           ;machineConfig.c: 23: TRISB = 0b11110010;
  2554  002C20  0EF2               	movlw	242
  2555  002C22  6E93               	movwf	3987,c	;volatile
  2556                           
  2557                           ;machineConfig.c: 24: TRISC = 0b10000000;
  2558  002C24  0E80               	movlw	128
  2559  002C26  6E94               	movwf	3988,c	;volatile
  2560                           
  2561                           ;machineConfig.c: 28: TRISD = 0b00000001;
  2562  002C28  0E01               	movlw	1
  2563  002C2A  6E95               	movwf	3989,c	;volatile
  2564                           
  2565                           ;machineConfig.c: 34: TRISE = 0b00000100;
  2566  002C2C  0E04               	movlw	4
  2567  002C2E  6E96               	movwf	3990,c	;volatile
  2568                           
  2569                           ;machineConfig.c: 40: nRBPU = 1;
  2570  002C30  8EF1               	bsf	intcon2,7,c	;volatile
  2571                           
  2572                           ;machineConfig.c: 43: ADCON0 = 0x00;
  2573  002C32  0E00               	movlw	0
  2574  002C34  6EC2               	movwf	4034,c	;volatile
  2575                           
  2576                           ;machineConfig.c: 44: ADCON1 = 0b00001111;
  2577  002C36  0E0F               	movlw	15
  2578  002C38  6EC1               	movwf	4033,c	;volatile
  2579                           
  2580                           ;machineConfig.c: 45: CVRCON = 0x00;
  2581  002C3A  0E00               	movlw	0
  2582  002C3C  6EB5               	movwf	4021,c	;volatile
  2583                           
  2584                           ;machineConfig.c: 46: CMCONbits.CIS = 0;
  2585  002C3E  96B4               	bcf	4020,3,c	;volatile
  2586                           
  2587                           ;machineConfig.c: 47: ADCON2 = 0b10110001;
  2588  002C40  0EB1               	movlw	177
  2589  002C42  6EC0               	movwf	4032,c	;volatile
  2590                           
  2591                           ;machineConfig.c: 50: INT1IE = 0;
  2592  002C44  96F0               	bcf	intcon3,3,c	;volatile
  2593                           
  2594                           ;machineConfig.c: 51: PEIE = 1;
  2595  002C46  8CF2               	bsf	intcon,6,c	;volatile
  2596                           
  2597                           ;machineConfig.c: 52: (INTCONbits.GIE = 0);
  2598  002C48  9EF2               	bcf	intcon,7,c	;volatile
  2599  002C4A  0012               	return		;funcret
  2600  002C4C                     __end_of_machineConfig:
  2601                           	opt stack 0
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           intcon	equ	0xFF2
  2609                           intcon2	equ	0xFF1
  2610                           intcon3	equ	0xFF0
  2611                           postinc0	equ	0xFEE
  2612                           wreg	equ	0xFE8
  2613                           postdec1	equ	0xFE5
  2614                           fsr1h	equ	0xFE2
  2615                           fsr1l	equ	0xFE1
  2616                           indf2	equ	0xFDF
  2617                           postinc2	equ	0xFDE
  2618                           postdec2	equ	0xFDD
  2619                           fsr2h	equ	0xFDA
  2620                           fsr2l	equ	0xFD9
  2621                           status	equ	0xFD8
  2622                           
  2623 ;; *************** function _lcd_set_cursor *****************
  2624 ;; Defined at:
  2625 ;;		line 80 in file "../../src/CharacterLCD/lcd.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;  x               1    wreg     unsigned char 
  2628 ;;  y               1    6[COMRAM] unsigned char 
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;  x               1    9[COMRAM] unsigned char 
  2631 ;;  i               1    8[COMRAM] unsigned char 
  2632 ;; Return value:  Size  Location     Type
  2633 ;;                  1    wreg      void 
  2634 ;; Registers used:
  2635 ;;		wreg, status,2, status,0, cstack
  2636 ;; Tracked objects:
  2637 ;;		On entry : 0/0
  2638 ;;		On exit  : 0/0
  2639 ;;		Unchanged: 0/0
  2640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2641 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2643 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2644 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;Total ram usage:        4 bytes
  2646 ;; Hardware stack levels used:    1
  2647 ;; Hardware stack levels required when called:    3
  2648 ;; This function calls:
  2649 ;;		_lcdInst
  2650 ;;		_lcd_shift_cursor
  2651 ;; This function is called by:
  2652 ;;		_main
  2653 ;; This function uses a non-reentrant model
  2654 ;;
  2655                           
  2656                           	psect	text5
  2657  002C4C                     __ptext5:
  2658                           	opt stack 0
  2659  002C4C                     _lcd_set_cursor:
  2660                           	opt stack 27
  2661                           
  2662                           ;incstack = 0
  2663                           ;lcd_set_cursor@x stored from wreg
  2664  002C4C  6E0A               	movwf	lcd_set_cursor@x,c
  2665                           
  2666                           ;lcd.c: 90: lcdInst(0x80);_delay((unsigned long)((5)*(40000000/4000.0)));;
  2667  002C4E  0E80               	movlw	128
  2668  002C50  EC0E  F017         	call	_lcdInst
  2669  002C54  0E41               	movlw	65
  2670  002C56  6E08               	movwf	??_lcd_set_cursor& (0+255),c
  2671  002C58  0EEE               	movlw	238
  2672  002C5A                     u3117:
  2673  002C5A  2EE8               	decfsz	wreg,f,c
  2674  002C5C  D7FE               	bra	u3117
  2675  002C5E  2E08               	decfsz	??_lcd_set_cursor& (0+255),f,c
  2676  002C60  D7FC               	bra	u3117
  2677  002C62  D000               	nop2	
  2678                           
  2679                           ;lcd.c: 91: for(unsigned char i = 0; i < y; i++){lcdInst(0xC0);;}
  2680  002C64  0E00               	movlw	0
  2681  002C66  6E09               	movwf	lcd_set_cursor@i,c
  2682  002C68  D004               	goto	l2750
  2683  002C6A                     l2746:
  2684  002C6A  0EC0               	movlw	192
  2685  002C6C  EC0E  F017         	call	_lcdInst
  2686  002C70  2A09               	incf	lcd_set_cursor@i,f,c
  2687  002C72                     l2750:
  2688  002C72  5007               	movf	lcd_set_cursor@y,w,c
  2689  002C74  5C09               	subwf	lcd_set_cursor@i,w,c
  2690  002C76  A0D8               	btfss	status,0,c
  2691  002C78  D7F8               	goto	l2746
  2692                           
  2693                           ;lcd.c: 92: if(x > 0){
  2694  002C7A  500A               	movf	lcd_set_cursor@x,w,c
  2695  002C7C  B4D8               	btfsc	status,2,c
  2696  002C7E  0012               	return	
  2697                           
  2698                           ;lcd.c: 93: lcd_shift_cursor(x, 1);
  2699  002C80  0E01               	movlw	1
  2700  002C82  6E04               	movwf	lcd_shift_cursor@direction,c
  2701  002C84  500A               	movf	lcd_set_cursor@x,w,c
  2702  002C86  ECEA  F016         	call	_lcd_shift_cursor
  2703  002C8A  0012               	return	
  2704  002C8C                     __end_of_lcd_set_cursor:
  2705                           	opt stack 0
  2706                           tblptru	equ	0xFF8
  2707                           tblptrh	equ	0xFF7
  2708                           tblptrl	equ	0xFF6
  2709                           tablat	equ	0xFF5
  2710                           prodh	equ	0xFF4
  2711                           prodl	equ	0xFF3
  2712                           intcon	equ	0xFF2
  2713                           intcon2	equ	0xFF1
  2714                           intcon3	equ	0xFF0
  2715                           postinc0	equ	0xFEE
  2716                           wreg	equ	0xFE8
  2717                           postdec1	equ	0xFE5
  2718                           fsr1h	equ	0xFE2
  2719                           fsr1l	equ	0xFE1
  2720                           indf2	equ	0xFDF
  2721                           postinc2	equ	0xFDE
  2722                           postdec2	equ	0xFDD
  2723                           fsr2h	equ	0xFDA
  2724                           fsr2l	equ	0xFD9
  2725                           status	equ	0xFD8
  2726                           
  2727 ;; *************** function _lcd_shift_cursor *****************
  2728 ;; Defined at:
  2729 ;;		line 97 in file "../../src/CharacterLCD/lcd.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;  numChars        1    wreg     unsigned char 
  2732 ;;  direction       1    3[COMRAM] unsigned char 
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  numChars        1    4[COMRAM] unsigned char 
  2735 ;;  n               1    5[COMRAM] unsigned char 
  2736 ;; Return value:  Size  Location     Type
  2737 ;;                  1    wreg      void 
  2738 ;; Registers used:
  2739 ;;		wreg, status,2, status,0, cstack
  2740 ;; Tracked objects:
  2741 ;;		On entry : 0/0
  2742 ;;		On exit  : 0/0
  2743 ;;		Unchanged: 0/0
  2744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2745 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2746 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2749 ;;Total ram usage:        3 bytes
  2750 ;; Hardware stack levels used:    1
  2751 ;; Hardware stack levels required when called:    2
  2752 ;; This function calls:
  2753 ;;		_lcdInst
  2754 ;; This function is called by:
  2755 ;;		_lcd_set_cursor
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text6
  2760  002DD4                     __ptext6:
  2761                           	opt stack 0
  2762  002DD4                     _lcd_shift_cursor:
  2763                           	opt stack 27
  2764                           
  2765                           ;incstack = 0
  2766                           ;lcd_shift_cursor@numChars stored from wreg
  2767  002DD4  6E05               	movwf	lcd_shift_cursor@numChars,c
  2768                           
  2769                           ;lcd.c: 109: for(unsigned char n = numChars; n > 0; n--){
  2770  002DD6  C005  F006         	movff	lcd_shift_cursor@numChars,lcd_shift_cursor@n
  2771  002DDA                     l2496:
  2772  002DDA  5006               	movf	lcd_shift_cursor@n,w,c
  2773  002DDC  B4D8               	btfsc	status,2,c
  2774  002DDE  0012               	return	
  2775                           
  2776                           ;lcd.c: 110: lcdInst((unsigned char)(0x10 | (direction << 2)));
  2777  002DE0  4404               	rlncf	lcd_shift_cursor@direction,w,c
  2778  002DE2  46E8               	rlncf	wreg,f,c
  2779  002DE4  0BFC               	andlw	252
  2780  002DE6  0910               	iorlw	16
  2781  002DE8  EC0E  F017         	call	_lcdInst
  2782  002DEC  0606               	decf	lcd_shift_cursor@n,f,c
  2783  002DEE  D7F5               	goto	l2496
  2784  002DF0                     __end_of_lcd_shift_cursor:
  2785                           	opt stack 0
  2786                           tblptru	equ	0xFF8
  2787                           tblptrh	equ	0xFF7
  2788                           tblptrl	equ	0xFF6
  2789                           tablat	equ	0xFF5
  2790                           prodh	equ	0xFF4
  2791                           prodl	equ	0xFF3
  2792                           intcon	equ	0xFF2
  2793                           intcon2	equ	0xFF1
  2794                           intcon3	equ	0xFF0
  2795                           postinc0	equ	0xFEE
  2796                           wreg	equ	0xFE8
  2797                           postdec1	equ	0xFE5
  2798                           fsr1h	equ	0xFE2
  2799                           fsr1l	equ	0xFE1
  2800                           indf2	equ	0xFDF
  2801                           postinc2	equ	0xFDE
  2802                           postdec2	equ	0xFDD
  2803                           fsr2h	equ	0xFDA
  2804                           fsr2l	equ	0xFD9
  2805                           status	equ	0xFD8
  2806                           
  2807 ;; *************** function _initSD *****************
  2808 ;; Defined at:
  2809 ;;		line 458 in file "../../src/SD/SD_PIC.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  tempSize        4   80[COMRAM] unsigned long 
  2814 ;;  tempSize        4   60[COMRAM] unsigned long 
  2815 ;;  arr_response   16   64[COMRAM] unsigned char [16]
  2816 ;;  argument        4   54[COMRAM] unsigned long 
  2817 ;;  i               1   85[COMRAM] unsigned char 
  2818 ;;  response        1   84[COMRAM] unsigned char 
  2819 ;;  last_OSCTUNE    1   59[COMRAM] unsigned char 
  2820 ;;  last_OSCCON     1   58[COMRAM] unsigned char 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2831 ;;      Locals:        32       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2832 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2833 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;Total ram usage:       39 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    4
  2837 ;; This function calls:
  2838 ;;		_SD_ACMD
  2839 ;;		_SD_Command
  2840 ;;		___ftdiv
  2841 ;;		___ftmul
  2842 ;;		___fttol
  2843 ;;		___lltoft
  2844 ;;		___lwtoft
  2845 ;;		_spiInit
  2846 ;;		_spiReceive
  2847 ;;		_spiSend
  2848 ;; This function is called by:
  2849 ;;		_main
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853                           	psect	text7
  2854  0010F2                     __ptext7:
  2855                           	opt stack 0
  2856  0010F2                     _initSD:
  2857                           	opt stack 26
  2858                           
  2859                           ;SD_PIC.c: 467: unsigned char last_OSCCON = OSCCON;
  2860                           
  2861                           ;incstack = 0
  2862  0010F2  CFD3 F03B          	movff	4051,initSD@last_OSCCON	;volatile
  2863                           
  2864                           ;SD_PIC.c: 468: unsigned char last_OSCTUNE = OSCTUNE;
  2865  0010F6  CF9B F03C          	movff	3995,initSD@last_OSCTUNE	;volatile
  2866                           
  2867                           ;SD_PIC.c: 469: unsigned char response;
  2868                           ;SD_PIC.c: 470: unsigned char i;
  2869                           ;SD_PIC.c: 471: unsigned char arr_response[16] = {0};
  2870  0010FA  EE20  F06E         	lfsr	2,initSD@F3023
  2871  0010FE  EE10  F041         	lfsr	1,initSD@arr_response
  2872  001102  0E0F               	movlw	15
  2873  001104                     u2301:
  2874  001104  CFDB FFE3          	movff	plusw2,plusw1
  2875  001108  06E8               	decf	wreg,f,c
  2876  00110A  E2FC               	bc	u2301
  2877                           
  2878                           ;SD_PIC.c: 478: OSCTUNEbits.TUN = 0b000000;
  2879  00110C  909B               	bcf	3995,0,c	;volatile
  2880  00110E  929B               	bcf	3995,1,c	;volatile
  2881  001110  949B               	bcf	3995,2,c	;volatile
  2882  001112  969B               	bcf	3995,3,c	;volatile
  2883  001114  989B               	bcf	3995,4,c	;volatile
  2884                           
  2885                           ;SD_PIC.c: 479: OSCCONbits.IRCF = 0b110;
  2886  001116  50D3               	movf	4051,w,c	;volatile
  2887  001118  0B8F               	andlw	-113
  2888  00111A  0960               	iorlw	96
  2889  00111C  6ED3               	movwf	4051,c	;volatile
  2890                           
  2891                           ;SD_PIC.c: 480: OSCCONbits.SCS = 0b11;
  2892  00111E  0E03               	movlw	3
  2893  001120  12D3               	iorwf	4051,f,c	;volatile
  2894                           
  2895                           ;SD_PIC.c: 481: OSCTUNEbits.PLLEN = 1;
  2896  001122  8C9B               	bsf	3995,6,c	;volatile
  2897                           
  2898                           ;SD_PIC.c: 484: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  2899  001124  D004               	goto	l2986
  2900  001126                     l2984:
  2901  001126  0E42               	movlw	66
  2902  001128                     u3127:
  2903  001128  2EE8               	decfsz	wreg,f,c
  2904  00112A  D7FE               	bra	u3127
  2905  00112C  D000               	nop2	
  2906  00112E                     l2986:
  2907  00112E  A4D3               	btfss	4051,2,c	;volatile
  2908  001130  D7FA               	goto	l2984
  2909                           
  2910                           ;SD_PIC.c: 487: spiInit(64);
  2911  001132  0E40               	movlw	64
  2912  001134  EC63  F016         	call	_spiInit
  2913                           
  2914                           ;SD_PIC.c: 491: _delay((unsigned long)((20)*(40000000/4000.0)));
  2915  001138  0E02               	movlw	2
  2916  00113A  6E31               	movwf	(??_initSD+1)& (0+255),c
  2917  00113C  0E04               	movlw	4
  2918  00113E  6E30               	movwf	??_initSD& (0+255),c
  2919  001140  0EBA               	movlw	186
  2920  001142                     u3137:
  2921  001142  2EE8               	decfsz	wreg,f,c
  2922  001144  D7FE               	bra	u3137
  2923  001146  2E30               	decfsz	??_initSD& (0+255),f,c
  2924  001148  D7FC               	bra	u3137
  2925  00114A  2E31               	decfsz	(??_initSD+1)& (0+255),f,c
  2926  00114C  D7FA               	bra	u3137
  2927  00114E  D000               	nop2	
  2928                           
  2929                           ;SD_PIC.c: 494: LATEbits.LATE2 = 1;
  2930  001150  848D               	bsf	3981,2,c	;volatile
  2931                           
  2932                           ;SD_PIC.c: 495: TRISEbits.TRISE2 = 0;
  2933  001152  9496               	bcf	3990,2,c	;volatile
  2934                           
  2935                           ;SD_PIC.c: 498: for(i = 0; i < 10; i++){
  2936  001154  0E00               	movlw	0
  2937  001156  6E56               	movwf	initSD@i,c
  2938  001158                     l2998:
  2939  001158  0E09               	movlw	9
  2940  00115A  6456               	cpfsgt	initSD@i,c
  2941  00115C  D001               	goto	l3002
  2942  00115E  D005               	goto	l262
  2943  001160                     l3002:
  2944                           
  2945                           ;SD_PIC.c: 499: spiSend(0xFF);
  2946  001160  0EFF               	movlw	255
  2947  001162  EC18  F017         	call	_spiSend
  2948  001166  2A56               	incf	initSD@i,f,c
  2949  001168  D7F7               	goto	l2998
  2950  00116A                     l262:
  2951                           
  2952                           ;SD_PIC.c: 500: }
  2953                           ;SD_PIC.c: 502: LATEbits.LATE2 = 0;
  2954  00116A  948D               	bcf	3981,2,c	;volatile
  2955  00116C                     l3008:
  2956  00116C  0E00               	movlw	0
  2957  00116E  6E04               	movwf	SD_Command@arg,c
  2958  001170  0E00               	movlw	0
  2959  001172  6E05               	movwf	SD_Command@arg+1,c
  2960  001174  0E00               	movlw	0
  2961  001176  6E06               	movwf	SD_Command@arg+2,c
  2962  001178  0E00               	movlw	0
  2963  00117A  6E07               	movwf	SD_Command@arg+3,c
  2964  00117C  0E44               	movlw	low _CMD0
  2965  00117E  6EF6               	movwf	tblptrl,c
  2966  001180                     	if	1	;There is more than 1 active tblptr byte
  2967  001180  0E10               	movlw	high _CMD0
  2968  001182  6EF7               	movwf	tblptrh,c
  2969  001184                     	endif
  2970  001184                     	if	0	;There are less than 3 active tblptr bytes
  2971  001184                     	endif
  2972  001184  0008               	tblrd		*
  2973  001186  50F5               	movf	tablat,w,c
  2974  001188  EC81  F013         	call	_SD_Command
  2975  00118C  6E30               	movwf	??_initSD& (0+255),c
  2976  00118E  0E2D               	movlw	low _R1_IDLE_STATE
  2977  001190  6EF6               	movwf	tblptrl,c
  2978  001192                     	if	1	;There is more than 1 active tblptr byte
  2979  001192  0E10               	movlw	high _R1_IDLE_STATE
  2980  001194  6EF7               	movwf	tblptrh,c
  2981  001196                     	endif
  2982  001196                     	if	0	;There are less than 3 active tblptr bytes
  2983  001196                     	endif
  2984  001196  0008               	tblrd		*
  2985  001198  50F5               	movf	tablat,w,c
  2986  00119A  1830               	xorwf	??_initSD,w,c
  2987  00119C  A4D8               	btfss	status,2,c
  2988  00119E  D7E6               	goto	l3008
  2989  0011A0                     l3010:
  2990                           
  2991                           ;SD_PIC.c: 516: response = SD_Command(CMD8, 0x01AA);
  2992  0011A0  0EAA               	movlw	170
  2993  0011A2  6E04               	movwf	SD_Command@arg,c
  2994  0011A4  0E01               	movlw	1
  2995  0011A6  6E05               	movwf	SD_Command@arg+1,c
  2996  0011A8  0E00               	movlw	0
  2997  0011AA  6E06               	movwf	SD_Command@arg+2,c
  2998  0011AC  0E00               	movlw	0
  2999  0011AE  6E07               	movwf	SD_Command@arg+3,c
  3000  0011B0  0E41               	movlw	low _CMD8
  3001  0011B2  6EF6               	movwf	tblptrl,c
  3002  0011B4                     	if	1	;There is more than 1 active tblptr byte
  3003  0011B4  0E10               	movlw	high _CMD8
  3004  0011B6  6EF7               	movwf	tblptrh,c
  3005  0011B8                     	endif
  3006  0011B8                     	if	0	;There are less than 3 active tblptr bytes
  3007  0011B8                     	endif
  3008  0011B8  0008               	tblrd		*
  3009  0011BA  50F5               	movf	tablat,w,c
  3010  0011BC  EC81  F013         	call	_SD_Command
  3011  0011C0  6E55               	movwf	initSD@response,c
  3012                           
  3013                           ;SD_PIC.c: 519: LATEbits.LATE2 = 0;
  3014  0011C2  948D               	bcf	3981,2,c	;volatile
  3015                           
  3016                           ;SD_PIC.c: 520: for(i = 0; i < 4; i++){ arr_response[i] = spiReceive(); }
  3017  0011C4  0E00               	movlw	0
  3018  0011C6  6E56               	movwf	initSD@i,c
  3019  0011C8                     l3016:
  3020  0011C8  0E03               	movlw	3
  3021  0011CA  6456               	cpfsgt	initSD@i,c
  3022  0011CC  D001               	goto	l3020
  3023  0011CE  D00D               	goto	l268
  3024  0011D0                     l3020:
  3025  0011D0  5056               	movf	initSD@i,w,c
  3026  0011D2  0D01               	mullw	1
  3027  0011D4  0E41               	movlw	low initSD@arr_response
  3028  0011D6  24F3               	addwf	prodl,w,c
  3029  0011D8  6ED9               	movwf	fsr2l,c
  3030  0011DA  0E00               	movlw	high initSD@arr_response
  3031  0011DC  20F4               	addwfc	prodh,w,c
  3032  0011DE  6EDA               	movwf	fsr2h,c
  3033  0011E0  EC1D  F017         	call	_spiReceive	;wreg free
  3034  0011E4  6EDF               	movwf	indf2,c
  3035  0011E6  2A56               	incf	initSD@i,f,c
  3036  0011E8  D7EF               	goto	l3016
  3037  0011EA                     l268:
  3038                           
  3039                           ;SD_PIC.c: 521: LATEbits.LATE2 = 1;
  3040  0011EA  848D               	bsf	3981,2,c	;volatile
  3041                           
  3042                           ;SD_PIC.c: 523: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  3043  0011EC  0E2C               	movlw	low _R1_ILLEGAL_COMMAND
  3044  0011EE  6EF6               	movwf	tblptrl,c
  3045  0011F0                     	if	1	;There is more than 1 active tblptr byte
  3046  0011F0  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3047  0011F2  6EF7               	movwf	tblptrh,c
  3048  0011F4                     	endif
  3049  0011F4                     	if	0	;There are less than 3 active tblptr bytes
  3050  0011F4                     	endif
  3051  0011F4  0008               	tblrd		*
  3052  0011F6  CFF5 F030          	movff	tablat,??_initSD
  3053  0011FA  5055               	movf	initSD@response,w,c
  3054  0011FC  1430               	andwf	??_initSD,w,c
  3055  0011FE  6E31               	movwf	(??_initSD+1)& (0+255),c
  3056  001200  0E2C               	movlw	low _R1_ILLEGAL_COMMAND
  3057  001202  6EF6               	movwf	tblptrl,c
  3058  001204                     	if	1	;There is more than 1 active tblptr byte
  3059  001204  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3060  001206  6EF7               	movwf	tblptrh,c
  3061  001208                     	endif
  3062  001208                     	if	0	;There are less than 3 active tblptr bytes
  3063  001208                     	endif
  3064  001208  0008               	tblrd		*
  3065  00120A  50F5               	movf	tablat,w,c
  3066  00120C  1831               	xorwf	??_initSD+1,w,c
  3067  00120E  A4D8               	btfss	status,2,c
  3068  001210  D02C               	goto	l3052
  3069                           
  3070                           ;SD_PIC.c: 526: SDCard.SDversion = 1;
  3071  001212  0E01               	movlw	1
  3072  001214  0100               	movlb	0	; () banked
  3073  001216  6F80               	movwf	_SDCard& (0+255),b
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;SD_PIC.c: 529: SD_Command(CMD58, 0);
  3077  001218  0E00               	movlw	0
  3078  00121A  6E04               	movwf	SD_Command@arg,c
  3079  00121C  0E00               	movlw	0
  3080  00121E  6E05               	movwf	SD_Command@arg+1,c
  3081  001220  0E00               	movlw	0
  3082  001222  6E06               	movwf	SD_Command@arg+2,c
  3083  001224  0E00               	movlw	0
  3084  001226  6E07               	movwf	SD_Command@arg+3,c
  3085  001228  0E32               	movlw	low _CMD58
  3086  00122A  6EF6               	movwf	tblptrl,c
  3087  00122C                     	if	1	;There is more than 1 active tblptr byte
  3088  00122C  0E10               	movlw	high _CMD58
  3089  00122E  6EF7               	movwf	tblptrh,c
  3090  001230                     	endif
  3091  001230                     	if	0	;There are less than 3 active tblptr bytes
  3092  001230                     	endif
  3093  001230  0008               	tblrd		*
  3094  001232  50F5               	movf	tablat,w,c
  3095  001234  EC81  F013         	call	_SD_Command
  3096                           
  3097                           ;SD_PIC.c: 530: LATEbits.LATE2 = 0;
  3098  001238  948D               	bcf	3981,2,c	;volatile
  3099                           
  3100                           ;SD_PIC.c: 531: for(i = 0; i < 4; i++){ arr_response[i] = spiReceive(); }
  3101  00123A  0E00               	movlw	0
  3102  00123C  6E56               	movwf	initSD@i,c
  3103  00123E                     l3036:
  3104  00123E  0E03               	movlw	3
  3105  001240  6456               	cpfsgt	initSD@i,c
  3106  001242  D001               	goto	l3040
  3107  001244  D00D               	goto	l271
  3108  001246                     l3040:
  3109  001246  5056               	movf	initSD@i,w,c
  3110  001248  0D01               	mullw	1
  3111  00124A  0E41               	movlw	low initSD@arr_response
  3112  00124C  24F3               	addwf	prodl,w,c
  3113  00124E  6ED9               	movwf	fsr2l,c
  3114  001250  0E00               	movlw	high initSD@arr_response
  3115  001252  20F4               	addwfc	prodh,w,c
  3116  001254  6EDA               	movwf	fsr2h,c
  3117  001256  EC1D  F017         	call	_spiReceive	;wreg free
  3118  00125A  6EDF               	movwf	indf2,c
  3119  00125C  2A56               	incf	initSD@i,f,c
  3120  00125E  D7EF               	goto	l3036
  3121  001260                     l271:
  3122                           
  3123                           ;SD_PIC.c: 532: LATEbits.LATE2 = 1;
  3124  001260  848D               	bsf	3981,2,c	;volatile
  3125                           
  3126                           ;SD_PIC.c: 534: if(arr_response[2] != 0x01){
  3127  001262  0443               	decf	initSD@arr_response+2,w,c
  3128  001264  A4D8               	btfss	status,2,c
  3129  001266  0012               	return	
  3130  001268  D012               	goto	l3062
  3131  00126A                     l3052:
  3132                           
  3133                           ;SD_PIC.c: 540: else if(response == R1_IDLE_STATE){
  3134  00126A  0E2D               	movlw	low _R1_IDLE_STATE
  3135  00126C  6EF6               	movwf	tblptrl,c
  3136  00126E                     	if	1	;There is more than 1 active tblptr byte
  3137  00126E  0E10               	movlw	high _R1_IDLE_STATE
  3138  001270  6EF7               	movwf	tblptrh,c
  3139  001272                     	endif
  3140  001272                     	if	0	;There are less than 3 active tblptr bytes
  3141  001272                     	endif
  3142  001272  0008               	tblrd		*
  3143  001274  50F5               	movf	tablat,w,c
  3144  001276  6255               	cpfseq	initSD@response,c
  3145  001278  D793               	goto	l3010
  3146                           
  3147                           ;SD_PIC.c: 541: if((arr_response[2] == 0x01) && (arr_response[3] == 0xAA)){
  3148  00127A  0443               	decf	initSD@arr_response+2,w,c
  3149  00127C  A4D8               	btfss	status,2,c
  3150  00127E  0012               	return	
  3151  001280  0EAA               	movlw	170
  3152  001282  1844               	xorwf	initSD@arr_response+3,w,c
  3153  001284  A4D8               	btfss	status,2,c
  3154  001286  0012               	return	
  3155                           
  3156                           ;SD_PIC.c: 544: SDCard.SDversion = 2;
  3157  001288  0E02               	movlw	2
  3158  00128A  0100               	movlb	0	; () banked
  3159  00128C  6F80               	movwf	_SDCard& (0+255),b
  3160  00128E                     l3062:
  3161                           
  3162                           ;SD_PIC.c: 550: }
  3163                           ;SD_PIC.c: 551: }
  3164                           ;SD_PIC.c: 552: }
  3165                           ;SD_PIC.c: 561: unsigned long argument = (SDCard.SDversion == 1) ? 0 : 0x40000000;
  3166  00128E  0100               	movlb	0	; () banked
  3167  001290  0580               	decf	_SDCard& (0+255),w,b
  3168  001292  B4D8               	btfsc	status,2,c
  3169  001294  D008               	goto	l3066
  3170                           
  3171                           ; BSR set to: 0
  3172  001296  0E00               	movlw	0
  3173  001298  6E37               	movwf	initSD@argument,c
  3174  00129A  0E00               	movlw	0
  3175  00129C  6E38               	movwf	initSD@argument+1,c
  3176  00129E  0E00               	movlw	0
  3177  0012A0  6E39               	movwf	initSD@argument+2,c
  3178  0012A2  0E40               	movlw	64
  3179  0012A4  D007               	goto	L3
  3180  0012A6                     l3066:
  3181                           
  3182                           ; BSR set to: 0
  3183  0012A6  0E00               	movlw	0
  3184  0012A8  6E37               	movwf	initSD@argument,c
  3185  0012AA  0E00               	movlw	0
  3186  0012AC  6E38               	movwf	initSD@argument+1,c
  3187  0012AE  0E00               	movlw	0
  3188  0012B0  6E39               	movwf	initSD@argument+2,c
  3189  0012B2  0E00               	movlw	0
  3190  0012B4                     L3:
  3191  0012B4  6E3A               	movwf	initSD@argument+3,c
  3192  0012B6                     l3068:
  3193                           
  3194                           ;SD_PIC.c: 564: response = SD_ACMD(ACMD41, argument);
  3195  0012B6  C037  F00D         	movff	initSD@argument,SD_ACMD@arg
  3196  0012BA  C038  F00E         	movff	initSD@argument+1,SD_ACMD@arg+1
  3197  0012BE  C039  F00F         	movff	initSD@argument+2,SD_ACMD@arg+2
  3198  0012C2  C03A  F010         	movff	initSD@argument+3,SD_ACMD@arg+3
  3199  0012C6  0E2F               	movlw	low _ACMD41
  3200  0012C8  6EF6               	movwf	tblptrl,c
  3201  0012CA                     	if	1	;There is more than 1 active tblptr byte
  3202  0012CA  0E10               	movlw	high _ACMD41
  3203  0012CC  6EF7               	movwf	tblptrh,c
  3204  0012CE                     	endif
  3205  0012CE                     	if	0	;There are less than 3 active tblptr bytes
  3206  0012CE                     	endif
  3207  0012CE  0008               	tblrd		*
  3208  0012D0  50F5               	movf	tablat,w,c
  3209  0012D2  EC46  F016         	call	_SD_ACMD
  3210  0012D6  6E55               	movwf	initSD@response,c
  3211                           
  3212                           ;SD_PIC.c: 565: }while((response != R1_READY_STATE) && ((response & R1_ILLEGAL_COMMAND) 
      +                          != R1_ILLEGAL_COMMAND));
  3213  0012D8  0E2E               	movlw	low _R1_READY_STATE
  3214  0012DA  6EF6               	movwf	tblptrl,c
  3215  0012DC                     	if	1	;There is more than 1 active tblptr byte
  3216  0012DC  0E10               	movlw	high _R1_READY_STATE
  3217  0012DE  6EF7               	movwf	tblptrh,c
  3218  0012E0                     	endif
  3219  0012E0                     	if	0	;There are less than 3 active tblptr bytes
  3220  0012E0                     	endif
  3221  0012E0  0008               	tblrd		*
  3222  0012E2  50F5               	movf	tablat,w,c
  3223  0012E4  1855               	xorwf	initSD@response,w,c
  3224  0012E6  B4D8               	btfsc	status,2,c
  3225  0012E8  D013               	goto	l3074
  3226  0012EA  0E2C               	movlw	low _R1_ILLEGAL_COMMAND
  3227  0012EC  6EF6               	movwf	tblptrl,c
  3228  0012EE                     	if	1	;There is more than 1 active tblptr byte
  3229  0012EE  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3230  0012F0  6EF7               	movwf	tblptrh,c
  3231  0012F2                     	endif
  3232  0012F2                     	if	0	;There are less than 3 active tblptr bytes
  3233  0012F2                     	endif
  3234  0012F2  0008               	tblrd		*
  3235  0012F4  CFF5 F030          	movff	tablat,??_initSD
  3236  0012F8  5055               	movf	initSD@response,w,c
  3237  0012FA  1430               	andwf	??_initSD,w,c
  3238  0012FC  6E31               	movwf	(??_initSD+1)& (0+255),c
  3239  0012FE  0E2C               	movlw	low _R1_ILLEGAL_COMMAND
  3240  001300  6EF6               	movwf	tblptrl,c
  3241  001302                     	if	1	;There is more than 1 active tblptr byte
  3242  001302  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3243  001304  6EF7               	movwf	tblptrh,c
  3244  001306                     	endif
  3245  001306                     	if	0	;There are less than 3 active tblptr bytes
  3246  001306                     	endif
  3247  001306  0008               	tblrd		*
  3248  001308  50F5               	movf	tablat,w,c
  3249  00130A  1831               	xorwf	??_initSD+1,w,c
  3250  00130C  A4D8               	btfss	status,2,c
  3251  00130E  D7D3               	goto	l3068
  3252  001310                     l3074:
  3253                           
  3254                           ;SD_PIC.c: 570: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  3255  001310  0E2C               	movlw	low _R1_ILLEGAL_COMMAND
  3256  001312  6EF6               	movwf	tblptrl,c
  3257  001314                     	if	1	;There is more than 1 active tblptr byte
  3258  001314  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3259  001316  6EF7               	movwf	tblptrh,c
  3260  001318                     	endif
  3261  001318                     	if	0	;There are less than 3 active tblptr bytes
  3262  001318                     	endif
  3263  001318  0008               	tblrd		*
  3264  00131A  CFF5 F030          	movff	tablat,??_initSD
  3265  00131E  5055               	movf	initSD@response,w,c
  3266  001320  1430               	andwf	??_initSD,w,c
  3267  001322  6E31               	movwf	(??_initSD+1)& (0+255),c
  3268  001324  0E2C               	movlw	low _R1_ILLEGAL_COMMAND
  3269  001326  6EF6               	movwf	tblptrl,c
  3270  001328                     	if	1	;There is more than 1 active tblptr byte
  3271  001328  0E10               	movlw	high _R1_ILLEGAL_COMMAND
  3272  00132A  6EF7               	movwf	tblptrh,c
  3273  00132C                     	endif
  3274  00132C                     	if	0	;There are less than 3 active tblptr bytes
  3275  00132C                     	endif
  3276  00132C  0008               	tblrd		*
  3277  00132E  50F5               	movf	tablat,w,c
  3278  001330  1831               	xorwf	??_initSD+1,w,c
  3279  001332  A4D8               	btfss	status,2,c
  3280  001334  D01C               	goto	l3086
  3281                           
  3282                           ;SD_PIC.c: 571: if(SDCard.SDversion == 1){
  3283  001336  0100               	movlb	0	; () banked
  3284  001338  0580               	decf	_SDCard& (0+255),w,b
  3285  00133A  A4D8               	btfss	status,2,c
  3286  00133C  D014               	goto	l3082
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;SD_PIC.c: 573: SDCard.Type = 2;
  3290  00133E  0E02               	movlw	2
  3291  001340  0100               	movlb	0	; () banked
  3292  001342  6F81               	movwf	(_SDCard+1)& (0+255),b
  3293                           
  3294                           ; BSR set to: 0
  3295                           ;SD_PIC.c: 574: SD_Command(CMD1, 0);
  3296  001344  0E00               	movlw	0
  3297  001346  6E04               	movwf	SD_Command@arg,c
  3298  001348  0E00               	movlw	0
  3299  00134A  6E05               	movwf	SD_Command@arg+1,c
  3300  00134C  0E00               	movlw	0
  3301  00134E  6E06               	movwf	SD_Command@arg+2,c
  3302  001350  0E00               	movlw	0
  3303  001352  6E07               	movwf	SD_Command@arg+3,c
  3304  001354  0E42               	movlw	low _CMD1
  3305  001356  6EF6               	movwf	tblptrl,c
  3306  001358                     	if	1	;There is more than 1 active tblptr byte
  3307  001358  0E10               	movlw	high _CMD1
  3308  00135A  6EF7               	movwf	tblptrh,c
  3309  00135C                     	endif
  3310  00135C                     	if	0	;There are less than 3 active tblptr bytes
  3311  00135C                     	endif
  3312  00135C  0008               	tblrd		*
  3313  00135E  50F5               	movf	tablat,w,c
  3314  001360  EC81  F013         	call	_SD_Command
  3315                           
  3316                           ;SD_PIC.c: 575: }
  3317  001364  D004               	goto	l3086
  3318  001366                     l3082:
  3319                           
  3320                           ;SD_PIC.c: 576: else{
  3321                           ;SD_PIC.c: 578: SDCard.init = 0;
  3322  001366  0E00               	movlw	0
  3323  001368  0100               	movlb	0	; () banked
  3324  00136A  6F9B               	movwf	(_SDCard+27)& (0+255),b
  3325                           
  3326                           ; BSR set to: 0
  3327                           ;SD_PIC.c: 579: return;
  3328  00136C  0012               	return	
  3329  00136E                     l3086:
  3330                           
  3331                           ;SD_PIC.c: 580: }
  3332                           ;SD_PIC.c: 581: }
  3333                           ;SD_PIC.c: 583: if(SDCard.Type != 2){
  3334  00136E  0E02               	movlw	2
  3335  001370  0100               	movlb	0	; () banked
  3336  001372  1981               	xorwf	(_SDCard+1)& (0+255),w,b
  3337  001374  B4D8               	btfsc	status,2,c
  3338  001376  D027               	goto	l3106
  3339                           
  3340                           ; BSR set to: 0
  3341                           ;SD_PIC.c: 586: SD_Command(CMD58, 0);
  3342  001378  0E00               	movlw	0
  3343  00137A  6E04               	movwf	SD_Command@arg,c
  3344  00137C  0E00               	movlw	0
  3345  00137E  6E05               	movwf	SD_Command@arg+1,c
  3346  001380  0E00               	movlw	0
  3347  001382  6E06               	movwf	SD_Command@arg+2,c
  3348  001384  0E00               	movlw	0
  3349  001386  6E07               	movwf	SD_Command@arg+3,c
  3350  001388  0E32               	movlw	low _CMD58
  3351  00138A  6EF6               	movwf	tblptrl,c
  3352  00138C                     	if	1	;There is more than 1 active tblptr byte
  3353  00138C  0E10               	movlw	high _CMD58
  3354  00138E  6EF7               	movwf	tblptrh,c
  3355  001390                     	endif
  3356  001390                     	if	0	;There are less than 3 active tblptr bytes
  3357  001390                     	endif
  3358  001390  0008               	tblrd		*
  3359  001392  50F5               	movf	tablat,w,c
  3360  001394  EC81  F013         	call	_SD_Command
  3361                           
  3362                           ;SD_PIC.c: 589: LATEbits.LATE2 = 0;
  3363  001398  948D               	bcf	3981,2,c	;volatile
  3364                           
  3365                           ;SD_PIC.c: 590: SDCard.Type = (unsigned char)((spiReceive() & 0xC0) == 0xC0);
  3366  00139A  EC1D  F017         	call	_spiReceive	;wreg free
  3367  00139E  0BC0               	andlw	192
  3368  0013A0  0AC0               	xorlw	192
  3369  0013A2  A4D8               	btfss	status,2,c
  3370  0013A4  D002               	goto	u2500
  3371  0013A6  0E01               	movlw	1
  3372  0013A8  D001               	goto	u2510
  3373  0013AA                     u2500:
  3374  0013AA  0E00               	movlw	0
  3375  0013AC                     u2510:
  3376  0013AC  0100               	movlb	0	; () banked
  3377  0013AE  6F81               	movwf	(_SDCard+1)& (0+255),b
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;SD_PIC.c: 594: for(i = 0; i < 3; i++){ spiReceive(); }
  3381  0013B0  0E00               	movlw	0
  3382  0013B2  6E56               	movwf	initSD@i,c
  3383  0013B4                     l3096:
  3384                           
  3385                           ; BSR set to: 0
  3386  0013B4  0E02               	movlw	2
  3387  0013B6  6456               	cpfsgt	initSD@i,c
  3388  0013B8  D001               	goto	l3100
  3389  0013BA  D004               	goto	l293
  3390  0013BC                     l3100:
  3391  0013BC  EC1D  F017         	call	_spiReceive	;wreg free
  3392  0013C0  2A56               	incf	initSD@i,f,c
  3393  0013C2  D7F8               	goto	l3096
  3394  0013C4                     l293:
  3395                           
  3396                           ;SD_PIC.c: 595: LATEbits.LATE2 = 1;
  3397  0013C4  848D               	bsf	3981,2,c	;volatile
  3398  0013C6                     l3106:
  3399  0013C6  0E00               	movlw	0
  3400  0013C8  6E04               	movwf	SD_Command@arg,c
  3401  0013CA  0E02               	movlw	2
  3402  0013CC  6E05               	movwf	SD_Command@arg+1,c
  3403  0013CE  0E00               	movlw	0
  3404  0013D0  6E06               	movwf	SD_Command@arg+2,c
  3405  0013D2  0E00               	movlw	0
  3406  0013D4  6E07               	movwf	SD_Command@arg+3,c
  3407  0013D6  0E3B               	movlw	low _CMD16
  3408  0013D8  6EF6               	movwf	tblptrl,c
  3409  0013DA                     	if	1	;There is more than 1 active tblptr byte
  3410  0013DA  0E10               	movlw	high _CMD16
  3411  0013DC  6EF7               	movwf	tblptrh,c
  3412  0013DE                     	endif
  3413  0013DE                     	if	0	;There are less than 3 active tblptr bytes
  3414  0013DE                     	endif
  3415  0013DE  0008               	tblrd		*
  3416  0013E0  50F5               	movf	tablat,w,c
  3417  0013E2  EC81  F013         	call	_SD_Command
  3418  0013E6  6E30               	movwf	??_initSD& (0+255),c
  3419  0013E8  0E2E               	movlw	low _R1_READY_STATE
  3420  0013EA  6EF6               	movwf	tblptrl,c
  3421  0013EC                     	if	1	;There is more than 1 active tblptr byte
  3422  0013EC  0E10               	movlw	high _R1_READY_STATE
  3423  0013EE  6EF7               	movwf	tblptrh,c
  3424  0013F0                     	endif
  3425  0013F0                     	if	0	;There are less than 3 active tblptr bytes
  3426  0013F0                     	endif
  3427  0013F0  0008               	tblrd		*
  3428  0013F2  50F5               	movf	tablat,w,c
  3429  0013F4  1830               	xorwf	??_initSD,w,c
  3430  0013F6  A4D8               	btfss	status,2,c
  3431  0013F8  D7E6               	goto	l3106
  3432                           
  3433                           ;SD_PIC.c: 600: SDCard.blockSize = 512;
  3434  0013FA  0E02               	movlw	2
  3435  0013FC  0100               	movlb	0	; () banked
  3436  0013FE  6F93               	movwf	(_SDCard+19)& (0+255),b
  3437  001400  0E00               	movlw	0
  3438  001402  6F92               	movwf	(_SDCard+18)& (0+255),b
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;SD_PIC.c: 603: SD_Command(CMD9, 0);
  3442  001404  0E00               	movlw	0
  3443  001406  6E04               	movwf	SD_Command@arg,c
  3444  001408  0E00               	movlw	0
  3445  00140A  6E05               	movwf	SD_Command@arg+1,c
  3446  00140C  0E00               	movlw	0
  3447  00140E  6E06               	movwf	SD_Command@arg+2,c
  3448  001410  0E00               	movlw	0
  3449  001412  6E07               	movwf	SD_Command@arg+3,c
  3450  001414  0E3F               	movlw	low _CMD9
  3451  001416  6EF6               	movwf	tblptrl,c
  3452  001418                     	if	1	;There is more than 1 active tblptr byte
  3453  001418  0E10               	movlw	high _CMD9
  3454  00141A  6EF7               	movwf	tblptrh,c
  3455  00141C                     	endif
  3456  00141C                     	if	0	;There are less than 3 active tblptr bytes
  3457  00141C                     	endif
  3458  00141C  0008               	tblrd		*
  3459  00141E  50F5               	movf	tablat,w,c
  3460  001420  EC81  F013         	call	_SD_Command
  3461                           
  3462                           ;SD_PIC.c: 604: LATEbits.LATE2 = 0;
  3463  001424  948D               	bcf	3981,2,c	;volatile
  3464  001426                     l3114:
  3465  001426  EC1D  F017         	call	_spiReceive	;wreg free
  3466  00142A  6E30               	movwf	??_initSD& (0+255),c
  3467  00142C  0E2B               	movlw	low _START_BLOCK
  3468  00142E  6EF6               	movwf	tblptrl,c
  3469  001430                     	if	1	;There is more than 1 active tblptr byte
  3470  001430  0E10               	movlw	high _START_BLOCK
  3471  001432  6EF7               	movwf	tblptrh,c
  3472  001434                     	endif
  3473  001434                     	if	0	;There are less than 3 active tblptr bytes
  3474  001434                     	endif
  3475  001434  0008               	tblrd		*
  3476  001436  50F5               	movf	tablat,w,c
  3477  001438  1830               	xorwf	??_initSD,w,c
  3478  00143A  A4D8               	btfss	status,2,c
  3479  00143C  D7F4               	goto	l3114
  3480                           
  3481                           ;SD_PIC.c: 606: for(i = 0; i < 16; i++){
  3482  00143E  0E00               	movlw	0
  3483  001440  6E56               	movwf	initSD@i,c
  3484  001442                     l3118:
  3485  001442  0E0F               	movlw	15
  3486  001444  6456               	cpfsgt	initSD@i,c
  3487  001446  D001               	goto	l3122
  3488  001448  D00D               	goto	l3128
  3489  00144A                     l3122:
  3490                           
  3491                           ;SD_PIC.c: 607: arr_response[i] = spiReceive();
  3492  00144A  5056               	movf	initSD@i,w,c
  3493  00144C  0D01               	mullw	1
  3494  00144E  0E41               	movlw	low initSD@arr_response
  3495  001450  24F3               	addwf	prodl,w,c
  3496  001452  6ED9               	movwf	fsr2l,c
  3497  001454  0E00               	movlw	high initSD@arr_response
  3498  001456  20F4               	addwfc	prodh,w,c
  3499  001458  6EDA               	movwf	fsr2h,c
  3500  00145A  EC1D  F017         	call	_spiReceive	;wreg free
  3501  00145E  6EDF               	movwf	indf2,c
  3502  001460  2A56               	incf	initSD@i,f,c
  3503  001462  D7EF               	goto	l3118
  3504  001464                     l3128:
  3505                           
  3506                           ;SD_PIC.c: 608: }
  3507                           ;SD_PIC.c: 609: spiReceive();
  3508  001464  EC1D  F017         	call	_spiReceive	;wreg free
  3509                           
  3510                           ;SD_PIC.c: 610: spiReceive();
  3511  001468  EC1D  F017         	call	_spiReceive	;wreg free
  3512                           
  3513                           ;SD_PIC.c: 611: LATEbits.LATE2 = 1;
  3514  00146C  848D               	bsf	3981,2,c	;volatile
  3515                           
  3516                           ;SD_PIC.c: 613: if(SDCard.SDversion == 2){
  3517  00146E  0E02               	movlw	2
  3518  001470  0100               	movlb	0	; () banked
  3519  001472  1980               	xorwf	_SDCard& (0+255),w,b
  3520  001474  A4D8               	btfss	status,2,c
  3521  001476  D06C               	goto	l3140
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;SD_PIC.c: 619: unsigned long tempSize = arr_response[9] + 1UL;
  3525  001478  0E01               	movlw	1
  3526  00147A  244A               	addwf	initSD@arr_response+9,w,c
  3527  00147C  6E3D               	movwf	initSD@tempSize,c
  3528  00147E  6A3E               	clrf	initSD@tempSize+1,c
  3529  001480  0E00               	movlw	0
  3530  001482  223E               	addwfc	initSD@tempSize+1,f,c
  3531  001484  6A3F               	clrf	initSD@tempSize+2,c
  3532  001486  0E00               	movlw	0
  3533  001488  223F               	addwfc	initSD@tempSize+2,f,c
  3534  00148A  6A40               	clrf	initSD@tempSize+3,c
  3535  00148C  0E00               	movlw	0
  3536  00148E  2240               	addwfc	initSD@tempSize+3,f,c
  3537                           
  3538                           ;SD_PIC.c: 620: tempSize |= (unsigned long)(arr_response[8] << 8);
  3539  001490  5049               	movf	initSD@arr_response+8,w,c
  3540  001492  6E31               	movwf	(??_initSD+1)& (0+255),c
  3541  001494  6A30               	clrf	??_initSD& (0+255),c
  3542  001496  C030  F032         	movff	??_initSD,??_initSD+2
  3543  00149A  C031  F033         	movff	??_initSD+1,??_initSD+3
  3544  00149E  0E00               	movlw	0
  3545  0014A0  BE33               	btfsc	(??_initSD+3)& (0+255),7,c
  3546  0014A2  0EFF               	movlw	255
  3547  0014A4  6E34               	movwf	(??_initSD+4)& (0+255),c
  3548  0014A6  6E35               	movwf	(??_initSD+5)& (0+255),c
  3549  0014A8  5032               	movf	??_initSD+2,w,c
  3550  0014AA  123D               	iorwf	initSD@tempSize,f,c
  3551  0014AC  5033               	movf	??_initSD+3,w,c
  3552  0014AE  123E               	iorwf	initSD@tempSize+1,f,c
  3553  0014B0  5034               	movf	??_initSD+4,w,c
  3554  0014B2  123F               	iorwf	initSD@tempSize+2,f,c
  3555  0014B4  5035               	movf	??_initSD+5,w,c
  3556  0014B6  1240               	iorwf	initSD@tempSize+3,f,c
  3557                           
  3558                           ;SD_PIC.c: 621: tempSize |= (unsigned long)(arr_response[7] & 0x3F) << 16;
  3559  0014B8  C048  F030         	movff	initSD@arr_response+7,??_initSD
  3560  0014BC  0E3F               	movlw	63
  3561  0014BE  1630               	andwf	??_initSD,f,c
  3562  0014C0  C030  F031         	movff	??_initSD,??_initSD+1
  3563  0014C4  6A32               	clrf	(??_initSD+2)& (0+255),c
  3564  0014C6  6A33               	clrf	(??_initSD+3)& (0+255),c
  3565  0014C8  6A34               	clrf	(??_initSD+4)& (0+255),c
  3566  0014CA  C032  F034         	movff	??_initSD+2,??_initSD+4
  3567  0014CE  C031  F033         	movff	??_initSD+1,??_initSD+3
  3568  0014D2  6A32               	clrf	??_initSD+2,c
  3569  0014D4  6A31               	clrf	??_initSD+1,c
  3570  0014D6  5031               	movf	??_initSD+1,w,c
  3571  0014D8  123D               	iorwf	initSD@tempSize,f,c
  3572  0014DA  5032               	movf	??_initSD+2,w,c
  3573  0014DC  123E               	iorwf	initSD@tempSize+1,f,c
  3574  0014DE  5033               	movf	??_initSD+3,w,c
  3575  0014E0  123F               	iorwf	initSD@tempSize+2,f,c
  3576  0014E2  5034               	movf	??_initSD+4,w,c
  3577  0014E4  1240               	iorwf	initSD@tempSize+3,f,c
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;SD_PIC.c: 622: SDCard.size = tempSize * 0.524288;
  3581  0014E6  C03D  F009         	movff	initSD@tempSize,___lltoft@c
  3582  0014EA  C03E  F00A         	movff	initSD@tempSize+1,___lltoft@c+1
  3583  0014EE  C03F  F00B         	movff	initSD@tempSize+2,___lltoft@c+2
  3584  0014F2  C040  F00C         	movff	initSD@tempSize+3,___lltoft@c+3
  3585  0014F6  ECB0  F015         	call	___lltoft	;wreg free
  3586  0014FA  C009  F012         	movff	?___lltoft,___ftmul@f1
  3587  0014FE  C00A  F013         	movff	?___lltoft+1,___ftmul@f1+1
  3588  001502  C00B  F014         	movff	?___lltoft+2,___ftmul@f1+2
  3589  001506  0E38               	movlw	56
  3590  001508  6E15               	movwf	___ftmul@f2,c
  3591  00150A  0E06               	movlw	6
  3592  00150C  6E16               	movwf	___ftmul@f2+1,c
  3593  00150E  0E3F               	movlw	63
  3594  001510  6E17               	movwf	___ftmul@f2+2,c
  3595  001512  EC70  F011         	call	___ftmul	;wreg free
  3596  001516  C012  F098         	movff	?___ftmul,_SDCard+24
  3597  00151A  C013  F099         	movff	?___ftmul+1,_SDCard+25
  3598  00151E  C014  F09A         	movff	?___ftmul+2,_SDCard+26
  3599                           
  3600                           ;SD_PIC.c: 623: SDCard.numBlocks = (unsigned long)(SDCard.size * 2048);
  3601  001522  0E00               	movlw	0
  3602  001524  6E15               	movwf	___ftmul@f2,c
  3603  001526  0E00               	movlw	0
  3604  001528  6E16               	movwf	___ftmul@f2+1,c
  3605  00152A  0E45               	movlw	69
  3606  00152C  6E17               	movwf	___ftmul@f2+2,c
  3607  00152E  C098  F012         	movff	_SDCard+24,___ftmul@f1
  3608  001532  C099  F013         	movff	_SDCard+25,___ftmul@f1+1
  3609  001536  C09A  F014         	movff	_SDCard+26,___ftmul@f1+2
  3610  00153A  EC70  F011         	call	___ftmul	;wreg free
  3611  00153E  C012  F021         	movff	?___ftmul,___fttol@f1
  3612  001542  C013  F022         	movff	?___ftmul+1,___fttol@f1+1
  3613  001546  C014  F023         	movff	?___ftmul+2,___fttol@f1+2
  3614  00154A  ECF6  F010         	call	___fttol	;wreg free
  3615  00154E  D0BE               	goto	L4
  3616  001550                     l3140:
  3617                           
  3618                           ;SD_PIC.c: 625: else{
  3619                           ;SD_PIC.c: 633: unsigned long tempSize = (unsigned long)(arr_response[6] & 0x03) << 4;
  3620  001550  C047  F030         	movff	initSD@arr_response+6,??_initSD
  3621  001554  0E03               	movlw	3
  3622  001556  1630               	andwf	??_initSD,f,c
  3623  001558  C030  F031         	movff	??_initSD,??_initSD+1
  3624  00155C  6A32               	clrf	(??_initSD+2)& (0+255),c
  3625  00155E  6A33               	clrf	(??_initSD+3)& (0+255),c
  3626  001560  6A34               	clrf	(??_initSD+4)& (0+255),c
  3627  001562  0E04               	movlw	4
  3628  001564                     u2595:
  3629  001564  90D8               	bcf	status,0,c
  3630  001566  3631               	rlcf	??_initSD+1,f,c
  3631  001568  3632               	rlcf	??_initSD+2,f,c
  3632  00156A  3633               	rlcf	??_initSD+3,f,c
  3633  00156C  3634               	rlcf	??_initSD+4,f,c
  3634  00156E  2EE8               	decfsz	wreg,f,c
  3635  001570  D7F9               	goto	u2595
  3636  001572  C031  F051         	movff	??_initSD+1,initSD@tempSize_479
  3637  001576  C032  F052         	movff	??_initSD+2,initSD@tempSize_479+1
  3638  00157A  C033  F053         	movff	??_initSD+3,initSD@tempSize_479+2
  3639  00157E  C034  F054         	movff	??_initSD+4,initSD@tempSize_479+3
  3640                           
  3641                           ;SD_PIC.c: 634: tempSize |= (unsigned long)(arr_response[7] << 2);
  3642  001582  5048               	movf	initSD@arr_response+7,w,c
  3643  001584  6E30               	movwf	??_initSD& (0+255),c
  3644  001586  6A31               	clrf	(??_initSD+1)& (0+255),c
  3645  001588  90D8               	bcf	status,0,c
  3646  00158A  3630               	rlcf	??_initSD,f,c
  3647  00158C  3631               	rlcf	??_initSD+1,f,c
  3648  00158E  90D8               	bcf	status,0,c
  3649  001590  3630               	rlcf	??_initSD,f,c
  3650  001592  3631               	rlcf	??_initSD+1,f,c
  3651  001594  C030  F032         	movff	??_initSD,??_initSD+2
  3652  001598  C031  F033         	movff	??_initSD+1,??_initSD+3
  3653  00159C  0E00               	movlw	0
  3654  00159E  BE33               	btfsc	(??_initSD+3)& (0+255),7,c
  3655  0015A0  0EFF               	movlw	255
  3656  0015A2  6E34               	movwf	(??_initSD+4)& (0+255),c
  3657  0015A4  6E35               	movwf	(??_initSD+5)& (0+255),c
  3658  0015A6  5032               	movf	??_initSD+2,w,c
  3659  0015A8  1251               	iorwf	initSD@tempSize_479,f,c
  3660  0015AA  5033               	movf	??_initSD+3,w,c
  3661  0015AC  1252               	iorwf	initSD@tempSize_479+1,f,c
  3662  0015AE  5034               	movf	??_initSD+4,w,c
  3663  0015B0  1253               	iorwf	initSD@tempSize_479+2,f,c
  3664  0015B2  5035               	movf	??_initSD+5,w,c
  3665  0015B4  1254               	iorwf	initSD@tempSize_479+3,f,c
  3666                           
  3667                           ;SD_PIC.c: 635: tempSize |= (unsigned long)((arr_response[8] & 0xC0) >> 2) + 1;
  3668  0015B6  C049  F030         	movff	initSD@arr_response+8,??_initSD
  3669  0015BA  90D8               	bcf	status,0,c
  3670  0015BC  3230               	rrcf	??_initSD,f,c
  3671  0015BE  90D8               	bcf	status,0,c
  3672  0015C0  3230               	rrcf	??_initSD,f,c
  3673  0015C2  0E30               	movlw	48
  3674  0015C4  1630               	andwf	??_initSD,f,c
  3675  0015C6  0E01               	movlw	1
  3676  0015C8  2430               	addwf	??_initSD,w,c
  3677  0015CA  6E31               	movwf	(??_initSD+1)& (0+255),c
  3678  0015CC  6A32               	clrf	(??_initSD+2)& (0+255),c
  3679  0015CE  0E00               	movlw	0
  3680  0015D0  2232               	addwfc	(??_initSD+2)& (0+255),f,c
  3681  0015D2  6A33               	clrf	(??_initSD+3)& (0+255),c
  3682  0015D4  0E00               	movlw	0
  3683  0015D6  2233               	addwfc	(??_initSD+3)& (0+255),f,c
  3684  0015D8  6A34               	clrf	(??_initSD+4)& (0+255),c
  3685  0015DA  0E00               	movlw	0
  3686  0015DC  2234               	addwfc	(??_initSD+4)& (0+255),f,c
  3687  0015DE  5031               	movf	??_initSD+1,w,c
  3688  0015E0  1251               	iorwf	initSD@tempSize_479,f,c
  3689  0015E2  5032               	movf	??_initSD+2,w,c
  3690  0015E4  1252               	iorwf	initSD@tempSize_479+1,f,c
  3691  0015E6  5033               	movf	??_initSD+3,w,c
  3692  0015E8  1253               	iorwf	initSD@tempSize_479+2,f,c
  3693  0015EA  5034               	movf	??_initSD+4,w,c
  3694  0015EC  1254               	iorwf	initSD@tempSize_479+3,f,c
  3695                           
  3696                           ;SD_PIC.c: 636: tempSize = tempSize << (((unsigned long) ((arr_response[9] & 0x03) << 1)
      +                           | (unsigned long)((arr_response[10] & 0x80) >> 7)) + 2);
  3697  0015EE  C04A  F030         	movff	initSD@arr_response+9,??_initSD
  3698  0015F2  0E03               	movlw	3
  3699  0015F4  1630               	andwf	??_initSD,f,c
  3700  0015F6  6A31               	clrf	(??_initSD+1)& (0+255),c
  3701  0015F8  AE4B               	btfss	initSD@arr_response+10,7,c
  3702  0015FA  D001               	bra	u2605
  3703  0015FC  2A31               	incf	(??_initSD+1)& (0+255),f,c
  3704  0015FE                     u2605:
  3705  0015FE  3031               	rrcf	??_initSD+1,w,c
  3706  001600  3430               	rlcf	??_initSD,w,c
  3707  001602  6E32               	movwf	(??_initSD+2)& (0+255),c
  3708  001604  0E02               	movlw	2
  3709  001606  2632               	addwf	??_initSD+2,f,c
  3710  001608  C051  F033         	movff	initSD@tempSize_479,??_initSD+3
  3711  00160C  C052  F034         	movff	initSD@tempSize_479+1,??_initSD+4
  3712  001610  C053  F035         	movff	initSD@tempSize_479+2,??_initSD+5
  3713  001614  C054  F036         	movff	initSD@tempSize_479+3,??_initSD+6
  3714  001618  2A32               	incf	??_initSD+2,f,c
  3715  00161A  D005               	goto	u2610
  3716  00161C                     u2615:
  3717  00161C  90D8               	bcf	status,0,c
  3718  00161E  3633               	rlcf	??_initSD+3,f,c
  3719  001620  3634               	rlcf	??_initSD+4,f,c
  3720  001622  3635               	rlcf	??_initSD+5,f,c
  3721  001624  3636               	rlcf	??_initSD+6,f,c
  3722  001626                     u2610:
  3723  001626  2E32               	decfsz	??_initSD+2,f,c
  3724  001628  D7F9               	goto	u2615
  3725  00162A  C033  F051         	movff	??_initSD+3,initSD@tempSize_479
  3726  00162E  C034  F052         	movff	??_initSD+4,initSD@tempSize_479+1
  3727  001632  C035  F053         	movff	??_initSD+5,initSD@tempSize_479+2
  3728  001636  C036  F054         	movff	??_initSD+6,initSD@tempSize_479+3
  3729                           
  3730                           ;SD_PIC.c: 639: tempSize = tempSize << ((unsigned long) (arr_response[5] & 0x0F));
  3731  00163A  C046  F030         	movff	initSD@arr_response+5,??_initSD
  3732  00163E  0E0F               	movlw	15
  3733  001640  1630               	andwf	??_initSD,f,c
  3734  001642  C051  F031         	movff	initSD@tempSize_479,??_initSD+1
  3735  001646  C052  F032         	movff	initSD@tempSize_479+1,??_initSD+2
  3736  00164A  C053  F033         	movff	initSD@tempSize_479+2,??_initSD+3
  3737  00164E  C054  F034         	movff	initSD@tempSize_479+3,??_initSD+4
  3738  001652  2A30               	incf	??_initSD,f,c
  3739  001654  D005               	goto	u2620
  3740  001656                     u2625:
  3741  001656  90D8               	bcf	status,0,c
  3742  001658  3631               	rlcf	??_initSD+1,f,c
  3743  00165A  3632               	rlcf	??_initSD+2,f,c
  3744  00165C  3633               	rlcf	??_initSD+3,f,c
  3745  00165E  3634               	rlcf	??_initSD+4,f,c
  3746  001660                     u2620:
  3747  001660  2E30               	decfsz	??_initSD,f,c
  3748  001662  D7F9               	goto	u2625
  3749  001664  C031  F051         	movff	??_initSD+1,initSD@tempSize_479
  3750  001668  C032  F052         	movff	??_initSD+2,initSD@tempSize_479+1
  3751  00166C  C033  F053         	movff	??_initSD+3,initSD@tempSize_479+2
  3752  001670  C034  F054         	movff	??_initSD+4,initSD@tempSize_479+3
  3753                           
  3754                           ;SD_PIC.c: 641: SDCard.size = (unsigned long)tempSize;
  3755  001674  C051  F009         	movff	initSD@tempSize_479,___lltoft@c
  3756  001678  C052  F00A         	movff	initSD@tempSize_479+1,___lltoft@c+1
  3757  00167C  C053  F00B         	movff	initSD@tempSize_479+2,___lltoft@c+2
  3758  001680  C054  F00C         	movff	initSD@tempSize_479+3,___lltoft@c+3
  3759  001684  ECB0  F015         	call	___lltoft	;wreg free
  3760  001688  C009  F098         	movff	?___lltoft,_SDCard+24
  3761  00168C  C00A  F099         	movff	?___lltoft+1,_SDCard+25
  3762  001690  C00B  F09A         	movff	?___lltoft+2,_SDCard+26
  3763                           
  3764                           ;SD_PIC.c: 642: SDCard.numBlocks = (unsigned long)(SDCard.size/SDCard.blockSize);
  3765  001694  C092  F009         	movff	_SDCard+18,___lwtoft@c
  3766  001698  C093  F00A         	movff	_SDCard+19,___lwtoft@c+1
  3767  00169C  ECC6  F016         	call	___lwtoft	;wreg free
  3768  0016A0  C009  F00F         	movff	?___lwtoft,___ftdiv@f2
  3769  0016A4  C00A  F010         	movff	?___lwtoft+1,___ftdiv@f2+1
  3770  0016A8  C00B  F011         	movff	?___lwtoft+2,___ftdiv@f2+2
  3771  0016AC  C098  F00C         	movff	_SDCard+24,___ftdiv@f1
  3772  0016B0  C099  F00D         	movff	_SDCard+25,___ftdiv@f1+1
  3773  0016B4  C09A  F00E         	movff	_SDCard+26,___ftdiv@f1+2
  3774  0016B8  ECEA  F011         	call	___ftdiv	;wreg free
  3775  0016BC  C00C  F021         	movff	?___ftdiv,___fttol@f1
  3776  0016C0  C00D  F022         	movff	?___ftdiv+1,___fttol@f1+1
  3777  0016C4  C00E  F023         	movff	?___ftdiv+2,___fttol@f1+2
  3778  0016C8  ECF6  F010         	call	___fttol	;wreg free
  3779  0016CC                     L4:
  3780  0016CC  C021  F094         	movff	?___fttol,_SDCard+20
  3781  0016D0  C022  F095         	movff	?___fttol+1,_SDCard+21
  3782  0016D4  C023  F096         	movff	?___fttol+2,_SDCard+22
  3783  0016D8  C024  F097         	movff	?___fttol+3,_SDCard+23
  3784                           
  3785                           ;SD_PIC.c: 643: }
  3786                           ;SD_PIC.c: 646: SD_Command(CMD10, 0);
  3787  0016DC  0E00               	movlw	0
  3788  0016DE  6E04               	movwf	SD_Command@arg,c
  3789  0016E0  0E00               	movlw	0
  3790  0016E2  6E05               	movwf	SD_Command@arg+1,c
  3791  0016E4  0E00               	movlw	0
  3792  0016E6  6E06               	movwf	SD_Command@arg+2,c
  3793  0016E8  0E00               	movlw	0
  3794  0016EA  6E07               	movwf	SD_Command@arg+3,c
  3795  0016EC  0E3E               	movlw	low _CMD10
  3796  0016EE  6EF6               	movwf	tblptrl,c
  3797  0016F0                     	if	1	;There is more than 1 active tblptr byte
  3798  0016F0  0E10               	movlw	high _CMD10
  3799  0016F2  6EF7               	movwf	tblptrh,c
  3800  0016F4                     	endif
  3801  0016F4                     	if	0	;There are less than 3 active tblptr bytes
  3802  0016F4                     	endif
  3803  0016F4  0008               	tblrd		*
  3804  0016F6  50F5               	movf	tablat,w,c
  3805  0016F8  EC81  F013         	call	_SD_Command
  3806                           
  3807                           ;SD_PIC.c: 648: LATEbits.LATE2 = 0;
  3808  0016FC  948D               	bcf	3981,2,c	;volatile
  3809  0016FE                     l3150:
  3810                           
  3811                           ;SD_PIC.c: 652: response = spiReceive();
  3812  0016FE  EC1D  F017         	call	_spiReceive	;wreg free
  3813  001702  6E55               	movwf	initSD@response,c
  3814                           
  3815                           ;SD_PIC.c: 653: }while(response != START_BLOCK);
  3816  001704  0E2B               	movlw	low _START_BLOCK
  3817  001706  6EF6               	movwf	tblptrl,c
  3818  001708                     	if	1	;There is more than 1 active tblptr byte
  3819  001708  0E10               	movlw	high _START_BLOCK
  3820  00170A  6EF7               	movwf	tblptrh,c
  3821  00170C                     	endif
  3822  00170C                     	if	0	;There are less than 3 active tblptr bytes
  3823  00170C                     	endif
  3824  00170C  0008               	tblrd		*
  3825  00170E  50F5               	movf	tablat,w,c
  3826  001710  6255               	cpfseq	initSD@response,c
  3827  001712  D7F5               	goto	l3150
  3828                           
  3829                           ;SD_PIC.c: 655: for(i = 0; i < 16; i++){
  3830  001714  0E00               	movlw	0
  3831  001716  6E56               	movwf	initSD@i,c
  3832  001718                     l3156:
  3833  001718  0E0F               	movlw	15
  3834  00171A  6456               	cpfsgt	initSD@i,c
  3835  00171C  D001               	goto	l3160
  3836  00171E  D00D               	goto	l3166
  3837  001720                     l3160:
  3838                           
  3839                           ;SD_PIC.c: 656: arr_response[i] = spiReceive();
  3840  001720  5056               	movf	initSD@i,w,c
  3841  001722  0D01               	mullw	1
  3842  001724  0E41               	movlw	low initSD@arr_response
  3843  001726  24F3               	addwf	prodl,w,c
  3844  001728  6ED9               	movwf	fsr2l,c
  3845  00172A  0E00               	movlw	high initSD@arr_response
  3846  00172C  20F4               	addwfc	prodh,w,c
  3847  00172E  6EDA               	movwf	fsr2h,c
  3848  001730  EC1D  F017         	call	_spiReceive	;wreg free
  3849  001734  6EDF               	movwf	indf2,c
  3850  001736  2A56               	incf	initSD@i,f,c
  3851  001738  D7EF               	goto	l3156
  3852  00173A                     l3166:
  3853                           
  3854                           ;SD_PIC.c: 657: }
  3855                           ;SD_PIC.c: 658: spiReceive();
  3856  00173A  EC1D  F017         	call	_spiReceive	;wreg free
  3857                           
  3858                           ;SD_PIC.c: 659: spiReceive();
  3859  00173E  EC1D  F017         	call	_spiReceive	;wreg free
  3860                           
  3861                           ;SD_PIC.c: 660: LATEbits.LATE2 = 1;
  3862  001742  848D               	bsf	3981,2,c	;volatile
  3863                           
  3864                           ;SD_PIC.c: 662: SDCard.MID = arr_response[0];
  3865  001744  C041  F082         	movff	initSD@arr_response,_SDCard+2
  3866                           
  3867                           ;SD_PIC.c: 663: SDCard.OID = (unsigned short)(arr_response[1] << 8U) | arr_response[2];
  3868  001748  5042               	movf	initSD@arr_response+1,w,c
  3869  00174A  6E30               	movwf	??_initSD& (0+255),c
  3870  00174C  5043               	movf	initSD@arr_response+2,w,c
  3871  00174E  0100               	movlb	0	; () banked
  3872  001750  6F83               	movwf	(_SDCard+3)& (0+255),b
  3873  001752  C030  F084         	movff	??_initSD,_SDCard+4
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;SD_PIC.c: 664: SDCard.PHMH = arr_response[3];
  3877  001756  C044  F089         	movff	initSD@arr_response+3,_SDCard+9
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;SD_PIC.c: 668: SDCard.PHML = (unsigned long)arr_response[4] << 24U;
  3881  00175A  C045  F030         	movff	initSD@arr_response+4,??_initSD
  3882  00175E  6A31               	clrf	(??_initSD+1)& (0+255),c
  3883  001760  6A32               	clrf	(??_initSD+2)& (0+255),c
  3884  001762  6A33               	clrf	(??_initSD+3)& (0+255),c
  3885  001764  C030  F033         	movff	??_initSD,??_initSD+3
  3886  001768  6A32               	clrf	??_initSD+2,c
  3887  00176A  6A31               	clrf	??_initSD+1,c
  3888  00176C  6A30               	clrf	??_initSD,c
  3889  00176E  C030  F085         	movff	??_initSD,_SDCard+5
  3890  001772  C031  F086         	movff	??_initSD+1,_SDCard+6
  3891  001776  C032  F087         	movff	??_initSD+2,_SDCard+7
  3892  00177A  C033  F088         	movff	??_initSD+3,_SDCard+8
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;SD_PIC.c: 669: SDCard.PHML |= (unsigned long)arr_response[5] << 16U;
  3896  00177E  C046  F030         	movff	initSD@arr_response+5,??_initSD
  3897  001782  6A31               	clrf	(??_initSD+1)& (0+255),c
  3898  001784  6A32               	clrf	(??_initSD+2)& (0+255),c
  3899  001786  6A33               	clrf	(??_initSD+3)& (0+255),c
  3900  001788  C031  F033         	movff	??_initSD+1,??_initSD+3
  3901  00178C  C030  F032         	movff	??_initSD,??_initSD+2
  3902  001790  6A31               	clrf	??_initSD+1,c
  3903  001792  6A30               	clrf	??_initSD,c
  3904  001794  5030               	movf	??_initSD,w,c
  3905  001796  0100               	movlb	0	; () banked
  3906  001798  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3907  00179A  5031               	movf	??_initSD+1,w,c
  3908  00179C  0100               	movlb	0	; () banked
  3909  00179E  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  3910  0017A0  5032               	movf	??_initSD+2,w,c
  3911  0017A2  0100               	movlb	0	; () banked
  3912  0017A4  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  3913  0017A6  5033               	movf	??_initSD+3,w,c
  3914  0017A8  0100               	movlb	0	; () banked
  3915  0017AA  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;SD_PIC.c: 670: SDCard.PHML |= (unsigned long)arr_response[6] << 8U;
  3919  0017AC  C047  F030         	movff	initSD@arr_response+6,??_initSD
  3920  0017B0  6A31               	clrf	(??_initSD+1)& (0+255),c
  3921  0017B2  6A32               	clrf	(??_initSD+2)& (0+255),c
  3922  0017B4  6A33               	clrf	(??_initSD+3)& (0+255),c
  3923  0017B6  C032  F033         	movff	??_initSD+2,??_initSD+3
  3924  0017BA  C031  F032         	movff	??_initSD+1,??_initSD+2
  3925  0017BE  C030  F031         	movff	??_initSD,??_initSD+1
  3926  0017C2  6A30               	clrf	??_initSD,c
  3927  0017C4  5030               	movf	??_initSD,w,c
  3928  0017C6  0100               	movlb	0	; () banked
  3929  0017C8  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3930  0017CA  5031               	movf	??_initSD+1,w,c
  3931  0017CC  0100               	movlb	0	; () banked
  3932  0017CE  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  3933  0017D0  5032               	movf	??_initSD+2,w,c
  3934  0017D2  0100               	movlb	0	; () banked
  3935  0017D4  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  3936  0017D6  5033               	movf	??_initSD+3,w,c
  3937  0017D8  0100               	movlb	0	; () banked
  3938  0017DA  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;SD_PIC.c: 671: SDCard.PHML |= (unsigned long)arr_response[7];
  3942  0017DC  5048               	movf	initSD@arr_response+7,w,c
  3943  0017DE  0100               	movlb	0	; () banked
  3944  0017E0  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;SD_PIC.c: 673: SDCard.PRV = arr_response[8];
  3948  0017E2  C049  F08A         	movff	initSD@arr_response+8,_SDCard+10
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;SD_PIC.c: 677: SDCard.PSN = (unsigned long)arr_response[9] << 24U;
  3952  0017E6  C04A  F030         	movff	initSD@arr_response+9,??_initSD
  3953  0017EA  6A31               	clrf	(??_initSD+1)& (0+255),c
  3954  0017EC  6A32               	clrf	(??_initSD+2)& (0+255),c
  3955  0017EE  6A33               	clrf	(??_initSD+3)& (0+255),c
  3956  0017F0  C030  F033         	movff	??_initSD,??_initSD+3
  3957  0017F4  6A32               	clrf	??_initSD+2,c
  3958  0017F6  6A31               	clrf	??_initSD+1,c
  3959  0017F8  6A30               	clrf	??_initSD,c
  3960  0017FA  C030  F08B         	movff	??_initSD,_SDCard+11
  3961  0017FE  C031  F08C         	movff	??_initSD+1,_SDCard+12
  3962  001802  C032  F08D         	movff	??_initSD+2,_SDCard+13
  3963  001806  C033  F08E         	movff	??_initSD+3,_SDCard+14
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;SD_PIC.c: 678: SDCard.PSN |= (unsigned long)arr_response[10] << 16U;
  3967  00180A  C04B  F030         	movff	initSD@arr_response+10,??_initSD
  3968  00180E  6A31               	clrf	(??_initSD+1)& (0+255),c
  3969  001810  6A32               	clrf	(??_initSD+2)& (0+255),c
  3970  001812  6A33               	clrf	(??_initSD+3)& (0+255),c
  3971  001814  C031  F033         	movff	??_initSD+1,??_initSD+3
  3972  001818  C030  F032         	movff	??_initSD,??_initSD+2
  3973  00181C  6A31               	clrf	??_initSD+1,c
  3974  00181E  6A30               	clrf	??_initSD,c
  3975  001820  5030               	movf	??_initSD,w,c
  3976  001822  0100               	movlb	0	; () banked
  3977  001824  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  3978  001826  5031               	movf	??_initSD+1,w,c
  3979  001828  0100               	movlb	0	; () banked
  3980  00182A  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  3981  00182C  5032               	movf	??_initSD+2,w,c
  3982  00182E  0100               	movlb	0	; () banked
  3983  001830  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  3984  001832  5033               	movf	??_initSD+3,w,c
  3985  001834  0100               	movlb	0	; () banked
  3986  001836  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;SD_PIC.c: 679: SDCard.PSN |= (unsigned long)arr_response[11] << 8U;
  3990  001838  C04C  F030         	movff	initSD@arr_response+11,??_initSD
  3991  00183C  6A31               	clrf	(??_initSD+1)& (0+255),c
  3992  00183E  6A32               	clrf	(??_initSD+2)& (0+255),c
  3993  001840  6A33               	clrf	(??_initSD+3)& (0+255),c
  3994  001842  C032  F033         	movff	??_initSD+2,??_initSD+3
  3995  001846  C031  F032         	movff	??_initSD+1,??_initSD+2
  3996  00184A  C030  F031         	movff	??_initSD,??_initSD+1
  3997  00184E  6A30               	clrf	??_initSD,c
  3998  001850  5030               	movf	??_initSD,w,c
  3999  001852  0100               	movlb	0	; () banked
  4000  001854  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  4001  001856  5031               	movf	??_initSD+1,w,c
  4002  001858  0100               	movlb	0	; () banked
  4003  00185A  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  4004  00185C  5032               	movf	??_initSD+2,w,c
  4005  00185E  0100               	movlb	0	; () banked
  4006  001860  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  4007  001862  5033               	movf	??_initSD+3,w,c
  4008  001864  0100               	movlb	0	; () banked
  4009  001866  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;SD_PIC.c: 680: SDCard.PSN |= (unsigned long)arr_response[12];
  4013  001868  504D               	movf	initSD@arr_response+12,w,c
  4014  00186A  0100               	movlb	0	; () banked
  4015  00186C  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;SD_PIC.c: 682: SDCard.MDT = (unsigned short)(((arr_response[13] & 0x0F) << 8U)) |
  4019                           ;SD_PIC.c: 683: (arr_response[14]);
  4020  00186E  504E               	movf	initSD@arr_response+13,w,c
  4021  001870  0B0F               	andlw	15
  4022  001872  6E30               	movwf	??_initSD& (0+255),c
  4023  001874  504F               	movf	initSD@arr_response+14,w,c
  4024  001876  0100               	movlb	0	; () banked
  4025  001878  6F8F               	movwf	(_SDCard+15)& (0+255),b
  4026  00187A  C030  F090         	movff	??_initSD,_SDCard+16
  4027                           
  4028                           ; BSR set to: 0
  4029                           ;SD_PIC.c: 684: SDCard.CRC = arr_response[15] & 0xFE;
  4030  00187E  5050               	movf	initSD@arr_response+15,w,c
  4031  001880  0BFE               	andlw	254
  4032  001882  0100               	movlb	0	; () banked
  4033  001884  6F91               	movwf	(_SDCard+17)& (0+255),b
  4034                           
  4035                           ; BSR set to: 0
  4036                           ;SD_PIC.c: 687: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  4037  001886  848D               	bsf	3981,2,c	;volatile
  4038                           
  4039                           ; BSR set to: 0
  4040  001888  9AC6               	bcf	4038,5,c	;volatile
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;SD_PIC.c: 688: SSPCON1 = 0b00010000;
  4044  00188A  0E10               	movlw	16
  4045  00188C  6EC6               	movwf	4038,c	;volatile
  4046                           
  4047                           ; BSR set to: 0
  4048                           ;SD_PIC.c: 689: OSCCON = last_OSCCON;
  4049  00188E  C03B  FFD3         	movff	initSD@last_OSCCON,4051	;volatile
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;SD_PIC.c: 690: OSCTUNE = last_OSCTUNE;
  4053  001892  C03C  FF9B         	movff	initSD@last_OSCTUNE,3995	;volatile
  4054                           
  4055                           ;SD_PIC.c: 693: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(40000000/4000000.0
      +                          ))); }
  4056  001896  D004               	goto	l3210
  4057  001898                     l3208:
  4058  001898  0E42               	movlw	66
  4059  00189A                     u3147:
  4060  00189A  2EE8               	decfsz	wreg,f,c
  4061  00189C  D7FE               	bra	u3147
  4062  00189E  D000               	nop2	
  4063  0018A0                     l3210:
  4064  0018A0  A4D3               	btfss	4051,2,c	;volatile
  4065  0018A2  D7FA               	goto	l3208
  4066                           
  4067                           ;SD_PIC.c: 696: SSPCON1bits.SSPEN = 1;
  4068  0018A4  8AC6               	bsf	4038,5,c	;volatile
  4069                           
  4070                           ;SD_PIC.c: 699: SDCard.write.MBW_flag_first = 1;
  4071  0018A6  0E01               	movlw	1
  4072  0018A8  0100               	movlb	0	; () banked
  4073  0018AA  6FA4               	movwf	(_SDCard+36)& (0+255),b
  4074                           
  4075                           ;SD_PIC.c: 700: SDCard.write.MBW_startBlock = 0;
  4076  0018AC  0E00               	movlw	0
  4077  0018AE  0100               	movlb	0	; () banked
  4078  0018B0  6FA0               	movwf	(_SDCard+32)& (0+255),b
  4079  0018B2  0E00               	movlw	0
  4080  0018B4  6FA1               	movwf	(_SDCard+33)& (0+255),b
  4081  0018B6  0E00               	movlw	0
  4082  0018B8  6FA2               	movwf	(_SDCard+34)& (0+255),b
  4083  0018BA  0E00               	movlw	0
  4084  0018BC  6FA3               	movwf	(_SDCard+35)& (0+255),b
  4085                           
  4086                           ;SD_PIC.c: 701: SDCard.write.lastBlockWritten = 0;
  4087  0018BE  0E00               	movlw	0
  4088  0018C0  0100               	movlb	0	; () banked
  4089  0018C2  6F9C               	movwf	(_SDCard+28)& (0+255),b
  4090  0018C4  0E00               	movlw	0
  4091  0018C6  6F9D               	movwf	(_SDCard+29)& (0+255),b
  4092  0018C8  0E00               	movlw	0
  4093  0018CA  6F9E               	movwf	(_SDCard+30)& (0+255),b
  4094  0018CC  0E00               	movlw	0
  4095  0018CE  6F9F               	movwf	(_SDCard+31)& (0+255),b
  4096                           
  4097                           ;SD_PIC.c: 702: SDCard.read.MBR_flag_first = 1;
  4098  0018D0  0E01               	movlw	1
  4099  0018D2  0100               	movlb	0	; () banked
  4100  0018D4  6FAD               	movwf	(_SDCard+45)& (0+255),b
  4101                           
  4102                           ;SD_PIC.c: 703: SDCard.read.MBR_startBlock = 0;
  4103  0018D6  0E00               	movlw	0
  4104  0018D8  0100               	movlb	0	; () banked
  4105  0018DA  6FA9               	movwf	(_SDCard+41)& (0+255),b
  4106  0018DC  0E00               	movlw	0
  4107  0018DE  6FAA               	movwf	(_SDCard+42)& (0+255),b
  4108  0018E0  0E00               	movlw	0
  4109  0018E2  6FAB               	movwf	(_SDCard+43)& (0+255),b
  4110  0018E4  0E00               	movlw	0
  4111  0018E6  6FAC               	movwf	(_SDCard+44)& (0+255),b
  4112                           
  4113                           ;SD_PIC.c: 704: SDCard.read.lastBlockRead = 0;
  4114  0018E8  0E00               	movlw	0
  4115  0018EA  0100               	movlb	0	; () banked
  4116  0018EC  6FA5               	movwf	(_SDCard+37)& (0+255),b
  4117  0018EE  0E00               	movlw	0
  4118  0018F0  6FA6               	movwf	(_SDCard+38)& (0+255),b
  4119  0018F2  0E00               	movlw	0
  4120  0018F4  6FA7               	movwf	(_SDCard+39)& (0+255),b
  4121  0018F6  0E00               	movlw	0
  4122  0018F8  6FA8               	movwf	(_SDCard+40)& (0+255),b
  4123                           
  4124                           ;SD_PIC.c: 707: SDCard.init = 1;
  4125  0018FA  0E01               	movlw	1
  4126  0018FC  0100               	movlb	0	; () banked
  4127  0018FE  6F9B               	movwf	(_SDCard+27)& (0+255),b
  4128  001900  0012               	return		;funcret
  4129  001902                     __end_of_initSD:
  4130                           	opt stack 0
  4131                           tblptru	equ	0xFF8
  4132                           tblptrh	equ	0xFF7
  4133                           tblptrl	equ	0xFF6
  4134                           tablat	equ	0xFF5
  4135                           prodh	equ	0xFF4
  4136                           prodl	equ	0xFF3
  4137                           intcon	equ	0xFF2
  4138                           intcon2	equ	0xFF1
  4139                           intcon3	equ	0xFF0
  4140                           postinc0	equ	0xFEE
  4141                           wreg	equ	0xFE8
  4142                           postdec1	equ	0xFE5
  4143                           plusw1	equ	0xFE3
  4144                           fsr1h	equ	0xFE2
  4145                           fsr1l	equ	0xFE1
  4146                           indf2	equ	0xFDF
  4147                           postinc2	equ	0xFDE
  4148                           postdec2	equ	0xFDD
  4149                           plusw2	equ	0xFDB
  4150                           fsr2h	equ	0xFDA
  4151                           fsr2l	equ	0xFD9
  4152                           status	equ	0xFD8
  4153                           
  4154 ;; *************** function _spiInit *****************
  4155 ;; Defined at:
  4156 ;;		line 54 in file "../../src/SPI/SPI_PIC.c"
  4157 ;; Parameters:    Size  Location     Type
  4158 ;;  divider         1    wreg     unsigned char 
  4159 ;; Auto vars:     Size  Location     Type
  4160 ;;  divider         1    0[COMRAM] unsigned char 
  4161 ;; Return value:  Size  Location     Type
  4162 ;;                  1    wreg      void 
  4163 ;; Registers used:
  4164 ;;		wreg, status,2, status,0
  4165 ;; Tracked objects:
  4166 ;;		On entry : 0/0
  4167 ;;		On exit  : 0/0
  4168 ;;		Unchanged: 0/0
  4169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;Total ram usage:        1 bytes
  4175 ;; Hardware stack levels used:    1
  4176 ;; This function calls:
  4177 ;;		Nothing
  4178 ;; This function is called by:
  4179 ;;		_initSD
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           	psect	text8
  4184  002CC6                     __ptext8:
  4185                           	opt stack 0
  4186  002CC6                     _spiInit:
  4187                           	opt stack 29
  4188                           
  4189                           ;incstack = 0
  4190                           ;spiInit@divider stored from wreg
  4191  002CC6  6E01               	movwf	spiInit@divider,c
  4192                           
  4193                           ;SPI_PIC.c: 65: SSPCON1bits.SSPEN = 0;
  4194  002CC8  9AC6               	bcf	4038,5,c	;volatile
  4195                           
  4196                           ;SPI_PIC.c: 66: SSPSTAT = 0x00;
  4197  002CCA  0E00               	movlw	0
  4198  002CCC  6EC7               	movwf	4039,c	;volatile
  4199                           
  4200                           ;SPI_PIC.c: 71: switch(divider){
  4201  002CCE  D007               	goto	l2530
  4202  002CD0                     l2524:
  4203                           
  4204                           ;SPI_PIC.c: 76: SSPCON1 = 0b00010001;
  4205  002CD0  0E11               	movlw	17
  4206  002CD2  D003               	goto	L7
  4207  002CD4                     l2526:
  4208                           
  4209                           ;SPI_PIC.c: 79: SSPCON1 = 0b00010010;
  4210  002CD4  0E12               	movlw	18
  4211  002CD6  D001               	goto	L7
  4212  002CD8                     l2528:
  4213                           
  4214                           ;SPI_PIC.c: 82: SSPCON1 = 0b00010000;
  4215  002CD8  0E10               	movlw	16
  4216  002CDA                     L7:
  4217  002CDA  6EC6               	movwf	4038,c	;volatile
  4218                           
  4219                           ;SPI_PIC.c: 83: }
  4220  002CDC  D00B               	goto	l341
  4221  002CDE                     l2530:
  4222  002CDE  5001               	movf	spiInit@divider,w,c
  4223                           
  4224                           ; Switch size 1, requested type "space"
  4225                           ; Number of cases is 3, Range of values is 4 to 64
  4226                           ; switch strategies available:
  4227                           ; Name         Instructions Cycles
  4228                           ; simple_byte           10     6 (average)
  4229                           ;	Chosen strategy is simple_byte
  4230  002CE0  0A04               	xorlw	4	; case 4
  4231  002CE2  B4D8               	btfsc	status,2,c
  4232  002CE4  D7F9               	goto	l2528
  4233  002CE6  0A14               	xorlw	20	; case 16
  4234  002CE8  B4D8               	btfsc	status,2,c
  4235  002CEA  D7F2               	goto	l2524
  4236  002CEC  0A50               	xorlw	80	; case 64
  4237  002CEE  B4D8               	btfsc	status,2,c
  4238  002CF0  D7F1               	goto	l2526
  4239  002CF2  D7F2               	goto	l2528
  4240  002CF4                     l341:
  4241                           
  4242                           ;SPI_PIC.c: 86: TRISCbits.TRISC5 = 0;
  4243  002CF4  9A94               	bcf	3988,5,c	;volatile
  4244                           
  4245                           ;SPI_PIC.c: 87: TRISCbits.TRISC4 = 1;
  4246  002CF6  8894               	bsf	3988,4,c	;volatile
  4247                           
  4248                           ;SPI_PIC.c: 88: TRISCbits.TRISC3 = 0;
  4249  002CF8  9694               	bcf	3988,3,c	;volatile
  4250                           
  4251                           ;SPI_PIC.c: 91: SSPCON1bits.SSPEN = 1;
  4252  002CFA  8AC6               	bsf	4038,5,c	;volatile
  4253  002CFC  0012               	return		;funcret
  4254  002CFE                     __end_of_spiInit:
  4255                           	opt stack 0
  4256                           tblptru	equ	0xFF8
  4257                           tblptrh	equ	0xFF7
  4258                           tblptrl	equ	0xFF6
  4259                           tablat	equ	0xFF5
  4260                           prodh	equ	0xFF4
  4261                           prodl	equ	0xFF3
  4262                           intcon	equ	0xFF2
  4263                           intcon2	equ	0xFF1
  4264                           intcon3	equ	0xFF0
  4265                           postinc0	equ	0xFEE
  4266                           wreg	equ	0xFE8
  4267                           postdec1	equ	0xFE5
  4268                           plusw1	equ	0xFE3
  4269                           fsr1h	equ	0xFE2
  4270                           fsr1l	equ	0xFE1
  4271                           indf2	equ	0xFDF
  4272                           postinc2	equ	0xFDE
  4273                           postdec2	equ	0xFDD
  4274                           plusw2	equ	0xFDB
  4275                           fsr2h	equ	0xFDA
  4276                           fsr2l	equ	0xFD9
  4277                           status	equ	0xFD8
  4278                           
  4279 ;; *************** function ___lwtoft *****************
  4280 ;; Defined at:
  4281 ;;		line 28 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;  c               2    8[COMRAM] unsigned int 
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;		None
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  3    8[COMRAM] float 
  4288 ;; Registers used:
  4289 ;;		wreg, status,2, status,0, cstack
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/0
  4292 ;;		On exit  : 0/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4295 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;Total ram usage:        3 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; Hardware stack levels required when called:    1
  4302 ;; This function calls:
  4303 ;;		___ftpack
  4304 ;; This function is called by:
  4305 ;;		_initSD
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           	psect	text9
  4310  002D8C                     __ptext9:
  4311                           	opt stack 0
  4312  002D8C                     ___lwtoft:
  4313                           	opt stack 28
  4314                           
  4315                           ;incstack = 0
  4316  002D8C  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  4317  002D90  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  4318  002D94  6A03               	clrf	___ftpack@arg+2,c
  4319  002D96  0E8E               	movlw	142
  4320  002D98  6E04               	movwf	___ftpack@exp,c
  4321  002D9A  0E00               	movlw	0
  4322  002D9C  6E05               	movwf	___ftpack@sign,c
  4323  002D9E  EC2A  F013         	call	___ftpack	;wreg free
  4324  002DA2  C001  F009         	movff	?___ftpack,?___lwtoft
  4325  002DA6  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  4326  002DAA  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  4327  002DAE  0012               	return	
  4328  002DB0                     __end_of___lwtoft:
  4329                           	opt stack 0
  4330                           tblptru	equ	0xFF8
  4331                           tblptrh	equ	0xFF7
  4332                           tblptrl	equ	0xFF6
  4333                           tablat	equ	0xFF5
  4334                           prodh	equ	0xFF4
  4335                           prodl	equ	0xFF3
  4336                           intcon	equ	0xFF2
  4337                           intcon2	equ	0xFF1
  4338                           intcon3	equ	0xFF0
  4339                           postinc0	equ	0xFEE
  4340                           wreg	equ	0xFE8
  4341                           postdec1	equ	0xFE5
  4342                           plusw1	equ	0xFE3
  4343                           fsr1h	equ	0xFE2
  4344                           fsr1l	equ	0xFE1
  4345                           indf2	equ	0xFDF
  4346                           postinc2	equ	0xFDE
  4347                           postdec2	equ	0xFDD
  4348                           plusw2	equ	0xFDB
  4349                           fsr2h	equ	0xFDA
  4350                           fsr2l	equ	0xFD9
  4351                           status	equ	0xFD8
  4352                           
  4353 ;; *************** function ___lltoft *****************
  4354 ;; Defined at:
  4355 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;  c               4    8[COMRAM] unsigned long 
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;  exp             1   16[COMRAM] unsigned char 
  4360 ;; Return value:  Size  Location     Type
  4361 ;;                  3    8[COMRAM] float 
  4362 ;; Registers used:
  4363 ;;		wreg, status,2, status,0, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4369 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;Total ram usage:        9 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    1
  4376 ;; This function calls:
  4377 ;;		___ftpack
  4378 ;; This function is called by:
  4379 ;;		_initSD
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           	psect	text10
  4384  002B60                     __ptext10:
  4385                           	opt stack 0
  4386  002B60                     ___lltoft:
  4387                           	opt stack 28
  4388                           
  4389                           ;incstack = 0
  4390  002B60  0E8E               	movlw	142
  4391  002B62  6E11               	movwf	___lltoft@exp,c
  4392  002B64  D006               	goto	l2714
  4393  002B66                     l2712:
  4394  002B66  90D8               	bcf	status,0,c
  4395  002B68  320C               	rrcf	___lltoft@c+3,f,c
  4396  002B6A  320B               	rrcf	___lltoft@c+2,f,c
  4397  002B6C  320A               	rrcf	___lltoft@c+1,f,c
  4398  002B6E  3209               	rrcf	___lltoft@c,f,c
  4399  002B70  2A11               	incf	___lltoft@exp,f,c
  4400  002B72                     l2714:
  4401  002B72  0E00               	movlw	0
  4402  002B74  1409               	andwf	___lltoft@c,w,c
  4403  002B76  6E0D               	movwf	??___lltoft& (0+255),c
  4404  002B78  0E00               	movlw	0
  4405  002B7A  140A               	andwf	___lltoft@c+1,w,c
  4406  002B7C  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4407  002B7E  0E00               	movlw	0
  4408  002B80  140B               	andwf	___lltoft@c+2,w,c
  4409  002B82  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4410  002B84  0EFF               	movlw	255
  4411  002B86  140C               	andwf	___lltoft@c+3,w,c
  4412  002B88  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4413  002B8A  500D               	movf	??___lltoft,w,c
  4414  002B8C  100E               	iorwf	??___lltoft+1,w,c
  4415  002B8E  100F               	iorwf	??___lltoft+2,w,c
  4416  002B90  1010               	iorwf	??___lltoft+3,w,c
  4417  002B92  A4D8               	btfss	status,2,c
  4418  002B94  D7E8               	goto	l2712
  4419  002B96  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4420  002B9A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4421  002B9E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4422  002BA2  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4423  002BA6  0E00               	movlw	0
  4424  002BA8  6E05               	movwf	___ftpack@sign,c
  4425  002BAA  EC2A  F013         	call	___ftpack	;wreg free
  4426  002BAE  C001  F009         	movff	?___ftpack,?___lltoft
  4427  002BB2  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4428  002BB6  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4429  002BBA  0012               	return	
  4430  002BBC                     __end_of___lltoft:
  4431                           	opt stack 0
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon	equ	0xFF2
  4439                           intcon2	equ	0xFF1
  4440                           intcon3	equ	0xFF0
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           postdec1	equ	0xFE5
  4444                           plusw1	equ	0xFE3
  4445                           fsr1h	equ	0xFE2
  4446                           fsr1l	equ	0xFE1
  4447                           indf2	equ	0xFDF
  4448                           postinc2	equ	0xFDE
  4449                           postdec2	equ	0xFDD
  4450                           plusw2	equ	0xFDB
  4451                           fsr2h	equ	0xFDA
  4452                           fsr2l	equ	0xFD9
  4453                           status	equ	0xFD8
  4454                           
  4455 ;; *************** function ___fttol *****************
  4456 ;; Defined at:
  4457 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  f1              3   32[COMRAM] float 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  lval            4   42[COMRAM] unsigned long 
  4462 ;;  exp1            1   46[COMRAM] unsigned char 
  4463 ;;  sign1           1   41[COMRAM] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  4   32[COMRAM] long 
  4466 ;; Registers used:
  4467 ;;		wreg, status,2, status,0
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4473 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4477 ;;Total ram usage:       15 bytes
  4478 ;; Hardware stack levels used:    1
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_initSD
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text11
  4487  0021EC                     __ptext11:
  4488                           	opt stack 0
  4489  0021EC                     ___fttol:
  4490                           	opt stack 29
  4491                           
  4492                           ;incstack = 0
  4493  0021EC  C023  F025         	movff	___fttol@f1+2,??___fttol
  4494  0021F0  6A26               	clrf	(??___fttol+1)& (0+255),c
  4495  0021F2  6A27               	clrf	(??___fttol+2)& (0+255),c
  4496  0021F4  3422               	rlcf	___fttol@f1+1,w,c
  4497  0021F6  3625               	rlcf	??___fttol& (0+255),f,c
  4498  0021F8  E301               	bnc	u1781
  4499  0021FA  8026               	bsf	(??___fttol+1)& (0+255),0,c
  4500  0021FC                     u1781:
  4501  0021FC  5025               	movf	??___fttol,w,c
  4502  0021FE  6E2F               	movwf	___fttol@exp1,c
  4503  002200  502F               	movf	___fttol@exp1,w,c
  4504  002202  A4D8               	btfss	status,2,c
  4505  002204  D009               	goto	l2632
  4506  002206  0E00               	movlw	0
  4507  002208  6E21               	movwf	?___fttol,c
  4508  00220A  0E00               	movlw	0
  4509  00220C  6E22               	movwf	?___fttol+1,c
  4510  00220E  0E00               	movlw	0
  4511  002210  6E23               	movwf	?___fttol+2,c
  4512  002212  0E00               	movlw	0
  4513  002214  6E24               	movwf	?___fttol+3,c
  4514  002216  0012               	return	
  4515  002218                     l2632:
  4516  002218  0E17               	movlw	23
  4517  00221A  6E25               	movwf	??___fttol& (0+255),c
  4518  00221C  C021  F026         	movff	___fttol@f1,??___fttol+1
  4519  002220  C022  F027         	movff	___fttol@f1+1,??___fttol+2
  4520  002224  C023  F028         	movff	___fttol@f1+2,??___fttol+3
  4521  002228  2825               	incf	??___fttol,w,c
  4522  00222A  6E29               	movwf	(??___fttol+4)& (0+255),c
  4523  00222C  D004               	goto	u1800
  4524  00222E                     u1805:
  4525  00222E  90D8               	bcf	status,0,c
  4526  002230  3228               	rrcf	??___fttol+3,f,c
  4527  002232  3227               	rrcf	??___fttol+2,f,c
  4528  002234  3226               	rrcf	??___fttol+1,f,c
  4529  002236                     u1800:
  4530  002236  2E29               	decfsz	(??___fttol+4)& (0+255),f,c
  4531  002238  D7FA               	goto	u1805
  4532  00223A  5026               	movf	??___fttol+1,w,c
  4533  00223C  6E2A               	movwf	___fttol@sign1,c
  4534  00223E  8E22               	bsf	___fttol@f1+1,7,c
  4535  002240  0EFF               	movlw	255
  4536  002242  1621               	andwf	___fttol@f1,f,c
  4537  002244  0EFF               	movlw	255
  4538  002246  1622               	andwf	___fttol@f1+1,f,c
  4539  002248  0E00               	movlw	0
  4540  00224A  1623               	andwf	___fttol@f1+2,f,c
  4541  00224C  5021               	movf	___fttol@f1,w,c
  4542  00224E  6E2B               	movwf	___fttol@lval,c
  4543  002250  5022               	movf	___fttol@f1+1,w,c
  4544  002252  6E2C               	movwf	___fttol@lval+1,c
  4545  002254  5023               	movf	___fttol@f1+2,w,c
  4546  002256  6E2D               	movwf	___fttol@lval+2,c
  4547  002258  6A2E               	clrf	___fttol@lval+3,c
  4548  00225A  0E8E               	movlw	142
  4549  00225C  5E2F               	subwf	___fttol@exp1,f,c
  4550  00225E  AE2F               	btfss	___fttol@exp1,7,c
  4551  002260  D016               	goto	l2654
  4552  002262  502F               	movf	___fttol@exp1,w,c
  4553  002264  0A80               	xorlw	128
  4554  002266  0F8F               	addlw	143
  4555  002268  B0D8               	btfsc	status,0,c
  4556  00226A  D009               	goto	l2650
  4557  00226C  0E00               	movlw	0
  4558  00226E  6E21               	movwf	?___fttol,c
  4559  002270  0E00               	movlw	0
  4560  002272  6E22               	movwf	?___fttol+1,c
  4561  002274  0E00               	movlw	0
  4562  002276  6E23               	movwf	?___fttol+2,c
  4563  002278  0E00               	movlw	0
  4564  00227A  6E24               	movwf	?___fttol+3,c
  4565  00227C  0012               	return	
  4566  00227E                     l2650:
  4567  00227E  90D8               	bcf	status,0,c
  4568  002280  322E               	rrcf	___fttol@lval+3,f,c
  4569  002282  322D               	rrcf	___fttol@lval+2,f,c
  4570  002284  322C               	rrcf	___fttol@lval+1,f,c
  4571  002286  322B               	rrcf	___fttol@lval,f,c
  4572  002288  3E2F               	incfsz	___fttol@exp1,f,c
  4573  00228A  D7F9               	goto	l2650
  4574  00228C  D015               	goto	l2664
  4575  00228E                     l2654:
  4576  00228E  0E17               	movlw	23
  4577  002290  642F               	cpfsgt	___fttol@exp1,c
  4578  002292  D00F               	goto	l2662
  4579  002294  0E00               	movlw	0
  4580  002296  6E21               	movwf	?___fttol,c
  4581  002298  0E00               	movlw	0
  4582  00229A  6E22               	movwf	?___fttol+1,c
  4583  00229C  0E00               	movlw	0
  4584  00229E  6E23               	movwf	?___fttol+2,c
  4585  0022A0  0E00               	movlw	0
  4586  0022A2  6E24               	movwf	?___fttol+3,c
  4587  0022A4  0012               	return	
  4588  0022A6                     l2660:
  4589  0022A6  90D8               	bcf	status,0,c
  4590  0022A8  362B               	rlcf	___fttol@lval,f,c
  4591  0022AA  362C               	rlcf	___fttol@lval+1,f,c
  4592  0022AC  362D               	rlcf	___fttol@lval+2,f,c
  4593  0022AE  362E               	rlcf	___fttol@lval+3,f,c
  4594  0022B0  062F               	decf	___fttol@exp1,f,c
  4595  0022B2                     l2662:
  4596  0022B2  502F               	movf	___fttol@exp1,w,c
  4597  0022B4  A4D8               	btfss	status,2,c
  4598  0022B6  D7F7               	goto	l2660
  4599  0022B8                     l2664:
  4600  0022B8  502A               	movf	___fttol@sign1,w,c
  4601  0022BA  B4D8               	btfsc	status,2,c
  4602  0022BC  D008               	goto	l2668
  4603  0022BE  1E2E               	comf	___fttol@lval+3,f,c
  4604  0022C0  1E2D               	comf	___fttol@lval+2,f,c
  4605  0022C2  1E2C               	comf	___fttol@lval+1,f,c
  4606  0022C4  6C2B               	negf	___fttol@lval,c
  4607  0022C6  0E00               	movlw	0
  4608  0022C8  222C               	addwfc	___fttol@lval+1,f,c
  4609  0022CA  222D               	addwfc	___fttol@lval+2,f,c
  4610  0022CC  222E               	addwfc	___fttol@lval+3,f,c
  4611  0022CE                     l2668:
  4612  0022CE  C02B  F021         	movff	___fttol@lval,?___fttol
  4613  0022D2  C02C  F022         	movff	___fttol@lval+1,?___fttol+1
  4614  0022D6  C02D  F023         	movff	___fttol@lval+2,?___fttol+2
  4615  0022DA  C02E  F024         	movff	___fttol@lval+3,?___fttol+3
  4616  0022DE  0012               	return	
  4617  0022E0                     __end_of___fttol:
  4618                           	opt stack 0
  4619                           tblptru	equ	0xFF8
  4620                           tblptrh	equ	0xFF7
  4621                           tblptrl	equ	0xFF6
  4622                           tablat	equ	0xFF5
  4623                           prodh	equ	0xFF4
  4624                           prodl	equ	0xFF3
  4625                           intcon	equ	0xFF2
  4626                           intcon2	equ	0xFF1
  4627                           intcon3	equ	0xFF0
  4628                           postinc0	equ	0xFEE
  4629                           wreg	equ	0xFE8
  4630                           postdec1	equ	0xFE5
  4631                           plusw1	equ	0xFE3
  4632                           fsr1h	equ	0xFE2
  4633                           fsr1l	equ	0xFE1
  4634                           indf2	equ	0xFDF
  4635                           postinc2	equ	0xFDE
  4636                           postdec2	equ	0xFDD
  4637                           plusw2	equ	0xFDB
  4638                           fsr2h	equ	0xFDA
  4639                           fsr2l	equ	0xFD9
  4640                           status	equ	0xFD8
  4641                           
  4642 ;; *************** function ___ftmul *****************
  4643 ;; Defined at:
  4644 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  4645 ;; Parameters:    Size  Location     Type
  4646 ;;  f1              3   17[COMRAM] float 
  4647 ;;  f2              3   20[COMRAM] float 
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;  f3_as_produc    3   27[COMRAM] unsigned um
  4650 ;;  sign            1   31[COMRAM] unsigned char 
  4651 ;;  cntr            1   30[COMRAM] unsigned char 
  4652 ;;  exp             1   26[COMRAM] unsigned char 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  3   17[COMRAM] float 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, status,0, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4662 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4663 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4664 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4665 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;Total ram usage:       15 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    1
  4669 ;; This function calls:
  4670 ;;		___ftpack
  4671 ;; This function is called by:
  4672 ;;		_initSD
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text12
  4677  0022E0                     __ptext12:
  4678                           	opt stack 0
  4679  0022E0                     ___ftmul:
  4680                           	opt stack 28
  4681                           
  4682                           ;incstack = 0
  4683  0022E0  C014  F018         	movff	___ftmul@f1+2,??___ftmul
  4684  0022E4  6A19               	clrf	(??___ftmul+1)& (0+255),c
  4685  0022E6  6A1A               	clrf	(??___ftmul+2)& (0+255),c
  4686  0022E8  3413               	rlcf	___ftmul@f1+1,w,c
  4687  0022EA  3618               	rlcf	??___ftmul& (0+255),f,c
  4688  0022EC  E301               	bnc	u1721
  4689  0022EE  8019               	bsf	(??___ftmul+1)& (0+255),0,c
  4690  0022F0                     u1721:
  4691  0022F0  5018               	movf	??___ftmul,w,c
  4692  0022F2  6E1B               	movwf	___ftmul@exp,c
  4693  0022F4  501B               	movf	___ftmul@exp,w,c
  4694  0022F6  A4D8               	btfss	status,2,c
  4695  0022F8  D007               	goto	l2584
  4696  0022FA  0E00               	movlw	0
  4697  0022FC  6E12               	movwf	?___ftmul,c
  4698  0022FE  0E00               	movlw	0
  4699  002300  6E13               	movwf	?___ftmul+1,c
  4700  002302  0E00               	movlw	0
  4701  002304  6E14               	movwf	?___ftmul+2,c
  4702  002306  0012               	return	
  4703  002308                     l2584:
  4704  002308  C017  F018         	movff	___ftmul@f2+2,??___ftmul
  4705  00230C  6A19               	clrf	(??___ftmul+1)& (0+255),c
  4706  00230E  6A1A               	clrf	(??___ftmul+2)& (0+255),c
  4707  002310  3416               	rlcf	___ftmul@f2+1,w,c
  4708  002312  3618               	rlcf	??___ftmul& (0+255),f,c
  4709  002314  E301               	bnc	u1741
  4710  002316  8019               	bsf	(??___ftmul+1)& (0+255),0,c
  4711  002318                     u1741:
  4712  002318  5018               	movf	??___ftmul,w,c
  4713  00231A  6E20               	movwf	___ftmul@sign,c
  4714  00231C  5020               	movf	___ftmul@sign,w,c
  4715  00231E  A4D8               	btfss	status,2,c
  4716  002320  D007               	goto	l2590
  4717  002322  0E00               	movlw	0
  4718  002324  6E12               	movwf	?___ftmul,c
  4719  002326  0E00               	movlw	0
  4720  002328  6E13               	movwf	?___ftmul+1,c
  4721  00232A  0E00               	movlw	0
  4722  00232C  6E14               	movwf	?___ftmul+2,c
  4723  00232E  0012               	return	
  4724  002330                     l2590:
  4725  002330  5020               	movf	___ftmul@sign,w,c
  4726  002332  0F7B               	addlw	123
  4727  002334  261B               	addwf	___ftmul@exp,f,c
  4728  002336  C014  F020         	movff	___ftmul@f1+2,___ftmul@sign
  4729  00233A  5017               	movf	___ftmul@f2+2,w,c
  4730  00233C  1A20               	xorwf	___ftmul@sign,f,c
  4731  00233E  0E80               	movlw	128
  4732  002340  1620               	andwf	___ftmul@sign,f,c
  4733  002342  8E13               	bsf	___ftmul@f1+1,7,c
  4734  002344  8E16               	bsf	___ftmul@f2+1,7,c
  4735  002346  0EFF               	movlw	255
  4736  002348  1615               	andwf	___ftmul@f2,f,c
  4737  00234A  0EFF               	movlw	255
  4738  00234C  1616               	andwf	___ftmul@f2+1,f,c
  4739  00234E  0E00               	movlw	0
  4740  002350  1617               	andwf	___ftmul@f2+2,f,c
  4741  002352  0E00               	movlw	0
  4742  002354  6E1C               	movwf	___ftmul@f3_as_product,c
  4743  002356  0E00               	movlw	0
  4744  002358  6E1D               	movwf	___ftmul@f3_as_product+1,c
  4745  00235A  0E00               	movlw	0
  4746  00235C  6E1E               	movwf	___ftmul@f3_as_product+2,c
  4747  00235E  0E07               	movlw	7
  4748  002360  6E1F               	movwf	___ftmul@cntr,c
  4749  002362                     l2604:
  4750  002362  A012               	btfss	___ftmul@f1,0,c
  4751  002364  D006               	goto	l2608
  4752  002366  5015               	movf	___ftmul@f2,w,c
  4753  002368  261C               	addwf	___ftmul@f3_as_product,f,c
  4754  00236A  5016               	movf	___ftmul@f2+1,w,c
  4755  00236C  221D               	addwfc	___ftmul@f3_as_product+1,f,c
  4756  00236E  5017               	movf	___ftmul@f2+2,w,c
  4757  002370  221E               	addwfc	___ftmul@f3_as_product+2,f,c
  4758  002372                     l2608:
  4759  002372  90D8               	bcf	status,0,c
  4760  002374  3214               	rrcf	___ftmul@f1+2,f,c
  4761  002376  3213               	rrcf	___ftmul@f1+1,f,c
  4762  002378  3212               	rrcf	___ftmul@f1,f,c
  4763  00237A  90D8               	bcf	status,0,c
  4764  00237C  3615               	rlcf	___ftmul@f2,f,c
  4765  00237E  3616               	rlcf	___ftmul@f2+1,f,c
  4766  002380  3617               	rlcf	___ftmul@f2+2,f,c
  4767  002382  2E1F               	decfsz	___ftmul@cntr,f,c
  4768  002384  D7EE               	goto	l2604
  4769  002386  0E09               	movlw	9
  4770  002388  6E1F               	movwf	___ftmul@cntr,c
  4771  00238A                     l2614:
  4772  00238A  A012               	btfss	___ftmul@f1,0,c
  4773  00238C  D006               	goto	l2618
  4774  00238E  5015               	movf	___ftmul@f2,w,c
  4775  002390  261C               	addwf	___ftmul@f3_as_product,f,c
  4776  002392  5016               	movf	___ftmul@f2+1,w,c
  4777  002394  221D               	addwfc	___ftmul@f3_as_product+1,f,c
  4778  002396  5017               	movf	___ftmul@f2+2,w,c
  4779  002398  221E               	addwfc	___ftmul@f3_as_product+2,f,c
  4780  00239A                     l2618:
  4781  00239A  90D8               	bcf	status,0,c
  4782  00239C  3214               	rrcf	___ftmul@f1+2,f,c
  4783  00239E  3213               	rrcf	___ftmul@f1+1,f,c
  4784  0023A0  3212               	rrcf	___ftmul@f1,f,c
  4785  0023A2  90D8               	bcf	status,0,c
  4786  0023A4  321E               	rrcf	___ftmul@f3_as_product+2,f,c
  4787  0023A6  321D               	rrcf	___ftmul@f3_as_product+1,f,c
  4788  0023A8  321C               	rrcf	___ftmul@f3_as_product,f,c
  4789  0023AA  2E1F               	decfsz	___ftmul@cntr,f,c
  4790  0023AC  D7EE               	goto	l2614
  4791  0023AE  C01C  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4792  0023B2  C01D  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4793  0023B6  C01E  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4794  0023BA  C01B  F004         	movff	___ftmul@exp,___ftpack@exp
  4795  0023BE  C020  F005         	movff	___ftmul@sign,___ftpack@sign
  4796  0023C2  EC2A  F013         	call	___ftpack	;wreg free
  4797  0023C6  C001  F012         	movff	?___ftpack,?___ftmul
  4798  0023CA  C002  F013         	movff	?___ftpack+1,?___ftmul+1
  4799  0023CE  C003  F014         	movff	?___ftpack+2,?___ftmul+2
  4800  0023D2  0012               	return	
  4801  0023D4                     __end_of___ftmul:
  4802                           	opt stack 0
  4803                           tblptru	equ	0xFF8
  4804                           tblptrh	equ	0xFF7
  4805                           tblptrl	equ	0xFF6
  4806                           tablat	equ	0xFF5
  4807                           prodh	equ	0xFF4
  4808                           prodl	equ	0xFF3
  4809                           intcon	equ	0xFF2
  4810                           intcon2	equ	0xFF1
  4811                           intcon3	equ	0xFF0
  4812                           postinc0	equ	0xFEE
  4813                           wreg	equ	0xFE8
  4814                           postdec1	equ	0xFE5
  4815                           plusw1	equ	0xFE3
  4816                           fsr1h	equ	0xFE2
  4817                           fsr1l	equ	0xFE1
  4818                           indf2	equ	0xFDF
  4819                           postinc2	equ	0xFDE
  4820                           postdec2	equ	0xFDD
  4821                           plusw2	equ	0xFDB
  4822                           fsr2h	equ	0xFDA
  4823                           fsr2l	equ	0xFD9
  4824                           status	equ	0xFD8
  4825                           
  4826 ;; *************** function ___ftdiv *****************
  4827 ;; Defined at:
  4828 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;  f1              3   11[COMRAM] float 
  4831 ;;  f2              3   14[COMRAM] float 
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;  f3              3   21[COMRAM] float 
  4834 ;;  sign            1   25[COMRAM] unsigned char 
  4835 ;;  exp             1   24[COMRAM] unsigned char 
  4836 ;;  cntr            1   20[COMRAM] unsigned char 
  4837 ;; Return value:  Size  Location     Type
  4838 ;;                  3   11[COMRAM] float 
  4839 ;; Registers used:
  4840 ;;		wreg, status,2, status,0, cstack
  4841 ;; Tracked objects:
  4842 ;;		On entry : 0/0
  4843 ;;		On exit  : 0/0
  4844 ;;		Unchanged: 0/0
  4845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4846 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4847 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4848 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4849 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;Total ram usage:       15 bytes
  4851 ;; Hardware stack levels used:    1
  4852 ;; Hardware stack levels required when called:    1
  4853 ;; This function calls:
  4854 ;;		___ftpack
  4855 ;; This function is called by:
  4856 ;;		_initSD
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           	psect	text13
  4861  0023D4                     __ptext13:
  4862                           	opt stack 0
  4863  0023D4                     ___ftdiv:
  4864                           	opt stack 28
  4865                           
  4866                           ;incstack = 0
  4867  0023D4  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  4868  0023D8  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  4869  0023DA  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  4870  0023DC  340D               	rlcf	___ftdiv@f1+1,w,c
  4871  0023DE  3612               	rlcf	??___ftdiv& (0+255),f,c
  4872  0023E0  E301               	bnc	u1671
  4873  0023E2  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  4874  0023E4                     u1671:
  4875  0023E4  5012               	movf	??___ftdiv,w,c
  4876  0023E6  6E19               	movwf	___ftdiv@exp,c
  4877  0023E8  5019               	movf	___ftdiv@exp,w,c
  4878  0023EA  A4D8               	btfss	status,2,c
  4879  0023EC  D007               	goto	l2538
  4880  0023EE  0E00               	movlw	0
  4881  0023F0  6E0C               	movwf	?___ftdiv,c
  4882  0023F2  0E00               	movlw	0
  4883  0023F4  6E0D               	movwf	?___ftdiv+1,c
  4884  0023F6  0E00               	movlw	0
  4885  0023F8  6E0E               	movwf	?___ftdiv+2,c
  4886  0023FA  0012               	return	
  4887  0023FC                     l2538:
  4888  0023FC  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  4889  002400  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  4890  002402  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  4891  002404  3410               	rlcf	___ftdiv@f2+1,w,c
  4892  002406  3612               	rlcf	??___ftdiv& (0+255),f,c
  4893  002408  E301               	bnc	u1691
  4894  00240A  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  4895  00240C                     u1691:
  4896  00240C  5012               	movf	??___ftdiv,w,c
  4897  00240E  6E1A               	movwf	___ftdiv@sign,c
  4898  002410  501A               	movf	___ftdiv@sign,w,c
  4899  002412  A4D8               	btfss	status,2,c
  4900  002414  D007               	goto	l2544
  4901  002416  0E00               	movlw	0
  4902  002418  6E0C               	movwf	?___ftdiv,c
  4903  00241A  0E00               	movlw	0
  4904  00241C  6E0D               	movwf	?___ftdiv+1,c
  4905  00241E  0E00               	movlw	0
  4906  002420  6E0E               	movwf	?___ftdiv+2,c
  4907  002422  0012               	return	
  4908  002424                     l2544:
  4909  002424  0E00               	movlw	0
  4910  002426  6E16               	movwf	___ftdiv@f3,c
  4911  002428  0E00               	movlw	0
  4912  00242A  6E17               	movwf	___ftdiv@f3+1,c
  4913  00242C  0E00               	movlw	0
  4914  00242E  6E18               	movwf	___ftdiv@f3+2,c
  4915  002430  501A               	movf	___ftdiv@sign,w,c
  4916  002432  0F89               	addlw	137
  4917  002434  5E19               	subwf	___ftdiv@exp,f,c
  4918  002436  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  4919  00243A  5011               	movf	___ftdiv@f2+2,w,c
  4920  00243C  1A1A               	xorwf	___ftdiv@sign,f,c
  4921  00243E  0E80               	movlw	128
  4922  002440  161A               	andwf	___ftdiv@sign,f,c
  4923  002442  8E0D               	bsf	___ftdiv@f1+1,7,c
  4924  002444  0EFF               	movlw	255
  4925  002446  160C               	andwf	___ftdiv@f1,f,c
  4926  002448  0EFF               	movlw	255
  4927  00244A  160D               	andwf	___ftdiv@f1+1,f,c
  4928  00244C  0E00               	movlw	0
  4929  00244E  160E               	andwf	___ftdiv@f1+2,f,c
  4930  002450  8E10               	bsf	___ftdiv@f2+1,7,c
  4931  002452  0EFF               	movlw	255
  4932  002454  160F               	andwf	___ftdiv@f2,f,c
  4933  002456  0EFF               	movlw	255
  4934  002458  1610               	andwf	___ftdiv@f2+1,f,c
  4935  00245A  0E00               	movlw	0
  4936  00245C  1611               	andwf	___ftdiv@f2+2,f,c
  4937  00245E  0E18               	movlw	24
  4938  002460  6E15               	movwf	___ftdiv@cntr,c
  4939  002462                     l2564:
  4940  002462  90D8               	bcf	status,0,c
  4941  002464  3616               	rlcf	___ftdiv@f3,f,c
  4942  002466  3617               	rlcf	___ftdiv@f3+1,f,c
  4943  002468  3618               	rlcf	___ftdiv@f3+2,f,c
  4944  00246A  500F               	movf	___ftdiv@f2,w,c
  4945  00246C  5C0C               	subwf	___ftdiv@f1,w,c
  4946  00246E  5010               	movf	___ftdiv@f2+1,w,c
  4947  002470  580D               	subwfb	___ftdiv@f1+1,w,c
  4948  002472  5011               	movf	___ftdiv@f2+2,w,c
  4949  002474  580E               	subwfb	___ftdiv@f1+2,w,c
  4950  002476  A0D8               	btfss	status,0,c
  4951  002478  D007               	goto	l861
  4952  00247A  500F               	movf	___ftdiv@f2,w,c
  4953  00247C  5E0C               	subwf	___ftdiv@f1,f,c
  4954  00247E  5010               	movf	___ftdiv@f2+1,w,c
  4955  002480  5A0D               	subwfb	___ftdiv@f1+1,f,c
  4956  002482  5011               	movf	___ftdiv@f2+2,w,c
  4957  002484  5A0E               	subwfb	___ftdiv@f1+2,f,c
  4958  002486  8016               	bsf	___ftdiv@f3,0,c
  4959  002488                     l861:
  4960  002488  90D8               	bcf	status,0,c
  4961  00248A  360C               	rlcf	___ftdiv@f1,f,c
  4962  00248C  360D               	rlcf	___ftdiv@f1+1,f,c
  4963  00248E  360E               	rlcf	___ftdiv@f1+2,f,c
  4964  002490  2E15               	decfsz	___ftdiv@cntr,f,c
  4965  002492  D7E7               	goto	l2564
  4966  002494  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  4967  002498  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4968  00249C  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4969  0024A0  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  4970  0024A4  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  4971  0024A8  EC2A  F013         	call	___ftpack	;wreg free
  4972  0024AC  C001  F00C         	movff	?___ftpack,?___ftdiv
  4973  0024B0  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  4974  0024B4  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  4975  0024B8  0012               	return	
  4976  0024BA                     __end_of___ftdiv:
  4977                           	opt stack 0
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           intcon	equ	0xFF2
  4985                           intcon2	equ	0xFF1
  4986                           intcon3	equ	0xFF0
  4987                           postinc0	equ	0xFEE
  4988                           wreg	equ	0xFE8
  4989                           postdec1	equ	0xFE5
  4990                           plusw1	equ	0xFE3
  4991                           fsr1h	equ	0xFE2
  4992                           fsr1l	equ	0xFE1
  4993                           indf2	equ	0xFDF
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           plusw2	equ	0xFDB
  4997                           fsr2h	equ	0xFDA
  4998                           fsr2l	equ	0xFD9
  4999                           status	equ	0xFD8
  5000                           
  5001 ;; *************** function ___ftpack *****************
  5002 ;; Defined at:
  5003 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;  arg             3    0[COMRAM] unsigned um
  5006 ;;  exp             1    3[COMRAM] unsigned char 
  5007 ;;  sign            1    4[COMRAM] unsigned char 
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;		None
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  3    0[COMRAM] float 
  5012 ;; Registers used:
  5013 ;;		wreg, status,2, status,0
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5019 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;Total ram usage:        8 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; This function calls:
  5026 ;;		Nothing
  5027 ;; This function is called by:
  5028 ;;		___ftdiv
  5029 ;;		___ftmul
  5030 ;;		___lltoft
  5031 ;;		___lwtoft
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text14
  5036  002654                     __ptext14:
  5037                           	opt stack 0
  5038  002654                     ___ftpack:
  5039                           	opt stack 28
  5040                           
  5041                           ;incstack = 0
  5042  002654  5004               	movf	___ftpack@exp,w,c
  5043  002656  B4D8               	btfsc	status,2,c
  5044  002658  D005               	goto	l2456
  5045  00265A  5001               	movf	___ftpack@arg,w,c
  5046  00265C  1002               	iorwf	___ftpack@arg+1,w,c
  5047  00265E  1003               	iorwf	___ftpack@arg+2,w,c
  5048  002660  A4D8               	btfss	status,2,c
  5049  002662  D00C               	goto	l2462
  5050  002664                     l2456:
  5051  002664  0E00               	movlw	0
  5052  002666  6E01               	movwf	?___ftpack,c
  5053  002668  0E00               	movlw	0
  5054  00266A  6E02               	movwf	?___ftpack+1,c
  5055  00266C  0E00               	movlw	0
  5056  00266E  6E03               	movwf	?___ftpack+2,c
  5057  002670  0012               	return	
  5058  002672                     l2460:
  5059  002672  2A04               	incf	___ftpack@exp,f,c
  5060  002674  90D8               	bcf	status,0,c
  5061  002676  3203               	rrcf	___ftpack@arg+2,f,c
  5062  002678  3202               	rrcf	___ftpack@arg+1,f,c
  5063  00267A  3201               	rrcf	___ftpack@arg,f,c
  5064  00267C                     l2462:
  5065  00267C  0E00               	movlw	0
  5066  00267E  1401               	andwf	___ftpack@arg,w,c
  5067  002680  6E06               	movwf	??___ftpack& (0+255),c
  5068  002682  0E00               	movlw	0
  5069  002684  1402               	andwf	___ftpack@arg+1,w,c
  5070  002686  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5071  002688  0EFE               	movlw	254
  5072  00268A  1403               	andwf	___ftpack@arg+2,w,c
  5073  00268C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5074  00268E  5006               	movf	??___ftpack,w,c
  5075  002690  1007               	iorwf	??___ftpack+1,w,c
  5076  002692  1008               	iorwf	??___ftpack+2,w,c
  5077  002694  B4D8               	btfsc	status,2,c
  5078  002696  D00C               	goto	l2468
  5079  002698  D7EC               	goto	l2460
  5080  00269A                     l2464:
  5081  00269A  2A04               	incf	___ftpack@exp,f,c
  5082  00269C  0E01               	movlw	1
  5083  00269E  2601               	addwf	___ftpack@arg,f,c
  5084  0026A0  0E00               	movlw	0
  5085  0026A2  2202               	addwfc	___ftpack@arg+1,f,c
  5086  0026A4  0E00               	movlw	0
  5087  0026A6  2203               	addwfc	___ftpack@arg+2,f,c
  5088  0026A8  90D8               	bcf	status,0,c
  5089  0026AA  3203               	rrcf	___ftpack@arg+2,f,c
  5090  0026AC  3202               	rrcf	___ftpack@arg+1,f,c
  5091  0026AE  3201               	rrcf	___ftpack@arg,f,c
  5092  0026B0                     l2468:
  5093  0026B0  0E00               	movlw	0
  5094  0026B2  1401               	andwf	___ftpack@arg,w,c
  5095  0026B4  6E06               	movwf	??___ftpack& (0+255),c
  5096  0026B6  0E00               	movlw	0
  5097  0026B8  1402               	andwf	___ftpack@arg+1,w,c
  5098  0026BA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5099  0026BC  0EFF               	movlw	255
  5100  0026BE  1403               	andwf	___ftpack@arg+2,w,c
  5101  0026C0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5102  0026C2  5006               	movf	??___ftpack,w,c
  5103  0026C4  1007               	iorwf	??___ftpack+1,w,c
  5104  0026C6  1008               	iorwf	??___ftpack+2,w,c
  5105  0026C8  B4D8               	btfsc	status,2,c
  5106  0026CA  D006               	goto	l2472
  5107  0026CC  D7E6               	goto	l2464
  5108  0026CE                     l2470:
  5109  0026CE  0604               	decf	___ftpack@exp,f,c
  5110  0026D0  90D8               	bcf	status,0,c
  5111  0026D2  3601               	rlcf	___ftpack@arg,f,c
  5112  0026D4  3602               	rlcf	___ftpack@arg+1,f,c
  5113  0026D6  3603               	rlcf	___ftpack@arg+2,f,c
  5114  0026D8                     l2472:
  5115  0026D8  BE02               	btfsc	___ftpack@arg+1,7,c
  5116  0026DA  D003               	goto	l803
  5117  0026DC  0E02               	movlw	2
  5118  0026DE  6004               	cpfslt	___ftpack@exp,c
  5119  0026E0  D7F6               	goto	l2470
  5120  0026E2                     l803:
  5121  0026E2  A004               	btfss	___ftpack@exp,0,c
  5122  0026E4  9E02               	bcf	___ftpack@arg+1,7,c
  5123  0026E6  90D8               	bcf	status,0,c
  5124  0026E8  3204               	rrcf	___ftpack@exp,f,c
  5125  0026EA  5004               	movf	___ftpack@exp,w,c
  5126  0026EC  1203               	iorwf	___ftpack@arg+2,f,c
  5127  0026EE  5005               	movf	___ftpack@sign,w,c
  5128  0026F0  A4D8               	btfss	status,2,c
  5129  0026F2  8E03               	bsf	___ftpack@arg+2,7,c
  5130  0026F4  C001  F001         	movff	___ftpack@arg,?___ftpack
  5131  0026F8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5132  0026FC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5133  002700  0012               	return	
  5134  002702                     __end_of___ftpack:
  5135                           	opt stack 0
  5136                           tblptru	equ	0xFF8
  5137                           tblptrh	equ	0xFF7
  5138                           tblptrl	equ	0xFF6
  5139                           tablat	equ	0xFF5
  5140                           prodh	equ	0xFF4
  5141                           prodl	equ	0xFF3
  5142                           intcon	equ	0xFF2
  5143                           intcon2	equ	0xFF1
  5144                           intcon3	equ	0xFF0
  5145                           postinc0	equ	0xFEE
  5146                           wreg	equ	0xFE8
  5147                           postdec1	equ	0xFE5
  5148                           plusw1	equ	0xFE3
  5149                           fsr1h	equ	0xFE2
  5150                           fsr1l	equ	0xFE1
  5151                           indf2	equ	0xFDF
  5152                           postinc2	equ	0xFDE
  5153                           postdec2	equ	0xFDD
  5154                           plusw2	equ	0xFDB
  5155                           fsr2h	equ	0xFDA
  5156                           fsr2l	equ	0xFD9
  5157                           status	equ	0xFD8
  5158                           
  5159 ;; *************** function _initLCD *****************
  5160 ;; Defined at:
  5161 ;;		line 60 in file "../../src/CharacterLCD/lcd.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;		None
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;		None
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      void 
  5168 ;; Registers used:
  5169 ;;		wreg, status,2, status,0, cstack
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5177 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;Total ram usage:        1 bytes
  5180 ;; Hardware stack levels used:    1
  5181 ;; Hardware stack levels required when called:    2
  5182 ;; This function calls:
  5183 ;;		_lcdInst
  5184 ;; This function is called by:
  5185 ;;		_main
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text15
  5190  002BBC                     __ptext15:
  5191                           	opt stack 0
  5192  002BBC                     _initLCD:
  5193                           	opt stack 28
  5194                           
  5195                           ;lcd.c: 68: _delay((unsigned long)((15)*(40000000/4000.0)));
  5196                           
  5197                           ;incstack = 0
  5198  002BBC  0EC3               	movlw	195
  5199  002BBE  6E04               	movwf	??_initLCD& (0+255),c
  5200  002BC0  0ECD               	movlw	205
  5201  002BC2                     u3157:
  5202  002BC2  2EE8               	decfsz	wreg,f,c
  5203  002BC4  D7FE               	bra	u3157
  5204  002BC6  2E04               	decfsz	??_initLCD& (0+255),f,c
  5205  002BC8  D7FC               	bra	u3157
  5206  002BCA  F000               	nop	
  5207                           
  5208                           ;lcd.c: 69: lcdInst(0b00110011);
  5209  002BCC  0E33               	movlw	51
  5210  002BCE  EC0E  F017         	call	_lcdInst
  5211                           
  5212                           ;lcd.c: 70: lcdInst(0b00110010);
  5213  002BD2  0E32               	movlw	50
  5214  002BD4  EC0E  F017         	call	_lcdInst
  5215                           
  5216                           ;lcd.c: 71: lcdInst(0b00101000);
  5217  002BD8  0E28               	movlw	40
  5218  002BDA  EC0E  F017         	call	_lcdInst
  5219                           
  5220                           ;lcd.c: 72: lcdInst(0b00001111);
  5221  002BDE  0E0F               	movlw	15
  5222  002BE0  EC0E  F017         	call	_lcdInst
  5223                           
  5224                           ;lcd.c: 73: lcdInst(0b00000110);
  5225  002BE4  0E06               	movlw	6
  5226  002BE6  EC0E  F017         	call	_lcdInst
  5227                           
  5228                           ;lcd.c: 74: lcdInst(0x01);_delay((unsigned long)((15)*(40000000/4000.0)));;
  5229  002BEA  0E01               	movlw	1
  5230  002BEC  EC0E  F017         	call	_lcdInst
  5231  002BF0  0EC3               	movlw	195
  5232  002BF2  6E04               	movwf	??_initLCD& (0+255),c
  5233  002BF4  0ECD               	movlw	205
  5234  002BF6                     u3167:
  5235  002BF6  2EE8               	decfsz	wreg,f,c
  5236  002BF8  D7FE               	bra	u3167
  5237  002BFA  2E04               	decfsz	??_initLCD& (0+255),f,c
  5238  002BFC  D7FC               	bra	u3167
  5239  002BFE  F000               	nop	
  5240                           
  5241                           ;lcd.c: 77: lcdInst(8 | (1 << 2) | (1 << 1)| 1);;
  5242  002C00  0E0F               	movlw	15
  5243  002C02  EC0E  F017         	call	_lcdInst
  5244  002C06  0012               	return		;funcret
  5245  002C08                     __end_of_initLCD:
  5246                           	opt stack 0
  5247                           tblptru	equ	0xFF8
  5248                           tblptrh	equ	0xFF7
  5249                           tblptrl	equ	0xFF6
  5250                           tablat	equ	0xFF5
  5251                           prodh	equ	0xFF4
  5252                           prodl	equ	0xFF3
  5253                           intcon	equ	0xFF2
  5254                           intcon2	equ	0xFF1
  5255                           intcon3	equ	0xFF0
  5256                           postinc0	equ	0xFEE
  5257                           wreg	equ	0xFE8
  5258                           postdec1	equ	0xFE5
  5259                           plusw1	equ	0xFE3
  5260                           fsr1h	equ	0xFE2
  5261                           fsr1l	equ	0xFE1
  5262                           indf2	equ	0xFDF
  5263                           postinc2	equ	0xFDE
  5264                           postdec2	equ	0xFDD
  5265                           plusw2	equ	0xFDB
  5266                           fsr2h	equ	0xFDA
  5267                           fsr2l	equ	0xFD9
  5268                           status	equ	0xFD8
  5269                           
  5270 ;; *************** function _lcdInst *****************
  5271 ;; Defined at:
  5272 ;;		line 11 in file "../../src/CharacterLCD/lcd.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  data            1    wreg     unsigned char 
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;  data            1    2[COMRAM] unsigned char 
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  1    wreg      void 
  5279 ;; Registers used:
  5280 ;;		wreg, status,2, status,0, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5287 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5289 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;Total ram usage:        1 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; Hardware stack levels required when called:    1
  5293 ;; This function calls:
  5294 ;;		_lcdNibble
  5295 ;; This function is called by:
  5296 ;;		_initLCD
  5297 ;;		_lcd_set_cursor
  5298 ;;		_lcd_shift_cursor
  5299 ;;		_main
  5300 ;;		_lcd_shift_display
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text16
  5305  002E1C                     __ptext16:
  5306                           	opt stack 0
  5307  002E1C                     _lcdInst:
  5308                           	opt stack 27
  5309                           
  5310                           ;incstack = 0
  5311                           ;lcdInst@data stored from wreg
  5312  002E1C  6E03               	movwf	lcdInst@data,c
  5313                           
  5314                           ;lcd.c: 19: LATDbits.LATD2 = 0;
  5315  002E1E  948C               	bcf	3980,2,c	;volatile
  5316                           
  5317                           ;lcd.c: 20: lcdNibble(data);
  5318  002E20  5003               	movf	lcdInst@data,w,c
  5319  002E22  EC94  F014         	call	_lcdNibble
  5320                           
  5321                           ;lcd.c: 21: _delay((unsigned long)((100)*(40000000/4000000.0)));
  5322  002E26  0EC8               	movlw	200
  5323  002E28                     u3177:
  5324  002E28  D000               	nop2	
  5325  002E2A  2EE8               	decfsz	wreg,f,c
  5326  002E2C  D7FD               	bra	u3177
  5327  002E2E  0012               	return		;funcret
  5328  002E30                     __end_of_lcdInst:
  5329                           	opt stack 0
  5330                           tblptru	equ	0xFF8
  5331                           tblptrh	equ	0xFF7
  5332                           tblptrl	equ	0xFF6
  5333                           tablat	equ	0xFF5
  5334                           prodh	equ	0xFF4
  5335                           prodl	equ	0xFF3
  5336                           intcon	equ	0xFF2
  5337                           intcon2	equ	0xFF1
  5338                           intcon3	equ	0xFF0
  5339                           postinc0	equ	0xFEE
  5340                           wreg	equ	0xFE8
  5341                           postdec1	equ	0xFE5
  5342                           plusw1	equ	0xFE3
  5343                           fsr1h	equ	0xFE2
  5344                           fsr1l	equ	0xFE1
  5345                           indf2	equ	0xFDF
  5346                           postinc2	equ	0xFDE
  5347                           postdec2	equ	0xFDD
  5348                           plusw2	equ	0xFDB
  5349                           fsr2h	equ	0xFDA
  5350                           fsr2l	equ	0xFD9
  5351                           status	equ	0xFD8
  5352                           
  5353 ;; *************** function _lcdNibble *****************
  5354 ;; Defined at:
  5355 ;;		line 37 in file "../../src/CharacterLCD/lcd.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;  data            1    wreg     unsigned char 
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;  data            1    1[COMRAM] unsigned char 
  5360 ;;  temp            1    0[COMRAM] unsigned char 
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  1    wreg      void 
  5363 ;; Registers used:
  5364 ;;		wreg, status,2, status,0
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;Total ram usage:        2 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_lcdInst
  5380 ;;		_putch
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           	psect	text17
  5385  002928                     __ptext17:
  5386                           	opt stack 0
  5387  002928                     _lcdNibble:
  5388                           	opt stack 28
  5389                           
  5390                           ;incstack = 0
  5391                           ;lcdNibble@data stored from wreg
  5392  002928  6E02               	movwf	lcdNibble@data,c
  5393                           
  5394                           ;lcd.c: 45: char temp = (unsigned char) (data & 0xF0);
  5395  00292A  5002               	movf	lcdNibble@data,w,c
  5396  00292C  0BF0               	andlw	240
  5397  00292E  6E01               	movwf	lcdNibble@temp,c
  5398                           
  5399                           ;lcd.c: 46: LATD = (unsigned char) (LATD & 0x0F);
  5400  002930  508C               	movf	3980,w,c	;volatile
  5401  002932  0B0F               	andlw	15
  5402  002934  6E8C               	movwf	3980,c	;volatile
  5403                           
  5404                           ;lcd.c: 47: LATD = (unsigned char) (temp | LATD);
  5405  002936  5001               	movf	lcdNibble@temp,w,c
  5406  002938  108C               	iorwf	3980,w,c	;volatile
  5407  00293A  6E8C               	movwf	3980,c	;volatile
  5408                           
  5409                           ;lcd.c: 49: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5410  00293C  0E00               	movlw	0
  5411  00293E  BEF2               	btfsc	intcon,7,c	;volatile
  5412  002940  0E01               	movlw	1
  5413  002942  6E7F               	movwf	_LCDinterruptState,c
  5414  002944  9EF2               	bcf	intcon,7,c	;volatile
  5415  002946  868C               	bsf	3980,3,c	;volatile
  5416  002948  0E53               	movlw	83
  5417  00294A                     u3187:
  5418  00294A  2EE8               	decfsz	wreg,f,c
  5419  00294C  D7FE               	bra	u3187
  5420  00294E  F000               	nop	
  5421  002950  968C               	bcf	3980,3,c	;volatile
  5422  002952  0EC8               	movlw	200
  5423  002954                     u3197:
  5424  002954  D000               	nop2	
  5425  002956  2EE8               	decfsz	wreg,f,c
  5426  002958  D7FD               	bra	u3197
  5427  00295A  B07F               	btfsc	_LCDinterruptState,0,c
  5428  00295C  D002               	bra	u1495
  5429  00295E  9EF2               	bcf	intcon,7,c	;volatile
  5430  002960  D001               	bra	u1496
  5431  002962                     u1495:
  5432  002962  8EF2               	bsf	intcon,7,c	;volatile
  5433  002964                     u1496:
  5434                           
  5435                           ;lcd.c: 52: data = (unsigned char) (data << 4);
  5436  002964  3802               	swapf	lcdNibble@data,w,c
  5437  002966  0BF0               	andlw	240
  5438  002968  6E02               	movwf	lcdNibble@data,c
  5439                           
  5440                           ;lcd.c: 53: temp = (unsigned char) (data & 0xF0);
  5441  00296A  5002               	movf	lcdNibble@data,w,c
  5442  00296C  0BF0               	andlw	240
  5443  00296E  6E01               	movwf	lcdNibble@temp,c
  5444                           
  5445                           ;lcd.c: 54: LATD = (unsigned char) (LATD & 0x0F);
  5446  002970  508C               	movf	3980,w,c	;volatile
  5447  002972  0B0F               	andlw	15
  5448  002974  6E8C               	movwf	3980,c	;volatile
  5449                           
  5450                           ;lcd.c: 55: LATD = (unsigned char) (temp | LATD);
  5451  002976  5001               	movf	lcdNibble@temp,w,c
  5452  002978  108C               	iorwf	3980,w,c	;volatile
  5453  00297A  6E8C               	movwf	3980,c	;volatile
  5454                           
  5455                           ;lcd.c: 57: { LCDinterruptState = INTCONbits.GIE; (INTCONbits.GIE = 0); LATDbits.LATD3 =
      +                           1; _delay((unsigned long)((25)*(40000000/4000000.0))); LATDbits.LATD3 = 0; _delay((unsi
      +                          gned long)((100)*(40000000/4000000.0))); INTCONbits.GIE = LCDinterruptState;};
  5456  00297C  0E00               	movlw	0
  5457  00297E  BEF2               	btfsc	intcon,7,c	;volatile
  5458  002980  0E01               	movlw	1
  5459  002982  6E7F               	movwf	_LCDinterruptState,c
  5460  002984  9EF2               	bcf	intcon,7,c	;volatile
  5461  002986  868C               	bsf	3980,3,c	;volatile
  5462  002988  0E53               	movlw	83
  5463  00298A                     u3207:
  5464  00298A  2EE8               	decfsz	wreg,f,c
  5465  00298C  D7FE               	bra	u3207
  5466  00298E  F000               	nop	
  5467  002990  968C               	bcf	3980,3,c	;volatile
  5468  002992  0EC8               	movlw	200
  5469  002994                     u3217:
  5470  002994  D000               	nop2	
  5471  002996  2EE8               	decfsz	wreg,f,c
  5472  002998  D7FD               	bra	u3217
  5473  00299A  B07F               	btfsc	_LCDinterruptState,0,c
  5474  00299C  D002               	bra	u1505
  5475  00299E  9EF2               	bcf	intcon,7,c	;volatile
  5476  0029A0  D001               	bra	u1506
  5477  0029A2                     u1505:
  5478  0029A2  8EF2               	bsf	intcon,7,c	;volatile
  5479  0029A4                     u1506:
  5480  0029A4  0012               	return		;funcret
  5481  0029A6                     __end_of_lcdNibble:
  5482                           	opt stack 0
  5483                           tblptru	equ	0xFF8
  5484                           tblptrh	equ	0xFF7
  5485                           tblptrl	equ	0xFF6
  5486                           tablat	equ	0xFF5
  5487                           prodh	equ	0xFF4
  5488                           prodl	equ	0xFF3
  5489                           intcon	equ	0xFF2
  5490                           intcon2	equ	0xFF1
  5491                           intcon3	equ	0xFF0
  5492                           postinc0	equ	0xFEE
  5493                           wreg	equ	0xFE8
  5494                           postdec1	equ	0xFE5
  5495                           plusw1	equ	0xFE3
  5496                           fsr1h	equ	0xFE2
  5497                           fsr1l	equ	0xFE1
  5498                           indf2	equ	0xFDF
  5499                           postinc2	equ	0xFDE
  5500                           postdec2	equ	0xFDD
  5501                           plusw2	equ	0xFDB
  5502                           fsr2h	equ	0xFDA
  5503                           fsr2l	equ	0xFD9
  5504                           status	equ	0xFD8
  5505                           
  5506 ;; *************** function _average *****************
  5507 ;; Defined at:
  5508 ;;		line 31 in file "main.c"
  5509 ;; Parameters:    Size  Location     Type
  5510 ;;  array           2   13[COMRAM] PTR unsigned char 
  5511 ;;		 -> main@readBuffer(512), 
  5512 ;;  numElements     2   15[COMRAM] unsigned short 
  5513 ;; Auto vars:     Size  Location     Type
  5514 ;;  sum             4   18[COMRAM] unsigned long 
  5515 ;;  n               2   22[COMRAM] unsigned short 
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  1    wreg      unsigned char 
  5518 ;; Registers used:
  5519 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5525 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5526 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5527 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5528 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5529 ;;Total ram usage:       11 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    1
  5532 ;; This function calls:
  5533 ;;		___lldiv
  5534 ;; This function is called by:
  5535 ;;		_main
  5536 ;; This function uses a non-reentrant model
  5537 ;;
  5538                           
  5539                           	psect	text18
  5540  002A90                     __ptext18:
  5541                           	opt stack 0
  5542  002A90                     _average:
  5543                           	opt stack 29
  5544                           
  5545                           ;main.c: 41: unsigned short n = 0;
  5546                           
  5547                           ;incstack = 0
  5548  002A90  0E00               	movlw	0
  5549  002A92  6E18               	movwf	average@n+1,c
  5550  002A94  0E00               	movlw	0
  5551  002A96  6E17               	movwf	average@n,c
  5552                           
  5553                           ;main.c: 42: unsigned long sum = 0;
  5554  002A98  0E00               	movlw	0
  5555  002A9A  6E13               	movwf	average@sum,c
  5556  002A9C  0E00               	movlw	0
  5557  002A9E  6E14               	movwf	average@sum+1,c
  5558  002AA0  0E00               	movlw	0
  5559  002AA2  6E15               	movwf	average@sum+2,c
  5560  002AA4  0E00               	movlw	0
  5561  002AA6  6E16               	movwf	average@sum+3,c
  5562                           
  5563                           ;main.c: 43: while(n < numElements){
  5564  002AA8  D010               	goto	l3220
  5565  002AAA                     l3216:
  5566                           
  5567                           ;main.c: 44: sum += array[n];
  5568  002AAA  5017               	movf	average@n,w,c
  5569  002AAC  240E               	addwf	average@array,w,c
  5570  002AAE  6ED9               	movwf	fsr2l,c
  5571  002AB0  5018               	movf	average@n+1,w,c
  5572  002AB2  200F               	addwfc	average@array+1,w,c
  5573  002AB4  6EDA               	movwf	fsr2h,c
  5574  002AB6  50DF               	movf	indf2,w,c
  5575  002AB8  6E12               	movwf	??_average& (0+255),c
  5576  002ABA  5012               	movf	??_average,w,c
  5577  002ABC  2613               	addwf	average@sum,f,c
  5578  002ABE  0E00               	movlw	0
  5579  002AC0  2214               	addwfc	average@sum+1,f,c
  5580  002AC2  2215               	addwfc	average@sum+2,f,c
  5581  002AC4  2216               	addwfc	average@sum+3,f,c
  5582                           
  5583                           ;main.c: 45: n++;
  5584  002AC6  4A17               	infsnz	average@n,f,c
  5585  002AC8  2A18               	incf	average@n+1,f,c
  5586  002ACA                     l3220:
  5587  002ACA  5010               	movf	average@numElements,w,c
  5588  002ACC  5C17               	subwf	average@n,w,c
  5589  002ACE  5011               	movf	average@numElements+1,w,c
  5590  002AD0  5818               	subwfb	average@n+1,w,c
  5591  002AD2  A0D8               	btfss	status,0,c
  5592  002AD4  D7EA               	goto	l3216
  5593                           
  5594                           ;main.c: 46: }
  5595                           ;main.c: 47: return sum / numElements;
  5596  002AD6  C013  F001         	movff	average@sum,___lldiv@dividend
  5597  002ADA  C014  F002         	movff	average@sum+1,___lldiv@dividend+1
  5598  002ADE  C015  F003         	movff	average@sum+2,___lldiv@dividend+2
  5599  002AE2  C016  F004         	movff	average@sum+3,___lldiv@dividend+3
  5600  002AE6  C010  F005         	movff	average@numElements,___lldiv@divisor
  5601  002AEA  C011  F006         	movff	average@numElements+1,___lldiv@divisor+1
  5602  002AEE  6A07               	clrf	___lldiv@divisor+2,c
  5603  002AF0  6A08               	clrf	___lldiv@divisor+3,c
  5604  002AF2  EC53  F014         	call	___lldiv	;wreg free
  5605  002AF6  5001               	movf	?___lldiv,w,c
  5606  002AF8  0012               	return	
  5607  002AFA                     __end_of_average:
  5608                           	opt stack 0
  5609                           tblptru	equ	0xFF8
  5610                           tblptrh	equ	0xFF7
  5611                           tblptrl	equ	0xFF6
  5612                           tablat	equ	0xFF5
  5613                           prodh	equ	0xFF4
  5614                           prodl	equ	0xFF3
  5615                           intcon	equ	0xFF2
  5616                           intcon2	equ	0xFF1
  5617                           intcon3	equ	0xFF0
  5618                           postinc0	equ	0xFEE
  5619                           wreg	equ	0xFE8
  5620                           postdec1	equ	0xFE5
  5621                           plusw1	equ	0xFE3
  5622                           fsr1h	equ	0xFE2
  5623                           fsr1l	equ	0xFE1
  5624                           indf2	equ	0xFDF
  5625                           postinc2	equ	0xFDE
  5626                           postdec2	equ	0xFDD
  5627                           plusw2	equ	0xFDB
  5628                           fsr2h	equ	0xFDA
  5629                           fsr2l	equ	0xFD9
  5630                           status	equ	0xFD8
  5631                           
  5632 ;; *************** function ___lldiv *****************
  5633 ;; Defined at:
  5634 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  5635 ;; Parameters:    Size  Location     Type
  5636 ;;  dividend        4    0[COMRAM] unsigned long 
  5637 ;;  divisor         4    4[COMRAM] unsigned long 
  5638 ;; Auto vars:     Size  Location     Type
  5639 ;;  quotient        4    8[COMRAM] unsigned long 
  5640 ;;  counter         1   12[COMRAM] unsigned char 
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  4    0[COMRAM] unsigned long 
  5643 ;; Registers used:
  5644 ;;		wreg, status,2, status,0
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5650 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5653 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;Total ram usage:       13 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; This function calls:
  5657 ;;		Nothing
  5658 ;; This function is called by:
  5659 ;;		_average
  5660 ;;		_main
  5661 ;;		_printf
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           	psect	text19
  5666  0028A6                     __ptext19:
  5667                           	opt stack 0
  5668  0028A6                     ___lldiv:
  5669                           	opt stack 29
  5670                           
  5671                           ;incstack = 0
  5672  0028A6  0E00               	movlw	0
  5673  0028A8  6E09               	movwf	___lldiv@quotient,c
  5674  0028AA  0E00               	movlw	0
  5675  0028AC  6E0A               	movwf	___lldiv@quotient+1,c
  5676  0028AE  0E00               	movlw	0
  5677  0028B0  6E0B               	movwf	___lldiv@quotient+2,c
  5678  0028B2  0E00               	movlw	0
  5679  0028B4  6E0C               	movwf	___lldiv@quotient+3,c
  5680  0028B6  5005               	movf	___lldiv@divisor,w,c
  5681  0028B8  1006               	iorwf	___lldiv@divisor+1,w,c
  5682  0028BA  1007               	iorwf	___lldiv@divisor+2,w,c
  5683  0028BC  1008               	iorwf	___lldiv@divisor+3,w,c
  5684  0028BE  B4D8               	btfsc	status,2,c
  5685  0028C0  D02A               	goto	l928
  5686  0028C2  0E01               	movlw	1
  5687  0028C4  6E0D               	movwf	___lldiv@counter,c
  5688  0028C6  D006               	goto	l2680
  5689  0028C8                     l2678:
  5690  0028C8  90D8               	bcf	status,0,c
  5691  0028CA  3605               	rlcf	___lldiv@divisor,f,c
  5692  0028CC  3606               	rlcf	___lldiv@divisor+1,f,c
  5693  0028CE  3607               	rlcf	___lldiv@divisor+2,f,c
  5694  0028D0  3608               	rlcf	___lldiv@divisor+3,f,c
  5695  0028D2  2A0D               	incf	___lldiv@counter,f,c
  5696  0028D4                     l2680:
  5697  0028D4  AE08               	btfss	___lldiv@divisor+3,7,c
  5698  0028D6  D7F8               	goto	l2678
  5699  0028D8                     l2682:
  5700  0028D8  90D8               	bcf	status,0,c
  5701  0028DA  3609               	rlcf	___lldiv@quotient,f,c
  5702  0028DC  360A               	rlcf	___lldiv@quotient+1,f,c
  5703  0028DE  360B               	rlcf	___lldiv@quotient+2,f,c
  5704  0028E0  360C               	rlcf	___lldiv@quotient+3,f,c
  5705  0028E2  5005               	movf	___lldiv@divisor,w,c
  5706  0028E4  5C01               	subwf	___lldiv@dividend,w,c
  5707  0028E6  5006               	movf	___lldiv@divisor+1,w,c
  5708  0028E8  5802               	subwfb	___lldiv@dividend+1,w,c
  5709  0028EA  5007               	movf	___lldiv@divisor+2,w,c
  5710  0028EC  5803               	subwfb	___lldiv@dividend+2,w,c
  5711  0028EE  5008               	movf	___lldiv@divisor+3,w,c
  5712  0028F0  5804               	subwfb	___lldiv@dividend+3,w,c
  5713  0028F2  A0D8               	btfss	status,0,c
  5714  0028F4  D009               	goto	l2690
  5715  0028F6  5005               	movf	___lldiv@divisor,w,c
  5716  0028F8  5E01               	subwf	___lldiv@dividend,f,c
  5717  0028FA  5006               	movf	___lldiv@divisor+1,w,c
  5718  0028FC  5A02               	subwfb	___lldiv@dividend+1,f,c
  5719  0028FE  5007               	movf	___lldiv@divisor+2,w,c
  5720  002900  5A03               	subwfb	___lldiv@dividend+2,f,c
  5721  002902  5008               	movf	___lldiv@divisor+3,w,c
  5722  002904  5A04               	subwfb	___lldiv@dividend+3,f,c
  5723  002906  8009               	bsf	___lldiv@quotient,0,c
  5724  002908                     l2690:
  5725  002908  90D8               	bcf	status,0,c
  5726  00290A  3208               	rrcf	___lldiv@divisor+3,f,c
  5727  00290C  3207               	rrcf	___lldiv@divisor+2,f,c
  5728  00290E  3206               	rrcf	___lldiv@divisor+1,f,c
  5729  002910  3205               	rrcf	___lldiv@divisor,f,c
  5730  002912  2E0D               	decfsz	___lldiv@counter,f,c
  5731  002914  D7E1               	goto	l2682
  5732  002916                     l928:
  5733  002916  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5734  00291A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5735  00291E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5736  002922  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5737  002926  0012               	return		;funcret
  5738  002928                     __end_of___lldiv:
  5739                           	opt stack 0
  5740                           tblptru	equ	0xFF8
  5741                           tblptrh	equ	0xFF7
  5742                           tblptrl	equ	0xFF6
  5743                           tablat	equ	0xFF5
  5744                           prodh	equ	0xFF4
  5745                           prodl	equ	0xFF3
  5746                           intcon	equ	0xFF2
  5747                           intcon2	equ	0xFF1
  5748                           intcon3	equ	0xFF0
  5749                           postinc0	equ	0xFEE
  5750                           wreg	equ	0xFE8
  5751                           postdec1	equ	0xFE5
  5752                           plusw1	equ	0xFE3
  5753                           fsr1h	equ	0xFE2
  5754                           fsr1l	equ	0xFE1
  5755                           indf2	equ	0xFDF
  5756                           postinc2	equ	0xFDE
  5757                           postdec2	equ	0xFDD
  5758                           plusw2	equ	0xFDB
  5759                           fsr2h	equ	0xFDA
  5760                           fsr2l	equ	0xFD9
  5761                           status	equ	0xFD8
  5762                           
  5763 ;; *************** function _SD_SingleBlockWrite *****************
  5764 ;; Defined at:
  5765 ;;		line 104 in file "../../src/SD/SD_PIC.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;  block           4   12[COMRAM] unsigned long 
  5768 ;;  arr             2   16[COMRAM] PTR unsigned char 
  5769 ;;		 -> writeBuffer(512), 
  5770 ;; Auto vars:     Size  Location     Type
  5771 ;;  i               2   20[COMRAM] unsigned short 
  5772 ;;  response        1   19[COMRAM] unsigned char 
  5773 ;; Return value:  Size  Location     Type
  5774 ;;                  1    wreg      unsigned char 
  5775 ;; Registers used:
  5776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5777 ;; Tracked objects:
  5778 ;;		On entry : 0/0
  5779 ;;		On exit  : 0/0
  5780 ;;		Unchanged: 0/0
  5781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5782 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5784 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5785 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5786 ;;Total ram usage:       10 bytes
  5787 ;; Hardware stack levels used:    1
  5788 ;; Hardware stack levels required when called:    3
  5789 ;; This function calls:
  5790 ;;		_SD_Command
  5791 ;;		_SD_SendDummyBytes
  5792 ;;		_spiReceive
  5793 ;;		_spiSend
  5794 ;;		_spiTransfer
  5795 ;; This function is called by:
  5796 ;;		_main
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text20
  5801  0024BA                     __ptext20:
  5802                           	opt stack 0
  5803  0024BA                     _SD_SingleBlockWrite:
  5804                           	opt stack 27
  5805                           
  5806                           ;SD_PIC.c: 118: if(SDCard.Type == 0){ block <<= 9; }
  5807                           
  5808                           ;incstack = 0
  5809  0024BA  0100               	movlb	0	; () banked
  5810  0024BC  5181               	movf	(_SDCard+1)& (0+255),w,b
  5811  0024BE  A4D8               	btfss	status,2,c
  5812  0024C0  D008               	goto	l2760
  5813                           
  5814                           ; BSR set to: 0
  5815  0024C2  0E09               	movlw	9
  5816  0024C4                     u1965:
  5817  0024C4  90D8               	bcf	status,0,c
  5818  0024C6  360D               	rlcf	SD_SingleBlockWrite@block,f,c
  5819  0024C8  360E               	rlcf	SD_SingleBlockWrite@block+1,f,c
  5820  0024CA  360F               	rlcf	SD_SingleBlockWrite@block+2,f,c
  5821  0024CC  3610               	rlcf	SD_SingleBlockWrite@block+3,f,c
  5822  0024CE  2EE8               	decfsz	wreg,f,c
  5823  0024D0  D7F9               	goto	u1965
  5824  0024D2                     l2760:
  5825  0024D2  C00D  F004         	movff	SD_SingleBlockWrite@block,SD_Command@arg
  5826  0024D6  C00E  F005         	movff	SD_SingleBlockWrite@block+1,SD_Command@arg+1
  5827  0024DA  C00F  F006         	movff	SD_SingleBlockWrite@block+2,SD_Command@arg+2
  5828  0024DE  C010  F007         	movff	SD_SingleBlockWrite@block+3,SD_Command@arg+3
  5829  0024E2  0E38               	movlw	low _CMD24
  5830  0024E4  6EF6               	movwf	tblptrl,c
  5831  0024E6                     	if	1	;There is more than 1 active tblptr byte
  5832  0024E6  0E10               	movlw	high _CMD24
  5833  0024E8  6EF7               	movwf	tblptrh,c
  5834  0024EA                     	endif
  5835  0024EA                     	if	0	;There are less than 3 active tblptr bytes
  5836  0024EA                     	endif
  5837  0024EA  0008               	tblrd		*
  5838  0024EC  50F5               	movf	tablat,w,c
  5839  0024EE  EC81  F013         	call	_SD_Command
  5840  0024F2  6E13               	movwf	??_SD_SingleBlockWrite& (0+255),c
  5841  0024F4  0E2E               	movlw	low _R1_READY_STATE
  5842  0024F6  6EF6               	movwf	tblptrl,c
  5843  0024F8                     	if	1	;There is more than 1 active tblptr byte
  5844  0024F8  0E10               	movlw	high _R1_READY_STATE
  5845  0024FA  6EF7               	movwf	tblptrh,c
  5846  0024FC                     	endif
  5847  0024FC                     	if	0	;There are less than 3 active tblptr bytes
  5848  0024FC                     	endif
  5849  0024FC  0008               	tblrd		*
  5850  0024FE  50F5               	movf	tablat,w,c
  5851  002500  1813               	xorwf	??_SD_SingleBlockWrite,w,c
  5852  002502  A4D8               	btfss	status,2,c
  5853  002504  D7E6               	goto	l2760
  5854                           
  5855                           ;SD_PIC.c: 124: LATEbits.LATE2 = 0;
  5856  002506  948D               	bcf	3981,2,c	;volatile
  5857                           
  5858                           ;SD_PIC.c: 125: spiSend(START_BLOCK);
  5859  002508  0E2B               	movlw	low _START_BLOCK
  5860  00250A  6EF6               	movwf	tblptrl,c
  5861  00250C                     	if	1	;There is more than 1 active tblptr byte
  5862  00250C  0E10               	movlw	high _START_BLOCK
  5863  00250E  6EF7               	movwf	tblptrh,c
  5864  002510                     	endif
  5865  002510                     	if	0	;There are less than 3 active tblptr bytes
  5866  002510                     	endif
  5867  002510  0008               	tblrd		*
  5868  002512  50F5               	movf	tablat,w,c
  5869  002514  EC18  F017         	call	_spiSend
  5870                           
  5871                           ;SD_PIC.c: 128: for(unsigned short i = 0; i < 512; i++){
  5872  002518  0E00               	movlw	0
  5873  00251A  6E16               	movwf	SD_SingleBlockWrite@i+1,c
  5874  00251C  0E00               	movlw	0
  5875  00251E  6E15               	movwf	SD_SingleBlockWrite@i,c
  5876  002520                     l2766:
  5877  002520  0E02               	movlw	2
  5878  002522  5C16               	subwf	SD_SingleBlockWrite@i+1,w,c
  5879  002524  B0D8               	btfsc	status,0,c
  5880  002526  D00C               	goto	l2776
  5881                           
  5882                           ;SD_PIC.c: 129: spiTransfer(arr[i]);
  5883  002528  5015               	movf	SD_SingleBlockWrite@i,w,c
  5884  00252A  2411               	addwf	SD_SingleBlockWrite@arr,w,c
  5885  00252C  6ED9               	movwf	fsr2l,c
  5886  00252E  5016               	movf	SD_SingleBlockWrite@i+1,w,c
  5887  002530  2012               	addwfc	SD_SingleBlockWrite@arr+1,w,c
  5888  002532  6EDA               	movwf	fsr2h,c
  5889  002534  50DF               	movf	indf2,w,c
  5890  002536  ECD8  F016         	call	_spiTransfer
  5891  00253A  4A15               	infsnz	SD_SingleBlockWrite@i,f,c
  5892  00253C  2A16               	incf	SD_SingleBlockWrite@i+1,f,c
  5893  00253E  D7F0               	goto	l2766
  5894  002540                     l2776:
  5895                           
  5896                           ;SD_PIC.c: 130: }
  5897                           ;SD_PIC.c: 133: SD_SendDummyBytes(2);
  5898  002540  0E02               	movlw	2
  5899  002542  ECF8  F016         	call	_SD_SendDummyBytes
  5900                           
  5901                           ;SD_PIC.c: 136: unsigned char response = (spiReceive() >> 1) & 0x0F;
  5902  002546  EC1D  F017         	call	_spiReceive	;wreg free
  5903  00254A  6E13               	movwf	??_SD_SingleBlockWrite& (0+255),c
  5904  00254C  90D8               	bcf	status,0,c
  5905  00254E  3013               	rrcf	??_SD_SingleBlockWrite,w,c
  5906  002550  0B0F               	andlw	15
  5907  002552  6E14               	movwf	SD_SingleBlockWrite@response,c
  5908                           
  5909                           ;SD_PIC.c: 137: LATEbits.LATE2 = 1;
  5910  002554  848D               	bsf	3981,2,c	;volatile
  5911                           
  5912                           ;SD_PIC.c: 138: switch(response){
  5913  002556  D015               	goto	l2800
  5914  002558                     l173:
  5915                           
  5916                           ;SD_PIC.c: 143: SDCard.write.lastBlockWritten = block;
  5917  002558  C00D  F09C         	movff	SD_SingleBlockWrite@block,_SDCard+28
  5918  00255C  C00E  F09D         	movff	SD_SingleBlockWrite@block+1,_SDCard+29
  5919  002560  C00F  F09E         	movff	SD_SingleBlockWrite@block+2,_SDCard+30
  5920  002564  C010  F09F         	movff	SD_SingleBlockWrite@block+3,_SDCard+31
  5921  002568                     l2780:
  5922  002568  EC1D  F017         	call	_spiReceive	;wreg free
  5923  00256C  0900               	iorlw	0
  5924  00256E  B4D8               	btfsc	status,2,c
  5925  002570  D7FB               	goto	l2780
  5926                           
  5927                           ;SD_PIC.c: 147: return 1;
  5928  002572  0E01               	movlw	1
  5929  002574  0012               	return	
  5930  002576                     l2786:
  5931                           
  5932                           ;SD_PIC.c: 150: return 0;
  5933  002576  0E00               	movlw	0
  5934  002578  0012               	return	
  5935  00257A                     l2790:
  5936                           
  5937                           ;SD_PIC.c: 153: return 0;
  5938  00257A  0E00               	movlw	0
  5939  00257C  0012               	return	
  5940  00257E                     l2794:
  5941                           
  5942                           ;SD_PIC.c: 155: return 0;
  5943  00257E  0E00               	movlw	0
  5944                           
  5945                           ;SD_PIC.c: 156: }
  5946  002580  0012               	return	
  5947  002582                     l2800:
  5948  002582  5014               	movf	SD_SingleBlockWrite@response,w,c
  5949                           
  5950                           ; Switch size 1, requested type "space"
  5951                           ; Number of cases is 3, Range of values is 2 to 6
  5952                           ; switch strategies available:
  5953                           ; Name         Instructions Cycles
  5954                           ; simple_byte           10     6 (average)
  5955                           ;	Chosen strategy is simple_byte
  5956  002584  0A02               	xorlw	2	; case 2
  5957  002586  B4D8               	btfsc	status,2,c
  5958  002588  D7E7               	goto	l173
  5959  00258A  0A07               	xorlw	7	; case 5
  5960  00258C  B4D8               	btfsc	status,2,c
  5961  00258E  D7F3               	goto	l2786
  5962  002590  0A03               	xorlw	3	; case 6
  5963  002592  B4D8               	btfsc	status,2,c
  5964  002594  D7F2               	goto	l2790
  5965  002596  D7F3               	goto	l2794
  5966  002598                     __end_of_SD_SingleBlockWrite:
  5967                           	opt stack 0
  5968                           tblptru	equ	0xFF8
  5969                           tblptrh	equ	0xFF7
  5970                           tblptrl	equ	0xFF6
  5971                           tablat	equ	0xFF5
  5972                           prodh	equ	0xFF4
  5973                           prodl	equ	0xFF3
  5974                           intcon	equ	0xFF2
  5975                           intcon2	equ	0xFF1
  5976                           intcon3	equ	0xFF0
  5977                           postinc0	equ	0xFEE
  5978                           wreg	equ	0xFE8
  5979                           postdec1	equ	0xFE5
  5980                           plusw1	equ	0xFE3
  5981                           fsr1h	equ	0xFE2
  5982                           fsr1l	equ	0xFE1
  5983                           indf2	equ	0xFDF
  5984                           postinc2	equ	0xFDE
  5985                           postdec2	equ	0xFDD
  5986                           plusw2	equ	0xFDB
  5987                           fsr2h	equ	0xFDA
  5988                           fsr2l	equ	0xFD9
  5989                           status	equ	0xFD8
  5990                           
  5991 ;; *************** function _SD_SingleBlockRead *****************
  5992 ;; Defined at:
  5993 ;;		line 278 in file "../../src/SD/SD_PIC.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;  block           4   12[COMRAM] unsigned long 
  5996 ;;  buf             2   16[COMRAM] PTR unsigned char 
  5997 ;;		 -> main@readBuffer(512), 
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;  i               2   19[COMRAM] unsigned short 
  6000 ;;  response        1   21[COMRAM] unsigned char 
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  1    wreg      unsigned char 
  6003 ;; Registers used:
  6004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6010 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6012 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6013 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6014 ;;Total ram usage:       10 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    3
  6017 ;; This function calls:
  6018 ;;		_SD_Command
  6019 ;;		_spiReceive
  6020 ;;		_spiSend
  6021 ;; This function is called by:
  6022 ;;		_main
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           	psect	text21
  6027  002598                     __ptext21:
  6028                           	opt stack 0
  6029  002598                     _SD_SingleBlockRead:
  6030                           	opt stack 27
  6031                           
  6032                           ;SD_PIC.c: 293: if(SDCard.Type == 0){ block <<= 9; }
  6033                           
  6034                           ;incstack = 0
  6035  002598  0100               	movlb	0	; () banked
  6036  00259A  5181               	movf	(_SDCard+1)& (0+255),w,b
  6037  00259C  A4D8               	btfss	status,2,c
  6038  00259E  D008               	goto	l2880
  6039                           
  6040                           ; BSR set to: 0
  6041  0025A0  0E09               	movlw	9
  6042  0025A2                     u2125:
  6043  0025A2  90D8               	bcf	status,0,c
  6044  0025A4  360D               	rlcf	SD_SingleBlockRead@block,f,c
  6045  0025A6  360E               	rlcf	SD_SingleBlockRead@block+1,f,c
  6046  0025A8  360F               	rlcf	SD_SingleBlockRead@block+2,f,c
  6047  0025AA  3610               	rlcf	SD_SingleBlockRead@block+3,f,c
  6048  0025AC  2EE8               	decfsz	wreg,f,c
  6049  0025AE  D7F9               	goto	u2125
  6050  0025B0                     l2880:
  6051                           
  6052                           ;SD_PIC.c: 299: response = SD_Command(CMD17, block);
  6053  0025B0  C00D  F004         	movff	SD_SingleBlockRead@block,SD_Command@arg
  6054  0025B4  C00E  F005         	movff	SD_SingleBlockRead@block+1,SD_Command@arg+1
  6055  0025B8  C00F  F006         	movff	SD_SingleBlockRead@block+2,SD_Command@arg+2
  6056  0025BC  C010  F007         	movff	SD_SingleBlockRead@block+3,SD_Command@arg+3
  6057  0025C0  0E3A               	movlw	low _CMD17
  6058  0025C2  6EF6               	movwf	tblptrl,c
  6059  0025C4                     	if	1	;There is more than 1 active tblptr byte
  6060  0025C4  0E10               	movlw	high _CMD17
  6061  0025C6  6EF7               	movwf	tblptrh,c
  6062  0025C8                     	endif
  6063  0025C8                     	if	0	;There are less than 3 active tblptr bytes
  6064  0025C8                     	endif
  6065  0025C8  0008               	tblrd		*
  6066  0025CA  50F5               	movf	tablat,w,c
  6067  0025CC  EC81  F013         	call	_SD_Command
  6068  0025D0  6E16               	movwf	SD_SingleBlockRead@response,c
  6069                           
  6070                           ;SD_PIC.c: 300: if((response & 0x0F) != 0){
  6071  0025D2  C016  F013         	movff	SD_SingleBlockRead@response,??_SD_SingleBlockRead
  6072  0025D6  0E0F               	movlw	15
  6073  0025D8  1613               	andwf	??_SD_SingleBlockRead,f,c
  6074  0025DA  B4D8               	btfsc	status,2,c
  6075  0025DC  D002               	goto	l2888
  6076                           
  6077                           ;SD_PIC.c: 306: return 0;
  6078  0025DE  0E00               	movlw	0
  6079  0025E0  0012               	return	
  6080  0025E2                     l2888:
  6081                           
  6082                           ;SD_PIC.c: 307: }
  6083                           ;SD_PIC.c: 308: }while(response != R1_READY_STATE);
  6084  0025E2  0E2E               	movlw	low _R1_READY_STATE
  6085  0025E4  6EF6               	movwf	tblptrl,c
  6086  0025E6                     	if	1	;There is more than 1 active tblptr byte
  6087  0025E6  0E10               	movlw	high _R1_READY_STATE
  6088  0025E8  6EF7               	movwf	tblptrh,c
  6089  0025EA                     	endif
  6090  0025EA                     	if	0	;There are less than 3 active tblptr bytes
  6091  0025EA                     	endif
  6092  0025EA  0008               	tblrd		*
  6093  0025EC  50F5               	movf	tablat,w,c
  6094  0025EE  6216               	cpfseq	SD_SingleBlockRead@response,c
  6095  0025F0  D7DF               	goto	l2880
  6096                           
  6097                           ;SD_PIC.c: 311: LATEbits.LATE2 = 0;
  6098  0025F2  948D               	bcf	3981,2,c	;volatile
  6099  0025F4                     l2890:
  6100                           
  6101                           ;SD_PIC.c: 313: response = spiReceive();
  6102  0025F4  EC1D  F017         	call	_spiReceive	;wreg free
  6103  0025F8  6E16               	movwf	SD_SingleBlockRead@response,c
  6104                           
  6105                           ;SD_PIC.c: 314: }while(response != START_BLOCK);
  6106  0025FA  0E2B               	movlw	low _START_BLOCK
  6107  0025FC  6EF6               	movwf	tblptrl,c
  6108  0025FE                     	if	1	;There is more than 1 active tblptr byte
  6109  0025FE  0E10               	movlw	high _START_BLOCK
  6110  002600  6EF7               	movwf	tblptrh,c
  6111  002602                     	endif
  6112  002602                     	if	0	;There are less than 3 active tblptr bytes
  6113  002602                     	endif
  6114  002602  0008               	tblrd		*
  6115  002604  50F5               	movf	tablat,w,c
  6116  002606  6216               	cpfseq	SD_SingleBlockRead@response,c
  6117  002608  D7F5               	goto	l2890
  6118                           
  6119                           ;SD_PIC.c: 317: for(unsigned short i = 0; i < 512; i++){
  6120  00260A  0E00               	movlw	0
  6121  00260C  6E15               	movwf	SD_SingleBlockRead@i+1,c
  6122  00260E  0E00               	movlw	0
  6123  002610  6E14               	movwf	SD_SingleBlockRead@i,c
  6124  002612                     l2896:
  6125  002612  0E02               	movlw	2
  6126  002614  5C15               	subwf	SD_SingleBlockRead@i+1,w,c
  6127  002616  B0D8               	btfsc	status,0,c
  6128  002618  D00C               	goto	l2906
  6129                           
  6130                           ;SD_PIC.c: 318: buf[i] = spiReceive();
  6131  00261A  5014               	movf	SD_SingleBlockRead@i,w,c
  6132  00261C  2411               	addwf	SD_SingleBlockRead@buf,w,c
  6133  00261E  6ED9               	movwf	fsr2l,c
  6134  002620  5015               	movf	SD_SingleBlockRead@i+1,w,c
  6135  002622  2012               	addwfc	SD_SingleBlockRead@buf+1,w,c
  6136  002624  6EDA               	movwf	fsr2h,c
  6137  002626  EC1D  F017         	call	_spiReceive	;wreg free
  6138  00262A  6EDF               	movwf	indf2,c
  6139  00262C  4A14               	infsnz	SD_SingleBlockRead@i,f,c
  6140  00262E  2A15               	incf	SD_SingleBlockRead@i+1,f,c
  6141  002630  D7F0               	goto	l2896
  6142  002632                     l2906:
  6143                           
  6144                           ;SD_PIC.c: 319: }
  6145                           ;SD_PIC.c: 322: spiSend(0xFF);
  6146  002632  0EFF               	movlw	255
  6147  002634  EC18  F017         	call	_spiSend
  6148                           
  6149                           ;SD_PIC.c: 323: spiSend(0xFF);
  6150  002638  0EFF               	movlw	255
  6151  00263A  EC18  F017         	call	_spiSend
  6152                           
  6153                           ;SD_PIC.c: 324: LATEbits.LATE2 = 1;
  6154  00263E  848D               	bsf	3981,2,c	;volatile
  6155                           
  6156                           ;SD_PIC.c: 327: SDCard.read.lastBlockRead = block;
  6157  002640  C00D  F0A5         	movff	SD_SingleBlockRead@block,_SDCard+37
  6158  002644  C00E  F0A6         	movff	SD_SingleBlockRead@block+1,_SDCard+38
  6159  002648  C00F  F0A7         	movff	SD_SingleBlockRead@block+2,_SDCard+39
  6160  00264C  C010  F0A8         	movff	SD_SingleBlockRead@block+3,_SDCard+40
  6161                           
  6162                           ;SD_PIC.c: 329: return 1;
  6163  002650  0E01               	movlw	1
  6164  002652  0012               	return	
  6165  002654                     __end_of_SD_SingleBlockRead:
  6166                           	opt stack 0
  6167                           tblptru	equ	0xFF8
  6168                           tblptrh	equ	0xFF7
  6169                           tblptrl	equ	0xFF6
  6170                           tablat	equ	0xFF5
  6171                           prodh	equ	0xFF4
  6172                           prodl	equ	0xFF3
  6173                           intcon	equ	0xFF2
  6174                           intcon2	equ	0xFF1
  6175                           intcon3	equ	0xFF0
  6176                           postinc0	equ	0xFEE
  6177                           wreg	equ	0xFE8
  6178                           postdec1	equ	0xFE5
  6179                           plusw1	equ	0xFE3
  6180                           fsr1h	equ	0xFE2
  6181                           fsr1l	equ	0xFE1
  6182                           indf2	equ	0xFDF
  6183                           postinc2	equ	0xFDE
  6184                           postdec2	equ	0xFDD
  6185                           plusw2	equ	0xFDB
  6186                           fsr2h	equ	0xFDA
  6187                           fsr2l	equ	0xFD9
  6188                           status	equ	0xFD8
  6189                           
  6190 ;; *************** function _SD_MBW_Stop *****************
  6191 ;; Defined at:
  6192 ;;		line 253 in file "../../src/SD/SD_PIC.c"
  6193 ;; Parameters:    Size  Location     Type
  6194 ;;		None
  6195 ;; Auto vars:     Size  Location     Type
  6196 ;;		None
  6197 ;; Return value:  Size  Location     Type
  6198 ;;                  1    wreg      void 
  6199 ;; Registers used:
  6200 ;;		wreg, status,2, tblptrl, tblptrh, tblptru, cstack
  6201 ;; Tracked objects:
  6202 ;;		On entry : 0/0
  6203 ;;		On exit  : 0/0
  6204 ;;		Unchanged: 0/0
  6205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6210 ;;Total ram usage:        0 bytes
  6211 ;; Hardware stack levels used:    1
  6212 ;; Hardware stack levels required when called:    2
  6213 ;; This function calls:
  6214 ;;		_spiReceive
  6215 ;;		_spiSend
  6216 ;; This function is called by:
  6217 ;;		_main
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           	psect	text22
  6222  002D34                     __ptext22:
  6223                           	opt stack 0
  6224  002D34                     _SD_MBW_Stop:
  6225                           	opt stack 28
  6226                           
  6227                           ;SD_PIC.c: 263: LATEbits.LATE2 = 0;
  6228                           
  6229                           ;incstack = 0
  6230  002D34  948D               	bcf	3981,2,c	;volatile
  6231  002D36                     l2868:
  6232  002D36  EC1D  F017         	call	_spiReceive	;wreg free
  6233  002D3A  0AFF               	xorlw	255
  6234  002D3C  A4D8               	btfss	status,2,c
  6235  002D3E  D7FB               	goto	l2868
  6236                           
  6237                           ;SD_PIC.c: 267: spiSend(STOP_TRAN);
  6238  002D40  0E29               	movlw	low _STOP_TRAN
  6239  002D42  6EF6               	movwf	tblptrl,c
  6240  002D44                     	if	1	;There is more than 1 active tblptr byte
  6241  002D44  0E10               	movlw	high _STOP_TRAN
  6242  002D46  6EF7               	movwf	tblptrh,c
  6243  002D48                     	endif
  6244  002D48                     	if	0	;There are less than 3 active tblptr bytes
  6245  002D48                     	endif
  6246  002D48  0008               	tblrd		*
  6247  002D4A  50F5               	movf	tablat,w,c
  6248  002D4C  EC18  F017         	call	_spiSend
  6249  002D50                     l2872:
  6250  002D50  EC1D  F017         	call	_spiReceive	;wreg free
  6251  002D54  0900               	iorlw	0
  6252  002D56  B4D8               	btfsc	status,2,c
  6253  002D58  D7FB               	goto	l2872
  6254                           
  6255                           ;SD_PIC.c: 271: LATEbits.LATE2 = 1;
  6256  002D5A  848D               	bsf	3981,2,c	;volatile
  6257                           
  6258                           ;SD_PIC.c: 274: SDCard.write.MBW_flag_first = 1;
  6259  002D5C  0E01               	movlw	1
  6260  002D5E  0100               	movlb	0	; () banked
  6261  002D60  6FA4               	movwf	(_SDCard+36)& (0+255),b
  6262                           
  6263                           ; BSR set to: 0
  6264  002D62  0012               	return		;funcret
  6265  002D64                     __end_of_SD_MBW_Stop:
  6266                           	opt stack 0
  6267                           tblptru	equ	0xFF8
  6268                           tblptrh	equ	0xFF7
  6269                           tblptrl	equ	0xFF6
  6270                           tablat	equ	0xFF5
  6271                           prodh	equ	0xFF4
  6272                           prodl	equ	0xFF3
  6273                           intcon	equ	0xFF2
  6274                           intcon2	equ	0xFF1
  6275                           intcon3	equ	0xFF0
  6276                           postinc0	equ	0xFEE
  6277                           wreg	equ	0xFE8
  6278                           postdec1	equ	0xFE5
  6279                           plusw1	equ	0xFE3
  6280                           fsr1h	equ	0xFE2
  6281                           fsr1l	equ	0xFE1
  6282                           indf2	equ	0xFDF
  6283                           postinc2	equ	0xFDE
  6284                           postdec2	equ	0xFDD
  6285                           plusw2	equ	0xFDB
  6286                           fsr2h	equ	0xFDA
  6287                           fsr2l	equ	0xFD9
  6288                           status	equ	0xFD8
  6289                           
  6290 ;; *************** function _SD_MBW_Start *****************
  6291 ;; Defined at:
  6292 ;;		line 159 in file "../../src/SD/SD_PIC.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;  startBlock      4   17[COMRAM] unsigned long 
  6295 ;;  numBlocks       4   21[COMRAM] unsigned long 
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;		None
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      void 
  6300 ;; Registers used:
  6301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6307 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;Total ram usage:        9 bytes
  6312 ;; Hardware stack levels used:    1
  6313 ;; Hardware stack levels required when called:    4
  6314 ;; This function calls:
  6315 ;;		_SD_ACMD
  6316 ;;		_SD_Command
  6317 ;; This function is called by:
  6318 ;;		_main
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text23
  6323  0029A6                     __ptext23:
  6324                           	opt stack 0
  6325  0029A6                     _SD_MBW_Start:
  6326                           	opt stack 26
  6327                           
  6328                           ;SD_PIC.c: 173: if(SDCard.Type == 0){ startBlock <<= 9; }
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;incstack = 0
  6332  0029A6  0100               	movlb	0	; () banked
  6333  0029A8  5181               	movf	(_SDCard+1)& (0+255),w,b
  6334  0029AA  A4D8               	btfss	status,2,c
  6335  0029AC  D008               	goto	l2806
  6336                           
  6337                           ; BSR set to: 0
  6338  0029AE  0E09               	movlw	9
  6339  0029B0                     u2025:
  6340  0029B0  90D8               	bcf	status,0,c
  6341  0029B2  3612               	rlcf	SD_MBW_Start@startBlock,f,c
  6342  0029B4  3613               	rlcf	SD_MBW_Start@startBlock+1,f,c
  6343  0029B6  3614               	rlcf	SD_MBW_Start@startBlock+2,f,c
  6344  0029B8  3615               	rlcf	SD_MBW_Start@startBlock+3,f,c
  6345  0029BA  2EE8               	decfsz	wreg,f,c
  6346  0029BC  D7F9               	goto	u2025
  6347  0029BE                     l2806:
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;SD_PIC.c: 176: SD_ACMD(ACMD23, numBlocks);
  6351  0029BE  C016  F00D         	movff	SD_MBW_Start@numBlocks,SD_ACMD@arg
  6352  0029C2  C017  F00E         	movff	SD_MBW_Start@numBlocks+1,SD_ACMD@arg+1
  6353  0029C6  C018  F00F         	movff	SD_MBW_Start@numBlocks+2,SD_ACMD@arg+2
  6354  0029CA  C019  F010         	movff	SD_MBW_Start@numBlocks+3,SD_ACMD@arg+3
  6355  0029CE  0E30               	movlw	low _ACMD23
  6356  0029D0  6EF6               	movwf	tblptrl,c
  6357  0029D2                     	if	1	;There is more than 1 active tblptr byte
  6358  0029D2  0E10               	movlw	high _ACMD23
  6359  0029D4  6EF7               	movwf	tblptrh,c
  6360  0029D6                     	endif
  6361  0029D6                     	if	0	;There are less than 3 active tblptr bytes
  6362  0029D6                     	endif
  6363  0029D6  0008               	tblrd		*
  6364  0029D8  50F5               	movf	tablat,w,c
  6365  0029DA  EC46  F016         	call	_SD_ACMD
  6366  0029DE                     l2808:
  6367  0029DE  C012  F004         	movff	SD_MBW_Start@startBlock,SD_Command@arg
  6368  0029E2  C013  F005         	movff	SD_MBW_Start@startBlock+1,SD_Command@arg+1
  6369  0029E6  C014  F006         	movff	SD_MBW_Start@startBlock+2,SD_Command@arg+2
  6370  0029EA  C015  F007         	movff	SD_MBW_Start@startBlock+3,SD_Command@arg+3
  6371  0029EE  0E37               	movlw	low _CMD25
  6372  0029F0  6EF6               	movwf	tblptrl,c
  6373  0029F2                     	if	1	;There is more than 1 active tblptr byte
  6374  0029F2  0E10               	movlw	high _CMD25
  6375  0029F4  6EF7               	movwf	tblptrh,c
  6376  0029F6                     	endif
  6377  0029F6                     	if	0	;There are less than 3 active tblptr bytes
  6378  0029F6                     	endif
  6379  0029F6  0008               	tblrd		*
  6380  0029F8  50F5               	movf	tablat,w,c
  6381  0029FA  EC81  F013         	call	_SD_Command
  6382  0029FE  6E1A               	movwf	??_SD_MBW_Start& (0+255),c
  6383  002A00  0E2E               	movlw	low _R1_READY_STATE
  6384  002A02  6EF6               	movwf	tblptrl,c
  6385  002A04                     	if	1	;There is more than 1 active tblptr byte
  6386  002A04  0E10               	movlw	high _R1_READY_STATE
  6387  002A06  6EF7               	movwf	tblptrh,c
  6388  002A08                     	endif
  6389  002A08                     	if	0	;There are less than 3 active tblptr bytes
  6390  002A08                     	endif
  6391  002A08  0008               	tblrd		*
  6392  002A0A  50F5               	movf	tablat,w,c
  6393  002A0C  181A               	xorwf	??_SD_MBW_Start,w,c
  6394  002A0E  A4D8               	btfss	status,2,c
  6395  002A10  D7E6               	goto	l2808
  6396                           
  6397                           ;SD_PIC.c: 182: SDCard.write.MBW_startBlock = startBlock;
  6398  002A12  C012  F0A0         	movff	SD_MBW_Start@startBlock,_SDCard+32
  6399  002A16  C013  F0A1         	movff	SD_MBW_Start@startBlock+1,_SDCard+33
  6400  002A1A  C014  F0A2         	movff	SD_MBW_Start@startBlock+2,_SDCard+34
  6401  002A1E  C015  F0A3         	movff	SD_MBW_Start@startBlock+3,_SDCard+35
  6402  002A22  0012               	return		;funcret
  6403  002A24                     __end_of_SD_MBW_Start:
  6404                           	opt stack 0
  6405                           tblptru	equ	0xFF8
  6406                           tblptrh	equ	0xFF7
  6407                           tblptrl	equ	0xFF6
  6408                           tablat	equ	0xFF5
  6409                           prodh	equ	0xFF4
  6410                           prodl	equ	0xFF3
  6411                           intcon	equ	0xFF2
  6412                           intcon2	equ	0xFF1
  6413                           intcon3	equ	0xFF0
  6414                           postinc0	equ	0xFEE
  6415                           wreg	equ	0xFE8
  6416                           postdec1	equ	0xFE5
  6417                           plusw1	equ	0xFE3
  6418                           fsr1h	equ	0xFE2
  6419                           fsr1l	equ	0xFE1
  6420                           indf2	equ	0xFDF
  6421                           postinc2	equ	0xFDE
  6422                           postdec2	equ	0xFDD
  6423                           plusw2	equ	0xFDB
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function _SD_ACMD *****************
  6429 ;; Defined at:
  6430 ;;		line 88 in file "../../src/SD/SD_PIC.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;  cmd             1    wreg     unsigned char 
  6433 ;;  arg             4   12[COMRAM] unsigned long 
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;  cmd             1   16[COMRAM] unsigned char 
  6436 ;; Return value:  Size  Location     Type
  6437 ;;                  1    wreg      unsigned char 
  6438 ;; Registers used:
  6439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6445 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6449 ;;Total ram usage:        5 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; Hardware stack levels required when called:    3
  6452 ;; This function calls:
  6453 ;;		_SD_Command
  6454 ;; This function is called by:
  6455 ;;		_SD_MBW_Start
  6456 ;;		_initSD
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           	psect	text24
  6461  002C8C                     __ptext24:
  6462                           	opt stack 0
  6463  002C8C                     _SD_ACMD:
  6464                           	opt stack 26
  6465                           
  6466                           ;incstack = 0
  6467                           ;SD_ACMD@cmd stored from wreg
  6468  002C8C  6E11               	movwf	SD_ACMD@cmd,c
  6469                           
  6470                           ;SD_PIC.c: 99: SD_Command(CMD55, 0);
  6471  002C8E  0E00               	movlw	0
  6472  002C90  6E04               	movwf	SD_Command@arg,c
  6473  002C92  0E00               	movlw	0
  6474  002C94  6E05               	movwf	SD_Command@arg+1,c
  6475  002C96  0E00               	movlw	0
  6476  002C98  6E06               	movwf	SD_Command@arg+2,c
  6477  002C9A  0E00               	movlw	0
  6478  002C9C  6E07               	movwf	SD_Command@arg+3,c
  6479  002C9E  0E33               	movlw	low _CMD55
  6480  002CA0  6EF6               	movwf	tblptrl,c
  6481  002CA2                     	if	1	;There is more than 1 active tblptr byte
  6482  002CA2  0E10               	movlw	high _CMD55
  6483  002CA4  6EF7               	movwf	tblptrh,c
  6484  002CA6                     	endif
  6485  002CA6                     	if	0	;There are less than 3 active tblptr bytes
  6486  002CA6                     	endif
  6487  002CA6  0008               	tblrd		*
  6488  002CA8  50F5               	movf	tablat,w,c
  6489  002CAA  EC81  F013         	call	_SD_Command
  6490                           
  6491                           ;SD_PIC.c: 100: return SD_Command(cmd, arg);
  6492  002CAE  C00D  F004         	movff	SD_ACMD@arg,SD_Command@arg
  6493  002CB2  C00E  F005         	movff	SD_ACMD@arg+1,SD_Command@arg+1
  6494  002CB6  C00F  F006         	movff	SD_ACMD@arg+2,SD_Command@arg+2
  6495  002CBA  C010  F007         	movff	SD_ACMD@arg+3,SD_Command@arg+3
  6496  002CBE  5011               	movf	SD_ACMD@cmd,w,c
  6497  002CC0  EC81  F013         	call	_SD_Command
  6498  002CC4  0012               	return	
  6499  002CC6                     __end_of_SD_ACMD:
  6500                           	opt stack 0
  6501                           tblptru	equ	0xFF8
  6502                           tblptrh	equ	0xFF7
  6503                           tblptrl	equ	0xFF6
  6504                           tablat	equ	0xFF5
  6505                           prodh	equ	0xFF4
  6506                           prodl	equ	0xFF3
  6507                           intcon	equ	0xFF2
  6508                           intcon2	equ	0xFF1
  6509                           intcon3	equ	0xFF0
  6510                           postinc0	equ	0xFEE
  6511                           wreg	equ	0xFE8
  6512                           postdec1	equ	0xFE5
  6513                           plusw1	equ	0xFE3
  6514                           fsr1h	equ	0xFE2
  6515                           fsr1l	equ	0xFE1
  6516                           indf2	equ	0xFDF
  6517                           postinc2	equ	0xFDE
  6518                           postdec2	equ	0xFDD
  6519                           plusw2	equ	0xFDB
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8
  6523                           
  6524 ;; *************** function _SD_MBW_Send *****************
  6525 ;; Defined at:
  6526 ;;		line 185 in file "../../src/SD/SD_PIC.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;  arrWrite        2   12[COMRAM] PTR unsigned char 
  6529 ;;		 -> writeBuffer(512), 
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;  i               2   16[COMRAM] unsigned short 
  6532 ;;  response        1   15[COMRAM] unsigned char 
  6533 ;;  status          1   14[COMRAM] unsigned char 
  6534 ;; Return value:  Size  Location     Type
  6535 ;;                  1    wreg      unsigned char 
  6536 ;; Registers used:
  6537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6538 ;; Tracked objects:
  6539 ;;		On entry : 0/0
  6540 ;;		On exit  : 0/0
  6541 ;;		Unchanged: 0/0
  6542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6546 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;Total ram usage:        6 bytes
  6548 ;; Hardware stack levels used:    1
  6549 ;; Hardware stack levels required when called:    3
  6550 ;; This function calls:
  6551 ;;		_SD_Command
  6552 ;;		_SD_SendDummyBytes
  6553 ;;		_spiReceive
  6554 ;;		_spiSend
  6555 ;;		_spiTransfer
  6556 ;; This function is called by:
  6557 ;;		_main
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           	psect	text25
  6562  0020E8                     __ptext25:
  6563                           	opt stack 0
  6564  0020E8                     _SD_MBW_Send:
  6565                           	opt stack 27
  6566                           
  6567                           ;SD_PIC.c: 201: unsigned short i = 0;
  6568                           
  6569                           ;incstack = 0
  6570  0020E8  0E00               	movlw	0
  6571  0020EA  6E12               	movwf	SD_MBW_Send@i+1,c
  6572  0020EC  0E00               	movlw	0
  6573  0020EE  6E11               	movwf	SD_MBW_Send@i,c
  6574                           
  6575                           ;SD_PIC.c: 202: unsigned char response = 0;
  6576  0020F0  0E00               	movlw	0
  6577  0020F2  6E10               	movwf	SD_MBW_Send@response,c
  6578                           
  6579                           ;SD_PIC.c: 203: unsigned char status = 0;
  6580  0020F4  0E00               	movlw	0
  6581  0020F6  6E0F               	movwf	SD_MBW_Send@status,c
  6582                           
  6583                           ;SD_PIC.c: 205: LATEbits.LATE2 = 0;
  6584  0020F8  948D               	bcf	3981,2,c	;volatile
  6585  0020FA                     l2814:
  6586  0020FA  EC1D  F017         	call	_spiReceive	;wreg free
  6587  0020FE  0AFF               	xorlw	255
  6588  002100  A4D8               	btfss	status,2,c
  6589  002102  D7FB               	goto	l2814
  6590                           
  6591                           ;SD_PIC.c: 209: spiSend(START_BLOCK_TOKEN);
  6592  002104  0E2A               	movlw	low _START_BLOCK_TOKEN
  6593  002106  6EF6               	movwf	tblptrl,c
  6594  002108                     	if	1	;There is more than 1 active tblptr byte
  6595  002108  0E10               	movlw	high _START_BLOCK_TOKEN
  6596  00210A  6EF7               	movwf	tblptrh,c
  6597  00210C                     	endif
  6598  00210C                     	if	0	;There are less than 3 active tblptr bytes
  6599  00210C                     	endif
  6600  00210C  0008               	tblrd		*
  6601  00210E  50F5               	movf	tablat,w,c
  6602  002110  EC18  F017         	call	_spiSend
  6603                           
  6604                           ;SD_PIC.c: 212: for(i = 0; i < 512; i++){
  6605  002114  0E00               	movlw	0
  6606  002116  6E12               	movwf	SD_MBW_Send@i+1,c
  6607  002118  0E00               	movlw	0
  6608  00211A  6E11               	movwf	SD_MBW_Send@i,c
  6609  00211C                     l2820:
  6610  00211C  0E02               	movlw	2
  6611  00211E  5C12               	subwf	SD_MBW_Send@i+1,w,c
  6612  002120  B0D8               	btfsc	status,0,c
  6613  002122  D00D               	goto	l2830
  6614                           
  6615                           ;SD_PIC.c: 213: response = spiTransfer(arrWrite[i]);
  6616  002124  5011               	movf	SD_MBW_Send@i,w,c
  6617  002126  240D               	addwf	SD_MBW_Send@arrWrite,w,c
  6618  002128  6ED9               	movwf	fsr2l,c
  6619  00212A  5012               	movf	SD_MBW_Send@i+1,w,c
  6620  00212C  200E               	addwfc	SD_MBW_Send@arrWrite+1,w,c
  6621  00212E  6EDA               	movwf	fsr2h,c
  6622  002130  50DF               	movf	indf2,w,c
  6623  002132  ECD8  F016         	call	_spiTransfer
  6624  002136  6E10               	movwf	SD_MBW_Send@response,c
  6625  002138  4A11               	infsnz	SD_MBW_Send@i,f,c
  6626  00213A  2A12               	incf	SD_MBW_Send@i+1,f,c
  6627  00213C  D7EF               	goto	l2820
  6628  00213E                     l2830:
  6629                           
  6630                           ;SD_PIC.c: 214: }
  6631                           ;SD_PIC.c: 217: SD_SendDummyBytes(2);
  6632  00213E  0E02               	movlw	2
  6633  002140  ECF8  F016         	call	_SD_SendDummyBytes
  6634  002144                     l196:
  6635                           
  6636                           ;SD_PIC.c: 221: response = spiReceive() & 0x1F;
  6637  002144  EC1D  F017         	call	_spiReceive	;wreg free
  6638  002148  0B1F               	andlw	31
  6639  00214A  6E10               	movwf	SD_MBW_Send@response,c
  6640                           
  6641                           ;SD_PIC.c: 222: }while(response == 0x1F);
  6642  00214C  0E1F               	movlw	31
  6643  00214E  1810               	xorwf	SD_MBW_Send@response,w,c
  6644  002150  B4D8               	btfsc	status,2,c
  6645  002152  D7F8               	goto	l196
  6646                           
  6647                           ;SD_PIC.c: 223: LATEbits.LATE2 = 1;
  6648  002154  848D               	bsf	3981,2,c	;volatile
  6649                           
  6650                           ;SD_PIC.c: 225: switch(response){
  6651  002156  D03F               	goto	l2864
  6652  002158                     l2834:
  6653                           
  6654                           ;SD_PIC.c: 230: if(SDCard.write.MBW_flag_first){
  6655  002158  0100               	movlb	0	; () banked
  6656  00215A  51A4               	movf	(_SDCard+36)& (0+255),w,b
  6657  00215C  B4D8               	btfsc	status,2,c
  6658  00215E  D00C               	goto	l2840
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;SD_PIC.c: 232: SDCard.write.lastBlockWritten = SDCard.write.MBW_startBlock;
  6662  002160  C0A0  F09C         	movff	_SDCard+32,_SDCard+28
  6663  002164  C0A1  F09D         	movff	_SDCard+33,_SDCard+29
  6664  002168  C0A2  F09E         	movff	_SDCard+34,_SDCard+30
  6665  00216C  C0A3  F09F         	movff	_SDCard+35,_SDCard+31
  6666                           
  6667                           ; BSR set to: 0
  6668                           ;SD_PIC.c: 233: SDCard.write.MBW_flag_first = 0;
  6669  002170  0E00               	movlw	0
  6670  002172  0100               	movlb	0	; () banked
  6671  002174  6FA4               	movwf	(_SDCard+36)& (0+255),b
  6672                           
  6673                           ;SD_PIC.c: 234: }
  6674  002176  D007               	goto	l2842
  6675  002178                     l2840:
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;SD_PIC.c: 235: else{
  6679                           ;SD_PIC.c: 236: SDCard.write.lastBlockWritten++;
  6680  002178  0E01               	movlw	1
  6681  00217A  0100               	movlb	0	; () banked
  6682  00217C  279C               	addwf	(_SDCard+28)& (0+255),f,b
  6683  00217E  0E00               	movlw	0
  6684  002180  239D               	addwfc	(_SDCard+29)& (0+255),f,b
  6685  002182  239E               	addwfc	(_SDCard+30)& (0+255),f,b
  6686  002184  239F               	addwfc	(_SDCard+31)& (0+255),f,b
  6687  002186                     l2842:
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;SD_PIC.c: 237: }
  6691                           ;SD_PIC.c: 239: return 1;
  6692  002186  0E01               	movlw	1
  6693                           
  6694                           ; BSR set to: 0
  6695  002188  0012               	return	
  6696  00218A                     l2846:
  6697                           
  6698                           ;SD_PIC.c: 242: SD_Command(CMD12, 0);
  6699  00218A  0E00               	movlw	0
  6700  00218C  6E04               	movwf	SD_Command@arg,c
  6701  00218E  0E00               	movlw	0
  6702  002190  6E05               	movwf	SD_Command@arg+1,c
  6703  002192  0E00               	movlw	0
  6704  002194  6E06               	movwf	SD_Command@arg+2,c
  6705  002196  0E00               	movlw	0
  6706  002198  6E07               	movwf	SD_Command@arg+3,c
  6707  00219A  0E3D               	movlw	low _CMD12
  6708  00219C  6EF6               	movwf	tblptrl,c
  6709  00219E                     	if	1	;There is more than 1 active tblptr byte
  6710  00219E  0E10               	movlw	high _CMD12
  6711  0021A0  6EF7               	movwf	tblptrh,c
  6712  0021A2                     	endif
  6713  0021A2                     	if	0	;There are less than 3 active tblptr bytes
  6714  0021A2                     	endif
  6715  0021A2  0008               	tblrd		*
  6716  0021A4  50F5               	movf	tablat,w,c
  6717  0021A6  EC81  F013         	call	_SD_Command
  6718                           
  6719                           ;SD_PIC.c: 243: return 0;
  6720  0021AA  0E00               	movlw	0
  6721  0021AC  0012               	return	
  6722  0021AE                     l2852:
  6723                           
  6724                           ;SD_PIC.c: 246: SD_Command(CMD12, 0);
  6725  0021AE  0E00               	movlw	0
  6726  0021B0  6E04               	movwf	SD_Command@arg,c
  6727  0021B2  0E00               	movlw	0
  6728  0021B4  6E05               	movwf	SD_Command@arg+1,c
  6729  0021B6  0E00               	movlw	0
  6730  0021B8  6E06               	movwf	SD_Command@arg+2,c
  6731  0021BA  0E00               	movlw	0
  6732  0021BC  6E07               	movwf	SD_Command@arg+3,c
  6733  0021BE  0E3D               	movlw	low _CMD12
  6734  0021C0  6EF6               	movwf	tblptrl,c
  6735  0021C2                     	if	1	;There is more than 1 active tblptr byte
  6736  0021C2  0E10               	movlw	high _CMD12
  6737  0021C4  6EF7               	movwf	tblptrh,c
  6738  0021C6                     	endif
  6739  0021C6                     	if	0	;There are less than 3 active tblptr bytes
  6740  0021C6                     	endif
  6741  0021C6  0008               	tblrd		*
  6742  0021C8  50F5               	movf	tablat,w,c
  6743  0021CA  EC81  F013         	call	_SD_Command
  6744                           
  6745                           ;SD_PIC.c: 247: return 0;
  6746  0021CE  0E00               	movlw	0
  6747  0021D0  0012               	return	
  6748  0021D2                     l2858:
  6749                           
  6750                           ;SD_PIC.c: 249: return 0;
  6751  0021D2  0E00               	movlw	0
  6752                           
  6753                           ;SD_PIC.c: 250: }
  6754  0021D4  0012               	return	
  6755  0021D6                     l2864:
  6756  0021D6  5010               	movf	SD_MBW_Send@response,w,c
  6757                           
  6758                           ; Switch size 1, requested type "space"
  6759                           ; Number of cases is 3, Range of values is 5 to 13
  6760                           ; switch strategies available:
  6761                           ; Name         Instructions Cycles
  6762                           ; simple_byte           10     6 (average)
  6763                           ;	Chosen strategy is simple_byte
  6764  0021D8  0A05               	xorlw	5	; case 5
  6765  0021DA  B4D8               	btfsc	status,2,c
  6766  0021DC  D7BD               	goto	l2834
  6767  0021DE  0A0E               	xorlw	14	; case 11
  6768  0021E0  B4D8               	btfsc	status,2,c
  6769  0021E2  D7D3               	goto	l2846
  6770  0021E4  0A06               	xorlw	6	; case 13
  6771  0021E6  B4D8               	btfsc	status,2,c
  6772  0021E8  D7E2               	goto	l2852
  6773  0021EA  D7F3               	goto	l2858
  6774  0021EC                     __end_of_SD_MBW_Send:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           prodh	equ	0xFF4
  6781                           prodl	equ	0xFF3
  6782                           intcon	equ	0xFF2
  6783                           intcon2	equ	0xFF1
  6784                           intcon3	equ	0xFF0
  6785                           postinc0	equ	0xFEE
  6786                           wreg	equ	0xFE8
  6787                           postdec1	equ	0xFE5
  6788                           plusw1	equ	0xFE3
  6789                           fsr1h	equ	0xFE2
  6790                           fsr1l	equ	0xFE1
  6791                           indf2	equ	0xFDF
  6792                           postinc2	equ	0xFDE
  6793                           postdec2	equ	0xFDD
  6794                           plusw2	equ	0xFDB
  6795                           fsr2h	equ	0xFDA
  6796                           fsr2l	equ	0xFD9
  6797                           status	equ	0xFD8
  6798                           
  6799 ;; *************** function _SD_SendDummyBytes *****************
  6800 ;; Defined at:
  6801 ;;		line 16 in file "../../src/SD/SD_PIC.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  numBytes        1    wreg     unsigned char 
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;  numBytes        1    3[COMRAM] unsigned char 
  6806 ;;  n               1    4[COMRAM] unsigned char 
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  1    wreg      void 
  6809 ;; Registers used:
  6810 ;;		wreg, status,2, status,0, cstack
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6820 ;;Total ram usage:        2 bytes
  6821 ;; Hardware stack levels used:    1
  6822 ;; Hardware stack levels required when called:    2
  6823 ;; This function calls:
  6824 ;;		_spiSend
  6825 ;; This function is called by:
  6826 ;;		_SD_SingleBlockWrite
  6827 ;;		_SD_MBW_Send
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           	psect	text26
  6832  002DF0                     __ptext26:
  6833                           	opt stack 0
  6834  002DF0                     _SD_SendDummyBytes:
  6835                           	opt stack 27
  6836                           
  6837                           ;incstack = 0
  6838                           ;SD_SendDummyBytes@numBytes stored from wreg
  6839  002DF0  6E04               	movwf	SD_SendDummyBytes@numBytes,c
  6840                           
  6841                           ;SD_PIC.c: 25: unsigned char n = numBytes;
  6842  002DF2  C004  F005         	movff	SD_SendDummyBytes@numBytes,SD_SendDummyBytes@n
  6843                           
  6844                           ;SD_PIC.c: 26: while(n > 0){
  6845  002DF6  D004               	goto	l2512
  6846  002DF8                     l2508:
  6847                           
  6848                           ;SD_PIC.c: 27: spiSend(0xFF);
  6849  002DF8  0EFF               	movlw	255
  6850  002DFA  EC18  F017         	call	_spiSend
  6851                           
  6852                           ;SD_PIC.c: 28: n--;
  6853  002DFE  0605               	decf	SD_SendDummyBytes@n,f,c
  6854  002E00                     l2512:
  6855  002E00  5005               	movf	SD_SendDummyBytes@n,w,c
  6856  002E02  B4D8               	btfsc	status,2,c
  6857  002E04  0012               	return	
  6858  002E06  D7F8               	goto	l2508
  6859  002E08                     __end_of_SD_SendDummyBytes:
  6860                           	opt stack 0
  6861                           tblptru	equ	0xFF8
  6862                           tblptrh	equ	0xFF7
  6863                           tblptrl	equ	0xFF6
  6864                           tablat	equ	0xFF5
  6865                           prodh	equ	0xFF4
  6866                           prodl	equ	0xFF3
  6867                           intcon	equ	0xFF2
  6868                           intcon2	equ	0xFF1
  6869                           intcon3	equ	0xFF0
  6870                           postinc0	equ	0xFEE
  6871                           wreg	equ	0xFE8
  6872                           postdec1	equ	0xFE5
  6873                           plusw1	equ	0xFE3
  6874                           fsr1h	equ	0xFE2
  6875                           fsr1l	equ	0xFE1
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           plusw2	equ	0xFDB
  6880                           fsr2h	equ	0xFDA
  6881                           fsr2l	equ	0xFD9
  6882                           status	equ	0xFD8
  6883                           
  6884 ;; *************** function _SD_MBR_Stop *****************
  6885 ;; Defined at:
  6886 ;;		line 411 in file "../../src/SD/SD_PIC.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;		None
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;		None
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  1    wreg      void 
  6893 ;; Registers used:
  6894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;Total ram usage:        0 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    3
  6907 ;; This function calls:
  6908 ;;		_SD_Command
  6909 ;; This function is called by:
  6910 ;;		_main
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text27
  6915  002D64                     __ptext27:
  6916                           	opt stack 0
  6917  002D64                     _SD_MBR_Stop:
  6918                           	opt stack 27
  6919                           
  6920                           ;SD_PIC.c: 422: SD_Command(CMD12, 0);
  6921                           
  6922                           ;incstack = 0
  6923  002D64  0E00               	movlw	0
  6924  002D66  6E04               	movwf	SD_Command@arg,c
  6925  002D68  0E00               	movlw	0
  6926  002D6A  6E05               	movwf	SD_Command@arg+1,c
  6927  002D6C  0E00               	movlw	0
  6928  002D6E  6E06               	movwf	SD_Command@arg+2,c
  6929  002D70  0E00               	movlw	0
  6930  002D72  6E07               	movwf	SD_Command@arg+3,c
  6931  002D74  0E3D               	movlw	low _CMD12
  6932  002D76  6EF6               	movwf	tblptrl,c
  6933  002D78                     	if	1	;There is more than 1 active tblptr byte
  6934  002D78  0E10               	movlw	high _CMD12
  6935  002D7A  6EF7               	movwf	tblptrh,c
  6936  002D7C                     	endif
  6937  002D7C                     	if	0	;There are less than 3 active tblptr bytes
  6938  002D7C                     	endif
  6939  002D7C  0008               	tblrd		*
  6940  002D7E  50F5               	movf	tablat,w,c
  6941  002D80  EC81  F013         	call	_SD_Command
  6942                           
  6943                           ;SD_PIC.c: 425: SDCard.read.MBR_flag_first = 1;
  6944  002D84  0E01               	movlw	1
  6945  002D86  0100               	movlb	0	; () banked
  6946  002D88  6FAD               	movwf	(_SDCard+45)& (0+255),b
  6947                           
  6948                           ; BSR set to: 0
  6949  002D8A  0012               	return		;funcret
  6950  002D8C                     __end_of_SD_MBR_Stop:
  6951                           	opt stack 0
  6952                           tblptru	equ	0xFF8
  6953                           tblptrh	equ	0xFF7
  6954                           tblptrl	equ	0xFF6
  6955                           tablat	equ	0xFF5
  6956                           prodh	equ	0xFF4
  6957                           prodl	equ	0xFF3
  6958                           intcon	equ	0xFF2
  6959                           intcon2	equ	0xFF1
  6960                           intcon3	equ	0xFF0
  6961                           postinc0	equ	0xFEE
  6962                           wreg	equ	0xFE8
  6963                           postdec1	equ	0xFE5
  6964                           plusw1	equ	0xFE3
  6965                           fsr1h	equ	0xFE2
  6966                           fsr1l	equ	0xFE1
  6967                           indf2	equ	0xFDF
  6968                           postinc2	equ	0xFDE
  6969                           postdec2	equ	0xFDD
  6970                           plusw2	equ	0xFDB
  6971                           fsr2h	equ	0xFDA
  6972                           fsr2l	equ	0xFD9
  6973                           status	equ	0xFD8
  6974                           
  6975 ;; *************** function _SD_MBR_Start *****************
  6976 ;; Defined at:
  6977 ;;		line 332 in file "../../src/SD/SD_PIC.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;  startBlock      4   12[COMRAM] unsigned long 
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;  response        1   17[COMRAM] unsigned char 
  6982 ;; Return value:  Size  Location     Type
  6983 ;;                  1    wreg      unsigned char 
  6984 ;; Registers used:
  6985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6991 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;Total ram usage:        6 bytes
  6996 ;; Hardware stack levels used:    1
  6997 ;; Hardware stack levels required when called:    3
  6998 ;; This function calls:
  6999 ;;		_SD_Command
  7000 ;; This function is called by:
  7001 ;;		_main
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           	psect	text28
  7006  002A24                     __ptext28:
  7007                           	opt stack 0
  7008  002A24                     _SD_MBR_Start:
  7009                           	opt stack 27
  7010                           
  7011                           ;SD_PIC.c: 342: unsigned char response = 0;
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;incstack = 0
  7015  002A24  0E00               	movlw	0
  7016  002A26  6E12               	movwf	SD_MBR_Start@response,c
  7017                           
  7018                           ;SD_PIC.c: 348: if(SDCard.Type == 0){ startBlock <<= 9; }
  7019  002A28  0100               	movlb	0	; () banked
  7020  002A2A  5181               	movf	(_SDCard+1)& (0+255),w,b
  7021  002A2C  A4D8               	btfss	status,2,c
  7022  002A2E  D008               	goto	l2920
  7023                           
  7024                           ; BSR set to: 0
  7025  002A30  0E09               	movlw	9
  7026  002A32                     u2195:
  7027  002A32  90D8               	bcf	status,0,c
  7028  002A34  360D               	rlcf	SD_MBR_Start@startBlock,f,c
  7029  002A36  360E               	rlcf	SD_MBR_Start@startBlock+1,f,c
  7030  002A38  360F               	rlcf	SD_MBR_Start@startBlock+2,f,c
  7031  002A3A  3610               	rlcf	SD_MBR_Start@startBlock+3,f,c
  7032  002A3C  2EE8               	decfsz	wreg,f,c
  7033  002A3E  D7F9               	goto	u2195
  7034  002A40                     l2920:
  7035                           
  7036                           ;SD_PIC.c: 353: response = SD_Command(CMD18, startBlock);
  7037  002A40  C00D  F004         	movff	SD_MBR_Start@startBlock,SD_Command@arg
  7038  002A44  C00E  F005         	movff	SD_MBR_Start@startBlock+1,SD_Command@arg+1
  7039  002A48  C00F  F006         	movff	SD_MBR_Start@startBlock+2,SD_Command@arg+2
  7040  002A4C  C010  F007         	movff	SD_MBR_Start@startBlock+3,SD_Command@arg+3
  7041  002A50  0E39               	movlw	low _CMD18
  7042  002A52  6EF6               	movwf	tblptrl,c
  7043  002A54                     	if	1	;There is more than 1 active tblptr byte
  7044  002A54  0E10               	movlw	high _CMD18
  7045  002A56  6EF7               	movwf	tblptrh,c
  7046  002A58                     	endif
  7047  002A58                     	if	0	;There are less than 3 active tblptr bytes
  7048  002A58                     	endif
  7049  002A58  0008               	tblrd		*
  7050  002A5A  50F5               	movf	tablat,w,c
  7051  002A5C  EC81  F013         	call	_SD_Command
  7052  002A60  6E12               	movwf	SD_MBR_Start@response,c
  7053                           
  7054                           ;SD_PIC.c: 354: if(response & 0x0F){
  7055  002A62  C012  F011         	movff	SD_MBR_Start@response,??_SD_MBR_Start
  7056  002A66  0E0F               	movlw	15
  7057  002A68  1611               	andwf	??_SD_MBR_Start,f,c
  7058  002A6A  A4D8               	btfss	status,2,c
  7059  002A6C  0012               	return	
  7060                           
  7061                           ;SD_PIC.c: 361: }
  7062                           ;SD_PIC.c: 362: }while(response != R1_READY_STATE);
  7063                           
  7064                           ;SD_PIC.c: 360: return 0;
  7065                           ;	Return value of _SD_MBR_Start is never used
  7066  002A6E  0E2E               	movlw	low _R1_READY_STATE
  7067  002A70  6EF6               	movwf	tblptrl,c
  7068  002A72                     	if	1	;There is more than 1 active tblptr byte
  7069  002A72  0E10               	movlw	high _R1_READY_STATE
  7070  002A74  6EF7               	movwf	tblptrh,c
  7071  002A76                     	endif
  7072  002A76                     	if	0	;There are less than 3 active tblptr bytes
  7073  002A76                     	endif
  7074  002A76  0008               	tblrd		*
  7075  002A78  50F5               	movf	tablat,w,c
  7076  002A7A  6212               	cpfseq	SD_MBR_Start@response,c
  7077  002A7C  D7E1               	goto	l2920
  7078                           
  7079                           ;SD_PIC.c: 365: SDCard.read.MBR_startBlock = startBlock;
  7080  002A7E  C00D  F0A9         	movff	SD_MBR_Start@startBlock,_SDCard+41
  7081  002A82  C00E  F0AA         	movff	SD_MBR_Start@startBlock+1,_SDCard+42
  7082  002A86  C00F  F0AB         	movff	SD_MBR_Start@startBlock+2,_SDCard+43
  7083  002A8A  C010  F0AC         	movff	SD_MBR_Start@startBlock+3,_SDCard+44
  7084                           
  7085                           ;SD_PIC.c: 367: return 1;
  7086                           ;	Return value of _SD_MBR_Start is never used
  7087  002A8E  0012               	return		;funcret
  7088  002A90                     __end_of_SD_MBR_Start:
  7089                           	opt stack 0
  7090                           tblptru	equ	0xFF8
  7091                           tblptrh	equ	0xFF7
  7092                           tblptrl	equ	0xFF6
  7093                           tablat	equ	0xFF5
  7094                           prodh	equ	0xFF4
  7095                           prodl	equ	0xFF3
  7096                           intcon	equ	0xFF2
  7097                           intcon2	equ	0xFF1
  7098                           intcon3	equ	0xFF0
  7099                           postinc0	equ	0xFEE
  7100                           wreg	equ	0xFE8
  7101                           postdec1	equ	0xFE5
  7102                           plusw1	equ	0xFE3
  7103                           fsr1h	equ	0xFE2
  7104                           fsr1l	equ	0xFE1
  7105                           indf2	equ	0xFDF
  7106                           postinc2	equ	0xFDE
  7107                           postdec2	equ	0xFDD
  7108                           plusw2	equ	0xFDB
  7109                           fsr2h	equ	0xFDA
  7110                           fsr2l	equ	0xFD9
  7111                           status	equ	0xFD8
  7112                           
  7113 ;; *************** function _SD_MBR_Receive *****************
  7114 ;; Defined at:
  7115 ;;		line 370 in file "../../src/SD/SD_PIC.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;  bufReceive      2    3[COMRAM] PTR unsigned char 
  7118 ;;		 -> main@readBuffer(512), 
  7119 ;; Auto vars:     Size  Location     Type
  7120 ;;  i               2    6[COMRAM] unsigned short 
  7121 ;; Return value:  Size  Location     Type
  7122 ;;                  1    wreg      void 
  7123 ;; Registers used:
  7124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7125 ;; Tracked objects:
  7126 ;;		On entry : 0/0
  7127 ;;		On exit  : 0/0
  7128 ;;		Unchanged: 0/0
  7129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7130 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7134 ;;Total ram usage:        5 bytes
  7135 ;; Hardware stack levels used:    1
  7136 ;; Hardware stack levels required when called:    2
  7137 ;; This function calls:
  7138 ;;		_spiReceive
  7139 ;;		_spiSend
  7140 ;; This function is called by:
  7141 ;;		_main
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text29
  7146  002792                     __ptext29:
  7147                           	opt stack 0
  7148  002792                     _SD_MBR_Receive:
  7149                           	opt stack 28
  7150  002792                     l2930:
  7151  002792  EC1D  F017         	call	_spiReceive	;wreg free
  7152  002796  0900               	iorlw	0
  7153  002798  B4D8               	btfsc	status,2,c
  7154  00279A  D7FB               	goto	l2930
  7155                           
  7156                           ;SD_PIC.c: 386: LATEbits.LATE2 = 0;
  7157  00279C  948D               	bcf	3981,2,c	;volatile
  7158  00279E                     l2932:
  7159  00279E  EC1D  F017         	call	_spiReceive	;wreg free
  7160  0027A2  6E06               	movwf	??_SD_MBR_Receive& (0+255),c
  7161  0027A4  0E2B               	movlw	low _START_BLOCK
  7162  0027A6  6EF6               	movwf	tblptrl,c
  7163  0027A8                     	if	1	;There is more than 1 active tblptr byte
  7164  0027A8  0E10               	movlw	high _START_BLOCK
  7165  0027AA  6EF7               	movwf	tblptrh,c
  7166  0027AC                     	endif
  7167  0027AC                     	if	0	;There are less than 3 active tblptr bytes
  7168  0027AC                     	endif
  7169  0027AC  0008               	tblrd		*
  7170  0027AE  50F5               	movf	tablat,w,c
  7171  0027B0  1806               	xorwf	??_SD_MBR_Receive,w,c
  7172  0027B2  A4D8               	btfss	status,2,c
  7173  0027B4  D7F4               	goto	l2932
  7174                           
  7175                           ;SD_PIC.c: 392: for(unsigned short i = 0; i < 512; i++){
  7176  0027B6  0E00               	movlw	0
  7177  0027B8  6E08               	movwf	SD_MBR_Receive@i+1,c
  7178  0027BA  0E00               	movlw	0
  7179  0027BC  6E07               	movwf	SD_MBR_Receive@i,c
  7180  0027BE                     l2936:
  7181  0027BE  0E02               	movlw	2
  7182  0027C0  5C08               	subwf	SD_MBR_Receive@i+1,w,c
  7183  0027C2  B0D8               	btfsc	status,0,c
  7184  0027C4  D00C               	goto	l2946
  7185                           
  7186                           ;SD_PIC.c: 393: bufReceive[i] = spiReceive();
  7187  0027C6  5007               	movf	SD_MBR_Receive@i,w,c
  7188  0027C8  2404               	addwf	SD_MBR_Receive@bufReceive,w,c
  7189  0027CA  6ED9               	movwf	fsr2l,c
  7190  0027CC  5008               	movf	SD_MBR_Receive@i+1,w,c
  7191  0027CE  2005               	addwfc	SD_MBR_Receive@bufReceive+1,w,c
  7192  0027D0  6EDA               	movwf	fsr2h,c
  7193  0027D2  EC1D  F017         	call	_spiReceive	;wreg free
  7194  0027D6  6EDF               	movwf	indf2,c
  7195  0027D8  4A07               	infsnz	SD_MBR_Receive@i,f,c
  7196  0027DA  2A08               	incf	SD_MBR_Receive@i+1,f,c
  7197  0027DC  D7F0               	goto	l2936
  7198  0027DE                     l2946:
  7199                           
  7200                           ;SD_PIC.c: 394: }
  7201                           ;SD_PIC.c: 397: spiSend(0xFF);
  7202  0027DE  0EFF               	movlw	255
  7203  0027E0  EC18  F017         	call	_spiSend
  7204                           
  7205                           ;SD_PIC.c: 398: spiSend(0xFF);
  7206  0027E4  0EFF               	movlw	255
  7207  0027E6  EC18  F017         	call	_spiSend
  7208                           
  7209                           ;SD_PIC.c: 399: LATEbits.LATE2 = 1;
  7210  0027EA  848D               	bsf	3981,2,c	;volatile
  7211                           
  7212                           ;SD_PIC.c: 402: if(SDCard.read.MBR_flag_first){
  7213  0027EC  0100               	movlb	0	; () banked
  7214  0027EE  51AD               	movf	(_SDCard+45)& (0+255),w,b
  7215  0027F0  B4D8               	btfsc	status,2,c
  7216  0027F2  D00C               	goto	l2956
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;SD_PIC.c: 403: SDCard.read.lastBlockRead = SDCard.read.MBR_startBlock;
  7220  0027F4  C0A9  F0A5         	movff	_SDCard+41,_SDCard+37
  7221  0027F8  C0AA  F0A6         	movff	_SDCard+42,_SDCard+38
  7222  0027FC  C0AB  F0A7         	movff	_SDCard+43,_SDCard+39
  7223  002800  C0AC  F0A8         	movff	_SDCard+44,_SDCard+40
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;SD_PIC.c: 404: SDCard.read.MBR_flag_first = 0;
  7227  002804  0E00               	movlw	0
  7228  002806  0100               	movlb	0	; () banked
  7229  002808  6FAD               	movwf	(_SDCard+45)& (0+255),b
  7230                           
  7231                           ;SD_PIC.c: 405: }
  7232  00280A  0012               	return	
  7233  00280C                     l2956:
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;SD_PIC.c: 406: else{
  7237                           ;SD_PIC.c: 407: SDCard.read.lastBlockRead++;
  7238  00280C  0E01               	movlw	1
  7239  00280E  0100               	movlb	0	; () banked
  7240  002810  27A5               	addwf	(_SDCard+37)& (0+255),f,b
  7241  002812  0E00               	movlw	0
  7242  002814  23A6               	addwfc	(_SDCard+38)& (0+255),f,b
  7243  002816  23A7               	addwfc	(_SDCard+39)& (0+255),f,b
  7244  002818  23A8               	addwfc	(_SDCard+40)& (0+255),f,b
  7245  00281A  0012               	return	
  7246  00281C                     __end_of_SD_MBR_Receive:
  7247                           	opt stack 0
  7248                           tblptru	equ	0xFF8
  7249                           tblptrh	equ	0xFF7
  7250                           tblptrl	equ	0xFF6
  7251                           tablat	equ	0xFF5
  7252                           prodh	equ	0xFF4
  7253                           prodl	equ	0xFF3
  7254                           intcon	equ	0xFF2
  7255                           intcon2	equ	0xFF1
  7256                           intcon3	equ	0xFF0
  7257                           postinc0	equ	0xFEE
  7258                           wreg	equ	0xFE8
  7259                           postdec1	equ	0xFE5
  7260                           plusw1	equ	0xFE3
  7261                           fsr1h	equ	0xFE2
  7262                           fsr1l	equ	0xFE1
  7263                           indf2	equ	0xFDF
  7264                           postinc2	equ	0xFDE
  7265                           postdec2	equ	0xFDD
  7266                           plusw2	equ	0xFDB
  7267                           fsr2h	equ	0xFDA
  7268                           fsr2l	equ	0xFD9
  7269                           status	equ	0xFD8
  7270                           
  7271 ;; *************** function _SD_EraseBlocks *****************
  7272 ;; Defined at:
  7273 ;;		line 429 in file "../../src/SD/SD_PIC.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  firstBlock      4   12[COMRAM] unsigned long 
  7276 ;;  lastBlock       4   16[COMRAM] unsigned long 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;		None
  7279 ;; Return value:  Size  Location     Type
  7280 ;;                  1    wreg      void 
  7281 ;; Registers used:
  7282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7283 ;; Tracked objects:
  7284 ;;		On entry : 0/0
  7285 ;;		On exit  : 0/0
  7286 ;;		Unchanged: 0/0
  7287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7288 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7291 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7292 ;;Total ram usage:        8 bytes
  7293 ;; Hardware stack levels used:    1
  7294 ;; Hardware stack levels required when called:    3
  7295 ;; This function calls:
  7296 ;;		_SD_Command
  7297 ;; This function is called by:
  7298 ;;		_main
  7299 ;; This function uses a non-reentrant model
  7300 ;;
  7301                           
  7302                           	psect	text30
  7303  00281C                     __ptext30:
  7304                           	opt stack 0
  7305  00281C                     _SD_EraseBlocks:
  7306                           	opt stack 27
  7307                           
  7308                           ;SD_PIC.c: 445: if(SDCard.Type == 0){ firstBlock <<= 9; lastBlock <<= 9; }
  7309                           
  7310                           ; BSR set to: 0
  7311                           ;incstack = 0
  7312  00281C  0100               	movlb	0	; () banked
  7313  00281E  5181               	movf	(_SDCard+1)& (0+255),w,b
  7314  002820  A4D8               	btfss	status,2,c
  7315  002822  D010               	goto	l2966
  7316                           
  7317                           ; BSR set to: 0
  7318  002824  0E09               	movlw	9
  7319  002826                     u2285:
  7320  002826  90D8               	bcf	status,0,c
  7321  002828  360D               	rlcf	SD_EraseBlocks@firstBlock,f,c
  7322  00282A  360E               	rlcf	SD_EraseBlocks@firstBlock+1,f,c
  7323  00282C  360F               	rlcf	SD_EraseBlocks@firstBlock+2,f,c
  7324  00282E  3610               	rlcf	SD_EraseBlocks@firstBlock+3,f,c
  7325  002830  2EE8               	decfsz	wreg,f,c
  7326  002832  D7F9               	goto	u2285
  7327  002834  0E09               	movlw	9
  7328  002836                     u2295:
  7329  002836  90D8               	bcf	status,0,c
  7330  002838  3611               	rlcf	SD_EraseBlocks@lastBlock,f,c
  7331  00283A  3612               	rlcf	SD_EraseBlocks@lastBlock+1,f,c
  7332  00283C  3613               	rlcf	SD_EraseBlocks@lastBlock+2,f,c
  7333  00283E  3614               	rlcf	SD_EraseBlocks@lastBlock+3,f,c
  7334  002840  2EE8               	decfsz	wreg,f,c
  7335  002842  D7F9               	goto	u2295
  7336  002844                     l2966:
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;SD_PIC.c: 448: SD_Command(CMD32, firstBlock);
  7340  002844  C00D  F004         	movff	SD_EraseBlocks@firstBlock,SD_Command@arg
  7341  002848  C00E  F005         	movff	SD_EraseBlocks@firstBlock+1,SD_Command@arg+1
  7342  00284C  C00F  F006         	movff	SD_EraseBlocks@firstBlock+2,SD_Command@arg+2
  7343  002850  C010  F007         	movff	SD_EraseBlocks@firstBlock+3,SD_Command@arg+3
  7344  002854  0E36               	movlw	low _CMD32
  7345  002856  6EF6               	movwf	tblptrl,c
  7346  002858                     	if	1	;There is more than 1 active tblptr byte
  7347  002858  0E10               	movlw	high _CMD32
  7348  00285A  6EF7               	movwf	tblptrh,c
  7349  00285C                     	endif
  7350  00285C                     	if	0	;There are less than 3 active tblptr bytes
  7351  00285C                     	endif
  7352  00285C  0008               	tblrd		*
  7353  00285E  50F5               	movf	tablat,w,c
  7354  002860  EC81  F013         	call	_SD_Command
  7355                           
  7356                           ;SD_PIC.c: 451: SD_Command(CMD33, lastBlock);
  7357  002864  C011  F004         	movff	SD_EraseBlocks@lastBlock,SD_Command@arg
  7358  002868  C012  F005         	movff	SD_EraseBlocks@lastBlock+1,SD_Command@arg+1
  7359  00286C  C013  F006         	movff	SD_EraseBlocks@lastBlock+2,SD_Command@arg+2
  7360  002870  C014  F007         	movff	SD_EraseBlocks@lastBlock+3,SD_Command@arg+3
  7361  002874  0E35               	movlw	low _CMD33
  7362  002876  6EF6               	movwf	tblptrl,c
  7363  002878                     	if	1	;There is more than 1 active tblptr byte
  7364  002878  0E10               	movlw	high _CMD33
  7365  00287A  6EF7               	movwf	tblptrh,c
  7366  00287C                     	endif
  7367  00287C                     	if	0	;There are less than 3 active tblptr bytes
  7368  00287C                     	endif
  7369  00287C  0008               	tblrd		*
  7370  00287E  50F5               	movf	tablat,w,c
  7371  002880  EC81  F013         	call	_SD_Command
  7372                           
  7373                           ;SD_PIC.c: 454: SD_Command(CMD38, 0);
  7374  002884  0E00               	movlw	0
  7375  002886  6E04               	movwf	SD_Command@arg,c
  7376  002888  0E00               	movlw	0
  7377  00288A  6E05               	movwf	SD_Command@arg+1,c
  7378  00288C  0E00               	movlw	0
  7379  00288E  6E06               	movwf	SD_Command@arg+2,c
  7380  002890  0E00               	movlw	0
  7381  002892  6E07               	movwf	SD_Command@arg+3,c
  7382  002894  0E34               	movlw	low _CMD38
  7383  002896  6EF6               	movwf	tblptrl,c
  7384  002898                     	if	1	;There is more than 1 active tblptr byte
  7385  002898  0E10               	movlw	high _CMD38
  7386  00289A  6EF7               	movwf	tblptrh,c
  7387  00289C                     	endif
  7388  00289C                     	if	0	;There are less than 3 active tblptr bytes
  7389  00289C                     	endif
  7390  00289C  0008               	tblrd		*
  7391  00289E  50F5               	movf	tablat,w,c
  7392  0028A0  EC81  F013         	call	_SD_Command
  7393  0028A4  0012               	return		;funcret
  7394  0028A6                     __end_of_SD_EraseBlocks:
  7395                           	opt stack 0
  7396                           tblptru	equ	0xFF8
  7397                           tblptrh	equ	0xFF7
  7398                           tblptrl	equ	0xFF6
  7399                           tablat	equ	0xFF5
  7400                           prodh	equ	0xFF4
  7401                           prodl	equ	0xFF3
  7402                           intcon	equ	0xFF2
  7403                           intcon2	equ	0xFF1
  7404                           intcon3	equ	0xFF0
  7405                           postinc0	equ	0xFEE
  7406                           wreg	equ	0xFE8
  7407                           postdec1	equ	0xFE5
  7408                           plusw1	equ	0xFE3
  7409                           fsr1h	equ	0xFE2
  7410                           fsr1l	equ	0xFE1
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           plusw2	equ	0xFDB
  7415                           fsr2h	equ	0xFDA
  7416                           fsr2l	equ	0xFD9
  7417                           status	equ	0xFD8
  7418                           
  7419 ;; *************** function _SD_Command *****************
  7420 ;; Defined at:
  7421 ;;		line 32 in file "../../src/SD/SD_PIC.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  cmd             1    wreg     unsigned char 
  7424 ;;  arg             4    3[COMRAM] unsigned long 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  cmd             1    9[COMRAM] unsigned char 
  7427 ;;  ptr             2    7[COMRAM] PTR unsigned char 
  7428 ;;		 -> SD_Command@arg(4), 
  7429 ;;  n               1   11[COMRAM] unsigned char 
  7430 ;;  response        1   10[COMRAM] unsigned char 
  7431 ;; Return value:  Size  Location     Type
  7432 ;;                  1    wreg      unsigned char 
  7433 ;; Registers used:
  7434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7440 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7441 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;Total ram usage:        9 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:    2
  7447 ;; This function calls:
  7448 ;;		_spiReceive
  7449 ;;		_spiSend
  7450 ;; This function is called by:
  7451 ;;		_SD_ACMD
  7452 ;;		_SD_SingleBlockWrite
  7453 ;;		_SD_MBW_Start
  7454 ;;		_SD_MBW_Send
  7455 ;;		_SD_SingleBlockRead
  7456 ;;		_SD_MBR_Start
  7457 ;;		_SD_MBR_Stop
  7458 ;;		_SD_EraseBlocks
  7459 ;;		_initSD
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text31
  7464  002702                     __ptext31:
  7465                           	opt stack 0
  7466  002702                     _SD_Command:
  7467                           	opt stack 27
  7468                           
  7469                           ;incstack = 0
  7470                           ;SD_Command@cmd stored from wreg
  7471  002702  6E0A               	movwf	SD_Command@cmd,c
  7472                           
  7473                           ;SD_PIC.c: 42: unsigned char response;
  7474                           ;SD_PIC.c: 43: unsigned char n = 0;
  7475  002704  0E00               	movlw	0
  7476  002706  6E0C               	movwf	SD_Command@n,c
  7477                           
  7478                           ;SD_PIC.c: 46: LATEbits.LATE2 = 0;
  7479  002708  948D               	bcf	3981,2,c	;volatile
  7480  00270A                     l2418:
  7481  00270A  EC1D  F017         	call	_spiReceive	;wreg free
  7482  00270E  0AFF               	xorlw	255
  7483  002710  A4D8               	btfss	status,2,c
  7484  002712  D7FB               	goto	l2418
  7485                           
  7486                           ;SD_PIC.c: 54: spiSend(cmd | 0x40U);
  7487  002714  500A               	movf	SD_Command@cmd,w,c
  7488  002716  0940               	iorlw	64
  7489  002718  EC18  F017         	call	_spiSend
  7490                           
  7491                           ;SD_PIC.c: 58: unsigned char* ptr = (unsigned char*)&arg + sizeof(unsigned long) - 1;
  7492  00271C  0E07               	movlw	low (SD_Command@arg+3)
  7493  00271E  6E08               	movwf	SD_Command@ptr,c
  7494  002720  0E00               	movlw	high (SD_Command@arg+3)
  7495  002722  6E09               	movwf	SD_Command@ptr+1,c
  7496                           
  7497                           ;SD_PIC.c: 59: while(n < 4){
  7498  002724  D00B               	goto	l2430
  7499  002726                     l2424:
  7500                           
  7501                           ;SD_PIC.c: 60: spiSend(*ptr);
  7502  002726  C008  FFD9         	movff	SD_Command@ptr,fsr2l
  7503  00272A  C009  FFDA         	movff	SD_Command@ptr+1,fsr2h
  7504  00272E  50DF               	movf	indf2,w,c
  7505  002730  EC18  F017         	call	_spiSend
  7506                           
  7507                           ;SD_PIC.c: 61: ptr--;
  7508  002734  0608               	decf	SD_Command@ptr,f,c
  7509  002736  A0D8               	btfss	status,0,c
  7510  002738  0609               	decf	SD_Command@ptr+1,f,c
  7511                           
  7512                           ;SD_PIC.c: 62: n++;
  7513  00273A  2A0C               	incf	SD_Command@n,f,c
  7514  00273C                     l2430:
  7515  00273C  0E03               	movlw	3
  7516  00273E  640C               	cpfsgt	SD_Command@n,c
  7517  002740  D7F2               	goto	l2424
  7518                           
  7519                           ;SD_PIC.c: 63: }
  7520                           ;SD_PIC.c: 68: if(cmd == CMD8){
  7521  002742  0E41               	movlw	low _CMD8
  7522  002744  6EF6               	movwf	tblptrl,c
  7523  002746                     	if	1	;There is more than 1 active tblptr byte
  7524  002746  0E10               	movlw	high _CMD8
  7525  002748  6EF7               	movwf	tblptrh,c
  7526  00274A                     	endif
  7527  00274A                     	if	0	;There are less than 3 active tblptr bytes
  7528  00274A                     	endif
  7529  00274A  0008               	tblrd		*
  7530  00274C  50F5               	movf	tablat,w,c
  7531  00274E  620A               	cpfseq	SD_Command@cmd,c
  7532  002750  D009               	goto	l2436
  7533                           
  7534                           ;SD_PIC.c: 69: spiSend(CMD8CRC);
  7535  002752  0E40               	movlw	low _CMD8CRC
  7536  002754  6EF6               	movwf	tblptrl,c
  7537  002756                     	if	1	;There is more than 1 active tblptr byte
  7538  002756  0E10               	movlw	high _CMD8CRC
  7539  002758  6EF7               	movwf	tblptrh,c
  7540  00275A                     	endif
  7541  00275A                     	if	0	;There are less than 3 active tblptr bytes
  7542  00275A                     	endif
  7543  00275A  0008               	tblrd		*
  7544  00275C  50F5               	movf	tablat,w,c
  7545  00275E  EC18  F017         	call	_spiSend
  7546                           
  7547                           ;SD_PIC.c: 70: }
  7548  002762  D008               	goto	l2438
  7549  002764                     l2436:
  7550                           
  7551                           ;SD_PIC.c: 71: else{
  7552                           ;SD_PIC.c: 72: spiSend(CMD0CRC);
  7553  002764  0E43               	movlw	low _CMD0CRC
  7554  002766  6EF6               	movwf	tblptrl,c
  7555  002768                     	if	1	;There is more than 1 active tblptr byte
  7556  002768  0E10               	movlw	high _CMD0CRC
  7557  00276A  6EF7               	movwf	tblptrh,c
  7558  00276C                     	endif
  7559  00276C                     	if	0	;There are less than 3 active tblptr bytes
  7560  00276C                     	endif
  7561  00276C  0008               	tblrd		*
  7562  00276E  50F5               	movf	tablat,w,c
  7563  002770  EC18  F017         	call	_spiSend
  7564  002774                     l2438:
  7565                           
  7566                           ;SD_PIC.c: 73: }
  7567                           ;SD_PIC.c: 76: n = 0;
  7568  002774  0E00               	movlw	0
  7569  002776  6E0C               	movwf	SD_Command@n,c
  7570  002778                     l2440:
  7571                           
  7572                           ;SD_PIC.c: 78: response = spiReceive();
  7573  002778  EC1D  F017         	call	_spiReceive	;wreg free
  7574  00277C  6E0B               	movwf	SD_Command@response,c
  7575                           
  7576                           ;SD_PIC.c: 79: n++;
  7577  00277E  2A0C               	incf	SD_Command@n,f,c
  7578                           
  7579                           ;SD_PIC.c: 80: }while((n < 8) && (response == 0xFF));
  7580  002780  0E08               	movlw	8
  7581  002782  600C               	cpfslt	SD_Command@n,c
  7582  002784  D003               	goto	l159
  7583  002786  280B               	incf	SD_Command@response,w,c
  7584  002788  B4D8               	btfsc	status,2,c
  7585  00278A  D7F6               	goto	l2440
  7586  00278C                     l159:
  7587                           
  7588                           ;SD_PIC.c: 83: LATEbits.LATE2 = 1;
  7589  00278C  848D               	bsf	3981,2,c	;volatile
  7590                           
  7591                           ;SD_PIC.c: 85: return response;
  7592  00278E  500B               	movf	SD_Command@response,w,c
  7593  002790  0012               	return	
  7594  002792                     __end_of_SD_Command:
  7595                           	opt stack 0
  7596                           tblptru	equ	0xFF8
  7597                           tblptrh	equ	0xFF7
  7598                           tblptrl	equ	0xFF6
  7599                           tablat	equ	0xFF5
  7600                           prodh	equ	0xFF4
  7601                           prodl	equ	0xFF3
  7602                           intcon	equ	0xFF2
  7603                           intcon2	equ	0xFF1
  7604                           intcon3	equ	0xFF0
  7605                           postinc0	equ	0xFEE
  7606                           wreg	equ	0xFE8
  7607                           postdec1	equ	0xFE5
  7608                           plusw1	equ	0xFE3
  7609                           fsr1h	equ	0xFE2
  7610                           fsr1l	equ	0xFE1
  7611                           indf2	equ	0xFDF
  7612                           postinc2	equ	0xFDE
  7613                           postdec2	equ	0xFDD
  7614                           plusw2	equ	0xFDB
  7615                           fsr2h	equ	0xFDA
  7616                           fsr2l	equ	0xFD9
  7617                           status	equ	0xFD8
  7618                           
  7619 ;; *************** function _spiSend *****************
  7620 ;; Defined at:
  7621 ;;		line 33 in file "../../src/SPI/SPI_PIC.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;  val             1    wreg     unsigned char 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  val             1    2[COMRAM] unsigned char 
  7626 ;; Return value:  Size  Location     Type
  7627 ;;                  1    wreg      void 
  7628 ;; Registers used:
  7629 ;;		wreg, status,2, cstack
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7636 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7638 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;Total ram usage:        1 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:    1
  7642 ;; This function calls:
  7643 ;;		_spiTransfer
  7644 ;; This function is called by:
  7645 ;;		_SD_SendDummyBytes
  7646 ;;		_SD_Command
  7647 ;;		_SD_SingleBlockWrite
  7648 ;;		_SD_MBW_Send
  7649 ;;		_SD_MBW_Stop
  7650 ;;		_SD_SingleBlockRead
  7651 ;;		_SD_MBR_Receive
  7652 ;;		_initSD
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           	psect	text32
  7657  002E30                     __ptext32:
  7658                           	opt stack 0
  7659  002E30                     _spiSend:
  7660                           	opt stack 28
  7661                           
  7662                           ;incstack = 0
  7663                           ;spiSend@val stored from wreg
  7664  002E30  6E03               	movwf	spiSend@val,c
  7665                           
  7666                           ;SPI_PIC.c: 41: spiTransfer(val);
  7667  002E32  5003               	movf	spiSend@val,w,c
  7668  002E34  ECD8  F016         	call	_spiTransfer
  7669  002E38  0012               	return		;funcret
  7670  002E3A                     __end_of_spiSend:
  7671                           	opt stack 0
  7672                           tblptru	equ	0xFF8
  7673                           tblptrh	equ	0xFF7
  7674                           tblptrl	equ	0xFF6
  7675                           tablat	equ	0xFF5
  7676                           prodh	equ	0xFF4
  7677                           prodl	equ	0xFF3
  7678                           intcon	equ	0xFF2
  7679                           intcon2	equ	0xFF1
  7680                           intcon3	equ	0xFF0
  7681                           postinc0	equ	0xFEE
  7682                           wreg	equ	0xFE8
  7683                           postdec1	equ	0xFE5
  7684                           plusw1	equ	0xFE3
  7685                           fsr1h	equ	0xFE2
  7686                           fsr1l	equ	0xFE1
  7687                           indf2	equ	0xFDF
  7688                           postinc2	equ	0xFDE
  7689                           postdec2	equ	0xFDD
  7690                           plusw2	equ	0xFDB
  7691                           fsr2h	equ	0xFDA
  7692                           fsr2l	equ	0xFD9
  7693                           status	equ	0xFD8
  7694                           
  7695 ;; *************** function _spiReceive *****************
  7696 ;; Defined at:
  7697 ;;		line 44 in file "../../src/SPI/SPI_PIC.c"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;		None
  7700 ;; Auto vars:     Size  Location     Type
  7701 ;;		None
  7702 ;; Return value:  Size  Location     Type
  7703 ;;                  1    wreg      unsigned char 
  7704 ;; Registers used:
  7705 ;;		wreg, status,2, cstack
  7706 ;; Tracked objects:
  7707 ;;		On entry : 0/0
  7708 ;;		On exit  : 0/0
  7709 ;;		Unchanged: 0/0
  7710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;Total ram usage:        0 bytes
  7716 ;; Hardware stack levels used:    1
  7717 ;; Hardware stack levels required when called:    1
  7718 ;; This function calls:
  7719 ;;		_spiTransfer
  7720 ;; This function is called by:
  7721 ;;		_SD_Command
  7722 ;;		_SD_SingleBlockWrite
  7723 ;;		_SD_MBW_Send
  7724 ;;		_SD_MBW_Stop
  7725 ;;		_SD_SingleBlockRead
  7726 ;;		_SD_MBR_Receive
  7727 ;;		_initSD
  7728 ;;		_main
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           	psect	text33
  7733  002E3A                     __ptext33:
  7734                           	opt stack 0
  7735  002E3A                     _spiReceive:
  7736                           	opt stack 29
  7737                           
  7738                           ;SPI_PIC.c: 51: return spiTransfer(0xFF);
  7739                           
  7740                           ;incstack = 0
  7741  002E3A  0EFF               	movlw	255
  7742  002E3C  ECD8  F016         	call	_spiTransfer
  7743  002E40  0012               	return	
  7744  002E42                     __end_of_spiReceive:
  7745                           	opt stack 0
  7746                           tblptru	equ	0xFF8
  7747                           tblptrh	equ	0xFF7
  7748                           tblptrl	equ	0xFF6
  7749                           tablat	equ	0xFF5
  7750                           prodh	equ	0xFF4
  7751                           prodl	equ	0xFF3
  7752                           intcon	equ	0xFF2
  7753                           intcon2	equ	0xFF1
  7754                           intcon3	equ	0xFF0
  7755                           postinc0	equ	0xFEE
  7756                           wreg	equ	0xFE8
  7757                           postdec1	equ	0xFE5
  7758                           plusw1	equ	0xFE3
  7759                           fsr1h	equ	0xFE2
  7760                           fsr1l	equ	0xFE1
  7761                           indf2	equ	0xFDF
  7762                           postinc2	equ	0xFDE
  7763                           postdec2	equ	0xFDD
  7764                           plusw2	equ	0xFDB
  7765                           fsr2h	equ	0xFDA
  7766                           fsr2l	equ	0xFD9
  7767                           status	equ	0xFD8
  7768                           
  7769 ;; *************** function _spiTransfer *****************
  7770 ;; Defined at:
  7771 ;;		line 12 in file "../../src/SPI/SPI_PIC.c"
  7772 ;; Parameters:    Size  Location     Type
  7773 ;;  byteToTransf    1    wreg     unsigned char 
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  1    wreg      unsigned char 
  7778 ;; Registers used:
  7779 ;;		wreg, status,2
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;Total ram usage:        2 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; This function calls:
  7792 ;;		Nothing
  7793 ;; This function is called by:
  7794 ;;		_SD_SingleBlockWrite
  7795 ;;		_SD_MBW_Send
  7796 ;;		_spiSend
  7797 ;;		_spiReceive
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           	psect	text34
  7802  002DB0                     __ptext34:
  7803                           	opt stack 0
  7804  002DB0                     _spiTransfer:
  7805                           	opt stack 29
  7806                           
  7807                           ;incstack = 0
  7808                           ;spiTransfer@byteToTransfer stored from wreg
  7809  002DB0  6E02               	movwf	spiTransfer@byteToTransfer,c
  7810                           
  7811                           ;SPI_PIC.c: 23: SSPBUF = byteToTransfer;
  7812  002DB2  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  7813  002DB6                     l2358:
  7814  002DB6  B69E               	btfsc	3998,3,c	;volatile
  7815  002DB8  D002               	goto	u1470
  7816  002DBA  0E01               	movlw	1
  7817  002DBC  D001               	goto	u1472
  7818  002DBE                     u1470:
  7819  002DBE  0E00               	movlw	0
  7820  002DC0                     u1472:
  7821  002DC0  6E01               	movwf	??_spiTransfer& (0+255),c
  7822  002DC2  B0C7               	btfsc	4039,0,c	;volatile
  7823  002DC4  D002               	goto	u1480
  7824  002DC6  0E01               	movlw	1
  7825  002DC8  D001               	goto	u1482
  7826  002DCA                     u1480:
  7827  002DCA  0E00               	movlw	0
  7828  002DCC                     u1482:
  7829  002DCC  1001               	iorwf	??_spiTransfer,w,c
  7830  002DCE  E1F3               	bnz	l2358
  7831                           
  7832                           ;SPI_PIC.c: 30: return SSPBUF;
  7833  002DD0  50C9               	movf	4041,w,c	;volatile
  7834  002DD2  0012               	return	
  7835  002DD4                     __end_of_spiTransfer:
  7836                           	opt stack 0
  7837                           tblptru	equ	0xFF8
  7838                           tblptrh	equ	0xFF7
  7839                           tblptrl	equ	0xFF6
  7840                           tablat	equ	0xFF5
  7841                           prodh	equ	0xFF4
  7842                           prodl	equ	0xFF3
  7843                           intcon	equ	0xFF2
  7844                           intcon2	equ	0xFF1
  7845                           intcon3	equ	0xFF0
  7846                           postinc0	equ	0xFEE
  7847                           wreg	equ	0xFE8
  7848                           postdec1	equ	0xFE5
  7849                           plusw1	equ	0xFE3
  7850                           fsr1h	equ	0xFE2
  7851                           fsr1l	equ	0xFE1
  7852                           indf2	equ	0xFDF
  7853                           postinc2	equ	0xFDE
  7854                           postdec2	equ	0xFDD
  7855                           plusw2	equ	0xFDB
  7856                           fsr2h	equ	0xFDA
  7857                           fsr2l	equ	0xFD9
  7858                           status	equ	0xFD8
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           intcon2	equ	0xFF1
  7867                           intcon3	equ	0xFF0
  7868                           postinc0	equ	0xFEE
  7869                           wreg	equ	0xFE8
  7870                           postdec1	equ	0xFE5
  7871                           plusw1	equ	0xFE3
  7872                           fsr1h	equ	0xFE2
  7873                           fsr1l	equ	0xFE1
  7874                           indf2	equ	0xFDF
  7875                           postinc2	equ	0xFDE
  7876                           postdec2	equ	0xFDD
  7877                           plusw2	equ	0xFDB
  7878                           fsr2h	equ	0xFDA
  7879                           fsr2l	equ	0xFD9
  7880                           status	equ	0xFD8
  7881                           
  7882                           	psect	rparam
  7883  0000                     tblptru	equ	0xFF8
  7884                           tblptrh	equ	0xFF7
  7885                           tblptrl	equ	0xFF6
  7886                           tablat	equ	0xFF5
  7887                           prodh	equ	0xFF4
  7888                           prodl	equ	0xFF3
  7889                           intcon	equ	0xFF2
  7890                           intcon2	equ	0xFF1
  7891                           intcon3	equ	0xFF0
  7892                           postinc0	equ	0xFEE
  7893                           wreg	equ	0xFE8
  7894                           postdec1	equ	0xFE5
  7895                           plusw1	equ	0xFE3
  7896                           fsr1h	equ	0xFE2
  7897                           fsr1l	equ	0xFE1
  7898                           indf2	equ	0xFDF
  7899                           postinc2	equ	0xFDE
  7900                           postdec2	equ	0xFDD
  7901                           plusw2	equ	0xFDB
  7902                           fsr2h	equ	0xFDA
  7903                           fsr2l	equ	0xFD9
  7904                           status	equ	0xFD8


Data Sizes:
    Strings     165
    Constant    74
    Data        0
    BSS         1088
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    109     127
    BANK0           128      0      46
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_15(CODE[8]), STR_14(CODE[10]), STR_13(CODE[9]), STR_12(CODE[16]), 
		 -> STR_11(CODE[9]), STR_10(CODE[8]), STR_9(CODE[17]), STR_8(CODE[9]), 
		 -> STR_7(CODE[10]), STR_6(CODE[10]), STR_5(CODE[13]), STR_4(CODE[15]), 
		 -> STR_3(CODE[13]), STR_2(CODE[12]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    average@array	PTR unsigned char  size(2) Largest target is 512
		 -> main@readBuffer(BIGRAM[512]), 

    SD_MBR_Receive@bufReceive	PTR unsigned char  size(2) Largest target is 512
		 -> main@readBuffer(BIGRAM[512]), 

    SD_SingleBlockRead@buf	PTR unsigned char  size(2) Largest target is 512
		 -> main@readBuffer(BIGRAM[512]), 

    SD_MBW_Send@arrWrite	PTR unsigned char  size(2) Largest target is 512
		 -> writeBuffer(BIGRAM[512]), 

    SD_SingleBlockWrite@arr	PTR unsigned char  size(2) Largest target is 512
		 -> writeBuffer(BIGRAM[512]), 

    SD_Command@ptr	PTR unsigned char  size(2) Largest target is 4
		 -> SD_Command@arg(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_initSD
    _printf->_average
    _putch->_lcdNibble
    ___llmod->___lldiv
    _lcd_set_cursor->_lcd_shift_cursor
    _lcd_shift_cursor->_lcdInst
    _initSD->___fttol
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lltoft
    ___ftdiv->___lwtoft
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _average->___lldiv
    _SD_SingleBlockWrite->_SD_Command
    _SD_SingleBlockRead->_SD_Command
    _SD_MBW_Stop->_spiSend
    _SD_MBW_Start->_SD_ACMD
    _SD_ACMD->_SD_Command
    _SD_MBW_Send->_SD_Command
    _SD_SendDummyBytes->_spiSend
    _SD_MBR_Stop->_SD_Command
    _SD_MBR_Start->_SD_Command
    _SD_MBR_Receive->_spiSend
    _SD_EraseBlocks->_SD_Command
    _SD_Command->_spiSend
    _spiSend->_spiTransfer
    _spiReceive->_spiTransfer

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   40104
                                             86 COMRAM    23    23      0
                     _SD_EraseBlocks
                     _SD_MBR_Receive
                       _SD_MBR_Start
                        _SD_MBR_Stop
                        _SD_MBW_Send
                       _SD_MBW_Start
                        _SD_MBW_Stop
                 _SD_SingleBlockRead
                _SD_SingleBlockWrite
                            ___lldiv
                            ___llmod
                            _average
                            _initLCD
                             _initSD
                            _lcdInst
                     _lcd_set_cursor
                      _machineConfig
                             _printf
                         _spiReceive
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    21      6    2882
                                             24 COMRAM    18    12      6
                            ___lldiv
                            ___llmod
                            _average (ARG)
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     463
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _machineConfig                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_set_cursor                                       4     3      1     602
                                              6 COMRAM     4     3      1
                            _lcdInst
                   _lcd_shift_cursor
 ---------------------------------------------------------------------------------
 (2) _lcd_shift_cursor                                     3     2      1     301
                                              3 COMRAM     3     2      1
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initSD                                              39    39      0   17130
                                             47 COMRAM    39    39      0
                            _SD_ACMD
                         _SD_Command
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                           ___lwtoft
                            _spiInit
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2564
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2687
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     404
                                             32 COMRAM    15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3222
                                             17 COMRAM    15     9      6
                           ___ftpack
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3024
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2466
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _average                                             11     7      4    1058
                                             13 COMRAM    11     7      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     618
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _SD_SingleBlockWrite                                 10     4      6    2258
                                             12 COMRAM    10     4      6
                         _SD_Command
                  _SD_SendDummyBytes
                         _spiReceive
                            _spiSend
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _SD_SingleBlockRead                                  10     4      6    2191
                                             12 COMRAM    10     4      6
                         _SD_Command
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_MBW_Stop                                          0     0      0      66
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_MBW_Start                                         9     1      8    3955
                                             17 COMRAM     9     1      8
                            _SD_ACMD
                         _SD_Command
 ---------------------------------------------------------------------------------
 (2) _SD_ACMD                                              5     1      4    1966
                                             12 COMRAM     5     1      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (1) _SD_MBW_Send                                          6     4      2    2163
                                             12 COMRAM     6     4      2
                         _SD_Command
                  _SD_SendDummyBytes
                         _spiReceive
                            _spiSend
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (2) _SD_SendDummyBytes                                    2     2      0      90
                                              3 COMRAM     2     2      0
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_MBR_Stop                                          0     0      0    1770
                         _SD_Command
 ---------------------------------------------------------------------------------
 (1) _SD_MBR_Start                                         6     2      4    1937
                                             12 COMRAM     6     2      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (1) _SD_MBR_Receive                                       5     3      2     232
                                              3 COMRAM     5     3      2
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (1) _SD_EraseBlocks                                       8     0      8    1968
                                             12 COMRAM     8     0      8
                         _SD_Command
 ---------------------------------------------------------------------------------
 (2) _SD_Command                                           9     5      4    1770
                                              3 COMRAM     9     5      4
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (1) _spiReceive                                           0     0      0      22
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (2) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SD_EraseBlocks
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBR_Receive
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _SD_MBR_Start
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBR_Stop
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBW_Send
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _SD_SendDummyBytes
       _spiSend
         _spiTransfer
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
     _spiTransfer
   _SD_MBW_Start
     _SD_ACMD
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
   _SD_MBW_Stop
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _SD_SingleBlockRead
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _SD_SingleBlockWrite
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     _SD_SendDummyBytes
       _spiSend
         _spiTransfer
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
     _spiTransfer
   ___lldiv
   ___llmod
     ___lldiv (ARG)
   _average
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _initSD
     _SD_ACMD
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lltoft
       ___ftpack
     ___lwtoft
       ___ftpack
     _spiInit
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _lcdInst
     _lcdNibble
   _lcd_set_cursor
     _lcdInst
       _lcdNibble
     _lcd_shift_cursor
       _lcdInst
         _lcdNibble
   _machineConfig
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _average (ARG)
       ___lldiv
     _putch (ARG)
       _lcdNibble
   _spiReceive
     _spiTransfer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     400      37       25.8%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      2E       5       35.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     6D      7F       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AD      34        0.0%
DATA                 0      0     4AD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Apr 17 02:46:08 2018

      __end_of_R1_READY_STATE 102F                   _SSPSTATbits 000FC7                   __CFG_CPD$ON 000000  
          initSD@arr_response 0041                   __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                         l173 2558                           l341 2CF4                           l262 116A  
                         l159 278C                           l271 1260                           l196 2144  
                         l268 11EA                           l293 13C4                           l470 1936  
                         l560 1F44                           l803 26E2                           l563 1FA4  
                         l495 1EE6                           l861 2488                           l928 2916  
                         l938 2B4E                  __CFG_CPB$OFF 000000                ?_machineConfig 0001  
             __end_of_CMD0CRC 1044               __end_of_CMD8CRC 1041                           prod 000FF3  
                         wreg 000FE8            SD_SendDummyBytes@n 0005                 SD_Command@cmd 000A  
               SD_Command@arg 0004                 SD_Command@ptr 0008               ?_lcd_set_cursor 0007  
                __CFG_LVP$OFF 000000                  ___ftdiv@cntr 0015                  ___ftdiv@sign 001A  
                __CFG_WDT$OFF 000000                          l3010 11A0                          l3002 1160  
                        l3100 13BC                          l3020 11D0                          l3040 1246  
                        l3016 11C8                          l3008 116C                          l3210 18A0  
                        l3122 144A                          l3114 1426                          l3106 13C6  
                        l3220 2ACA                          l3140 1550                          l3036 123E  
                        l3052 126A                          l2430 273C                          l3150 16FE  
                        l3118 1442                          l3062 128E                          l3302 20BE  
                        l2440 2778                          l2424 2726                          l2512 2E00  
                        l3216 2AAA                          l3208 1898                          l3160 1720  
                        l3128 1464                          l3240 1EF2                          l3304 20CE  
                        l2418 270A                          l2530 2CDE                          l3082 1366  
                        l3074 1310                          l3066 12A6                          l3410 1B5E  
                        l3330 192A                          l2436 2764                          l2508 2DF8  
                        l2460 2672                          l2604 2362                          l2524 2CD0  
                        l3156 1718                          l3068 12B6                          l2700 2B18  
                        l3260 1F68                          l3252 1F10                          l3244 1F02  
                        l3412 1B7E                          l3340 1976                          l3332 1938  
                        l2358 2DB6                          l2438 2774                          l2470 26CE  
                        l2462 267C                          l2614 238A                          l2526 2CD4  
                        l3166 173A                          l3086 136E                          l2702 2B1C  
                        l3246 1F08                          l2800 2582                          l2472 26D8  
                        l2464 269A                          l2456 2664                          l2544 2424  
                        l2608 2372                          l2632 2218                          l2712 2B66  
                        l2528 2CD8                          l3096 13B4                          l3280 1FEC  
                        l3248 1F0C                          l3408 1B52                          l3344 1990  
                        l2538 23FC                          l2618 239A                          l2650 227E  
                        l2714 2B72                          l2706 2B40                          l3274 1FC4  
                        l3354 19BC                          l2820 211C                          l2468 26B0  
                        l2564 2462                          l2660 22A6                          l3292 2024  
                        l3460 1CAC                          l2830 213E                          l2814 20FA  
                        l2806 29BE                          l2590 2330                          l2662 22B2  
                        l2654 228E                          l2750 2C72                          l3278 1FE8  
                        l2920 2A40                          l2840 2178                          l2808 29DE  
                        l2760 24D2                          l2680 28D4                          l2584 2308  
                        l2664 22B8                          l2496 2DDA                          l3296 2036  
                        l3456 1C9A                          l3376 1A5A                          l2930 2792  
                        l2842 2186                          l2834 2158                          l2906 2632  
                        l2690 2908                          l2682 28D8                          l2746 2C6A  
                        l3298 2042                          l3482 1D60                          l3386 1A86  
                        l2932 279E                          l2852 21AE                          l2780 2568  
                        l2668 22CE                          l2846 218A                          l2790 257A  
                        l2766 2520                          l2678 28C8                          l3398 1AEA  
                        l2936 27BE                          l2864 21D6                          l2872 2D50  
                        l2880 25B0                          l2776 2540                          l3488 1D9A  
                        l2946 27DE                          l2858 21D2                          l2890 25F4  
                        l2794 257E                          l2786 2576                          l2698 2B0C  
                        l2956 280C                          l2868 2D36                          l2966 2844  
                        l2896 2612                          l2888 25E2                          l2984 1126  
                        l2986 112E                          l2998 1158                          _CMD0 1044  
                        _CMD1 1042                          _CMD8 1041                          _CMD9 103F  
                        STR_1 107B                          STR_2 10A3                          STR_3 1096  
                        STR_4 106C                          STR_5 1089                          STR_6 10C3  
                        STR_7 10AF                          STR_8 10DF                          STR_9 104B  
      SD_MBR_Start@startBlock 000D                          u2025 29B0                          u2125 25A2  
                        u2301 1104                          _LATA 000F89                          _LATB 000F8A  
                        u3007 1BA8                          _LATC 000F8B                          _LATD 000F8C  
                        u1505 29A2                          u3017 1BEA                          _LATE 000F8D  
                        u1506 29A4                          u3107 2E14                          u3027 1C06  
                        u2500 13AA                          u3117 2C5A                          u3037 1C1C  
                        u1470 2DBE                          u2510 13AC                          u3207 298A  
                        u3127 1128                          u3047 1C3C                          u1480 2DCA  
                        u1472 2DC0                          u1800 2236                          u3217 2994  
                        u1721 22F0                          u3137 1142                          u3057 1CB6  
                        u1482 2DCC                          u2610 1626                          u2195 2A32  
                        u3147 189A                          u3067 1CF2                          u2620 1660  
                        u2285 2826                          u3157 2BC2                          u1741 2318  
                        u1805 222E                          u2605 15FE                          u3077 1D08  
                        u2295 2836                          u1495 2962                          u3167 2BF6  
                        u1671 23E4                          u2615 161C                          u3087 1E82  
                        u1496 2964                          u3177 2E28                          u2625 1656  
                        u3097 1E98                          u3187 294A                          u1691 240C  
                        u3197 2954                          u1781 21FC                          u2595 1564  
                        _PEIE 007F96                          u1965 24C4                          u2937 1942  
                        u2947 19EA                          u2957 1A00                          u2967 1A32  
                        u2977 1A92                          u2987 1AA8                          u2997 1B92  
             __end_of_SD_ACMD 2CC6                          _main 1902                  ___ftpack@arg 0001  
                ___ftpack@exp 0004                          fsr1h 000FE2                          fsr2h 000FDA  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
         SD_SingleBlockRead@i 0014                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000                  average@array 000E  
              initSD@argument 0037                 __CFG_MCLRE$ON 000000                  ___ftmul@cntr 001F  
                ___param_bank 000000                  ___ftmul@sign 0020              __end_of_LCD_LEFT 1046  
                ___fttol@exp1 002F   __size_of_SD_SingleBlockRead 00BC                  ___fttol@lval 002B  
                 _writeBuffer 0D80                         ?_main 0001                         _CMD10 103E  
                       _CMD12 103D                         _CMD13 103C                         _CMD16 103B  
                       _CMD24 1038                         _CMD32 1036                         _CMD17 103A  
                       _CMD25 1037                         _CMD33 1035                         _CMD18 1039  
                       _CMD38 1034                         _CMD55 1033                         _CMD58 1032  
                       STR_10 10E8                         STR_11 10CD                         STR_12 105C  
                       STR_13 10D6                         STR_14 10B9                         STR_15 10E8  
              initSD@tempSize 003D               __end_of___ftdiv 24BA               __end_of___lldiv 2928  
             __end_of___ftmul 23D4               __end_of___llmod 2B60               __end_of___fttol 22E0  
              initSD@response 0055                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
                       _SSPIF 007CF3            initSD@last_OSCTUNE 003C      SD_SingleBlockWrite@block 000D  
               __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                  ___lltoft@exp 0011  
             __end_of_lcdInst 2E30                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
                       _nRBPU 007F8F            average@numElements 0010               __end_of_average 2AFA  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
             __end_of_initLCD 2C08                __CFG_EBTRB$OFF 000000               __end_of_dpowers 1029  
               ___ftpack@sign 0005                         _putch 2E08                         main@i 006A  
                 initSD@F3023 006E               __end_of_spiInit 2CFE                         tablat 000FF5  
             __end_of_spiSend 2E3A             _LCDinterruptState 007F                         plusw1 000FE3  
                       plusw2 000FDB                   ?_SD_Command 0004                         status 000FD8  
              __CFG_PBADEN$ON 000000                  __end_of_CMD0 1045                  __end_of_CMD1 1043  
                __end_of_CMD8 1042                  __end_of_CMD9 1040          SD_SingleBlockWrite@i 0015  
             __initialization 2CFE                  __end_of_main 1EE8      SD_MBR_Receive@bufReceive 0004  
           ?_lcd_shift_cursor 0004                __CFG_OSC$HSPLL 000000               ??_machineConfig 0001  
           __end_of_LCD_RIGHT 1047                        ??_main 0057                 ___fttol@sign1 002A  
            ??_SD_EraseBlocks 0015            ??_lcd_shift_cursor 0005                 __activetblptr 000002  
__size_of_SD_SingleBlockWrite 00DE            SD_Command@response 000B                     ??_SD_ACMD 0011  
                      _ACMD22 1031                        _ACMD23 1030                        _ACMD41 102F  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
            ___llmod@dividend 000E                        ?_putch 0001              __end_of___ftpack 2702  
            __end_of___lltoft 2BBC                        _INT1IE 007F83                        _CVRCON 000FB5  
            __end_of___lwtoft 2DB0                        _OSCCON 000FD3                        _SDCard 0080  
                      _SSPBUF 000FC9                  ?_SD_MBR_Stop 0001                  ?_SD_MBW_Send 000D  
                ?_SD_MBW_Stop 0001       __size_of_SD_MBR_Receive 008A                __CFG_XINST$OFF 000000  
              __CFG_STVREN$ON 000000                     ??___ftdiv 0012                     ??___lldiv 0009  
                   ??___ftmul 0018                     ??___llmod 0016                     ??___fttol 0025  
                      _initSD 10F2                        clear_0 2D06                        clear_1 2D18  
                      clear_2 2D24                     ??_lcdInst 0003                        _printf 1EE8  
               main@numWrites 0067                     ??_average 0012         ___ftmul@f3_as_product 001C  
                   ??_initLCD 0004           __size_of_SD_Command 0090             __end_of_STOP_TRAN 102A  
       SD_SingleBlockRead@buf 0011                  ?_spiTransfer 0001                  __mediumconst 0000  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_spiInit 0001                     ??_spiSend 0003                    __accesstop 0080  
     __end_of__initialization 2D2A          SD_MBR_Start@response 0012                 __end_of_CMD10 103F  
               __end_of_CMD12 103E                 __end_of_CMD13 103D                 __end_of_CMD16 103C  
               __end_of_CMD24 1039                 __end_of_CMD32 1037                 __end_of_CMD17 103B  
               __end_of_CMD25 1038                 __end_of_CMD33 1036                 __end_of_CMD18 103A  
               __end_of_CMD38 1035                 __end_of_CMD55 1034                 __end_of_CMD58 1033  
               ___rparam_used 000001                    ___ftdiv@f1 000C                    ___ftdiv@f2 000F  
                  ___ftdiv@f3 0016                    ___ftmul@f1 0012                    ___ftmul@f2 0015  
                  ___fttol@f1 0021                __pcstackCOMRAM 0001                    ___lltoft@c 0009  
               __end_of_putch 2E1C             _START_BLOCK_TOKEN 102A                    ___lwtoft@c 0009  
    SD_EraseBlocks@firstBlock 000D              ??_lcd_set_cursor 0008            __size_of_lcdNibble 007E  
                     ??_putch 0003                    __pbssBANK0 0080     __end_of_START_BLOCK_TOKEN 102B  
                     ?_initSD 0001                       _CMD0CRC 1043             _SD_SendDummyBytes 2DF0  
                     _CMD8CRC 1040                     ?___ftpack 0001                       ?_printf 0019  
                   ?___lltoft 0009                main@firstBlock 0069                     ?___lwtoft 0009  
          ?_SD_SendDummyBytes 0001                       _SD_ACMD 2C8C                       _OSCTUNE 000F9B  
   spiTransfer@byteToTransfer 0002                main@readBuffer 0B80           ??_SD_SendDummyBytes 0004  
        lcd@LCDinterruptState 007E                       _SSPCON1 000FC6                       _SSPSTAT 000FC7  
               ?_SD_MBR_Start 000D                  ??_SD_Command 0008                 ?_SD_MBW_Start 0012  
         _SD_SingleBlockWrite 24BA             __end_of_lcdNibble 29A6                _SD_MBR_Receive 2792  
          initSD@tempSize_479 0051                       __Hparam 0000                       __Lparam 0000  
  __end_of_SD_SingleBlockRead 2654          __size_of_SD_MBR_Stop 0028          __size_of_SD_MBW_Send 0104  
        __size_of_SD_MBW_Stop 0030     __end_of_SD_SendDummyBytes 2E08                       ___ftdiv 23D4  
                     ___lldiv 28A6                       ___ftmul 22E0                       ___llmod 2AFA  
                     ___fttol 21EC                     _CMCONbits 000FB4                  __psmallconst 1000  
             __size_of_initSD 0810                       __pcinit 2CFE                    ??___ftpack 0006  
                     __ramtop 1000                       _lcdInst 2E1C                    ??___lltoft 000D  
                     __ptext0 1902                       __ptext1 1EE8                       __ptext2 2E08  
                     __ptext3 2AFA                       __ptext4 2C08                       __ptext5 2C4C  
                     __ptext6 2DD4                       __ptext7 10F2                       __ptext8 2CC6  
                     __ptext9 2D8C               __size_of_printf 0200                       _average 2A90  
                  ??___lwtoft 000C          ?_SD_SingleBlockWrite 000D                       _initLCD 2BBC  
                     _dpowers 1001            __end_of_SD_Command 2792                     _LCD_RIGHT 1046  
                     _spiInit 2CC6                       _spiSend 2E30          __size_of_spiTransfer 0024  
                     main@avg 0063     __size_of_lcd_shift_cursor 001C          end_of_initialization 2D2A  
              ??_SD_MBR_Start 0011                       initSD@i 0056         __end_of_R1_IDLE_STATE 102E  
       __end_of_LCD_SIZE_HORZ 1049         __end_of_LCD_SIZE_VERT 1048     SD_SendDummyBytes@numBytes 0004  
              ??_SD_MBW_Start 001A                 __Lmediumconst 0000        __end_of_SD_MBR_Receive 281C  
             ___lldiv@divisor 0005               ___lldiv@counter 000D                       printf@c 002A  
                     printf@f 0019    SD_SingleBlockRead@response 0016                    _spiReceive 2E3A  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE         ??_SD_SingleBlockWrite 0013         __end_of_machineConfig 2C4C  
              spiInit@divider 0001                     _TRISCbits 000F94                     _TRISEbits 000F96  
                   _STOP_TRAN 1029                   SD_Command@n 000C                __end_of_ACMD22 1032  
              __end_of_ACMD23 1031                __end_of_ACMD41 1030                    average@sum 0013  
             ?_SD_MBR_Receive 0004                   ___ftdiv@exp 0019     lcd_shift_cursor@direction 0004  
      SD_SingleBlockWrite@arr 0011                   ___ftmul@exp 001B    __size_of_SD_SendDummyBytes 0018  
           initSD@last_OSCCON 003B                __end_of_initSD 1902                __end_of_printf 20E8  
         start_initialization 2CFE    __end_of_R1_ILLEGAL_COMMAND 102D       __size_of_SD_EraseBlocks 008A  
             ___llmod@divisor 0012               ___llmod@counter 0016                   ?_spiReceive 0001  
            __CFG_LPT1OSC$OFF 000000                      ??_initSD 0030          __end_of_SD_MBR_Start 2A90  
                    ??_printf 001F          __end_of_SD_MBW_Start 2A24             __size_of___ftpack 00AE  
                 __pbssBIGRAM 0B80             __size_of___lltoft 005C                   __pbssCOMRAM 006E  
           __size_of___lwtoft 0024                      ?_SD_ACMD 000D              _lcd_shift_cursor 2DD4  
     SD_EraseBlocks@lastBlock 0011               SD_MBR_Receive@i 0007             __CFG_CCP2MX$PORTC 000000  
                  SD_ACMD@cmd 0011                    SD_ACMD@arg 000D                     _lcdNibble 2928  
                    ?___ftdiv 000C                      ?___lldiv 0001                      ?___ftmul 0012  
                    ?___llmod 000E                      ?___fttol 0021                      ?_lcdInst 0001  
                    ?_average 000E                      ?_initLCD 0001                   __smallconst 1000  
          _SD_SingleBlockRead 2598                      ?_spiInit 0001                      ?_spiSend 0001  
         ?_SD_SingleBlockRead 000D           __size_of_spiReceive 0008                __size_of_putch 0014  
                    _LCD_LEFT 1045       __size_of_lcd_set_cursor 0040                      _LATDbits 000F8C  
                    _LATEbits 000F8D                 ??_SD_MBR_Stop 000D                 ??_SD_MBW_Send 000F  
               ??_SD_MBW_Stop 0004               lcd_set_cursor@i 0009               lcd_set_cursor@x 000A  
             lcd_set_cursor@y 0007                    spiSend@val 0003              __CFG_WDTPS$32768 000000  
                  ?_lcdNibble 0001          ??_SD_SingleBlockRead 0013   SD_SingleBlockWrite@response 0014  
               lcdNibble@data 0002                    printf@flag 0029                 lcdNibble@temp 0001  
               ??_spiTransfer 0001                    printf@prec 0021                _LCD_HORZ_LIMIT 104A  
            ??_SD_MBR_Receive 0006              __size_of_SD_ACMD 003A                _SD_EraseBlocks 281C  
                    __Hrparam 0000                      __Lrparam 0000         __size_of_SD_MBR_Start 006C  
          __CFG_BOREN$SBORDIS 000000   __end_of_SD_SingleBlockWrite 2598         __size_of_SD_MBW_Start 007E  
         __end_of_SD_MBR_Stop 2D8C           __end_of_SD_MBW_Send 21EC           __end_of_SD_MBW_Stop 2D64  
            __size_of___ftdiv 00E6              __size_of___lldiv 0082              __size_of___ftmul 00F4  
            __size_of___llmod 0066              __size_of___fttol 00F4                      ___ftpack 2654  
                    ___lltoft 2B60                      ___lwtoft 2D8C              __size_of_lcdInst 0014  
            __size_of_average 006A              __size_of_initLCD 004C        __end_of_LCD_HORZ_LIMIT 104B  
      __end_of_SD_EraseBlocks 28A6                      __ptext10 2B60                      __ptext11 21EC  
                    __ptext20 24BA                      __ptext12 22E0                      __ptext21 2598  
                    __ptext13 23D4                      __ptext30 281C                      __ptext22 2D34  
                    __ptext14 2654                      __ptext31 2702                      __ptext23 29A6  
                    __ptext15 2BBC                      __ptext32 2E30                      __ptext24 2C8C  
                    __ptext16 2E1C                      __ptext33 2E3A                      __ptext25 20E8  
                    __ptext17 2928                      __ptext34 2DB0                      __ptext26 2DF0  
                    __ptext18 2A90                      __ptext27 2D64                      __ptext19 28A6  
                    __ptext28 2A24                      __ptext29 2792              __size_of_spiInit 0038  
            __size_of_spiSend 000A           __end_of_START_BLOCK 102C                _LCD_VERT_LIMIT 1049  
                SD_MBW_Send@i 0011           __end_of_spiTransfer 2DD4                  _SD_MBR_Start 2A24  
               __size_of_main 05E6                  _SD_MBW_Start 29A6        __size_of_machineConfig 0044  
          _R1_ILLEGAL_COMMAND 102C                  ??_spiReceive 0003                   ??_lcdNibble 0001  
    __end_of_lcd_shift_cursor 2DF0        SD_MBW_Start@startBlock 0012                      average@n 0017  
                   printf@val 0023             lcd_shift_cursor@n 0006                     putch@data 0003  
                 _OSCTUNEbits 000F9B                    _INTCONbits 000FF2        __end_of_LCD_VERT_LIMIT 104A  
             ?_SD_EraseBlocks 000D       SD_SingleBlockRead@block 000D         SD_MBW_Start@numBlocks 0016  
              _lcd_set_cursor 2C4C            __end_of_spiReceive 2E42                 _R1_IDLE_STATE 102D  
               _LCD_SIZE_HORZ 1048                 _LCD_SIZE_VERT 1047              ___lldiv@dividend 0001  
         SD_MBW_Send@arrWrite 000D                   _SD_MBR_Stop 2D64                   _SD_MBW_Send 20E8  
                 _SD_MBW_Stop 2D34                    _OSCCONbits 000FD3                      printf@ap 0027  
              _R1_READY_STATE 102E                   lcdInst@data 0003           SD_MBW_Send@response 0010  
                 _START_BLOCK 102B              ___lldiv@quotient 0009                 _machineConfig 2C08  
                 _spiTransfer 2DB0                   _SSPCON1bits 000FC6        __end_of_lcd_set_cursor 2C8C  
                  _SD_Command 2702      lcd_shift_cursor@numChars 0005             SD_MBW_Send@status 000F  
