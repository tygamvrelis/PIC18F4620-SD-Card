

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Dec 11 01:18:46 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	text32,global,reloc=2,class=CODE,delta=1
    42                           	psect	text33,global,reloc=2,class=CODE,delta=1
    43                           	psect	text34,global,reloc=2,class=CODE,delta=1,inline
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46  0000                     
    47                           ; Version 1.42
    48                           ; Generated 13/04/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4620 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	mediumconst
    83  00FE52                     __pmediumconst:
    84                           	opt stack 0
    85  00FE52  00                 	db	0
    86  00FE53                     _dpowers:
    87                           	opt stack 0
    88  00FE53  0001               	dw	1
    89  00FE55  0000               	dw	0
    90  00FE57  000A               	dw	10
    91  00FE59  0000               	dw	0
    92  00FE5B  0064               	dw	100
    93  00FE5D  0000               	dw	0
    94  00FE5F  03E8               	dw	1000
    95  00FE61  0000               	dw	0
    96  00FE63  2710               	dw	10000
    97  00FE65  0000               	dw	0
    98  00FE67  86A0               	dw	34464
    99  00FE69  0001               	dw	1
   100  00FE6B  4240               	dw	16960
   101  00FE6D  000F               	dw	15
   102  00FE6F  9680               	dw	38528
   103  00FE71  0098               	dw	152
   104  00FE73  E100               	dw	57600
   105  00FE75  05F5               	dw	1525
   106  00FE77  CA00               	dw	51712
   107  00FE79  3B9A               	dw	15258
   108  00FE7B                     __end_of_dpowers:
   109                           	opt stack 0
   110  00FE7B                     __powers_:
   111                           	opt stack 0
   112  00FE7B  00                 	db	0
   113  00FE7C  80                 	db	128
   114  00FE7D  3F                 	db	63
   115  00FE7E  00                 	db	0
   116  00FE7F  20                 	db	32
   117  00FE80  41                 	db	65
   118  00FE81  00                 	db	0
   119  00FE82  C8                 	db	200
   120  00FE83  42                 	db	66
   121  00FE84  00                 	db	0
   122  00FE85  7A                 	db	122
   123  00FE86  44                 	db	68
   124  00FE87  40                 	db	64
   125  00FE88  1C                 	db	28
   126  00FE89  46                 	db	70
   127  00FE8A  50                 	db	80
   128  00FE8B  C3                 	db	195
   129  00FE8C  47                 	db	71
   130  00FE8D  24                 	db	36
   131  00FE8E  74                 	db	116
   132  00FE8F  49                 	db	73
   133  00FE90  97                 	db	151
   134  00FE91  18                 	db	24
   135  00FE92  4B                 	db	75
   136  00FE93  BC                 	db	188
   137  00FE94  BE                 	db	190
   138  00FE95  4C                 	db	76
   139  00FE96  6B                 	db	107
   140  00FE97  6E                 	db	110
   141  00FE98  4E                 	db	78
   142  00FE99  03                 	db	3
   143  00FE9A  15                 	db	21
   144  00FE9B  50                 	db	80
   145  00FE9C  79                 	db	121
   146  00FE9D  AD                 	db	173
   147  00FE9E  60                 	db	96
   148  00FE9F  F3                 	db	243
   149  00FEA0  49                 	db	73
   150  00FEA1  71                 	db	113
   151  00FEA2                     __end_of__powers_:
   152                           	opt stack 0
   153  00FEA2                     __npowers_:
   154                           	opt stack 0
   155  00FEA2  00                 	db	0
   156  00FEA3  80                 	db	128
   157  00FEA4  3F                 	db	63
   158  00FEA5  CD                 	db	205
   159  00FEA6  CC                 	db	204
   160  00FEA7  3D                 	db	61
   161  00FEA8  D7                 	db	215
   162  00FEA9  23                 	db	35
   163  00FEAA  3C                 	db	60
   164  00FEAB  12                 	db	18
   165  00FEAC  83                 	db	131
   166  00FEAD  3A                 	db	58
   167  00FEAE  B7                 	db	183
   168  00FEAF  D1                 	db	209
   169  00FEB0  38                 	db	56
   170  00FEB1  C6                 	db	198
   171  00FEB2  27                 	db	39
   172  00FEB3  37                 	db	55
   173  00FEB4  38                 	db	56
   174  00FEB5  86                 	db	134
   175  00FEB6  35                 	db	53
   176  00FEB7  C0                 	db	192
   177  00FEB8  D6                 	db	214
   178  00FEB9  33                 	db	51
   179  00FEBA  CC                 	db	204
   180  00FEBB  2B                 	db	43
   181  00FEBC  32                 	db	50
   182  00FEBD  70                 	db	112
   183  00FEBE  89                 	db	137
   184  00FEBF  30                 	db	48
   185  00FEC0  E7                 	db	231
   186  00FEC1  DB                 	db	219
   187  00FEC2  2E                 	db	46
   188  00FEC3  E5                 	db	229
   189  00FEC4  3C                 	db	60
   190  00FEC5  1E                 	db	30
   191  00FEC6  42                 	db	66
   192  00FEC7  A2                 	db	162
   193  00FEC8  0D                 	db	13
   194  00FEC9                     __end_of__npowers_:
   195                           	opt stack 0
   196  00FEC9                     _hexpowers:
   197                           	opt stack 0
   198  00FEC9  0001               	dw	1
   199  00FECB  0000               	dw	0
   200  00FECD  0010               	dw	16
   201  00FECF  0000               	dw	0
   202  00FED1  0100               	dw	256
   203  00FED3  0000               	dw	0
   204  00FED5  1000               	dw	4096
   205  00FED7  0000               	dw	0
   206  00FED9  0000               	dw	0
   207  00FEDB  0001               	dw	1
   208  00FEDD  0000               	dw	0
   209  00FEDF  0010               	dw	16
   210  00FEE1  0000               	dw	0
   211  00FEE3  0100               	dw	256
   212  00FEE5  0000               	dw	0
   213  00FEE7  1000               	dw	4096
   214  00FEE9                     __end_of_hexpowers:
   215                           	opt stack 0
   216  00FEE9                     _LCD_LINE4_ADDR:
   217                           	opt stack 0
   218  00FEE9  50                 	db	80
   219  00FEEA                     __end_of_LCD_LINE4_ADDR:
   220                           	opt stack 0
   221  00FEEA                     _LCD_LINE3_ADDR:
   222                           	opt stack 0
   223  00FEEA  10                 	db	16
   224  00FEEB                     __end_of_LCD_LINE3_ADDR:
   225                           	opt stack 0
   226  00FEEB                     _LCD_LINE1_ADDR:
   227                           	opt stack 0
   228  00FEEB  00                 	db	0
   229  00FEEC                     __end_of_LCD_LINE1_ADDR:
   230                           	opt stack 0
   231  00FEEC                     _LCD_SIZE_VERT:
   232                           	opt stack 0
   233  00FEEC  04                 	db	4
   234  00FEED                     __end_of_LCD_SIZE_VERT:
   235                           	opt stack 0
   236  00FEED                     _LCD_SIZE_HORZ:
   237                           	opt stack 0
   238  00FEED  10                 	db	16
   239  00FEEE                     __end_of_LCD_SIZE_HORZ:
   240                           	opt stack 0
   241  00FEEE                     _STOP_TRAN:
   242                           	opt stack 0
   243  00FEEE  FD                 	db	253
   244  00FEEF                     __end_of_STOP_TRAN:
   245                           	opt stack 0
   246  00FEEF                     _START_BLOCK_TOKEN:
   247                           	opt stack 0
   248  00FEEF  FC                 	db	252
   249  00FEF0                     __end_of_START_BLOCK_TOKEN:
   250                           	opt stack 0
   251  00FEF0                     _START_BLOCK:
   252                           	opt stack 0
   253  00FEF0  FE                 	db	254
   254  00FEF1                     __end_of_START_BLOCK:
   255                           	opt stack 0
   256  00FEF1                     _R1_ILLEGAL_COMMAND:
   257                           	opt stack 0
   258  00FEF1  04                 	db	4
   259  00FEF2                     __end_of_R1_ILLEGAL_COMMAND:
   260                           	opt stack 0
   261  00FEF2                     _R1_IDLE_STATE:
   262                           	opt stack 0
   263  00FEF2  01                 	db	1
   264  00FEF3                     __end_of_R1_IDLE_STATE:
   265                           	opt stack 0
   266  00FEF3                     _R1_READY_STATE:
   267                           	opt stack 0
   268  00FEF3  00                 	db	0
   269  00FEF4                     __end_of_R1_READY_STATE:
   270                           	opt stack 0
   271  00FEF4                     _ACMD41:
   272                           	opt stack 0
   273  00FEF4  29                 	db	41
   274  00FEF5                     __end_of_ACMD41:
   275                           	opt stack 0
   276  00FEF5                     _ACMD23:
   277                           	opt stack 0
   278  00FEF5  17                 	db	23
   279  00FEF6                     __end_of_ACMD23:
   280                           	opt stack 0
   281  00FEF6                     _ACMD22:
   282                           	opt stack 0
   283  00FEF6  16                 	db	22
   284  00FEF7                     __end_of_ACMD22:
   285                           	opt stack 0
   286  00FEF7                     _CMD58:
   287                           	opt stack 0
   288  00FEF7  3A                 	db	58
   289  00FEF8                     __end_of_CMD58:
   290                           	opt stack 0
   291  00FEF8                     _CMD55:
   292                           	opt stack 0
   293  00FEF8  37                 	db	55
   294  00FEF9                     __end_of_CMD55:
   295                           	opt stack 0
   296  00FEF9                     _CMD38:
   297                           	opt stack 0
   298  00FEF9  26                 	db	38
   299  00FEFA                     __end_of_CMD38:
   300                           	opt stack 0
   301  00FEFA                     _CMD33:
   302                           	opt stack 0
   303  00FEFA  21                 	db	33
   304  00FEFB                     __end_of_CMD33:
   305                           	opt stack 0
   306  00FEFB                     _CMD32:
   307                           	opt stack 0
   308  00FEFB  20                 	db	32
   309  00FEFC                     __end_of_CMD32:
   310                           	opt stack 0
   311  00FEFC                     _CMD25:
   312                           	opt stack 0
   313  00FEFC  19                 	db	25
   314  00FEFD                     __end_of_CMD25:
   315                           	opt stack 0
   316  00FEFD                     _CMD24:
   317                           	opt stack 0
   318  00FEFD  18                 	db	24
   319  00FEFE                     __end_of_CMD24:
   320                           	opt stack 0
   321  00FEFE                     _CMD18:
   322                           	opt stack 0
   323  00FEFE  12                 	db	18
   324  00FEFF                     __end_of_CMD18:
   325                           	opt stack 0
   326  00FEFF                     _CMD17:
   327                           	opt stack 0
   328  00FEFF  11                 	db	17
   329  00FF00                     __end_of_CMD17:
   330                           	opt stack 0
   331  00FF00                     _CMD16:
   332                           	opt stack 0
   333  00FF00  10                 	db	16
   334  00FF01                     __end_of_CMD16:
   335                           	opt stack 0
   336  00FF01                     _CMD13:
   337                           	opt stack 0
   338  00FF01  0D                 	db	13
   339  00FF02                     __end_of_CMD13:
   340                           	opt stack 0
   341  00FF02                     _CMD12:
   342                           	opt stack 0
   343  00FF02  0C                 	db	12
   344  00FF03                     __end_of_CMD12:
   345                           	opt stack 0
   346  00FF03                     _CMD10:
   347                           	opt stack 0
   348  00FF03  0A                 	db	10
   349  00FF04                     __end_of_CMD10:
   350                           	opt stack 0
   351  00FF04                     _CMD9:
   352                           	opt stack 0
   353  00FF04  09                 	db	9
   354  00FF05                     __end_of_CMD9:
   355                           	opt stack 0
   356  00FF05                     _CMD8CRC:
   357                           	opt stack 0
   358  00FF05  87                 	db	135
   359  00FF06                     __end_of_CMD8CRC:
   360                           	opt stack 0
   361  00FF06                     _CMD8:
   362                           	opt stack 0
   363  00FF06  08                 	db	8
   364  00FF07                     __end_of_CMD8:
   365                           	opt stack 0
   366  00FF07                     _CMD1:
   367                           	opt stack 0
   368  00FF07  01                 	db	1
   369  00FF08                     __end_of_CMD1:
   370                           	opt stack 0
   371  00FF08                     _CMD0CRC:
   372                           	opt stack 0
   373  00FF08  95                 	db	149
   374  00FF09                     __end_of_CMD0CRC:
   375                           	opt stack 0
   376  00FF09                     _CMD0:
   377                           	opt stack 0
   378  00FF09  00                 	db	0
   379  00FF0A                     __end_of_CMD0:
   380                           	opt stack 0
   381  00FF0A                     _LCD_LINE2_ADDR:
   382                           	opt stack 0
   383  00FF0A  40                 	db	64
   384  00FF0B                     __end_of_LCD_LINE2_ADDR:
   385                           	opt stack 0
   386  0000                     _LATDbits	set	3980
   387  0000                     _INTCONbits	set	4082
   388  0000                     _TRISCbits	set	3988
   389  0000                     _SSPCON1	set	4038
   390  0000                     _SSPSTAT	set	4039
   391  0000                     _SSPSTATbits	set	4039
   392  0000                     _SSPBUF	set	4041
   393  0000                     _SSPCON1bits	set	4038
   394  0000                     _TRISEbits	set	3990
   395  0000                     _OSCCONbits	set	4051
   396  0000                     _OSCTUNEbits	set	3995
   397  0000                     _OSCTUNE	set	3995
   398  0000                     _OSCCON	set	4051
   399  0000                     _LATEbits	set	3981
   400  0000                     _TRISD	set	3989
   401  0000                     _LATD	set	3980
   402  0000                     _SSPIF	set	31987
   403  00FF0B                     STR_20:
   404  00FF0B  30                 	db	48	;'0'
   405  00FF0C  31                 	db	49	;'1'
   406  00FF0D  32                 	db	50	;'2'
   407  00FF0E  33                 	db	51	;'3'
   408  00FF0F  34                 	db	52	;'4'
   409  00FF10  35                 	db	53	;'5'
   410  00FF11  36                 	db	54	;'6'
   411  00FF12  37                 	db	55	;'7'
   412  00FF13  38                 	db	56	;'8'
   413  00FF14  39                 	db	57	;'9'
   414  00FF15  61                 	db	97	;'a'
   415  00FF16  62                 	db	98	;'b'
   416  00FF17  63                 	db	99	;'c'
   417  00FF18  64                 	db	100	;'d'
   418  00FF19  65                 	db	101	;'e'
   419  00FF1A  66                 	db	102	;'f'
   420  00FF1B  00                 	db	0
   421  00FF1C                     STR_1:
   422  00FF1C  53                 	db	83	;'S'
   423  00FF1D  44                 	db	68	;'D'
   424  00FF1E  20                 	db	32
   425  00FF1F  69                 	db	105	;'i'
   426  00FF20  6E                 	db	110	;'n'
   427  00FF21  69                 	db	105	;'i'
   428  00FF22  74                 	db	116	;'t'
   429  00FF23  20                 	db	32
   430  00FF24  73                 	db	115	;'s'
   431  00FF25  75                 	db	117	;'u'
   432  00FF26  63                 	db	99	;'c'
   433  00FF27  63                 	db	99	;'c'
   434  00FF28  65                 	db	101	;'e'
   435  00FF29  73                 	db	115	;'s'
   436  00FF2A  73                 	db	115	;'s'
   437  00FF2B  21                 	db	33
   438  00FF2C  00                 	db	0
   439  00FF2D                     STR_19:
   440  00FF2D  53                 	db	83	;'S'
   441  00FF2E  44                 	db	68	;'D'
   442  00FF2F  20                 	db	32
   443  00FF30  69                 	db	105	;'i'
   444  00FF31  6E                 	db	110	;'n'
   445  00FF32  69                 	db	105	;'i'
   446  00FF33  74                 	db	116	;'t'
   447  00FF34  20                 	db	32
   448  00FF35  66                 	db	102	;'f'
   449  00FF36  61                 	db	97	;'a'
   450  00FF37  69                 	db	105	;'i'
   451  00FF38  6C                 	db	108	;'l'
   452  00FF39  65                 	db	101	;'e'
   453  00FF3A  64                 	db	100	;'d'
   454  00FF3B  21                 	db	33
   455  00FF3C  00                 	db	0
   456  00FF3D                     STR_2:
   457  00FF3D  54                 	db	84	;'T'
   458  00FF3E  79                 	db	121	;'y'
   459  00FF3F  70                 	db	112	;'p'
   460  00FF40  65                 	db	101	;'e'
   461  00FF41  3A                 	db	58	;':'
   462  00FF42  20                 	db	32
   463  00FF43  53                 	db	83	;'S'
   464  00FF44  44                 	db	68	;'D'
   465  00FF45  48                 	db	72	;'H'
   466  00FF46  43                 	db	67	;'C'
   467  00FF47  2F                 	db	47
   468  00FF48  53                 	db	83	;'S'
   469  00FF49  44                 	db	68	;'D'
   470  00FF4A  58                 	db	88	;'X'
   471  00FF4B  43                 	db	67	;'C'
   472  00FF4C  00                 	db	0
   473  00FF4D                     STR_11:
   474  00FF4D  50                 	db	80	;'P'
   475  00FF4E  4E                 	db	78	;'N'
   476  00FF4F  4D                 	db	77	;'M'
   477  00FF50  3A                 	db	58	;':'
   478  00FF51  20                 	db	32
   479  00FF52  25                 	db	37
   480  00FF53  63                 	db	99	;'c'
   481  00FF54  25                 	db	37
   482  00FF55  63                 	db	99	;'c'
   483  00FF56  25                 	db	37
   484  00FF57  63                 	db	99	;'c'
   485  00FF58  25                 	db	37
   486  00FF59  63                 	db	99	;'c'
   487  00FF5A  25                 	db	37
   488  00FF5B  63                 	db	99	;'c'
   489  00FF5C  00                 	db	0
   490  00FF5D                     STR_8:
   491  00FF5D  53                 	db	83	;'S'
   492  00FF5E  44                 	db	68	;'D'
   493  00FF5F  20                 	db	32
   494  00FF60  56                 	db	86	;'V'
   495  00FF61  65                 	db	101	;'e'
   496  00FF62  72                 	db	114	;'r'
   497  00FF63  73                 	db	115	;'s'
   498  00FF64  69                 	db	105	;'i'
   499  00FF65  6F                 	db	111	;'o'
   500  00FF66  6E                 	db	110	;'n'
   501  00FF67  3A                 	db	58	;':'
   502  00FF68  20                 	db	32
   503  00FF69  25                 	db	37
   504  00FF6A  75                 	db	117	;'u'
   505  00FF6B  00                 	db	0
   506  00FF6C                     STR_17:
   507  00FF6C  4E                 	db	78	;'N'
   508  00FF6D  75                 	db	117	;'u'
   509  00FF6E  6D                 	db	109	;'m'
   510  00FF6F  62                 	db	98	;'b'
   511  00FF70  65                 	db	101	;'e'
   512  00FF71  72                 	db	114	;'r'
   513  00FF72  20                 	db	32
   514  00FF73  6F                 	db	111	;'o'
   515  00FF74  66                 	db	102	;'f'
   516  00FF75  20                 	db	32
   517  00FF76  4D                 	db	77	;'M'
   518  00FF77  42                 	db	66	;'B'
   519  00FF78  3A                 	db	58	;':'
   520  00FF79  00                 	db	0
   521  00FF7A                     STR_6:
   522  00FF7A  42                 	db	66	;'B'
   523  00FF7B  6C                 	db	108	;'l'
   524  00FF7C  6B                 	db	107	;'k'
   525  00FF7D  53                 	db	83	;'S'
   526  00FF7E  69                 	db	105	;'i'
   527  00FF7F  7A                 	db	122	;'z'
   528  00FF80  65                 	db	101	;'e'
   529  00FF81  3A                 	db	58	;':'
   530  00FF82  20                 	db	32
   531  00FF83  25                 	db	37
   532  00FF84  64                 	db	100	;'d'
   533  00FF85  20                 	db	32
   534  00FF86  62                 	db	98	;'b'
   535  00FF87  00                 	db	0
   536  00FF88                     STR_5:
   537  00FF88  54                 	db	84	;'T'
   538  00FF89  79                 	db	121	;'y'
   539  00FF8A  70                 	db	112	;'p'
   540  00FF8B  65                 	db	101	;'e'
   541  00FF8C  3A                 	db	58	;':'
   542  00FF8D  20                 	db	32
   543  00FF8E  55                 	db	85	;'U'
   544  00FF8F  6E                 	db	110	;'n'
   545  00FF90  6B                 	db	107	;'k'
   546  00FF91  6E                 	db	110	;'n'
   547  00FF92  6F                 	db	111	;'o'
   548  00FF93  77                 	db	119	;'w'
   549  00FF94  6E                 	db	110	;'n'
   550  00FF95  00                 	db	0
   551  00FF96                     STR_10:
   552  00FF96  4F                 	db	79	;'O'
   553  00FF97  45                 	db	69	;'E'
   554  00FF98  4D                 	db	77	;'M'
   555  00FF99  20                 	db	32
   556  00FF9A  49                 	db	73	;'I'
   557  00FF9B  44                 	db	68	;'D'
   558  00FF9C  3A                 	db	58	;':'
   559  00FF9D  20                 	db	32
   560  00FF9E  25                 	db	37
   561  00FF9F  63                 	db	99	;'c'
   562  00FFA0  25                 	db	37
   563  00FFA1  63                 	db	99	;'c'
   564  00FFA2  00                 	db	0
   565  00FFA3                     STR_9:
   566  00FFA3  4D                 	db	77	;'M'
   567  00FFA4  46                 	db	70	;'F'
   568  00FFA5  47                 	db	71	;'G'
   569  00FFA6  20                 	db	32
   570  00FFA7  49                 	db	73	;'I'
   571  00FFA8  44                 	db	68	;'D'
   572  00FFA9  3A                 	db	58	;':'
   573  00FFAA  20                 	db	32
   574  00FFAB  30                 	db	48	;'0'
   575  00FFAC  78                 	db	120	;'x'
   576  00FFAD  25                 	db	37
   577  00FFAE  78                 	db	120	;'x'
   578  00FFAF  00                 	db	0
   579  00FFB0                     STR_3:
   580  00FFB0  54                 	db	84	;'T'
   581  00FFB1  79                 	db	121	;'y'
   582  00FFB2  70                 	db	112	;'p'
   583  00FFB3  65                 	db	101	;'e'
   584  00FFB4  3A                 	db	58	;':'
   585  00FFB5  20                 	db	32
   586  00FFB6  53                 	db	83	;'S'
   587  00FFB7  44                 	db	68	;'D'
   588  00FFB8  53                 	db	83	;'S'
   589  00FFB9  43                 	db	67	;'C'
   590  00FFBA  00                 	db	0
   591  00FFBB                     STR_12:
   592  00FFBB  50                 	db	80	;'P'
   593  00FFBC  52                 	db	82	;'R'
   594  00FFBD  56                 	db	86	;'V'
   595  00FFBE  3A                 	db	58	;':'
   596  00FFBF  20                 	db	32
   597  00FFC0  25                 	db	37
   598  00FFC1  75                 	db	117	;'u'
   599  00FFC2  2E                 	db	46
   600  00FFC3  25                 	db	37
   601  00FFC4  75                 	db	117	;'u'
   602  00FFC5  00                 	db	0
   603  00FFC6                     STR_15:
   604  00FFC6  4D                 	db	77	;'M'
   605  00FFC7  44                 	db	68	;'D'
   606  00FFC8  54                 	db	84	;'T'
   607  00FFC9  3A                 	db	58	;':'
   608  00FFCA  20                 	db	32
   609  00FFCB  25                 	db	37
   610  00FFCC  75                 	db	117	;'u'
   611  00FFCD  2F                 	db	47
   612  00FFCE  25                 	db	37
   613  00FFCF  75                 	db	117	;'u'
   614  00FFD0  00                 	db	0
   615  00FFD1                     STR_7:
   616  00FFD1  23                 	db	35
   617  00FFD2  42                 	db	66	;'B'
   618  00FFD3  6C                 	db	108	;'l'
   619  00FFD4  6B                 	db	107	;'k'
   620  00FFD5  73                 	db	115	;'s'
   621  00FFD6  3A                 	db	58	;':'
   622  00FFD7  20                 	db	32
   623  00FFD8  25                 	db	37
   624  00FFD9  6C                 	db	108	;'l'
   625  00FFDA  75                 	db	117	;'u'
   626  00FFDB  00                 	db	0
   627  00FFDC                     STR_4:
   628  00FFDC  54                 	db	84	;'T'
   629  00FFDD  79                 	db	121	;'y'
   630  00FFDE  70                 	db	112	;'p'
   631  00FFDF  65                 	db	101	;'e'
   632  00FFE0  3A                 	db	58	;':'
   633  00FFE1  20                 	db	32
   634  00FFE2  4D                 	db	77	;'M'
   635  00FFE3  4D                 	db	77	;'M'
   636  00FFE4  43                 	db	67	;'C'
   637  00FFE5  00                 	db	0
   638  00FFE6                     STR_13:
   639  00FFE6  50                 	db	80	;'P'
   640  00FFE7  53                 	db	83	;'S'
   641  00FFE8  4E                 	db	78	;'N'
   642  00FFE9  3A                 	db	58	;':'
   643  00FFEA  20                 	db	32
   644  00FFEB  30                 	db	48	;'0'
   645  00FFEC  78                 	db	120	;'x'
   646  00FFED  25                 	db	37
   647  00FFEE  78                 	db	120	;'x'
   648  00FFEF  00                 	db	0
   649  00FFF0                     STR_16:
   650  00FFF0  43                 	db	67	;'C'
   651  00FFF1  52                 	db	82	;'R'
   652  00FFF2  43                 	db	67	;'C'
   653  00FFF3  37                 	db	55	;'7'
   654  00FFF4  3A                 	db	58	;':'
   655  00FFF5  20                 	db	32
   656  00FFF6  25                 	db	37
   657  00FFF7  75                 	db	117	;'u'
   658  00FFF8  00                 	db	0
   659  00FFF9                     STR_18:
   660  00FFF9  25                 	db	37
   661  00FFFA  2E                 	db	46
   662  00FFFB  32                 	db	50	;'2'
   663  00FFFC  66                 	db	102	;'f'
   664  00FFFD  20                 	db	32
   665  00FFFE  00                 	db	0
   666  0000                     
   667                           ; #config settings
   668  00FFFF  00                 	db	0	; dummy byte at the end
   669  0000                     
   670                           	psect	cinit
   671  00D5D0                     __pcinit:
   672                           	opt stack 0
   673  00D5D0                     start_initialization:
   674                           	opt stack 0
   675  00D5D0                     __initialization:
   676                           	opt stack 0
   677                           
   678                           ; Clear objects allocated to BANK0 (62 bytes)
   679  00D5D0  EE00  F080         	lfsr	0,__pbssBANK0
   680  00D5D4  0E3E               	movlw	62
   681  00D5D6                     clear_0:
   682  00D5D6  6AEE               	clrf	postinc0,c
   683  00D5D8  06E8               	decf	wreg,f,c
   684  00D5DA  E1FD               	bnz	clear_0
   685  00D5DC                     end_of_initialization:
   686                           	opt stack 0
   687  00D5DC                     __end_of__initialization:
   688                           	opt stack 0
   689  00D5DC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   690  00D5DE  6EF8               	movwf	tblptru,c
   691  00D5E0  0100               	movlb	0
   692  00D5E2  EF75  F072         	goto	_main	;jump to C main() function
   693                           tblptru	equ	0xFF8
   694                           postinc0	equ	0xFEE
   695                           wreg	equ	0xFE8
   696                           
   697                           	psect	bssBANK0
   698  000080                     __pbssBANK0:
   699                           	opt stack 0
   700  000080                     _SDCard:
   701                           	opt stack 0
   702  000080                     	ds	46
   703  0000AE                     initSD@F3023:
   704                           	opt stack 0
   705  0000AE                     	ds	16
   706                           tblptru	equ	0xFF8
   707                           postinc0	equ	0xFEE
   708                           wreg	equ	0xFE8
   709                           
   710                           	psect	cstackCOMRAM
   711  000001                     __pcstackCOMRAM:
   712                           	opt stack 0
   713  000001                     ??_spiTransfer:
   714  000001                     ??_isdigit:
   715  000001                     ?___awmod:
   716                           	opt stack 0
   717  000001                     ?___ftpack:
   718                           	opt stack 0
   719  000001                     ?___ftneg:
   720                           	opt stack 0
   721  000001                     ?__tdiv_to_l_:
   722                           	opt stack 0
   723  000001                     ?__div_to_l_:
   724                           	opt stack 0
   725  000001                     ?___lldiv:
   726                           	opt stack 0
   727  000001                     spiInit@divider:
   728                           	opt stack 0
   729  000001                     pulse_e@interruptState:
   730                           	opt stack 0
   731  000001                     ___awmod@dividend:
   732                           	opt stack 0
   733  000001                     __div_to_l_@f1:
   734                           	opt stack 0
   735  000001                     ___ftpack@arg:
   736                           	opt stack 0
   737  000001                     __tdiv_to_l_@f1:
   738                           	opt stack 0
   739  000001                     ___ftge@ff1:
   740                           	opt stack 0
   741  000001                     ___ftneg@f1:
   742                           	opt stack 0
   743  000001                     ___lldiv@dividend:
   744                           	opt stack 0
   745                           
   746                           ; 4 bytes @ 0x0
   747  000001                     	ds	1
   748  000002                     spiTransfer@byteToTransfer:
   749                           	opt stack 0
   750  000002                     send_nibble@data:
   751                           	opt stack 0
   752  000002                     _isdigit$1058:
   753                           	opt stack 0
   754                           
   755                           ; 1 bytes @ 0x1
   756  000002                     	ds	1
   757  000003                     spiSend@val:
   758                           	opt stack 0
   759  000003                     send_byte@data:
   760                           	opt stack 0
   761  000003                     isdigit@c:
   762                           	opt stack 0
   763  000003                     ___awmod@divisor:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x2
   767  000003                     	ds	1
   768  000004                     lcdInst@data:
   769                           	opt stack 0
   770  000004                     putch@data:
   771                           	opt stack 0
   772  000004                     ___ftpack@exp:
   773                           	opt stack 0
   774  000004                     __div_to_l_@f2:
   775                           	opt stack 0
   776  000004                     __tdiv_to_l_@f2:
   777                           	opt stack 0
   778  000004                     ___ftge@ff2:
   779                           	opt stack 0
   780  000004                     SD_Command@arg:
   781                           	opt stack 0
   782                           
   783                           ; 4 bytes @ 0x3
   784  000004                     	ds	1
   785  000005                     ??_initLCD:
   786  000005                     ___awmod@counter:
   787                           	opt stack 0
   788  000005                     ___ftpack@sign:
   789                           	opt stack 0
   790  000005                     ___lldiv@divisor:
   791                           	opt stack 0
   792                           
   793                           ; 4 bytes @ 0x4
   794  000005                     	ds	1
   795  000006                     ??___ftpack:
   796  000006                     ___awmod@sign:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0x5
   800  000006                     	ds	1
   801  000007                     ??__tdiv_to_l_:
   802  000007                     ??___ftge:
   803  000007                     ?___awdiv:
   804                           	opt stack 0
   805  000007                     ___awdiv@dividend:
   806                           	opt stack 0
   807  000007                     __div_to_l_@quot:
   808                           	opt stack 0
   809                           
   810                           ; 4 bytes @ 0x6
   811  000007                     	ds	1
   812  000008                     SD_Command@n:
   813                           	opt stack 0
   814                           
   815                           ; 1 bytes @ 0x7
   816  000008                     	ds	1
   817  000009                     ?___lltoft:
   818                           	opt stack 0
   819  000009                     ?___lwtoft:
   820                           	opt stack 0
   821  000009                     SD_Command@cmd:
   822                           	opt stack 0
   823  000009                     ___awdiv@divisor:
   824                           	opt stack 0
   825  000009                     ___lwtoft@c:
   826                           	opt stack 0
   827  000009                     ___lldiv@quotient:
   828                           	opt stack 0
   829  000009                     ___lltoft@c:
   830                           	opt stack 0
   831                           
   832                           ; 4 bytes @ 0x8
   833  000009                     	ds	1
   834  00000A                     SD_Command@response:
   835                           	opt stack 0
   836  00000A                     __tdiv_to_l_@quot:
   837                           	opt stack 0
   838                           
   839                           ; 4 bytes @ 0x9
   840  00000A                     	ds	1
   841  00000B                     ___awdiv@counter:
   842                           	opt stack 0
   843  00000B                     __div_to_l_@cntr:
   844                           	opt stack 0
   845  00000B                     SD_ACMD@arg:
   846                           	opt stack 0
   847                           
   848                           ; 4 bytes @ 0xA
   849  00000B                     	ds	1
   850  00000C                     ?___ftdiv:
   851                           	opt stack 0
   852  00000C                     ___awdiv@sign:
   853                           	opt stack 0
   854  00000C                     __div_to_l_@exp1:
   855                           	opt stack 0
   856  00000C                     ___ftdiv@f1:
   857                           	opt stack 0
   858                           
   859                           ; 3 bytes @ 0xB
   860  00000C                     	ds	1
   861  00000D                     ??___lltoft:
   862  00000D                     ___lldiv@counter:
   863                           	opt stack 0
   864  00000D                     ___awdiv@quotient:
   865                           	opt stack 0
   866                           
   867                           ; 2 bytes @ 0xC
   868  00000D                     	ds	1
   869  00000E                     ?___llmod:
   870                           	opt stack 0
   871  00000E                     __tdiv_to_l_@cntr:
   872                           	opt stack 0
   873  00000E                     ___llmod@dividend:
   874                           	opt stack 0
   875                           
   876                           ; 4 bytes @ 0xD
   877  00000E                     	ds	1
   878  00000F                     ?___wmul:
   879                           	opt stack 0
   880  00000F                     SD_ACMD@cmd:
   881                           	opt stack 0
   882  00000F                     __tdiv_to_l_@exp1:
   883                           	opt stack 0
   884  00000F                     ___wmul@multiplier:
   885                           	opt stack 0
   886  00000F                     ___ftdiv@f2:
   887                           	opt stack 0
   888                           
   889                           ; 3 bytes @ 0xE
   890  00000F                     	ds	2
   891  000011                     ___lltoft@exp:
   892                           	opt stack 0
   893  000011                     ___wmul@multiplicand:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x10
   897  000011                     	ds	1
   898  000012                     ??___ftdiv:
   899  000012                     ___llmod@divisor:
   900                           	opt stack 0
   901                           
   902                           ; 4 bytes @ 0x11
   903  000012                     	ds	1
   904  000013                     ___wmul@product:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x12
   908  000013                     	ds	2
   909  000015                     ?___ftmul:
   910                           	opt stack 0
   911  000015                     ___ftdiv@cntr:
   912                           	opt stack 0
   913  000015                     ___ftmul@f1:
   914                           	opt stack 0
   915                           
   916                           ; 3 bytes @ 0x14
   917  000015                     	ds	1
   918  000016                     ___llmod@counter:
   919                           	opt stack 0
   920  000016                     ___ftdiv@f3:
   921                           	opt stack 0
   922                           
   923                           ; 3 bytes @ 0x15
   924  000016                     	ds	2
   925  000018                     ___ftmul@f2:
   926                           	opt stack 0
   927                           
   928                           ; 3 bytes @ 0x17
   929  000018                     	ds	1
   930  000019                     ___ftdiv@exp:
   931                           	opt stack 0
   932                           
   933                           ; 1 bytes @ 0x18
   934  000019                     	ds	1
   935  00001A                     ___ftdiv@sign:
   936                           	opt stack 0
   937                           
   938                           ; 1 bytes @ 0x19
   939  00001A                     	ds	1
   940  00001B                     ??___ftmul:
   941                           
   942                           ; 1 bytes @ 0x1A
   943  00001B                     	ds	3
   944  00001E                     ___ftmul@exp:
   945                           	opt stack 0
   946                           
   947                           ; 1 bytes @ 0x1D
   948  00001E                     	ds	1
   949  00001F                     ___ftmul@f3_as_product:
   950                           	opt stack 0
   951                           
   952                           ; 3 bytes @ 0x1E
   953  00001F                     	ds	3
   954  000022                     ___ftmul@cntr:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x21
   958  000022                     	ds	1
   959  000023                     ___ftmul@sign:
   960                           	opt stack 0
   961                           
   962                           ; 1 bytes @ 0x22
   963  000023                     	ds	1
   964  000024                     ?_fround:
   965                           	opt stack 0
   966  000024                     ?_scale:
   967                           	opt stack 0
   968                           
   969                           ; 3 bytes @ 0x23
   970  000024                     	ds	3
   971  000027                     _fround$1433:
   972                           	opt stack 0
   973  000027                     _scale$1434:
   974                           	opt stack 0
   975                           
   976                           ; 3 bytes @ 0x26
   977  000027                     	ds	3
   978  00002A                     scale@scl:
   979                           	opt stack 0
   980  00002A                     _fround$1432:
   981                           	opt stack 0
   982                           
   983                           ; 3 bytes @ 0x29
   984  00002A                     	ds	1
   985  00002B                     ?___fttol:
   986                           	opt stack 0
   987  00002B                     ___fttol@f1:
   988                           	opt stack 0
   989                           
   990                           ; 3 bytes @ 0x2A
   991  00002B                     	ds	2
   992  00002D                     fround@prec:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x2C
   996  00002D                     	ds	1
   997  00002E                     ?___ftadd:
   998                           	opt stack 0
   999  00002E                     ___ftadd@f1:
  1000                           	opt stack 0
  1001                           
  1002                           ; 3 bytes @ 0x2D
  1003  00002E                     	ds	1
  1004  00002F                     ??___fttol:
  1005                           
  1006                           ; 1 bytes @ 0x2E
  1007  00002F                     	ds	2
  1008  000031                     ___ftadd@f2:
  1009                           	opt stack 0
  1010                           
  1011                           ; 3 bytes @ 0x30
  1012  000031                     	ds	3
  1013  000034                     ??___ftadd:
  1014  000034                     ___fttol@sign1:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x33
  1018  000034                     	ds	1
  1019  000035                     ___fttol@lval:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x34
  1023  000035                     	ds	2
  1024  000037                     ___ftadd@sign:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x36
  1028  000037                     	ds	1
  1029  000038                     ___ftadd@exp2:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x37
  1033  000038                     	ds	1
  1034  000039                     ___ftadd@exp1:
  1035                           	opt stack 0
  1036  000039                     ___fttol@exp1:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x38
  1040  000039                     	ds	1
  1041  00003A                     ??_initSD:
  1042  00003A                     ?___ftsub:
  1043                           	opt stack 0
  1044  00003A                     ___ftsub@f1:
  1045                           	opt stack 0
  1046                           
  1047                           ; 3 bytes @ 0x39
  1048  00003A                     	ds	3
  1049  00003D                     ___ftsub@f2:
  1050                           	opt stack 0
  1051                           
  1052                           ; 3 bytes @ 0x3C
  1053  00003D                     	ds	3
  1054  000040                     ?_printf:
  1055                           	opt stack 0
  1056  000040                     printf@f:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x3F
  1060  000040                     	ds	1
  1061  000041                     initSD@argument:
  1062                           	opt stack 0
  1063                           
  1064                           ; 4 bytes @ 0x40
  1065  000041                     	ds	4
  1066  000045                     initSD@last_OSCCON:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x44
  1070  000045                     	ds	1
  1071  000046                     initSD@last_OSCTUNE:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x45
  1075  000046                     	ds	1
  1076  000047                     initSD@tempSize:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x46
  1080  000047                     	ds	4
  1081  00004B                     initSD@arr_response:
  1082                           	opt stack 0
  1083                           
  1084                           ; 16 bytes @ 0x4A
  1085  00004B                     	ds	1
  1086  00004C                     ??_printf:
  1087                           
  1088                           ; 1 bytes @ 0x4B
  1089  00004C                     	ds	6
  1090  000052                     _printf$1435:
  1091                           	opt stack 0
  1092                           
  1093                           ; 3 bytes @ 0x51
  1094  000052                     	ds	3
  1095  000055                     printf@cp:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x54
  1099  000055                     	ds	2
  1100  000057                     printf@idx:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x56
  1104  000057                     	ds	1
  1105  000058                     printf@len:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x57
  1109  000058                     	ds	2
  1110  00005A                     printf@ap:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x59
  1114  00005A                     	ds	1
  1115  00005B                     initSD@i:
  1116                           	opt stack 0
  1117                           
  1118                           ; 1 bytes @ 0x5A
  1119  00005B                     	ds	1
  1120  00005C                     initSD@i_414:
  1121                           	opt stack 0
  1122  00005C                     printf@exp:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x5B
  1126  00005C                     	ds	1
  1127  00005D                     initSD@i_411:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x5C
  1131  00005D                     	ds	1
  1132  00005E                     initSD@i_412:
  1133                           	opt stack 0
  1134  00005E                     printf@flag:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x5D
  1138  00005E                     	ds	1
  1139  00005F                     initSD@i_415:
  1140                           	opt stack 0
  1141                           
  1142                           ; 1 bytes @ 0x5E
  1143  00005F                     	ds	1
  1144  000060                     initSD@i_418:
  1145                           	opt stack 0
  1146  000060                     printf@tmpval:
  1147                           	opt stack 0
  1148                           
  1149                           ; 4 bytes @ 0x5F
  1150  000060                     	ds	1
  1151  000061                     initSD@tempSize_417:
  1152                           	opt stack 0
  1153                           
  1154                           ; 4 bytes @ 0x60
  1155  000061                     	ds	3
  1156  000064                     printf@val:
  1157                           	opt stack 0
  1158                           
  1159                           ; 4 bytes @ 0x63
  1160  000064                     	ds	1
  1161  000065                     initSD@response:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x64
  1165  000065                     	ds	3
  1166  000068                     printf@fval:
  1167                           	opt stack 0
  1168                           
  1169                           ; 3 bytes @ 0x67
  1170  000068                     	ds	3
  1171  00006B                     printf@prec:
  1172                           	opt stack 0
  1173                           
  1174                           ; 2 bytes @ 0x6A
  1175  00006B                     	ds	2
  1176  00006D                     printf@c:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0x6C
  1180  00006D                     	ds	1
  1181  00006E                     ??_main:
  1182                           
  1183                           ; 1 bytes @ 0x6D
  1184  00006E                     	ds	5
  1185  000073                     main@year:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x72
  1189  000073                     	ds	2
  1190  000075                     main@month:
  1191                           	opt stack 0
  1192                           
  1193                           ; 1 bytes @ 0x74
  1194  000075                     	ds	1
  1195  000076                     main@PNM:
  1196                           	opt stack 0
  1197                           
  1198                           ; 5 bytes @ 0x75
  1199  000076                     	ds	5
  1200                           tblptru	equ	0xFF8
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           
  1204 ;;
  1205 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
  1206 ;;
  1207 ;; *************** function _main *****************
  1208 ;; Defined at:
  1209 ;;		line 24 in file "main.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;		None
  1212 ;; Auto vars:     Size  Location     Type
  1213 ;;  PNM             5  117[COMRAM] unsigned char [5]
  1214 ;;  year            2  114[COMRAM] unsigned short 
  1215 ;;  month           1  116[COMRAM] unsigned char 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1226 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1227 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1228 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1229 ;;Total ram usage:       13 bytes
  1230 ;; Hardware stack levels required when called:    5
  1231 ;; This function calls:
  1232 ;;		_initLCD
  1233 ;;		_initSD
  1234 ;;		_lcdInst
  1235 ;;		_printf
  1236 ;; This function is called by:
  1237 ;;		Startup code after reset
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           	psect	text0
  1242  00E4EA                     __ptext0:
  1243                           	opt stack 0
  1244  00E4EA                     _main:
  1245                           	opt stack 26
  1246                           
  1247                           ;main.c: 28: LATD = 0x00;
  1248                           
  1249                           ;incstack = 0
  1250  00E4EA  0E00               	movlw	0
  1251  00E4EC  6E8C               	movwf	3980,c	;volatile
  1252                           
  1253                           ;main.c: 29: TRISD = 0x00;
  1254  00E4EE  0E00               	movlw	0
  1255  00E4F0  6E95               	movwf	3989,c	;volatile
  1256                           
  1257                           ;main.c: 31: initLCD();
  1258  00E4F2  EC1A  F06C         	call	_initLCD	;wreg free
  1259                           
  1260                           ;main.c: 32: { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  1261  00E4F6  0E0C               	movlw	12
  1262  00E4F8  ECC8  F06A         	call	_lcdInst
  1263                           
  1264                           ;main.c: 35: initSD();
  1265  00E4FC  EC64  F076         	call	_initSD	;wreg free
  1266  00E500                     l4032:
  1267                           
  1268                           ;main.c: 39: if(SDCard.init){
  1269  00E500  0100               	movlb	0	; () banked
  1270  00E502  519B               	movf	(_SDCard+27)& (0+255),w,b
  1271  00E504  B4D8               	btfsc	status,2,c
  1272  00E506  D1E1               	goto	l4140
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;main.c: 40: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1276  00E508  0E01               	movlw	1
  1277  00E50A  ECC8  F06A         	call	_lcdInst
  1278  00E50E  0E11               	movlw	17
  1279  00E510  6E6E               	movwf	??_main& (0+255),c
  1280  00E512  0E3A               	movlw	58
  1281  00E514                     u4617:
  1282  00E514  2EE8               	decfsz	wreg,f,c
  1283  00E516  D7FE               	bra	u4617
  1284  00E518  2E6E               	decfsz	??_main& (0+255),f,c
  1285  00E51A  D7FC               	bra	u4617
  1286  00E51C  D000               	nop2	
  1287                           
  1288                           ;main.c: 41: printf("SD init success!");
  1289  00E51E  0E1C               	movlw	low STR_1
  1290  00E520  6E40               	movwf	printf@f,c
  1291  00E522  0EFF               	movlw	high STR_1
  1292  00E524  6E41               	movwf	printf@f+1,c
  1293  00E526  EC67  F07A         	call	_printf	;wreg free
  1294                           
  1295                           ;main.c: 42: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1296  00E52A  0E0A               	movlw	low _LCD_LINE2_ADDR
  1297  00E52C  6EF6               	movwf	tblptrl,c
  1298  00E52E                     	if	1	;There is more than 1 active tblptr byte
  1299  00E52E  0EFF               	movlw	high _LCD_LINE2_ADDR
  1300  00E530  6EF7               	movwf	tblptrh,c
  1301  00E532                     	endif
  1302  00E532                     	if	0	;There are less than 3 active tblptr bytes
  1303  00E532                     	endif
  1304  00E532  0008               	tblrd		*
  1305  00E534  50F5               	movf	tablat,w,c
  1306  00E536  0980               	iorlw	128
  1307  00E538  ECC8  F06A         	call	_lcdInst
  1308                           
  1309                           ;main.c: 43: switch(SDCard.Type){
  1310  00E53C  D01C               	goto	l4052
  1311  00E53E                     l4042:
  1312  00E53E  0E3D               	movlw	low STR_2
  1313  00E540  6E40               	movwf	printf@f,c
  1314  00E542  0EFF               	movlw	high STR_2
  1315  00E544  6E41               	movwf	printf@f+1,c
  1316  00E546  EC67  F07A         	call	_printf	;wreg free
  1317                           
  1318                           ;main.c: 45: break;
  1319  00E54A  D021               	goto	l4054
  1320  00E54C                     l4044:
  1321  00E54C  0EB0               	movlw	low STR_3
  1322  00E54E  6E40               	movwf	printf@f,c
  1323  00E550  0EFF               	movlw	high STR_3
  1324  00E552  6E41               	movwf	printf@f+1,c
  1325  00E554  EC67  F07A         	call	_printf	;wreg free
  1326                           
  1327                           ;main.c: 47: break;
  1328  00E558  D01A               	goto	l4054
  1329  00E55A                     l4046:
  1330  00E55A  0EDC               	movlw	low STR_4
  1331  00E55C  6E40               	movwf	printf@f,c
  1332  00E55E  0EFF               	movlw	high STR_4
  1333  00E560  6E41               	movwf	printf@f+1,c
  1334  00E562  EC67  F07A         	call	_printf	;wreg free
  1335                           
  1336                           ;main.c: 49: break;
  1337  00E566  D013               	goto	l4054
  1338  00E568                     l4048:
  1339                           
  1340                           ;main.c: 51: printf("Type: Unknown");
  1341  00E568  0E88               	movlw	low STR_5
  1342  00E56A  6E40               	movwf	printf@f,c
  1343  00E56C  0EFF               	movlw	high STR_5
  1344  00E56E  6E41               	movwf	printf@f+1,c
  1345  00E570  EC67  F07A         	call	_printf	;wreg free
  1346                           
  1347                           ;main.c: 53: }
  1348                           
  1349                           ;main.c: 52: break;
  1350  00E574  D00C               	goto	l4054
  1351  00E576                     l4052:
  1352  00E576  0100               	movlb	0	; () banked
  1353  00E578  5181               	movf	(_SDCard+1)& (0+255),w,b
  1354                           
  1355                           ; Switch size 1, requested type "space"
  1356                           ; Number of cases is 3, Range of values is 0 to 2
  1357                           ; switch strategies available:
  1358                           ; Name         Instructions Cycles
  1359                           ; simple_byte           10     6 (average)
  1360                           ;	Chosen strategy is simple_byte
  1361  00E57A  0A00               	xorlw	0	; case 0
  1362  00E57C  B4D8               	btfsc	status,2,c
  1363  00E57E  D7E6               	goto	l4044
  1364  00E580  0A01               	xorlw	1	; case 1
  1365  00E582  B4D8               	btfsc	status,2,c
  1366  00E584  D7DC               	goto	l4042
  1367  00E586  0A03               	xorlw	3	; case 2
  1368  00E588  B4D8               	btfsc	status,2,c
  1369  00E58A  D7E7               	goto	l4046
  1370  00E58C  D7ED               	goto	l4048
  1371  00E58E                     l4054:
  1372                           
  1373                           ;main.c: 54: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1374  00E58E  0E1A               	movlw	26
  1375  00E590  6E6F               	movwf	(??_main+1)& (0+255),c
  1376  00E592  0E5E               	movlw	94
  1377  00E594  6E6E               	movwf	??_main& (0+255),c
  1378  00E596  0E6E               	movlw	110
  1379  00E598                     u4627:
  1380  00E598  2EE8               	decfsz	wreg,f,c
  1381  00E59A  D7FE               	bra	u4627
  1382  00E59C  2E6E               	decfsz	??_main& (0+255),f,c
  1383  00E59E  D7FC               	bra	u4627
  1384  00E5A0  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1385  00E5A2  D7FA               	bra	u4627
  1386  00E5A4  D000               	nop2	
  1387                           
  1388                           ;main.c: 56: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1389  00E5A6  0E01               	movlw	1
  1390  00E5A8  ECC8  F06A         	call	_lcdInst
  1391  00E5AC  0E11               	movlw	17
  1392  00E5AE  6E6E               	movwf	??_main& (0+255),c
  1393  00E5B0  0E3A               	movlw	58
  1394  00E5B2                     u4637:
  1395  00E5B2  2EE8               	decfsz	wreg,f,c
  1396  00E5B4  D7FE               	bra	u4637
  1397  00E5B6  2E6E               	decfsz	??_main& (0+255),f,c
  1398  00E5B8  D7FC               	bra	u4637
  1399  00E5BA  D000               	nop2	
  1400                           
  1401                           ;main.c: 57: printf("BlkSize: %d b", SDCard.blockSize);
  1402  00E5BC  0E7A               	movlw	low STR_6
  1403  00E5BE  6E40               	movwf	printf@f,c
  1404  00E5C0  0EFF               	movlw	high STR_6
  1405  00E5C2  6E41               	movwf	printf@f+1,c
  1406  00E5C4  C092  F042         	movff	_SDCard+18,?_printf+2
  1407  00E5C8  C093  F043         	movff	_SDCard+19,?_printf+3
  1408  00E5CC  EC67  F07A         	call	_printf	;wreg free
  1409                           
  1410                           ;main.c: 58: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1411  00E5D0  0E0A               	movlw	low _LCD_LINE2_ADDR
  1412  00E5D2  6EF6               	movwf	tblptrl,c
  1413  00E5D4                     	if	1	;There is more than 1 active tblptr byte
  1414  00E5D4  0EFF               	movlw	high _LCD_LINE2_ADDR
  1415  00E5D6  6EF7               	movwf	tblptrh,c
  1416  00E5D8                     	endif
  1417  00E5D8                     	if	0	;There are less than 3 active tblptr bytes
  1418  00E5D8                     	endif
  1419  00E5D8  0008               	tblrd		*
  1420  00E5DA  50F5               	movf	tablat,w,c
  1421  00E5DC  0980               	iorlw	128
  1422  00E5DE  ECC8  F06A         	call	_lcdInst
  1423                           
  1424                           ;main.c: 59: printf("#Blks: %lu", SDCard.numBlocks);
  1425  00E5E2  0ED1               	movlw	low STR_7
  1426  00E5E4  6E40               	movwf	printf@f,c
  1427  00E5E6  0EFF               	movlw	high STR_7
  1428  00E5E8  6E41               	movwf	printf@f+1,c
  1429  00E5EA  C094  F042         	movff	_SDCard+20,?_printf+2
  1430  00E5EE  C095  F043         	movff	_SDCard+21,?_printf+3
  1431  00E5F2  C096  F044         	movff	_SDCard+22,?_printf+4
  1432  00E5F6  C097  F045         	movff	_SDCard+23,?_printf+5
  1433  00E5FA  EC67  F07A         	call	_printf	;wreg free
  1434                           
  1435                           ;main.c: 60: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1436  00E5FE  0E1A               	movlw	26
  1437  00E600  6E6F               	movwf	(??_main+1)& (0+255),c
  1438  00E602  0E5E               	movlw	94
  1439  00E604  6E6E               	movwf	??_main& (0+255),c
  1440  00E606  0E6E               	movlw	110
  1441  00E608                     u4647:
  1442  00E608  2EE8               	decfsz	wreg,f,c
  1443  00E60A  D7FE               	bra	u4647
  1444  00E60C  2E6E               	decfsz	??_main& (0+255),f,c
  1445  00E60E  D7FC               	bra	u4647
  1446  00E610  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1447  00E612  D7FA               	bra	u4647
  1448  00E614  D000               	nop2	
  1449                           
  1450                           ;main.c: 62: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1451  00E616  0E01               	movlw	1
  1452  00E618  ECC8  F06A         	call	_lcdInst
  1453  00E61C  0E11               	movlw	17
  1454  00E61E  6E6E               	movwf	??_main& (0+255),c
  1455  00E620  0E3A               	movlw	58
  1456  00E622                     u4657:
  1457  00E622  2EE8               	decfsz	wreg,f,c
  1458  00E624  D7FE               	bra	u4657
  1459  00E626  2E6E               	decfsz	??_main& (0+255),f,c
  1460  00E628  D7FC               	bra	u4657
  1461  00E62A  D000               	nop2	
  1462                           
  1463                           ;main.c: 63: printf("SD Version: %u", SDCard.SDversion);
  1464  00E62C  0E5D               	movlw	low STR_8
  1465  00E62E  6E40               	movwf	printf@f,c
  1466  00E630  0EFF               	movlw	high STR_8
  1467  00E632  6E41               	movwf	printf@f+1,c
  1468  00E634  C080  F042         	movff	_SDCard,?_printf+2
  1469  00E638  6A43               	clrf	?_printf+3,c
  1470  00E63A  EC67  F07A         	call	_printf	;wreg free
  1471                           
  1472                           ;main.c: 64: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1473  00E63E  0E0A               	movlw	low _LCD_LINE2_ADDR
  1474  00E640  6EF6               	movwf	tblptrl,c
  1475  00E642                     	if	1	;There is more than 1 active tblptr byte
  1476  00E642  0EFF               	movlw	high _LCD_LINE2_ADDR
  1477  00E644  6EF7               	movwf	tblptrh,c
  1478  00E646                     	endif
  1479  00E646                     	if	0	;There are less than 3 active tblptr bytes
  1480  00E646                     	endif
  1481  00E646  0008               	tblrd		*
  1482  00E648  50F5               	movf	tablat,w,c
  1483  00E64A  0980               	iorlw	128
  1484  00E64C  ECC8  F06A         	call	_lcdInst
  1485                           
  1486                           ;main.c: 65: printf("MFG ID: 0x%x", SDCard.MID);
  1487  00E650  0EA3               	movlw	low STR_9
  1488  00E652  6E40               	movwf	printf@f,c
  1489  00E654  0EFF               	movlw	high STR_9
  1490  00E656  6E41               	movwf	printf@f+1,c
  1491  00E658  C082  F042         	movff	_SDCard+2,?_printf+2
  1492  00E65C  6A43               	clrf	?_printf+3,c
  1493  00E65E  EC67  F07A         	call	_printf	;wreg free
  1494                           
  1495                           ;main.c: 66: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1496  00E662  0E1A               	movlw	26
  1497  00E664  6E6F               	movwf	(??_main+1)& (0+255),c
  1498  00E666  0E5E               	movlw	94
  1499  00E668  6E6E               	movwf	??_main& (0+255),c
  1500  00E66A  0E6E               	movlw	110
  1501  00E66C                     u4667:
  1502  00E66C  2EE8               	decfsz	wreg,f,c
  1503  00E66E  D7FE               	bra	u4667
  1504  00E670  2E6E               	decfsz	??_main& (0+255),f,c
  1505  00E672  D7FC               	bra	u4667
  1506  00E674  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1507  00E676  D7FA               	bra	u4667
  1508  00E678  D000               	nop2	
  1509                           
  1510                           ;main.c: 68: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1511  00E67A  0E01               	movlw	1
  1512  00E67C  ECC8  F06A         	call	_lcdInst
  1513  00E680  0E11               	movlw	17
  1514  00E682  6E6E               	movwf	??_main& (0+255),c
  1515  00E684  0E3A               	movlw	58
  1516  00E686                     u4677:
  1517  00E686  2EE8               	decfsz	wreg,f,c
  1518  00E688  D7FE               	bra	u4677
  1519  00E68A  2E6E               	decfsz	??_main& (0+255),f,c
  1520  00E68C  D7FC               	bra	u4677
  1521  00E68E  D000               	nop2	
  1522                           
  1523                           ;main.c: 69: printf("OEM ID: %c%c", SDCard.OID >> 8, SDCard.OID & 0xFF);
  1524  00E690  0E96               	movlw	low STR_10
  1525  00E692  6E40               	movwf	printf@f,c
  1526  00E694  0EFF               	movlw	high STR_10
  1527  00E696  6E41               	movwf	printf@f+1,c
  1528  00E698  0100               	movlb	0	; () banked
  1529  00E69A  5184               	movf	(_SDCard+4)& (0+255),w,b
  1530  00E69C  6E42               	movwf	?_printf+2,c
  1531  00E69E  6A43               	clrf	?_printf+3,c
  1532  00E6A0  0100               	movlb	0	; () banked
  1533  00E6A2  5183               	movf	(_SDCard+3)& (0+255),w,b
  1534  00E6A4  6E44               	movwf	?_printf+4,c
  1535  00E6A6  6A45               	clrf	?_printf+5,c
  1536  00E6A8  EC67  F07A         	call	_printf	;wreg free
  1537                           
  1538                           ;main.c: 70: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1539  00E6AC  0E0A               	movlw	low _LCD_LINE2_ADDR
  1540  00E6AE  6EF6               	movwf	tblptrl,c
  1541  00E6B0                     	if	1	;There is more than 1 active tblptr byte
  1542  00E6B0  0EFF               	movlw	high _LCD_LINE2_ADDR
  1543  00E6B2  6EF7               	movwf	tblptrh,c
  1544  00E6B4                     	endif
  1545  00E6B4                     	if	0	;There are less than 3 active tblptr bytes
  1546  00E6B4                     	endif
  1547  00E6B4  0008               	tblrd		*
  1548  00E6B6  50F5               	movf	tablat,w,c
  1549  00E6B8  0980               	iorlw	128
  1550  00E6BA  ECC8  F06A         	call	_lcdInst
  1551                           
  1552                           ;main.c: 71: unsigned char PNM[5];
  1553                           ;main.c: 72: PNM[0] = SDCard.PHML & 0xFF;
  1554  00E6BE  C085  F076         	movff	_SDCard+5,main@PNM
  1555                           
  1556                           ;main.c: 73: PNM[1] = (SDCard.PHML >> 8) & 0xFF;
  1557  00E6C2  C086  F077         	movff	_SDCard+6,main@PNM+1
  1558                           
  1559                           ;main.c: 74: PNM[2] = (SDCard.PHML >> 16) & 0xFF;
  1560  00E6C6  C087  F078         	movff	_SDCard+7,main@PNM+2
  1561                           
  1562                           ;main.c: 75: PNM[3] = (SDCard.PHML >> 24) & 0xFF;
  1563  00E6CA  C088  F079         	movff	_SDCard+8,main@PNM+3
  1564                           
  1565                           ;main.c: 76: PNM[4] = SDCard.PHMH;
  1566  00E6CE  C089  F07A         	movff	_SDCard+9,main@PNM+4
  1567                           
  1568                           ;main.c: 77: printf("PNM: %c%c%c%c%c", PNM[4], PNM[3], PNM[2], PNM[1], PNM[0]);
  1569  00E6D2  0E4D               	movlw	low STR_11
  1570  00E6D4  6E40               	movwf	printf@f,c
  1571  00E6D6  0EFF               	movlw	high STR_11
  1572  00E6D8  6E41               	movwf	printf@f+1,c
  1573  00E6DA  C07A  F042         	movff	main@PNM+4,?_printf+2
  1574  00E6DE  6A43               	clrf	?_printf+3,c
  1575  00E6E0  C079  F044         	movff	main@PNM+3,?_printf+4
  1576  00E6E4  6A45               	clrf	?_printf+5,c
  1577  00E6E6  C078  F046         	movff	main@PNM+2,?_printf+6
  1578  00E6EA  6A47               	clrf	?_printf+7,c
  1579  00E6EC  C077  F048         	movff	main@PNM+1,?_printf+8
  1580  00E6F0  6A49               	clrf	?_printf+9,c
  1581  00E6F2  C076  F04A         	movff	main@PNM,?_printf+10
  1582  00E6F6  6A4B               	clrf	?_printf+11,c
  1583  00E6F8  EC67  F07A         	call	_printf	;wreg free
  1584                           
  1585                           ;main.c: 78: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1586  00E6FC  0E1A               	movlw	26
  1587  00E6FE  6E6F               	movwf	(??_main+1)& (0+255),c
  1588  00E700  0E5E               	movlw	94
  1589  00E702  6E6E               	movwf	??_main& (0+255),c
  1590  00E704  0E6E               	movlw	110
  1591  00E706                     u4687:
  1592  00E706  2EE8               	decfsz	wreg,f,c
  1593  00E708  D7FE               	bra	u4687
  1594  00E70A  2E6E               	decfsz	??_main& (0+255),f,c
  1595  00E70C  D7FC               	bra	u4687
  1596  00E70E  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1597  00E710  D7FA               	bra	u4687
  1598  00E712  D000               	nop2	
  1599                           
  1600                           ;main.c: 80: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1601  00E714  0E01               	movlw	1
  1602  00E716  ECC8  F06A         	call	_lcdInst
  1603  00E71A  0E11               	movlw	17
  1604  00E71C  6E6E               	movwf	??_main& (0+255),c
  1605  00E71E  0E3A               	movlw	58
  1606  00E720                     u4697:
  1607  00E720  2EE8               	decfsz	wreg,f,c
  1608  00E722  D7FE               	bra	u4697
  1609  00E724  2E6E               	decfsz	??_main& (0+255),f,c
  1610  00E726  D7FC               	bra	u4697
  1611  00E728  D000               	nop2	
  1612                           
  1613                           ;main.c: 81: printf("PRV: %u.%u", ((SDCard.PRV >> 4) & 0x0F), (SDCard.PRV & 0x0F));
  1614  00E72A  0EBB               	movlw	low STR_12
  1615  00E72C  6E40               	movwf	printf@f,c
  1616  00E72E  0EFF               	movlw	high STR_12
  1617  00E730  6E41               	movwf	printf@f+1,c
  1618  00E732  C08A  F06E         	movff	_SDCard+10,??_main
  1619  00E736  3A6E               	swapf	??_main,f,c
  1620  00E738  0E0F               	movlw	15
  1621  00E73A  166E               	andwf	??_main,f,c
  1622  00E73C  0E0F               	movlw	15
  1623  00E73E  166E               	andwf	??_main,f,c
  1624  00E740  506E               	movf	??_main,w,c
  1625  00E742  6E42               	movwf	?_printf+2,c
  1626  00E744  6A43               	clrf	?_printf+3,c
  1627  00E746  C08A  F06F         	movff	_SDCard+10,??_main+1
  1628  00E74A  0E0F               	movlw	15
  1629  00E74C  166F               	andwf	??_main+1,f,c
  1630  00E74E  506F               	movf	??_main+1,w,c
  1631  00E750  6E44               	movwf	?_printf+4,c
  1632  00E752  6A45               	clrf	?_printf+5,c
  1633  00E754  EC67  F07A         	call	_printf	;wreg free
  1634                           
  1635                           ;main.c: 82: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1636  00E758  0E0A               	movlw	low _LCD_LINE2_ADDR
  1637  00E75A  6EF6               	movwf	tblptrl,c
  1638  00E75C                     	if	1	;There is more than 1 active tblptr byte
  1639  00E75C  0EFF               	movlw	high _LCD_LINE2_ADDR
  1640  00E75E  6EF7               	movwf	tblptrh,c
  1641  00E760                     	endif
  1642  00E760                     	if	0	;There are less than 3 active tblptr bytes
  1643  00E760                     	endif
  1644  00E760  0008               	tblrd		*
  1645  00E762  50F5               	movf	tablat,w,c
  1646  00E764  0980               	iorlw	128
  1647  00E766  ECC8  F06A         	call	_lcdInst
  1648                           
  1649                           ;main.c: 83: printf("PSN: 0x%x", (SDCard.PSN >> 16));
  1650  00E76A  0EE6               	movlw	low STR_13
  1651  00E76C  6E40               	movwf	printf@f,c
  1652  00E76E  0EFF               	movlw	high STR_13
  1653  00E770  6E41               	movwf	printf@f+1,c
  1654  00E772  C08D  F042         	movff	_SDCard+13,?_printf+2
  1655  00E776  C08E  F043         	movff	_SDCard+14,?_printf+3
  1656  00E77A  6A44               	clrf	?_printf+4,c
  1657  00E77C  6A45               	clrf	?_printf+5,c
  1658  00E77E  EC67  F07A         	call	_printf	;wreg free
  1659                           
  1660                           ;main.c: 84: printf("%x",SDCard.PSN & 0xFFFF);
  1661  00E782  0EAD               	movlw	low (STR_9+10)
  1662  00E784  6E40               	movwf	printf@f,c
  1663  00E786  0EFF               	movlw	high (STR_9+10)
  1664  00E788  6E41               	movwf	printf@f+1,c
  1665  00E78A  EE20  F08B         	lfsr	2,_SDCard+11
  1666  00E78E  0EFF               	movlw	255
  1667  00E790  14DE               	andwf	postinc2,w,c
  1668  00E792  6E42               	movwf	?_printf+2,c
  1669  00E794  0EFF               	movlw	255
  1670  00E796  14DE               	andwf	postinc2,w,c
  1671  00E798  6E43               	movwf	?_printf+3,c
  1672  00E79A  0E00               	movlw	0
  1673  00E79C  14DE               	andwf	postinc2,w,c
  1674  00E79E  6E44               	movwf	?_printf+4,c
  1675  00E7A0  0E00               	movlw	0
  1676  00E7A2  14DE               	andwf	postinc2,w,c
  1677  00E7A4  6E45               	movwf	?_printf+5,c
  1678  00E7A6  EC67  F07A         	call	_printf	;wreg free
  1679                           
  1680                           ;main.c: 85: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1681  00E7AA  0E1A               	movlw	26
  1682  00E7AC  6E6F               	movwf	(??_main+1)& (0+255),c
  1683  00E7AE  0E5E               	movlw	94
  1684  00E7B0  6E6E               	movwf	??_main& (0+255),c
  1685  00E7B2  0E6E               	movlw	110
  1686  00E7B4                     u4707:
  1687  00E7B4  2EE8               	decfsz	wreg,f,c
  1688  00E7B6  D7FE               	bra	u4707
  1689  00E7B8  2E6E               	decfsz	??_main& (0+255),f,c
  1690  00E7BA  D7FC               	bra	u4707
  1691  00E7BC  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1692  00E7BE  D7FA               	bra	u4707
  1693  00E7C0  D000               	nop2	
  1694                           
  1695                           ;main.c: 87: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1696  00E7C2  0E01               	movlw	1
  1697  00E7C4  ECC8  F06A         	call	_lcdInst
  1698  00E7C8  0E11               	movlw	17
  1699  00E7CA  6E6E               	movwf	??_main& (0+255),c
  1700  00E7CC  0E3A               	movlw	58
  1701  00E7CE                     u4717:
  1702  00E7CE  2EE8               	decfsz	wreg,f,c
  1703  00E7D0  D7FE               	bra	u4717
  1704  00E7D2  2E6E               	decfsz	??_main& (0+255),f,c
  1705  00E7D4  D7FC               	bra	u4717
  1706  00E7D6  D000               	nop2	
  1707                           
  1708                           ;main.c: 88: unsigned short year = 2000 + ((SDCard.MDT >> 4) & 0xFF);
  1709  00E7D8  0ED0               	movlw	208
  1710  00E7DA  6E6E               	movwf	??_main& (0+255),c
  1711  00E7DC  0E07               	movlw	7
  1712  00E7DE  6E6F               	movwf	(??_main+1)& (0+255),c
  1713  00E7E0  EE20  F08F         	lfsr	2,_SDCard+15
  1714  00E7E4  CFDE F070          	movff	postinc2,??_main+2
  1715  00E7E8  CFDD F071          	movff	postdec2,??_main+3
  1716  00E7EC  0E04               	movlw	4
  1717  00E7EE  6E72               	movwf	(??_main+4)& (0+255),c
  1718  00E7F0                     u4215:
  1719  00E7F0  90D8               	bcf	status,0,c
  1720  00E7F2  3271               	rrcf	??_main+3,f,c
  1721  00E7F4  3270               	rrcf	??_main+2,f,c
  1722  00E7F6  2E72               	decfsz	(??_main+4)& (0+255),f,c
  1723  00E7F8  D7FB               	goto	u4215
  1724  00E7FA  5070               	movf	??_main+2,w,c
  1725  00E7FC  246E               	addwf	??_main,w,c
  1726  00E7FE  6E73               	movwf	main@year,c
  1727  00E800  0E00               	movlw	0
  1728  00E802  206F               	addwfc	??_main+1,w,c
  1729  00E804  6E74               	movwf	main@year+1,c
  1730                           
  1731                           ;main.c: 89: unsigned char month = SDCard.MDT & 0xF;
  1732  00E806  0100               	movlb	0	; () banked
  1733  00E808  518F               	movf	(_SDCard+15)& (0+255),w,b
  1734  00E80A  0B0F               	andlw	15
  1735  00E80C  6E75               	movwf	main@month,c
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;main.c: 90: printf("MDT: %u/%u", month, year);
  1739  00E80E  0EC6               	movlw	low STR_15
  1740  00E810  6E40               	movwf	printf@f,c
  1741  00E812  0EFF               	movlw	high STR_15
  1742  00E814  6E41               	movwf	printf@f+1,c
  1743  00E816  C075  F042         	movff	main@month,?_printf+2
  1744  00E81A  6A43               	clrf	?_printf+3,c
  1745  00E81C  C073  F044         	movff	main@year,?_printf+4
  1746  00E820  C074  F045         	movff	main@year+1,?_printf+5
  1747  00E824  EC67  F07A         	call	_printf	;wreg free
  1748                           
  1749                           ;main.c: 91: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1750  00E828  0E0A               	movlw	low _LCD_LINE2_ADDR
  1751  00E82A  6EF6               	movwf	tblptrl,c
  1752  00E82C                     	if	1	;There is more than 1 active tblptr byte
  1753  00E82C  0EFF               	movlw	high _LCD_LINE2_ADDR
  1754  00E82E  6EF7               	movwf	tblptrh,c
  1755  00E830                     	endif
  1756  00E830                     	if	0	;There are less than 3 active tblptr bytes
  1757  00E830                     	endif
  1758  00E830  0008               	tblrd		*
  1759  00E832  50F5               	movf	tablat,w,c
  1760  00E834  0980               	iorlw	128
  1761  00E836  ECC8  F06A         	call	_lcdInst
  1762                           
  1763                           ;main.c: 92: printf("CRC7: %u", SDCard.CRC);
  1764  00E83A  0EF0               	movlw	low STR_16
  1765  00E83C  6E40               	movwf	printf@f,c
  1766  00E83E  0EFF               	movlw	high STR_16
  1767  00E840  6E41               	movwf	printf@f+1,c
  1768  00E842  C091  F042         	movff	_SDCard+17,?_printf+2
  1769  00E846  6A43               	clrf	?_printf+3,c
  1770  00E848  EC67  F07A         	call	_printf	;wreg free
  1771                           
  1772                           ;main.c: 93: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1773  00E84C  0E1A               	movlw	26
  1774  00E84E  6E6F               	movwf	(??_main+1)& (0+255),c
  1775  00E850  0E5E               	movlw	94
  1776  00E852  6E6E               	movwf	??_main& (0+255),c
  1777  00E854  0E6E               	movlw	110
  1778  00E856                     u4727:
  1779  00E856  2EE8               	decfsz	wreg,f,c
  1780  00E858  D7FE               	bra	u4727
  1781  00E85A  2E6E               	decfsz	??_main& (0+255),f,c
  1782  00E85C  D7FC               	bra	u4727
  1783  00E85E  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1784  00E860  D7FA               	bra	u4727
  1785  00E862  D000               	nop2	
  1786                           
  1787                           ;main.c: 95: { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1788  00E864  0E01               	movlw	1
  1789  00E866  ECC8  F06A         	call	_lcdInst
  1790  00E86A  0E11               	movlw	17
  1791  00E86C  6E6E               	movwf	??_main& (0+255),c
  1792  00E86E  0E3A               	movlw	58
  1793  00E870                     u4737:
  1794  00E870  2EE8               	decfsz	wreg,f,c
  1795  00E872  D7FE               	bra	u4737
  1796  00E874  2E6E               	decfsz	??_main& (0+255),f,c
  1797  00E876  D7FC               	bra	u4737
  1798  00E878  D000               	nop2	
  1799                           
  1800                           ;main.c: 96: printf("Number of MB:");
  1801  00E87A  0E6C               	movlw	low STR_17
  1802  00E87C  6E40               	movwf	printf@f,c
  1803  00E87E  0EFF               	movlw	high STR_17
  1804  00E880  6E41               	movwf	printf@f+1,c
  1805  00E882  EC67  F07A         	call	_printf	;wreg free
  1806                           
  1807                           ;main.c: 97: { lcdInst(0x80 | LCD_LINE2_ADDR);};
  1808  00E886  0E0A               	movlw	low _LCD_LINE2_ADDR
  1809  00E888  6EF6               	movwf	tblptrl,c
  1810  00E88A                     	if	1	;There is more than 1 active tblptr byte
  1811  00E88A  0EFF               	movlw	high _LCD_LINE2_ADDR
  1812  00E88C  6EF7               	movwf	tblptrh,c
  1813  00E88E                     	endif
  1814  00E88E                     	if	0	;There are less than 3 active tblptr bytes
  1815  00E88E                     	endif
  1816  00E88E  0008               	tblrd		*
  1817  00E890  50F5               	movf	tablat,w,c
  1818  00E892  0980               	iorlw	128
  1819  00E894  ECC8  F06A         	call	_lcdInst
  1820                           
  1821                           ;main.c: 98: printf("%.2f ", SDCard.size);
  1822  00E898  0EF9               	movlw	low STR_18
  1823  00E89A  6E40               	movwf	printf@f,c
  1824  00E89C  0EFF               	movlw	high STR_18
  1825  00E89E  6E41               	movwf	printf@f+1,c
  1826  00E8A0  C098  F042         	movff	_SDCard+24,?_printf+2
  1827  00E8A4  C099  F043         	movff	_SDCard+25,?_printf+3
  1828  00E8A8  C09A  F044         	movff	_SDCard+26,?_printf+4
  1829  00E8AC  EC67  F07A         	call	_printf	;wreg free
  1830                           
  1831                           ;main.c: 99: _delay((unsigned long)((2000)*(10000000/4000.0)));
  1832  00E8B0  0E1A               	movlw	26
  1833  00E8B2  6E6F               	movwf	(??_main+1)& (0+255),c
  1834  00E8B4  0E5E               	movlw	94
  1835  00E8B6  6E6E               	movwf	??_main& (0+255),c
  1836  00E8B8  0E6E               	movlw	110
  1837  00E8BA                     u4747:
  1838  00E8BA  2EE8               	decfsz	wreg,f,c
  1839  00E8BC  D7FE               	bra	u4747
  1840  00E8BE  2E6E               	decfsz	??_main& (0+255),f,c
  1841  00E8C0  D7FC               	bra	u4747
  1842  00E8C2  2E6F               	decfsz	(??_main+1)& (0+255),f,c
  1843  00E8C4  D7FA               	bra	u4747
  1844  00E8C6  D000               	nop2	
  1845                           
  1846                           ;main.c: 100: }
  1847  00E8C8  D61B               	goto	l4032
  1848  00E8CA                     l4140:
  1849                           
  1850                           ;main.c: 101: else{
  1851                           ;main.c: 102: printf("SD init failed!");
  1852  00E8CA  0E2D               	movlw	low STR_19
  1853  00E8CC  6E40               	movwf	printf@f,c
  1854  00E8CE  0EFF               	movlw	high STR_19
  1855  00E8D0  6E41               	movwf	printf@f+1,c
  1856  00E8D2  EC67  F07A         	call	_printf	;wreg free
  1857  00E8D6                     l32:
  1858  00E8D6  D7FF               	goto	l32
  1859  00E8D8                     __end_of_main:
  1860                           	opt stack 0
  1861                           tblptru	equ	0xFF8
  1862                           tblptrh	equ	0xFF7
  1863                           tblptrl	equ	0xFF6
  1864                           tablat	equ	0xFF5
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           postinc2	equ	0xFDE
  1868                           postdec2	equ	0xFDD
  1869                           status	equ	0xFD8
  1870                           
  1871 ;; *************** function _printf *****************
  1872 ;; Defined at:
  1873 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;  f               2   63[COMRAM] PTR const unsigned char 
  1876 ;;		 -> STR_19(16), STR_18(6), STR_17(14), STR_16(9), 
  1877 ;;		 -> STR_15(11), STR_14(3), STR_13(10), STR_12(11), 
  1878 ;;		 -> STR_11(16), STR_10(13), STR_9(13), STR_8(15), 
  1879 ;;		 -> STR_7(11), STR_6(14), STR_5(14), STR_4(10), 
  1880 ;;		 -> STR_3(11), STR_2(16), STR_1(17), 
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;  idx             1   86[COMRAM] unsigned char 
  1883 ;;  val             4   99[COMRAM] unsigned long 
  1884 ;;  tmpval          4   95[COMRAM] struct .
  1885 ;;  fval            3  103[COMRAM] struct .
  1886 ;;  prec            2  106[COMRAM] int 
  1887 ;;  flag            2   93[COMRAM] unsigned short 
  1888 ;;  exp             2   91[COMRAM] int 
  1889 ;;  ap              2   89[COMRAM] PTR void [1]
  1890 ;;		 -> ?_printf(2), 
  1891 ;;  len             2   87[COMRAM] unsigned int 
  1892 ;;  cp              2   84[COMRAM] PTR const unsigned char 
  1893 ;;		 -> printf@c(1), 
  1894 ;;  width           2    0        int 
  1895 ;;  c               1  108[COMRAM] char 
  1896 ;;  d               1    0        unsigned char 
  1897 ;; Return value:  Size  Location     Type
  1898 ;;                  2   63[COMRAM] int 
  1899 ;; Registers used:
  1900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1901 ;; Tracked objects:
  1902 ;;		On entry : 0/0
  1903 ;;		On exit  : 0/0
  1904 ;;		Unchanged: 0/0
  1905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1906 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Locals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1909 ;;      Totals:        46       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1910 ;;Total ram usage:       46 bytes
  1911 ;; Hardware stack levels used:    1
  1912 ;; Hardware stack levels required when called:    4
  1913 ;; This function calls:
  1914 ;;		___awdiv
  1915 ;;		___ftadd
  1916 ;;		___ftge
  1917 ;;		___ftmul
  1918 ;;		___ftneg
  1919 ;;		___ftsub
  1920 ;;		___fttol
  1921 ;;		___lldiv
  1922 ;;		___llmod
  1923 ;;		___lltoft
  1924 ;;		___wmul
  1925 ;;		__div_to_l_
  1926 ;;		__tdiv_to_l_
  1927 ;;		_fround
  1928 ;;		_isdigit
  1929 ;;		_putch
  1930 ;;		_scale
  1931 ;; This function is called by:
  1932 ;;		_main
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           	psect	text1
  1937  00F4CE                     __ptext1:
  1938                           	opt stack 0
  1939  00F4CE                     _printf:
  1940                           	opt stack 26
  1941                           
  1942                           ;doprnt.c: 466: va_list ap;
  1943                           ;doprnt.c: 499: signed char c;
  1944                           ;doprnt.c: 501: int width;
  1945                           ;doprnt.c: 504: int prec;
  1946                           ;doprnt.c: 508: unsigned short flag;
  1947                           ;doprnt.c: 515: char d;
  1948                           ;doprnt.c: 516: double fval;
  1949                           ;doprnt.c: 517: int exp;
  1950                           ;doprnt.c: 523: union {
  1951                           ;doprnt.c: 524: unsigned long vd;
  1952                           ;doprnt.c: 525: double integ;
  1953                           ;doprnt.c: 526: } tmpval;
  1954                           ;doprnt.c: 528: unsigned long val;
  1955                           ;doprnt.c: 529: unsigned len;
  1956                           ;doprnt.c: 530: const char * cp;
  1957                           ;doprnt.c: 533: *ap = __va_start();
  1958                           
  1959                           ;incstack = 0
  1960  00F4CE  0E42               	movlw	low (?_printf+2)
  1961  00F4D0  6E5A               	movwf	printf@ap,c
  1962  00F4D2  0E00               	movlw	high (?_printf+2)
  1963  00F4D4  6E5B               	movwf	printf@ap+1,c
  1964                           
  1965                           ;doprnt.c: 536: while(c = *f++) {
  1966  00F4D6  EF1B  F07F         	goto	l4014
  1967  00F4DA                     l3736:
  1968                           
  1969                           ;doprnt.c: 538: if(c != '%')
  1970  00F4DA  0E25               	movlw	37
  1971  00F4DC  186D               	xorwf	printf@c,w,c
  1972  00F4DE  B4D8               	btfsc	status,2,c
  1973  00F4E0  D005               	goto	l3740
  1974                           
  1975                           ;doprnt.c: 540: {
  1976                           ;doprnt.c: 541: (putch(c) );
  1977  00F4E2  506D               	movf	printf@c,w,c
  1978  00F4E4  ECCE  F06A         	call	_putch
  1979                           
  1980                           ;doprnt.c: 542: continue;
  1981  00F4E8  EF1B  F07F         	goto	l4014
  1982  00F4EC                     l3740:
  1983                           
  1984                           ;doprnt.c: 543: }
  1985                           ;doprnt.c: 548: flag = 0;
  1986  00F4EC  0E00               	movlw	0
  1987  00F4EE  6E5F               	movwf	printf@flag+1,c
  1988  00F4F0  0E00               	movlw	0
  1989  00F4F2  6E5E               	movwf	printf@flag,c
  1990                           
  1991                           ;doprnt.c: 611: if(*f == '.') {
  1992  00F4F4  C040  FFF6         	movff	printf@f,tblptrl
  1993  00F4F8  C041  FFF7         	movff	printf@f+1,tblptrh
  1994  00F4FC                     	if	0	;tblptru may be non-zero
  1995  00F4FC                     	endif
  1996  00F4FC                     	if	0	;tblptru may be non-zero
  1997  00F4FC                     	endif
  1998  00F4FC  0008               	tblrd		*
  1999  00F4FE  50F5               	movf	tablat,w,c
  2000  00F500  0A2E               	xorlw	46
  2001  00F502  A4D8               	btfss	status,2,c
  2002  00F504  D02E               	goto	l3754
  2003                           
  2004                           ;doprnt.c: 612: flag |= 0x4000;
  2005  00F506  8C5F               	bsf	printf@flag+1,6,c
  2006                           
  2007                           ;doprnt.c: 613: f++;
  2008  00F508  4A40               	infsnz	printf@f,f,c
  2009  00F50A  2A41               	incf	printf@f+1,f,c
  2010                           
  2011                           ;doprnt.c: 620: {
  2012                           ;doprnt.c: 621: prec = 0;
  2013  00F50C  0E00               	movlw	0
  2014  00F50E  6E6C               	movwf	printf@prec+1,c
  2015  00F510  0E00               	movlw	0
  2016  00F512  6E6B               	movwf	printf@prec,c
  2017                           
  2018                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2019  00F514  D01B               	goto	l3752
  2020  00F516                     l3748:
  2021                           
  2022                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2023  00F516  C06B  F00F         	movff	printf@prec,___wmul@multiplier
  2024  00F51A  C06C  F010         	movff	printf@prec+1,___wmul@multiplier+1
  2025  00F51E  0E00               	movlw	0
  2026  00F520  6E12               	movwf	___wmul@multiplicand+1,c
  2027  00F522  0E0A               	movlw	10
  2028  00F524  6E11               	movwf	___wmul@multiplicand,c
  2029  00F526  EC38  F06B         	call	___wmul	;wreg free
  2030  00F52A  C040  FFF6         	movff	printf@f,tblptrl
  2031  00F52E  C041  FFF7         	movff	printf@f+1,tblptrh
  2032  00F532                     	if	0	;tblptru may be non-zero
  2033  00F532                     	endif
  2034  00F532                     	if	0	;tblptru may be non-zero
  2035  00F532                     	endif
  2036  00F532  0008               	tblrd		*
  2037  00F534  50F5               	movf	tablat,w,c
  2038  00F536  260F               	addwf	?___wmul,f,c
  2039  00F538  0E00               	movlw	0
  2040  00F53A  2210               	addwfc	?___wmul+1,f,c
  2041  00F53C  0ED0               	movlw	208
  2042  00F53E  240F               	addwf	?___wmul,w,c
  2043  00F540  6E6B               	movwf	printf@prec,c
  2044  00F542  0EFF               	movlw	255
  2045  00F544  2010               	addwfc	?___wmul+1,w,c
  2046  00F546  6E6C               	movwf	printf@prec+1,c
  2047  00F548  4A40               	infsnz	printf@f,f,c
  2048  00F54A  2A41               	incf	printf@f+1,f,c
  2049  00F54C                     l3752:
  2050  00F54C  C040  FFF6         	movff	printf@f,tblptrl
  2051  00F550  C041  FFF7         	movff	printf@f+1,tblptrh
  2052  00F554                     	if	0	;tblptru may be non-zero
  2053  00F554                     	endif
  2054  00F554                     	if	0	;tblptru may be non-zero
  2055  00F554                     	endif
  2056  00F554  0008               	tblrd		*
  2057  00F556  50F5               	movf	tablat,w,c
  2058  00F558  ECF3  F06A         	call	_isdigit
  2059  00F55C  A0D8               	btfss	status,0,c
  2060  00F55E  D045               	goto	l3788
  2061  00F560  D7DA               	goto	l3748
  2062  00F562                     l3754:
  2063                           
  2064                           ;doprnt.c: 626: prec = 0;
  2065  00F562  0E00               	movlw	0
  2066  00F564  6E6C               	movwf	printf@prec+1,c
  2067  00F566  0E00               	movlw	0
  2068  00F568  6E6B               	movwf	printf@prec,c
  2069                           
  2070                           ;doprnt.c: 628: flag |= 0x1000;
  2071  00F56A  885F               	bsf	printf@flag+1,4,c
  2072                           
  2073                           ;doprnt.c: 635: switch(c = *f++) {
  2074                           
  2075                           ;doprnt.c: 630: }
  2076                           ;doprnt.c: 633: loop:
  2077  00F56C  D03E               	goto	l3788
  2078  00F56E                     l3758:
  2079                           
  2080                           ;doprnt.c: 643: flag |= 0x10;
  2081  00F56E  885E               	bsf	printf@flag,4,c
  2082                           
  2083                           ;doprnt.c: 644: goto loop;
  2084  00F570  D03C               	goto	l3788
  2085  00F572                     l3760:
  2086                           
  2087                           ;doprnt.c: 663: flag |= 0x400;
  2088  00F572  845F               	bsf	printf@flag+1,2,c
  2089                           
  2090                           ;doprnt.c: 698: case 'i':
  2091                           ;doprnt.c: 699: break;
  2092                           
  2093                           ;doprnt.c: 697: case 'd':
  2094                           
  2095                           ;doprnt.c: 664: break;
  2096  00F574  D05D               	goto	l3790
  2097  00F576                     l3762:
  2098                           
  2099                           ;doprnt.c: 721: flag |= 0x80;
  2100  00F576  8E5E               	bsf	printf@flag,7,c
  2101                           
  2102                           ;doprnt.c: 723: break;
  2103  00F578  D05B               	goto	l3790
  2104  00F57A                     l3764:
  2105                           
  2106                           ;doprnt.c: 753: if(prec && prec < len)
  2107  00F57A  506B               	movf	printf@prec,w,c
  2108  00F57C  106C               	iorwf	printf@prec+1,w,c
  2109  00F57E  B4D8               	btfsc	status,2,c
  2110  00F580  D014               	goto	l3774
  2111  00F582  5058               	movf	printf@len,w,c
  2112  00F584  5C6B               	subwf	printf@prec,w,c
  2113  00F586  5059               	movf	printf@len+1,w,c
  2114  00F588  586C               	subwfb	printf@prec+1,w,c
  2115  00F58A  B0D8               	btfsc	status,0,c
  2116  00F58C  D00E               	goto	l3774
  2117                           
  2118                           ;doprnt.c: 754: len = prec;
  2119  00F58E  C06B  F058         	movff	printf@prec,printf@len
  2120  00F592  C06C  F059         	movff	printf@prec+1,printf@len+1
  2121                           
  2122                           ;doprnt.c: 767: while(len--)
  2123  00F596  D009               	goto	l3774
  2124  00F598                     l3770:
  2125                           
  2126                           ;doprnt.c: 768: (putch(*cp++) );
  2127  00F598  C055  FFD9         	movff	printf@cp,fsr2l
  2128  00F59C  C056  FFDA         	movff	printf@cp+1,fsr2h
  2129  00F5A0  50DF               	movf	indf2,w,c
  2130  00F5A2  ECCE  F06A         	call	_putch
  2131  00F5A6  4A55               	infsnz	printf@cp,f,c
  2132  00F5A8  2A56               	incf	printf@cp+1,f,c
  2133  00F5AA                     l3774:
  2134  00F5AA  0658               	decf	printf@len,f,c
  2135  00F5AC  A0D8               	btfss	status,0,c
  2136  00F5AE  0659               	decf	printf@len+1,f,c
  2137  00F5B0  2858               	incf	printf@len,w,c
  2138  00F5B2  E1F2               	bnz	l3770
  2139  00F5B4  2859               	incf	printf@len+1,w,c
  2140  00F5B6  B4D8               	btfsc	status,2,c
  2141  00F5B8  EF1B  F07F         	goto	l4014
  2142  00F5BC  D7ED               	goto	l3770
  2143  00F5BE                     l3776:
  2144                           
  2145                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2146  00F5BE  C05A  FFD9         	movff	printf@ap,fsr2l
  2147  00F5C2  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2148  00F5C6  50DF               	movf	indf2,w,c
  2149  00F5C8  6E6D               	movwf	printf@c,c
  2150  00F5CA  0E02               	movlw	2
  2151  00F5CC  265A               	addwf	printf@ap,f,c
  2152  00F5CE  0E00               	movlw	0
  2153  00F5D0  225B               	addwfc	printf@ap+1,f,c
  2154  00F5D2                     l3780:
  2155                           
  2156                           ;doprnt.c: 805: cp = (char *)&c;
  2157  00F5D2  0E6D               	movlw	low printf@c
  2158  00F5D4  6E55               	movwf	printf@cp,c
  2159  00F5D6  0E00               	movlw	high printf@c
  2160  00F5D8  6E56               	movwf	printf@cp+1,c
  2161                           
  2162                           ;doprnt.c: 806: len = 1;
  2163  00F5DA  0E00               	movlw	0
  2164  00F5DC  6E59               	movwf	printf@len+1,c
  2165  00F5DE  0E01               	movlw	1
  2166  00F5E0  6E58               	movwf	printf@len,c
  2167                           
  2168                           ;doprnt.c: 807: goto dostring;
  2169  00F5E2  D7CB               	goto	l3764
  2170  00F5E4                     l3784:
  2171                           
  2172                           ;doprnt.c: 818: flag |= 0xC0;
  2173  00F5E4  0EC0               	movlw	192
  2174  00F5E6  125E               	iorwf	printf@flag,f,c
  2175                           
  2176                           ;doprnt.c: 822: }
  2177                           
  2178                           ;doprnt.c: 819: break;
  2179  00F5E8  D023               	goto	l3790
  2180  00F5EA                     l3788:
  2181  00F5EA  C040  FFF6         	movff	printf@f,tblptrl
  2182  00F5EE  C041  FFF7         	movff	printf@f+1,tblptrh
  2183  00F5F2  4A40               	infsnz	printf@f,f,c
  2184  00F5F4  2A41               	incf	printf@f+1,f,c
  2185  00F5F6                     	if	0	;tblptru may be non-zero
  2186  00F5F6                     	endif
  2187  00F5F6                     	if	0	;tblptru may be non-zero
  2188  00F5F6                     	endif
  2189  00F5F6  0008               	tblrd		*
  2190  00F5F8  CFF5 F06D          	movff	tablat,printf@c
  2191  00F5FC  506D               	movf	printf@c,w,c
  2192                           
  2193                           ; Switch size 1, requested type "space"
  2194                           ; Number of cases is 8, Range of values is 0 to 120
  2195                           ; switch strategies available:
  2196                           ; Name         Instructions Cycles
  2197                           ; simple_byte           25    13 (average)
  2198                           ;	Chosen strategy is simple_byte
  2199  00F5FE  0A00               	xorlw	0	; case 0
  2200  00F600  B4D8               	btfsc	status,2,c
  2201  00F602  0012               	return	
  2202  00F604  0A63               	xorlw	99	; case 99
  2203  00F606  B4D8               	btfsc	status,2,c
  2204  00F608  D7DA               	goto	l3776
  2205  00F60A  0A07               	xorlw	7	; case 100
  2206  00F60C  B4D8               	btfsc	status,2,c
  2207  00F60E  D010               	goto	l3790
  2208  00F610  0A02               	xorlw	2	; case 102
  2209  00F612  B4D8               	btfsc	status,2,c
  2210  00F614  D7AE               	goto	l3760
  2211  00F616  0A0F               	xorlw	15	; case 105
  2212  00F618  B4D8               	btfsc	status,2,c
  2213  00F61A  D00A               	goto	l3790
  2214  00F61C  0A05               	xorlw	5	; case 108
  2215  00F61E  B4D8               	btfsc	status,2,c
  2216  00F620  D7A6               	goto	l3758
  2217  00F622  0A19               	xorlw	25	; case 117
  2218  00F624  B4D8               	btfsc	status,2,c
  2219  00F626  D7DE               	goto	l3784
  2220  00F628  0A0D               	xorlw	13	; case 120
  2221  00F62A  B4D8               	btfsc	status,2,c
  2222  00F62C  D7A4               	goto	l3762
  2223  00F62E  D7D1               	goto	l3780
  2224  00F630                     l3790:
  2225                           
  2226                           ;doprnt.c: 825: if(flag & (0x700)) {
  2227  00F630  0E07               	movlw	7
  2228  00F632  145F               	andwf	printf@flag+1,w,c
  2229  00F634  B4D8               	btfsc	status,2,c
  2230  00F636  D29E               	goto	l3924
  2231                           
  2232                           ;doprnt.c: 827: if(flag & 0x1000)
  2233  00F638  A85F               	btfss	printf@flag+1,4,c
  2234  00F63A  D004               	goto	l3796
  2235                           
  2236                           ;doprnt.c: 829: prec = 6;
  2237  00F63C  0E00               	movlw	0
  2238  00F63E  6E6C               	movwf	printf@prec+1,c
  2239  00F640  0E06               	movlw	6
  2240  00F642  6E6B               	movwf	printf@prec,c
  2241  00F644                     l3796:
  2242                           
  2243                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2244  00F644  C05A  FFD9         	movff	printf@ap,fsr2l
  2245  00F648  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2246  00F64C  CFDE F068          	movff	postinc2,printf@fval
  2247  00F650  CFDE F069          	movff	postinc2,printf@fval+1
  2248  00F654  CFDD F06A          	movff	postdec2,printf@fval+2
  2249  00F658  0E03               	movlw	3
  2250  00F65A  265A               	addwf	printf@ap,f,c
  2251  00F65C  0E00               	movlw	0
  2252  00F65E  225B               	addwfc	printf@ap+1,f,c
  2253                           
  2254                           ;doprnt.c: 831: if(fval < 0.0) {
  2255  00F660  AE6A               	btfss	printf@fval+2,7,c
  2256  00F662  D010               	goto	l3806
  2257                           
  2258                           ;doprnt.c: 832: fval = -fval;
  2259  00F664  C068  F001         	movff	printf@fval,___ftneg@f1
  2260  00F668  C069  F002         	movff	printf@fval+1,___ftneg@f1+1
  2261  00F66C  C06A  F003         	movff	printf@fval+2,___ftneg@f1+2
  2262  00F670  EC26  F06B         	call	___ftneg	;wreg free
  2263  00F674  C001  F068         	movff	?___ftneg,printf@fval
  2264  00F678  C002  F069         	movff	?___ftneg+1,printf@fval+1
  2265  00F67C  C003  F06A         	movff	?___ftneg+2,printf@fval+2
  2266                           
  2267                           ;doprnt.c: 833: flag |= 0x03;
  2268  00F680  0E03               	movlw	3
  2269  00F682  125E               	iorwf	printf@flag,f,c
  2270  00F684                     l3806:
  2271                           
  2272                           ;doprnt.c: 834: }
  2273                           ;doprnt.c: 835: exp = 0;
  2274  00F684  0E00               	movlw	0
  2275  00F686  6E5D               	movwf	printf@exp+1,c
  2276  00F688  0E00               	movlw	0
  2277  00F68A  6E5C               	movwf	printf@exp,c
  2278                           
  2279                           ;doprnt.c: 836: if( fval!=0) {
  2280  00F68C  5068               	movf	printf@fval,w,c
  2281  00F68E  1069               	iorwf	printf@fval+1,w,c
  2282  00F690  106A               	iorwf	printf@fval+2,w,c
  2283  00F692  B4D8               	btfsc	status,2,c
  2284  00F694  D083               	goto	l3834
  2285                           
  2286                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  2287  00F696  0E82               	movlw	130
  2288  00F698  6E4C               	movwf	??_printf& (0+255),c
  2289  00F69A  0EFF               	movlw	255
  2290  00F69C  6E4D               	movwf	(??_printf+1)& (0+255),c
  2291  00F69E  C068  F04E         	movff	printf@fval,??_printf+2
  2292  00F6A2  C069  F04F         	movff	printf@fval+1,??_printf+3
  2293  00F6A6  C06A  F050         	movff	printf@fval+2,??_printf+4
  2294  00F6AA  C06B  F051         	movff	printf@fval+3,??_printf+5
  2295  00F6AE  0E10               	movlw	16
  2296  00F6B0  D005               	goto	u3820
  2297  00F6B2                     u3825:
  2298  00F6B2  90D8               	bcf	status,0,c
  2299  00F6B4  3251               	rrcf	??_printf+5,f,c
  2300  00F6B6  3250               	rrcf	??_printf+4,f,c
  2301  00F6B8  324F               	rrcf	??_printf+3,f,c
  2302  00F6BA  324E               	rrcf	??_printf+2,f,c
  2303  00F6BC                     u3820:
  2304  00F6BC  2EE8               	decfsz	wreg,f,c
  2305  00F6BE  D7F9               	goto	u3825
  2306  00F6C0  504E               	movf	??_printf+2,w,c
  2307  00F6C2  244C               	addwf	??_printf,w,c
  2308  00F6C4  6E5C               	movwf	printf@exp,c
  2309  00F6C6  0E00               	movlw	0
  2310  00F6C8  204D               	addwfc	??_printf+1,w,c
  2311  00F6CA  6E5D               	movwf	printf@exp+1,c
  2312                           
  2313                           ;doprnt.c: 838: exp--;
  2314  00F6CC  065C               	decf	printf@exp,f,c
  2315  00F6CE  A0D8               	btfss	status,0,c
  2316  00F6D0  065D               	decf	printf@exp+1,f,c
  2317                           
  2318                           ;doprnt.c: 839: exp *= 3;
  2319  00F6D2  C05C  F00F         	movff	printf@exp,___wmul@multiplier
  2320  00F6D6  C05D  F010         	movff	printf@exp+1,___wmul@multiplier+1
  2321  00F6DA  0E00               	movlw	0
  2322  00F6DC  6E12               	movwf	___wmul@multiplicand+1,c
  2323  00F6DE  0E03               	movlw	3
  2324  00F6E0  6E11               	movwf	___wmul@multiplicand,c
  2325  00F6E2  EC38  F06B         	call	___wmul	;wreg free
  2326  00F6E6  C00F  F05C         	movff	?___wmul,printf@exp
  2327  00F6EA  C010  F05D         	movff	?___wmul+1,printf@exp+1
  2328                           
  2329                           ;doprnt.c: 840: exp /= 10;
  2330  00F6EE  C05C  F007         	movff	printf@exp,___awdiv@dividend
  2331  00F6F2  C05D  F008         	movff	printf@exp+1,___awdiv@dividend+1
  2332  00F6F6  0E00               	movlw	0
  2333  00F6F8  6E0A               	movwf	___awdiv@divisor+1,c
  2334  00F6FA  0E0A               	movlw	10
  2335  00F6FC  6E09               	movwf	___awdiv@divisor,c
  2336  00F6FE  EC07  F06D         	call	___awdiv	;wreg free
  2337  00F702  C007  F05C         	movff	?___awdiv,printf@exp
  2338  00F706  C008  F05D         	movff	?___awdiv+1,printf@exp+1
  2339                           
  2340                           ;doprnt.c: 841: if(exp < 0)
  2341  00F70A  AE5D               	btfss	printf@exp+1,7,c
  2342  00F70C  D003               	goto	l3822
  2343                           
  2344                           ;doprnt.c: 842: exp--;
  2345  00F70E  065C               	decf	printf@exp,f,c
  2346  00F710  A0D8               	btfss	status,0,c
  2347  00F712  065D               	decf	printf@exp+1,f,c
  2348  00F714                     l3822:
  2349                           
  2350                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2351  00F714  505C               	movf	printf@exp,w,c
  2352  00F716  0800               	sublw	0
  2353  00F718  EC6C  F074         	call	_scale
  2354  00F71C  C024  F060         	movff	?_scale,printf@tmpval
  2355  00F720  C025  F061         	movff	?_scale+1,printf@tmpval+1
  2356  00F724  C026  F062         	movff	?_scale+2,printf@tmpval+2
  2357                           
  2358                           ;doprnt.c: 847: tmpval.integ *= fval;
  2359  00F728  C060  F015         	movff	printf@tmpval,___ftmul@f1
  2360  00F72C  C061  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  2361  00F730  C062  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  2362  00F734  C068  F018         	movff	printf@fval,___ftmul@f2
  2363  00F738  C069  F019         	movff	printf@fval+1,___ftmul@f2+1
  2364  00F73C  C06A  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2365  00F740  EC5B  F06E         	call	___ftmul	;wreg free
  2366  00F744  C015  F060         	movff	?___ftmul,printf@tmpval
  2367  00F748  C016  F061         	movff	?___ftmul+1,printf@tmpval+1
  2368  00F74C  C017  F062         	movff	?___ftmul+2,printf@tmpval+2
  2369                           
  2370                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2371  00F750  C060  F001         	movff	printf@tmpval,___ftge@ff1
  2372  00F754  C061  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2373  00F758  C062  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2374  00F75C  0E00               	movlw	0
  2375  00F75E  6E04               	movwf	___ftge@ff2,c
  2376  00F760  0E80               	movlw	128
  2377  00F762  6E05               	movwf	___ftge@ff2+1,c
  2378  00F764  0E3F               	movlw	63
  2379  00F766  6E06               	movwf	___ftge@ff2+2,c
  2380  00F768  EC49  F06D         	call	___ftge	;wreg free
  2381  00F76C  B0D8               	btfsc	status,0,c
  2382  00F76E  D004               	goto	l3830
  2383                           
  2384                           ;doprnt.c: 849: exp--;
  2385  00F770  065C               	decf	printf@exp,f,c
  2386  00F772  A0D8               	btfss	status,0,c
  2387  00F774  065D               	decf	printf@exp+1,f,c
  2388  00F776  D012               	goto	l3834
  2389  00F778                     l3830:
  2390                           
  2391                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2392  00F778  C060  F001         	movff	printf@tmpval,___ftge@ff1
  2393  00F77C  C061  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2394  00F780  C062  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2395  00F784  0E00               	movlw	0
  2396  00F786  6E04               	movwf	___ftge@ff2,c
  2397  00F788  0E20               	movlw	32
  2398  00F78A  6E05               	movwf	___ftge@ff2+1,c
  2399  00F78C  0E41               	movlw	65
  2400  00F78E  6E06               	movwf	___ftge@ff2+2,c
  2401  00F790  EC49  F06D         	call	___ftge	;wreg free
  2402  00F794  A0D8               	btfss	status,0,c
  2403  00F796  D002               	goto	l3834
  2404                           
  2405                           ;doprnt.c: 851: exp++;
  2406  00F798  4A5C               	infsnz	printf@exp,f,c
  2407  00F79A  2A5D               	incf	printf@exp+1,f,c
  2408  00F79C                     l3834:
  2409                           
  2410                           ;doprnt.c: 852: }
  2411                           ;doprnt.c: 1112: if(prec <= 12)
  2412  00F79C  BE6C               	btfsc	printf@prec+1,7,c
  2413  00F79E  D006               	goto	l3836
  2414  00F7A0  506C               	movf	printf@prec+1,w,c
  2415  00F7A2  E11B               	bnz	l3838
  2416  00F7A4  0E0D               	movlw	13
  2417  00F7A6  5C6B               	subwf	printf@prec,w,c
  2418  00F7A8  B0D8               	btfsc	status,0,c
  2419  00F7AA  D017               	goto	l3838
  2420  00F7AC                     l3836:
  2421                           
  2422                           ;doprnt.c: 1113: fval += fround(prec);
  2423  00F7AC  C068  F02E         	movff	printf@fval,___ftadd@f1
  2424  00F7B0  C069  F02F         	movff	printf@fval+1,___ftadd@f1+1
  2425  00F7B4  C06A  F030         	movff	printf@fval+2,___ftadd@f1+2
  2426  00F7B8  506B               	movf	printf@prec,w,c
  2427  00F7BA  EC52  F071         	call	_fround
  2428  00F7BE  C024  F031         	movff	?_fround,___ftadd@f2
  2429  00F7C2  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  2430  00F7C6  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  2431  00F7CA  EC7C  F070         	call	___ftadd	;wreg free
  2432  00F7CE  C02E  F068         	movff	?___ftadd,printf@fval
  2433  00F7D2  C02F  F069         	movff	?___ftadd+1,printf@fval+1
  2434  00F7D6  C030  F06A         	movff	?___ftadd+2,printf@fval+2
  2435  00F7DA                     l3838:
  2436                           
  2437                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2438  00F7DA  BE5D               	btfsc	printf@exp+1,7,c
  2439  00F7DC  D006               	goto	l3840
  2440  00F7DE  505D               	movf	printf@exp+1,w,c
  2441  00F7E0  E11E               	bnz	l3846
  2442  00F7E2  0E0A               	movlw	10
  2443  00F7E4  5C5C               	subwf	printf@exp,w,c
  2444  00F7E6  B0D8               	btfsc	status,0,c
  2445  00F7E8  D01A               	goto	l3846
  2446  00F7EA                     l3840:
  2447  00F7EA  5068               	movf	printf@fval,w,c
  2448  00F7EC  1069               	iorwf	printf@fval+1,w,c
  2449  00F7EE  106A               	iorwf	printf@fval+2,w,c
  2450  00F7F0  B4D8               	btfsc	status,2,c
  2451  00F7F2  D051               	goto	l3860
  2452  00F7F4  C068  F02B         	movff	printf@fval,___fttol@f1
  2453  00F7F8  C069  F02C         	movff	printf@fval+1,___fttol@f1+1
  2454  00F7FC  C06A  F02D         	movff	printf@fval+2,___fttol@f1+2
  2455  00F800  ECD5  F06E         	call	___fttol	;wreg free
  2456  00F804  502B               	movf	?___fttol,w,c
  2457  00F806  102C               	iorwf	?___fttol+1,w,c
  2458  00F808  102D               	iorwf	?___fttol+2,w,c
  2459  00F80A  102E               	iorwf	?___fttol+3,w,c
  2460  00F80C  B4D8               	btfsc	status,2,c
  2461  00F80E  BE5D               	btfsc	printf@exp+1,7,c
  2462  00F810  D042               	goto	l3860
  2463  00F812  505D               	movf	printf@exp+1,w,c
  2464  00F814  E104               	bnz	l3846
  2465  00F816  0E02               	movlw	2
  2466  00F818  5C5C               	subwf	printf@exp,w,c
  2467  00F81A  A0D8               	btfss	status,0,c
  2468  00F81C  D03C               	goto	l3860
  2469  00F81E                     l3846:
  2470                           
  2471                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2472  00F81E  C060  F001         	movff	printf@tmpval,___ftge@ff1
  2473  00F822  C061  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2474  00F826  C062  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2475  00F82A  0E70               	movlw	112
  2476  00F82C  6E04               	movwf	___ftge@ff2,c
  2477  00F82E  0E89               	movlw	137
  2478  00F830  6E05               	movwf	___ftge@ff2+1,c
  2479  00F832  0E40               	movlw	64
  2480  00F834  6E06               	movwf	___ftge@ff2+2,c
  2481  00F836  EC49  F06D         	call	___ftge	;wreg free
  2482  00F83A  B0D8               	btfsc	status,0,c
  2483  00F83C  D002               	goto	l3850
  2484                           
  2485                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2486  00F83E  0EF7               	movlw	247
  2487  00F840  D001               	goto	L1
  2488  00F842                     l3850:
  2489                           
  2490                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2491  00F842  0EF8               	movlw	248
  2492  00F844                     L1:
  2493  00F844  265C               	addwf	printf@exp,f,c
  2494  00F846  0EFF               	movlw	255
  2495  00F848  225D               	addwfc	printf@exp+1,f,c
  2496                           
  2497                           ;doprnt.c: 1124: }
  2498                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2499  00F84A  505C               	movf	printf@exp,w,c
  2500  00F84C  EC6C  F074         	call	_scale
  2501  00F850  C024  F060         	movff	?_scale,printf@tmpval
  2502  00F854  C025  F061         	movff	?_scale+1,printf@tmpval+1
  2503  00F858  C026  F062         	movff	?_scale+2,printf@tmpval+2
  2504                           
  2505                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2506  00F85C  C068  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2507  00F860  C069  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2508  00F864  C06A  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2509  00F868  C060  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2510  00F86C  C061  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2511  00F870  C062  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2512  00F874  ECE3  F06F         	call	__tdiv_to_l_	;wreg free
  2513  00F878  C001  F064         	movff	?__tdiv_to_l_,printf@val
  2514  00F87C  C002  F065         	movff	?__tdiv_to_l_+1,printf@val+1
  2515  00F880  C003  F066         	movff	?__tdiv_to_l_+2,printf@val+2
  2516  00F884  C004  F067         	movff	?__tdiv_to_l_+3,printf@val+3
  2517                           
  2518                           ;doprnt.c: 1129: fval = 0.0;
  2519  00F888  0E00               	movlw	0
  2520  00F88A  6E68               	movwf	printf@fval,c
  2521  00F88C  0E00               	movlw	0
  2522  00F88E  6E69               	movwf	printf@fval+1,c
  2523  00F890  0E00               	movlw	0
  2524  00F892  6E6A               	movwf	printf@fval+2,c
  2525                           
  2526                           ;doprnt.c: 1130: } else {
  2527  00F894  D032               	goto	l3864
  2528  00F896                     l3860:
  2529                           
  2530                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2531  00F896  C068  F02B         	movff	printf@fval,___fttol@f1
  2532  00F89A  C069  F02C         	movff	printf@fval+1,___fttol@f1+1
  2533  00F89E  C06A  F02D         	movff	printf@fval+2,___fttol@f1+2
  2534  00F8A2  ECD5  F06E         	call	___fttol	;wreg free
  2535  00F8A6  C02B  F064         	movff	?___fttol,printf@val
  2536  00F8AA  C02C  F065         	movff	?___fttol+1,printf@val+1
  2537  00F8AE  C02D  F066         	movff	?___fttol+2,printf@val+2
  2538  00F8B2  C02E  F067         	movff	?___fttol+3,printf@val+3
  2539                           
  2540                           ;doprnt.c: 1132: fval -= (double)val;
  2541  00F8B6  C068  F03A         	movff	printf@fval,___ftsub@f1
  2542  00F8BA  C069  F03B         	movff	printf@fval+1,___ftsub@f1+1
  2543  00F8BE  C06A  F03C         	movff	printf@fval+2,___ftsub@f1+2
  2544  00F8C2  C064  F009         	movff	printf@val,___lltoft@c
  2545  00F8C6  C065  F00A         	movff	printf@val+1,___lltoft@c+1
  2546  00F8CA  C066  F00B         	movff	printf@val+2,___lltoft@c+2
  2547  00F8CE  C067  F00C         	movff	printf@val+3,___lltoft@c+3
  2548  00F8D2  ECB9  F06B         	call	___lltoft	;wreg free
  2549  00F8D6  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2550  00F8DA  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2551  00F8DE  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2552  00F8E2  EC99  F06B         	call	___ftsub	;wreg free
  2553  00F8E6  C03A  F068         	movff	?___ftsub,printf@fval
  2554  00F8EA  C03B  F069         	movff	?___ftsub+1,printf@fval+1
  2555  00F8EE  C03C  F06A         	movff	?___ftsub+2,printf@fval+2
  2556                           
  2557                           ;doprnt.c: 1133: exp = 0;
  2558  00F8F2  0E00               	movlw	0
  2559  00F8F4  6E5D               	movwf	printf@exp+1,c
  2560  00F8F6  0E00               	movlw	0
  2561  00F8F8  6E5C               	movwf	printf@exp,c
  2562  00F8FA                     l3864:
  2563                           
  2564                           ;doprnt.c: 1134: }
  2565                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2566  00F8FA  0E01               	movlw	1
  2567  00F8FC  6E6D               	movwf	printf@c,c
  2568  00F8FE                     l3866:
  2569  00F8FE  0E0A               	movlw	10
  2570  00F900  186D               	xorwf	printf@c,w,c
  2571  00F902  B4D8               	btfsc	status,2,c
  2572  00F904  D018               	goto	l3878
  2573                           
  2574                           ;doprnt.c: 1137: if(val < dpowers[c])
  2575  00F906  506D               	movf	printf@c,w,c
  2576  00F908  0D04               	mullw	4
  2577  00F90A  0E53               	movlw	low _dpowers
  2578  00F90C  24F3               	addwf	prodl,w,c
  2579  00F90E  6EF6               	movwf	tblptrl,c
  2580  00F910  0EFE               	movlw	high _dpowers
  2581  00F912  20F4               	addwfc	prodh,w,c
  2582  00F914  6EF7               	movwf	tblptrh,c
  2583  00F916                     	if	0	;There are less than 3 active tblptr bytes
  2584  00F916                     	endif
  2585  00F916  0009               	tblrd		*+
  2586  00F918  50F5               	movf	tablat,w,c
  2587  00F91A  5C64               	subwf	printf@val,w,c
  2588  00F91C  0009               	tblrd		*+
  2589  00F91E  50F5               	movf	tablat,w,c
  2590  00F920  5865               	subwfb	printf@val+1,w,c
  2591  00F922  0009               	tblrd		*+
  2592  00F924  50F5               	movf	tablat,w,c
  2593  00F926  5866               	subwfb	printf@val+2,w,c
  2594  00F928  0009               	tblrd		*+
  2595  00F92A  50F5               	movf	tablat,w,c
  2596  00F92C  5867               	subwfb	printf@val+3,w,c
  2597  00F92E  A0D8               	btfss	status,0,c
  2598  00F930  D002               	goto	l3878
  2599                           
  2600                           ;doprnt.c: 1138: break;
  2601  00F932  2A6D               	incf	printf@c,f,c
  2602  00F934  D7E4               	goto	l3866
  2603  00F936                     l3878:
  2604                           
  2605                           ;doprnt.c: 1175: {
  2606                           ;doprnt.c: 1188: if(flag & 0x03)
  2607  00F936  0E03               	movlw	3
  2608  00F938  145E               	andwf	printf@flag,w,c
  2609  00F93A  6E4C               	movwf	??_printf& (0+255),c
  2610  00F93C  0E00               	movlw	0
  2611  00F93E  145F               	andwf	printf@flag+1,w,c
  2612  00F940  6E4D               	movwf	(??_printf+1)& (0+255),c
  2613  00F942  504C               	movf	??_printf,w,c
  2614  00F944  104D               	iorwf	??_printf+1,w,c
  2615  00F946  B4D8               	btfsc	status,2,c
  2616  00F948  D048               	goto	l3888
  2617                           
  2618                           ;doprnt.c: 1190: (putch('-') );
  2619  00F94A  0E2D               	movlw	45
  2620  00F94C  ECCE  F06A         	call	_putch
  2621                           
  2622                           ;doprnt.c: 1195: }
  2623                           ;doprnt.c: 1196: while(c--) {
  2624  00F950  D044               	goto	l3888
  2625  00F952                     l3882:
  2626                           
  2627                           ;doprnt.c: 1200: {
  2628                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2629  00F952  C064  F001         	movff	printf@val,___lldiv@dividend
  2630  00F956  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  2631  00F95A  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  2632  00F95E  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  2633  00F962  506D               	movf	printf@c,w,c
  2634  00F964  0D04               	mullw	4
  2635  00F966  0E53               	movlw	low _dpowers
  2636  00F968  24F3               	addwf	prodl,w,c
  2637  00F96A  6EF6               	movwf	tblptrl,c
  2638  00F96C  0EFE               	movlw	high _dpowers
  2639  00F96E  20F4               	addwfc	prodh,w,c
  2640  00F970  6EF7               	movwf	tblptrh,c
  2641  00F972                     	if	0	;There are less than 3 active tblptr bytes
  2642  00F972                     	endif
  2643  00F972  0009               	tblrd		*+
  2644  00F974  CFF5 F005          	movff	tablat,___lldiv@divisor
  2645  00F978  0009               	tblrd		*+
  2646  00F97A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2647  00F97E  0009               	tblrd		*+
  2648  00F980  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2649  00F984  000A               	tblrd		*-
  2650  00F986  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2651  00F98A  ECC6  F06C         	call	___lldiv	;wreg free
  2652  00F98E  C001  F060         	movff	?___lldiv,printf@tmpval
  2653  00F992  C002  F061         	movff	?___lldiv+1,printf@tmpval+1
  2654  00F996  C003  F062         	movff	?___lldiv+2,printf@tmpval+2
  2655  00F99A  C004  F063         	movff	?___lldiv+3,printf@tmpval+3
  2656                           
  2657                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2658  00F99E  C060  F00E         	movff	printf@tmpval,___llmod@dividend
  2659  00F9A2  C061  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2660  00F9A6  C062  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2661  00F9AA  C063  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2662  00F9AE  0E0A               	movlw	10
  2663  00F9B0  6E12               	movwf	___llmod@divisor,c
  2664  00F9B2  0E00               	movlw	0
  2665  00F9B4  6E13               	movwf	___llmod@divisor+1,c
  2666  00F9B6  0E00               	movlw	0
  2667  00F9B8  6E14               	movwf	___llmod@divisor+2,c
  2668  00F9BA  0E00               	movlw	0
  2669  00F9BC  6E15               	movwf	___llmod@divisor+3,c
  2670  00F9BE  ECE7  F06B         	call	___llmod	;wreg free
  2671  00F9C2  C00E  F060         	movff	?___llmod,printf@tmpval
  2672  00F9C6  C00F  F061         	movff	?___llmod+1,printf@tmpval+1
  2673  00F9CA  C010  F062         	movff	?___llmod+2,printf@tmpval+2
  2674  00F9CE  C011  F063         	movff	?___llmod+3,printf@tmpval+3
  2675                           
  2676                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2677  00F9D2  5060               	movf	printf@tmpval,w,c
  2678  00F9D4  0F30               	addlw	48
  2679  00F9D6  ECCE  F06A         	call	_putch
  2680  00F9DA                     l3888:
  2681  00F9DA  066D               	decf	printf@c,f,c
  2682  00F9DC  286D               	incf	printf@c,w,c
  2683  00F9DE  B4D8               	btfsc	status,2,c
  2684  00F9E0  D007               	goto	l3894
  2685  00F9E2  D7B7               	goto	l3882
  2686  00F9E4                     l3890:
  2687                           
  2688                           ;doprnt.c: 1208: (putch('0') );
  2689  00F9E4  0E30               	movlw	48
  2690  00F9E6  ECCE  F06A         	call	_putch
  2691                           
  2692                           ;doprnt.c: 1209: exp--;
  2693  00F9EA  065C               	decf	printf@exp,f,c
  2694  00F9EC  A0D8               	btfss	status,0,c
  2695  00F9EE  065D               	decf	printf@exp+1,f,c
  2696  00F9F0                     l3894:
  2697  00F9F0  BE5D               	btfsc	printf@exp+1,7,c
  2698  00F9F2  D005               	goto	l3896
  2699  00F9F4  505D               	movf	printf@exp+1,w,c
  2700  00F9F6  E1F6               	bnz	l3890
  2701  00F9F8  045C               	decf	printf@exp,w,c
  2702  00F9FA  B0D8               	btfsc	status,0,c
  2703  00F9FC  D7F3               	goto	l3890
  2704  00F9FE                     l3896:
  2705                           
  2706                           ;doprnt.c: 1210: }
  2707                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2708  00F9FE  BE6C               	btfsc	printf@prec+1,7,c
  2709  00FA00  D009               	goto	l466
  2710  00FA02  506C               	movf	printf@prec+1,w,c
  2711  00FA04  E104               	bnz	u3980
  2712  00FA06  0E09               	movlw	9
  2713  00FA08  5C6B               	subwf	printf@prec,w,c
  2714  00FA0A  A0D8               	btfss	status,0,c
  2715  00FA0C  D003               	goto	l466
  2716  00FA0E                     u3980:
  2717                           
  2718                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2719  00FA0E  0E08               	movlw	8
  2720  00FA10  6E6D               	movwf	printf@c,c
  2721  00FA12  D002               	goto	l3900
  2722  00FA14                     l466:
  2723                           
  2724                           ;doprnt.c: 1213: else
  2725                           ;doprnt.c: 1214: c = prec;
  2726  00FA14  C06B  F06D         	movff	printf@prec,printf@c
  2727  00FA18                     l3900:
  2728                           
  2729                           ;doprnt.c: 1215: prec -= c;
  2730  00FA18  506D               	movf	printf@c,w,c
  2731  00FA1A  5E6B               	subwf	printf@prec,f,c
  2732  00FA1C  0E00               	movlw	0
  2733  00FA1E  BE6D               	btfsc	printf@c,7,c
  2734  00FA20  0EFF               	movlw	255
  2735  00FA22  5A6C               	subwfb	printf@prec+1,f,c
  2736                           
  2737                           ;doprnt.c: 1219: if(c)
  2738  00FA24  506D               	movf	printf@c,w,c
  2739  00FA26  B4D8               	btfsc	status,2,c
  2740  00FA28  D003               	goto	l3906
  2741                           
  2742                           ;doprnt.c: 1221: (putch('.') );
  2743  00FA2A  0E2E               	movlw	46
  2744  00FA2C  ECCE  F06A         	call	_putch
  2745  00FA30                     l3906:
  2746                           
  2747                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2748  00FA30  506D               	movf	printf@c,w,c
  2749  00FA32  EC6C  F074         	call	_scale
  2750  00FA36  C024  F052         	movff	?_scale,_printf$1435
  2751  00FA3A  C025  F053         	movff	?_scale+1,_printf$1435+1
  2752  00FA3E  C026  F054         	movff	?_scale+2,_printf$1435+2
  2753                           
  2754                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2755  00FA42  C068  F018         	movff	printf@fval,___ftmul@f2
  2756  00FA46  C069  F019         	movff	printf@fval+1,___ftmul@f2+1
  2757  00FA4A  C06A  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2758  00FA4E  C052  F015         	movff	_printf$1435,___ftmul@f1
  2759  00FA52  C053  F016         	movff	_printf$1435+1,___ftmul@f1+1
  2760  00FA56  C054  F017         	movff	_printf$1435+2,___ftmul@f1+2
  2761  00FA5A  EC5B  F06E         	call	___ftmul	;wreg free
  2762  00FA5E  C015  F02B         	movff	?___ftmul,___fttol@f1
  2763  00FA62  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2764  00FA66  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2765  00FA6A  ECD5  F06E         	call	___fttol	;wreg free
  2766  00FA6E  C02B  F064         	movff	?___fttol,printf@val
  2767  00FA72  C02C  F065         	movff	?___fttol+1,printf@val+1
  2768  00FA76  C02D  F066         	movff	?___fttol+2,printf@val+2
  2769  00FA7A  C02E  F067         	movff	?___fttol+3,printf@val+3
  2770                           
  2771                           ;doprnt.c: 1228: while(c--) {
  2772  00FA7E  D06A               	goto	l3916
  2773  00FA80                     l3910:
  2774                           
  2775                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2776  00FA80  C064  F001         	movff	printf@val,___lldiv@dividend
  2777  00FA84  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  2778  00FA88  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  2779  00FA8C  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  2780  00FA90  506D               	movf	printf@c,w,c
  2781  00FA92  0D04               	mullw	4
  2782  00FA94  0E53               	movlw	low _dpowers
  2783  00FA96  24F3               	addwf	prodl,w,c
  2784  00FA98  6EF6               	movwf	tblptrl,c
  2785  00FA9A  0EFE               	movlw	high _dpowers
  2786  00FA9C  20F4               	addwfc	prodh,w,c
  2787  00FA9E  6EF7               	movwf	tblptrh,c
  2788  00FAA0                     	if	0	;There are less than 3 active tblptr bytes
  2789  00FAA0                     	endif
  2790  00FAA0  0009               	tblrd		*+
  2791  00FAA2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2792  00FAA6  0009               	tblrd		*+
  2793  00FAA8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2794  00FAAC  0009               	tblrd		*+
  2795  00FAAE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2796  00FAB2  000A               	tblrd		*-
  2797  00FAB4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2798  00FAB8  ECC6  F06C         	call	___lldiv	;wreg free
  2799  00FABC  C001  F060         	movff	?___lldiv,printf@tmpval
  2800  00FAC0  C002  F061         	movff	?___lldiv+1,printf@tmpval+1
  2801  00FAC4  C003  F062         	movff	?___lldiv+2,printf@tmpval+2
  2802  00FAC8  C004  F063         	movff	?___lldiv+3,printf@tmpval+3
  2803                           
  2804                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2805  00FACC  C060  F00E         	movff	printf@tmpval,___llmod@dividend
  2806  00FAD0  C061  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2807  00FAD4  C062  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2808  00FAD8  C063  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2809  00FADC  0E0A               	movlw	10
  2810  00FADE  6E12               	movwf	___llmod@divisor,c
  2811  00FAE0  0E00               	movlw	0
  2812  00FAE2  6E13               	movwf	___llmod@divisor+1,c
  2813  00FAE4  0E00               	movlw	0
  2814  00FAE6  6E14               	movwf	___llmod@divisor+2,c
  2815  00FAE8  0E00               	movlw	0
  2816  00FAEA  6E15               	movwf	___llmod@divisor+3,c
  2817  00FAEC  ECE7  F06B         	call	___llmod	;wreg free
  2818  00FAF0  C00E  F060         	movff	?___llmod,printf@tmpval
  2819  00FAF4  C00F  F061         	movff	?___llmod+1,printf@tmpval+1
  2820  00FAF8  C010  F062         	movff	?___llmod+2,printf@tmpval+2
  2821  00FAFC  C011  F063         	movff	?___llmod+3,printf@tmpval+3
  2822                           
  2823                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2824  00FB00  5060               	movf	printf@tmpval,w,c
  2825  00FB02  0F30               	addlw	48
  2826  00FB04  ECCE  F06A         	call	_putch
  2827                           
  2828                           ;doprnt.c: 1232: val %= dpowers[c];
  2829  00FB08  C064  F00E         	movff	printf@val,___llmod@dividend
  2830  00FB0C  C065  F00F         	movff	printf@val+1,___llmod@dividend+1
  2831  00FB10  C066  F010         	movff	printf@val+2,___llmod@dividend+2
  2832  00FB14  C067  F011         	movff	printf@val+3,___llmod@dividend+3
  2833  00FB18  506D               	movf	printf@c,w,c
  2834  00FB1A  0D04               	mullw	4
  2835  00FB1C  0E53               	movlw	low _dpowers
  2836  00FB1E  24F3               	addwf	prodl,w,c
  2837  00FB20  6EF6               	movwf	tblptrl,c
  2838  00FB22  0EFE               	movlw	high _dpowers
  2839  00FB24  20F4               	addwfc	prodh,w,c
  2840  00FB26  6EF7               	movwf	tblptrh,c
  2841  00FB28                     	if	0	;There are less than 3 active tblptr bytes
  2842  00FB28                     	endif
  2843  00FB28  0009               	tblrd		*+
  2844  00FB2A  CFF5 F012          	movff	tablat,___llmod@divisor
  2845  00FB2E  0009               	tblrd		*+
  2846  00FB30  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2847  00FB34  0009               	tblrd		*+
  2848  00FB36  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2849  00FB3A  000A               	tblrd		*-
  2850  00FB3C  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2851  00FB40  ECE7  F06B         	call	___llmod	;wreg free
  2852  00FB44  C00E  F064         	movff	?___llmod,printf@val
  2853  00FB48  C00F  F065         	movff	?___llmod+1,printf@val+1
  2854  00FB4C  C010  F066         	movff	?___llmod+2,printf@val+2
  2855  00FB50  C011  F067         	movff	?___llmod+3,printf@val+3
  2856  00FB54                     l3916:
  2857  00FB54  066D               	decf	printf@c,f,c
  2858  00FB56  286D               	incf	printf@c,w,c
  2859  00FB58  B4D8               	btfsc	status,2,c
  2860  00FB5A  D007               	goto	l3922
  2861  00FB5C  D791               	goto	l3910
  2862  00FB5E                     l3918:
  2863                           
  2864                           ;doprnt.c: 1236: (putch('0') );
  2865  00FB5E  0E30               	movlw	48
  2866  00FB60  ECCE  F06A         	call	_putch
  2867                           
  2868                           ;doprnt.c: 1237: prec--;
  2869  00FB64  066B               	decf	printf@prec,f,c
  2870  00FB66  A0D8               	btfss	status,0,c
  2871  00FB68  066C               	decf	printf@prec+1,f,c
  2872  00FB6A                     l3922:
  2873  00FB6A  506B               	movf	printf@prec,w,c
  2874  00FB6C  106C               	iorwf	printf@prec+1,w,c
  2875  00FB6E  B4D8               	btfsc	status,2,c
  2876  00FB70  D162               	goto	l4014
  2877  00FB72  D7F5               	goto	l3918
  2878  00FB74                     l3924:
  2879                           
  2880                           ;doprnt.c: 1246: }
  2881                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2882  00FB74  0EC0               	movlw	192
  2883  00FB76  145E               	andwf	printf@flag,w,c
  2884  00FB78  6E4C               	movwf	??_printf& (0+255),c
  2885  00FB7A  0E00               	movlw	0
  2886  00FB7C  145F               	andwf	printf@flag+1,w,c
  2887  00FB7E  6E4D               	movwf	(??_printf+1)& (0+255),c
  2888  00FB80  504C               	movf	??_printf,w,c
  2889  00FB82  104D               	iorwf	??_printf+1,w,c
  2890  00FB84  A4D8               	btfss	status,2,c
  2891  00FB86  D02E               	goto	l475
  2892                           
  2893                           ;doprnt.c: 1253: {
  2894                           ;doprnt.c: 1255: if(flag & 0x10)
  2895  00FB88  A85E               	btfss	printf@flag,4,c
  2896  00FB8A  D00E               	goto	l3932
  2897                           
  2898                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2899  00FB8C  C05A  FFD9         	movff	printf@ap,fsr2l
  2900  00FB90  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2901  00FB94  CFDE F064          	movff	postinc2,printf@val
  2902  00FB98  CFDE F065          	movff	postinc2,printf@val+1
  2903  00FB9C  CFDE F066          	movff	postinc2,printf@val+2
  2904  00FBA0  CFDE F067          	movff	postinc2,printf@val+3
  2905  00FBA4  0E04               	movlw	4
  2906  00FBA6  D00E               	goto	L2
  2907  00FBA8                     l3932:
  2908                           
  2909                           ;doprnt.c: 1257: else
  2910                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2911  00FBA8  C05A  FFD9         	movff	printf@ap,fsr2l
  2912  00FBAC  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2913  00FBB0  CFDE F064          	movff	postinc2,printf@val
  2914  00FBB4  CFDD F065          	movff	postdec2,printf@val+1
  2915  00FBB8  0E00               	movlw	0
  2916  00FBBA  BE65               	btfsc	printf@val+1,7,c
  2917  00FBBC  0EFF               	movlw	-1
  2918  00FBBE  6E66               	movwf	printf@val+2,c
  2919  00FBC0  6E67               	movwf	printf@val+3,c
  2920  00FBC2  0E02               	movlw	2
  2921  00FBC4                     L2:
  2922  00FBC4  265A               	addwf	printf@ap,f,c
  2923  00FBC6  0E00               	movlw	0
  2924  00FBC8  225B               	addwfc	printf@ap+1,f,c
  2925                           
  2926                           ;doprnt.c: 1261: if((long)val < 0) {
  2927  00FBCA  AE67               	btfss	printf@val+3,7,c
  2928  00FBCC  D02D               	goto	l3950
  2929                           
  2930                           ;doprnt.c: 1262: flag |= 0x03;
  2931  00FBCE  0E03               	movlw	3
  2932  00FBD0  125E               	iorwf	printf@flag,f,c
  2933                           
  2934                           ;doprnt.c: 1263: val = -val;
  2935  00FBD2  1E67               	comf	printf@val+3,f,c
  2936  00FBD4  1E66               	comf	printf@val+2,f,c
  2937  00FBD6  1E65               	comf	printf@val+1,f,c
  2938  00FBD8  6C64               	negf	printf@val,c
  2939  00FBDA  0E00               	movlw	0
  2940  00FBDC  2265               	addwfc	printf@val+1,f,c
  2941  00FBDE  2266               	addwfc	printf@val+2,f,c
  2942  00FBE0  2267               	addwfc	printf@val+3,f,c
  2943                           
  2944                           ;doprnt.c: 1264: }
  2945                           ;doprnt.c: 1266: }
  2946  00FBE2  D022               	goto	l3950
  2947  00FBE4                     l475:
  2948                           
  2949                           ;doprnt.c: 1268: else
  2950                           ;doprnt.c: 1273: {
  2951                           ;doprnt.c: 1281: if(flag & 0x10)
  2952  00FBE4  A85E               	btfss	printf@flag,4,c
  2953  00FBE6  D00E               	goto	l3946
  2954                           
  2955                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2956  00FBE8  C05A  FFD9         	movff	printf@ap,fsr2l
  2957  00FBEC  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2958  00FBF0  CFDE F064          	movff	postinc2,printf@val
  2959  00FBF4  CFDE F065          	movff	postinc2,printf@val+1
  2960  00FBF8  CFDE F066          	movff	postinc2,printf@val+2
  2961  00FBFC  CFDE F067          	movff	postinc2,printf@val+3
  2962  00FC00  0E04               	movlw	4
  2963  00FC02  D00F               	goto	L3
  2964  00FC04                     l3946:
  2965                           
  2966                           ;doprnt.c: 1283: else
  2967                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2968  00FC04  C05A  FFD9         	movff	printf@ap,fsr2l
  2969  00FC08  C05B  FFDA         	movff	printf@ap+1,fsr2h
  2970  00FC0C  CFDE F04C          	movff	postinc2,??_printf
  2971  00FC10  CFDD F04D          	movff	postdec2,??_printf+1
  2972  00FC14  C04C  F064         	movff	??_printf,printf@val
  2973  00FC18  C04D  F065         	movff	??_printf+1,printf@val+1
  2974  00FC1C  6A66               	clrf	printf@val+2,c
  2975  00FC1E  6A67               	clrf	printf@val+3,c
  2976  00FC20  0E02               	movlw	2
  2977  00FC22                     L3:
  2978  00FC22  265A               	addwf	printf@ap,f,c
  2979  00FC24  0E00               	movlw	0
  2980  00FC26  225B               	addwfc	printf@ap+1,f,c
  2981  00FC28                     l3950:
  2982                           
  2983                           ;doprnt.c: 1287: }
  2984                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2985  00FC28  506B               	movf	printf@prec,w,c
  2986  00FC2A  106C               	iorwf	printf@prec+1,w,c
  2987  00FC2C  A4D8               	btfss	status,2,c
  2988  00FC2E  D045               	goto	l3986
  2989  00FC30  5064               	movf	printf@val,w,c
  2990  00FC32  1065               	iorwf	printf@val+1,w,c
  2991  00FC34  1066               	iorwf	printf@val+2,w,c
  2992  00FC36  1067               	iorwf	printf@val+3,w,c
  2993  00FC38  A4D8               	btfss	status,2,c
  2994  00FC3A  D03F               	goto	l3986
  2995                           
  2996                           ;doprnt.c: 1291: prec++;
  2997  00FC3C  4A6B               	infsnz	printf@prec,f,c
  2998  00FC3E  2A6C               	incf	printf@prec+1,f,c
  2999                           
  3000                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3001  00FC40  D03C               	goto	l3986
  3002  00FC42                     l3956:
  3003                           
  3004                           ;doprnt.c: 1302: case 0xC0:
  3005                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3006  00FC42  0E01               	movlw	1
  3007  00FC44  6E6D               	movwf	printf@c,c
  3008  00FC46                     l3958:
  3009  00FC46  0E0A               	movlw	10
  3010  00FC48  186D               	xorwf	printf@c,w,c
  3011  00FC4A  B4D8               	btfsc	status,2,c
  3012  00FC4C  D041               	goto	l3988
  3013                           
  3014                           ;doprnt.c: 1306: if(val < dpowers[c])
  3015  00FC4E  506D               	movf	printf@c,w,c
  3016  00FC50  0D04               	mullw	4
  3017  00FC52  0E53               	movlw	low _dpowers
  3018  00FC54  24F3               	addwf	prodl,w,c
  3019  00FC56  6EF6               	movwf	tblptrl,c
  3020  00FC58  0EFE               	movlw	high _dpowers
  3021  00FC5A  20F4               	addwfc	prodh,w,c
  3022  00FC5C  6EF7               	movwf	tblptrh,c
  3023  00FC5E                     	if	0	;There are less than 3 active tblptr bytes
  3024  00FC5E                     	endif
  3025  00FC5E  0009               	tblrd		*+
  3026  00FC60  50F5               	movf	tablat,w,c
  3027  00FC62  5C64               	subwf	printf@val,w,c
  3028  00FC64  0009               	tblrd		*+
  3029  00FC66  50F5               	movf	tablat,w,c
  3030  00FC68  5865               	subwfb	printf@val+1,w,c
  3031  00FC6A  0009               	tblrd		*+
  3032  00FC6C  50F5               	movf	tablat,w,c
  3033  00FC6E  5866               	subwfb	printf@val+2,w,c
  3034  00FC70  0009               	tblrd		*+
  3035  00FC72  50F5               	movf	tablat,w,c
  3036  00FC74  5867               	subwfb	printf@val+3,w,c
  3037  00FC76  A0D8               	btfss	status,0,c
  3038  00FC78  D02B               	goto	l3988
  3039                           
  3040                           ;doprnt.c: 1307: break;
  3041  00FC7A  2A6D               	incf	printf@c,f,c
  3042  00FC7C  D7E4               	goto	l3958
  3043  00FC7E                     l3970:
  3044                           
  3045                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3046  00FC7E  0E01               	movlw	1
  3047  00FC80  6E6D               	movwf	printf@c,c
  3048  00FC82                     l3972:
  3049  00FC82  0E08               	movlw	8
  3050  00FC84  186D               	xorwf	printf@c,w,c
  3051  00FC86  B4D8               	btfsc	status,2,c
  3052  00FC88  D023               	goto	l3988
  3053                           
  3054                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3055  00FC8A  506D               	movf	printf@c,w,c
  3056  00FC8C  0D04               	mullw	4
  3057  00FC8E  0EC9               	movlw	low _hexpowers
  3058  00FC90  24F3               	addwf	prodl,w,c
  3059  00FC92  6EF6               	movwf	tblptrl,c
  3060  00FC94  0EFE               	movlw	high _hexpowers
  3061  00FC96  20F4               	addwfc	prodh,w,c
  3062  00FC98  6EF7               	movwf	tblptrh,c
  3063  00FC9A                     	if	0	;There are less than 3 active tblptr bytes
  3064  00FC9A                     	endif
  3065  00FC9A  0009               	tblrd		*+
  3066  00FC9C  50F5               	movf	tablat,w,c
  3067  00FC9E  5C64               	subwf	printf@val,w,c
  3068  00FCA0  0009               	tblrd		*+
  3069  00FCA2  50F5               	movf	tablat,w,c
  3070  00FCA4  5865               	subwfb	printf@val+1,w,c
  3071  00FCA6  0009               	tblrd		*+
  3072  00FCA8  50F5               	movf	tablat,w,c
  3073  00FCAA  5866               	subwfb	printf@val+2,w,c
  3074  00FCAC  0009               	tblrd		*+
  3075  00FCAE  50F5               	movf	tablat,w,c
  3076  00FCB0  5867               	subwfb	printf@val+3,w,c
  3077  00FCB2  A0D8               	btfss	status,0,c
  3078  00FCB4  D00D               	goto	l3988
  3079                           
  3080                           ;doprnt.c: 1318: break;
  3081  00FCB6  2A6D               	incf	printf@c,f,c
  3082  00FCB8  D7E4               	goto	l3972
  3083  00FCBA                     l3986:
  3084  00FCBA  505E               	movf	printf@flag,w,c
  3085  00FCBC  0BC0               	andlw	192
  3086                           
  3087                           ; Switch size 1, requested type "space"
  3088                           ; Number of cases is 3, Range of values is 0 to 192
  3089                           ; switch strategies available:
  3090                           ; Name         Instructions Cycles
  3091                           ; simple_byte           10     6 (average)
  3092                           ;	Chosen strategy is simple_byte
  3093  00FCBE  0A00               	xorlw	0	; case 0
  3094  00FCC0  B4D8               	btfsc	status,2,c
  3095  00FCC2  D7BF               	goto	l3956
  3096  00FCC4  0A80               	xorlw	128	; case 128
  3097  00FCC6  B4D8               	btfsc	status,2,c
  3098  00FCC8  D7DA               	goto	l3970
  3099  00FCCA  0A40               	xorlw	64	; case 192
  3100  00FCCC  B4D8               	btfsc	status,2,c
  3101  00FCCE  D7B9               	goto	l3956
  3102  00FCD0                     l3988:
  3103                           
  3104                           ;doprnt.c: 1339: if(c < prec)
  3105  00FCD0  0E80               	movlw	128
  3106  00FCD2  BE6D               	btfsc	printf@c,7,c
  3107  00FCD4  0E7F               	movlw	127
  3108  00FCD6  6E4C               	movwf	??_printf& (0+255),c
  3109  00FCD8  506B               	movf	printf@prec,w,c
  3110  00FCDA  5C6D               	subwf	printf@c,w,c
  3111  00FCDC  506C               	movf	printf@prec+1,w,c
  3112  00FCDE  0A80               	xorlw	128
  3113  00FCE0  584C               	subwfb	??_printf& (0+255),w,c
  3114  00FCE2  B0D8               	btfsc	status,0,c
  3115  00FCE4  D003               	goto	l3992
  3116                           
  3117                           ;doprnt.c: 1340: c = prec;
  3118  00FCE6  C06B  F06D         	movff	printf@prec,printf@c
  3119  00FCEA  D010               	goto	l3996
  3120  00FCEC                     l3992:
  3121                           
  3122                           ;doprnt.c: 1341: else if(prec < c)
  3123  00FCEC  506C               	movf	printf@prec+1,w,c
  3124  00FCEE  0A80               	xorlw	128
  3125  00FCF0  6E4C               	movwf	??_printf& (0+255),c
  3126  00FCF2  506D               	movf	printf@c,w,c
  3127  00FCF4  5C6B               	subwf	printf@prec,w,c
  3128  00FCF6  0E80               	movlw	128
  3129  00FCF8  BE6D               	btfsc	printf@c,7,c
  3130  00FCFA  0E7F               	movlw	127
  3131  00FCFC  584C               	subwfb	??_printf& (0+255),w,c
  3132  00FCFE  B0D8               	btfsc	status,0,c
  3133  00FD00  D005               	goto	l3996
  3134                           
  3135                           ;doprnt.c: 1342: prec = c;
  3136  00FD02  506D               	movf	printf@c,w,c
  3137  00FD04  6E6B               	movwf	printf@prec,c
  3138  00FD06  6A6C               	clrf	printf@prec+1,c
  3139  00FD08  BE6B               	btfsc	printf@prec,7,c
  3140  00FD0A  066C               	decf	printf@prec+1,f,c
  3141  00FD0C                     l3996:
  3142                           
  3143                           ;doprnt.c: 1422: {
  3144                           ;doprnt.c: 1438: if(flag & 0x03)
  3145  00FD0C  0E03               	movlw	3
  3146  00FD0E  145E               	andwf	printf@flag,w,c
  3147  00FD10  6E4C               	movwf	??_printf& (0+255),c
  3148  00FD12  0E00               	movlw	0
  3149  00FD14  145F               	andwf	printf@flag+1,w,c
  3150  00FD16  6E4D               	movwf	(??_printf+1)& (0+255),c
  3151  00FD18  504C               	movf	??_printf,w,c
  3152  00FD1A  104D               	iorwf	??_printf+1,w,c
  3153  00FD1C  B4D8               	btfsc	status,2,c
  3154  00FD1E  D083               	goto	l4012
  3155                           
  3156                           ;doprnt.c: 1439: (putch('-') );
  3157  00FD20  0E2D               	movlw	45
  3158  00FD22  ECCE  F06A         	call	_putch
  3159                           
  3160                           ;doprnt.c: 1469: }
  3161                           ;doprnt.c: 1474: while(prec--) {
  3162  00FD26  D07F               	goto	l4012
  3163  00FD28                     l4000:
  3164                           
  3165                           ;doprnt.c: 1486: case 0xC0:
  3166                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3167  00FD28  C06B  F04C         	movff	printf@prec,??_printf
  3168  00FD2C  C06C  F04D         	movff	printf@prec+1,??_printf+1
  3169  00FD30  90D8               	bcf	status,0,c
  3170  00FD32  364C               	rlcf	??_printf,f,c
  3171  00FD34  364D               	rlcf	??_printf+1,f,c
  3172  00FD36  90D8               	bcf	status,0,c
  3173  00FD38  364C               	rlcf	??_printf,f,c
  3174  00FD3A  364D               	rlcf	??_printf+1,f,c
  3175  00FD3C  0E53               	movlw	low _dpowers
  3176  00FD3E  244C               	addwf	??_printf,w,c
  3177  00FD40  6EF6               	movwf	tblptrl,c
  3178  00FD42  0EFE               	movlw	high _dpowers
  3179  00FD44  204D               	addwfc	??_printf+1,w,c
  3180  00FD46  6EF7               	movwf	tblptrh,c
  3181  00FD48                     	if	0	;There are less than 3 active tblptr bytes
  3182  00FD48                     	endif
  3183  00FD48  0009               	tblrd		*+
  3184  00FD4A  CFF5 F005          	movff	tablat,___lldiv@divisor
  3185  00FD4E  0009               	tblrd		*+
  3186  00FD50  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3187  00FD54  0009               	tblrd		*+
  3188  00FD56  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3189  00FD5A  000A               	tblrd		*-
  3190  00FD5C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3191  00FD60  C064  F001         	movff	printf@val,___lldiv@dividend
  3192  00FD64  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  3193  00FD68  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  3194  00FD6C  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  3195  00FD70  ECC6  F06C         	call	___lldiv	;wreg free
  3196  00FD74  C001  F00E         	movff	?___lldiv,___llmod@dividend
  3197  00FD78  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  3198  00FD7C  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  3199  00FD80  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  3200  00FD84  0E0A               	movlw	10
  3201  00FD86  6E12               	movwf	___llmod@divisor,c
  3202  00FD88  0E00               	movlw	0
  3203  00FD8A  6E13               	movwf	___llmod@divisor+1,c
  3204  00FD8C  0E00               	movlw	0
  3205  00FD8E  6E14               	movwf	___llmod@divisor+2,c
  3206  00FD90  0E00               	movlw	0
  3207  00FD92  6E15               	movwf	___llmod@divisor+3,c
  3208  00FD94  ECE7  F06B         	call	___llmod	;wreg free
  3209  00FD98  500E               	movf	?___llmod,w,c
  3210  00FD9A  0F30               	addlw	48
  3211  00FD9C  6E6D               	movwf	printf@c,c
  3212                           
  3213                           ;doprnt.c: 1491: break;
  3214  00FD9E  D040               	goto	l4010
  3215  00FDA0                     l4002:
  3216                           
  3217                           ;doprnt.c: 1499: {
  3218                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3219  00FDA0  C064  F001         	movff	printf@val,___lldiv@dividend
  3220  00FDA4  C065  F002         	movff	printf@val+1,___lldiv@dividend+1
  3221  00FDA8  C066  F003         	movff	printf@val+2,___lldiv@dividend+2
  3222  00FDAC  C067  F004         	movff	printf@val+3,___lldiv@dividend+3
  3223  00FDB0  C06B  F04C         	movff	printf@prec,??_printf
  3224  00FDB4  C06C  F04D         	movff	printf@prec+1,??_printf+1
  3225  00FDB8  90D8               	bcf	status,0,c
  3226  00FDBA  364C               	rlcf	??_printf,f,c
  3227  00FDBC  364D               	rlcf	??_printf+1,f,c
  3228  00FDBE  90D8               	bcf	status,0,c
  3229  00FDC0  364C               	rlcf	??_printf,f,c
  3230  00FDC2  364D               	rlcf	??_printf+1,f,c
  3231  00FDC4  0EC9               	movlw	low _hexpowers
  3232  00FDC6  244C               	addwf	??_printf,w,c
  3233  00FDC8  6EF6               	movwf	tblptrl,c
  3234  00FDCA  0EFE               	movlw	high _hexpowers
  3235  00FDCC  204D               	addwfc	??_printf+1,w,c
  3236  00FDCE  6EF7               	movwf	tblptrh,c
  3237  00FDD0                     	if	0	;There are less than 3 active tblptr bytes
  3238  00FDD0                     	endif
  3239  00FDD0  0009               	tblrd		*+
  3240  00FDD2  CFF5 F005          	movff	tablat,___lldiv@divisor
  3241  00FDD6  0009               	tblrd		*+
  3242  00FDD8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  3243  00FDDC  0009               	tblrd		*+
  3244  00FDDE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  3245  00FDE2  000A               	tblrd		*-
  3246  00FDE4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  3247  00FDE8  ECC6  F06C         	call	___lldiv	;wreg free
  3248  00FDEC  5001               	movf	?___lldiv,w,c
  3249  00FDEE  0B0F               	andlw	15
  3250  00FDF0  6E57               	movwf	printf@idx,c
  3251                           
  3252                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3253  00FDF2  5057               	movf	printf@idx,w,c
  3254  00FDF4  0D01               	mullw	1
  3255  00FDF6  0E0B               	movlw	low STR_20
  3256  00FDF8  24F3               	addwf	prodl,w,c
  3257  00FDFA  6EF6               	movwf	tblptrl,c
  3258  00FDFC  0EFF               	movlw	high STR_20
  3259  00FDFE  20F4               	addwfc	prodh,w,c
  3260  00FE00  6EF7               	movwf	tblptrh,c
  3261  00FE02                     	if	0	;There are less than 3 active tblptr bytes
  3262  00FE02                     	endif
  3263  00FE02  0008               	tblrd		*
  3264  00FE04  CFF5 F06D          	movff	tablat,printf@c
  3265                           
  3266                           ;doprnt.c: 1523: }
  3267                           
  3268                           ;doprnt.c: 1508: }
  3269                           ;doprnt.c: 1510: break;
  3270  00FE08  D00B               	goto	l4010
  3271  00FE0A                     l4008:
  3272  00FE0A  505E               	movf	printf@flag,w,c
  3273  00FE0C  0BC0               	andlw	192
  3274                           
  3275                           ; Switch size 1, requested type "space"
  3276                           ; Number of cases is 3, Range of values is 0 to 192
  3277                           ; switch strategies available:
  3278                           ; Name         Instructions Cycles
  3279                           ; simple_byte           10     6 (average)
  3280                           ;	Chosen strategy is simple_byte
  3281  00FE0E  0A00               	xorlw	0	; case 0
  3282  00FE10  B4D8               	btfsc	status,2,c
  3283  00FE12  D78A               	goto	l4000
  3284  00FE14  0A80               	xorlw	128	; case 128
  3285  00FE16  B4D8               	btfsc	status,2,c
  3286  00FE18  D7C3               	goto	l4002
  3287  00FE1A  0A40               	xorlw	64	; case 192
  3288  00FE1C  B4D8               	btfsc	status,2,c
  3289  00FE1E  D784               	goto	l4000
  3290  00FE20                     l4010:
  3291                           
  3292                           ;doprnt.c: 1524: (putch(c) );
  3293  00FE20  506D               	movf	printf@c,w,c
  3294  00FE22  ECCE  F06A         	call	_putch
  3295  00FE26                     l4012:
  3296  00FE26  066B               	decf	printf@prec,f,c
  3297  00FE28  A0D8               	btfss	status,0,c
  3298  00FE2A  066C               	decf	printf@prec+1,f,c
  3299  00FE2C  286B               	incf	printf@prec,w,c
  3300  00FE2E  E1ED               	bnz	l4008
  3301  00FE30  286C               	incf	printf@prec+1,w,c
  3302  00FE32  A4D8               	btfss	status,2,c
  3303  00FE34  D7EA               	goto	l4008
  3304  00FE36                     l4014:
  3305  00FE36  C040  FFF6         	movff	printf@f,tblptrl
  3306  00FE3A  C041  FFF7         	movff	printf@f+1,tblptrh
  3307  00FE3E  4A40               	infsnz	printf@f,f,c
  3308  00FE40  2A41               	incf	printf@f+1,f,c
  3309  00FE42                     	if	0	;tblptru may be non-zero
  3310  00FE42                     	endif
  3311  00FE42                     	if	0	;tblptru may be non-zero
  3312  00FE42                     	endif
  3313  00FE42  0008               	tblrd		*
  3314  00FE44  CFF5 F06D          	movff	tablat,printf@c
  3315  00FE48  506D               	movf	printf@c,w,c
  3316  00FE4A  B4D8               	btfsc	status,2,c
  3317  00FE4C  0012               	return	
  3318  00FE4E  EF6D  F07A         	goto	l3736
  3319  00FE52                     __end_of_printf:
  3320                           	opt stack 0
  3321                           tblptru	equ	0xFF8
  3322                           tblptrh	equ	0xFF7
  3323                           tblptrl	equ	0xFF6
  3324                           tablat	equ	0xFF5
  3325                           prodh	equ	0xFF4
  3326                           prodl	equ	0xFF3
  3327                           postinc0	equ	0xFEE
  3328                           wreg	equ	0xFE8
  3329                           indf2	equ	0xFDF
  3330                           postinc2	equ	0xFDE
  3331                           postdec2	equ	0xFDD
  3332                           fsr2h	equ	0xFDA
  3333                           fsr2l	equ	0xFD9
  3334                           status	equ	0xFD8
  3335                           
  3336 ;; *************** function _scale *****************
  3337 ;; Defined at:
  3338 ;;		line 425 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  scl             1    wreg     char 
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;  scl             1   41[COMRAM] char 
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  3   35[COMRAM] char 
  3345 ;; Registers used:
  3346 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3352 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;Total ram usage:        7 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    2
  3359 ;; This function calls:
  3360 ;;		___awdiv
  3361 ;;		___awmod
  3362 ;;		___ftmul
  3363 ;;		___wmul
  3364 ;; This function is called by:
  3365 ;;		_printf
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           	psect	text2
  3370  00E8D8                     __ptext2:
  3371                           	opt stack 0
  3372  00E8D8                     _scale:
  3373                           	opt stack 27
  3374                           
  3375                           ;incstack = 0
  3376                           ;scale@scl stored from wreg
  3377  00E8D8  6E2A               	movwf	scale@scl,c
  3378                           
  3379                           ;doprnt.c: 428: if(scl < 0) {
  3380  00E8DA  AE2A               	btfss	scale@scl,7,c
  3381  00E8DC  D0FB               	goto	l3140
  3382                           
  3383                           ;doprnt.c: 429: scl = -scl;
  3384  00E8DE  6C2A               	negf	scale@scl,c
  3385                           
  3386                           ;doprnt.c: 430: if(scl>=110)
  3387  00E8E0  502A               	movf	scale@scl,w,c
  3388  00E8E2  0A80               	xorlw	128
  3389  00E8E4  0F12               	addlw	-238
  3390  00E8E6  A0D8               	btfss	status,0,c
  3391  00E8E8  D091               	goto	l3130
  3392                           
  3393                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3394  00E8EA  0E00               	movlw	0
  3395  00E8EC  6E12               	movwf	___wmul@multiplicand+1,c
  3396  00E8EE  0E03               	movlw	3
  3397  00E8F0  6E11               	movwf	___wmul@multiplicand,c
  3398  00E8F2  0E00               	movlw	0
  3399  00E8F4  6E0A               	movwf	___awdiv@divisor+1,c
  3400  00E8F6  0E0A               	movlw	10
  3401  00E8F8  6E09               	movwf	___awdiv@divisor,c
  3402  00E8FA  0E00               	movlw	0
  3403  00E8FC  6E04               	movwf	___awmod@divisor+1,c
  3404  00E8FE  0E64               	movlw	100
  3405  00E900  6E03               	movwf	___awmod@divisor,c
  3406  00E902  502A               	movf	scale@scl,w,c
  3407  00E904  6E01               	movwf	___awmod@dividend,c
  3408  00E906  6A02               	clrf	___awmod@dividend+1,c
  3409  00E908  BE01               	btfsc	___awmod@dividend,7,c
  3410  00E90A  0602               	decf	___awmod@dividend+1,f,c
  3411  00E90C  EC4F  F06C         	call	___awmod	;wreg free
  3412  00E910  C001  F007         	movff	?___awmod,___awdiv@dividend
  3413  00E914  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3414  00E918  EC07  F06D         	call	___awdiv	;wreg free
  3415  00E91C  0E09               	movlw	9
  3416  00E91E  2407               	addwf	?___awdiv,w,c
  3417  00E920  6E0F               	movwf	___wmul@multiplier,c
  3418  00E922  0E00               	movlw	0
  3419  00E924  2008               	addwfc	?___awdiv+1,w,c
  3420  00E926  6E10               	movwf	___wmul@multiplier+1,c
  3421  00E928  EC38  F06B         	call	___wmul	;wreg free
  3422  00E92C  0EA2               	movlw	low __npowers_
  3423  00E92E  240F               	addwf	?___wmul,w,c
  3424  00E930  6EF6               	movwf	tblptrl,c
  3425  00E932  0EFE               	movlw	high __npowers_
  3426  00E934  2010               	addwfc	?___wmul+1,w,c
  3427  00E936  6EF7               	movwf	tblptrh,c
  3428  00E938                     	if	0	;There are less than 3 active tblptr bytes
  3429  00E938                     	endif
  3430  00E938  0009               	tblrd		*+
  3431  00E93A  CFF5 F018          	movff	tablat,___ftmul@f2
  3432  00E93E  0009               	tblrd		*+
  3433  00E940  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3434  00E944  000A               	tblrd		*-
  3435  00E946  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3436  00E94A  0E00               	movlw	0
  3437  00E94C  6E0A               	movwf	___awdiv@divisor+1,c
  3438  00E94E  0E64               	movlw	100
  3439  00E950  6E09               	movwf	___awdiv@divisor,c
  3440  00E952  502A               	movf	scale@scl,w,c
  3441  00E954  6E07               	movwf	___awdiv@dividend,c
  3442  00E956  6A08               	clrf	___awdiv@dividend+1,c
  3443  00E958  BE07               	btfsc	___awdiv@dividend,7,c
  3444  00E95A  0608               	decf	___awdiv@dividend+1,f,c
  3445  00E95C  EC07  F06D         	call	___awdiv	;wreg free
  3446  00E960  0E12               	movlw	18
  3447  00E962  2407               	addwf	?___awdiv,w,c
  3448  00E964  6E0F               	movwf	___wmul@multiplier,c
  3449  00E966  0E00               	movlw	0
  3450  00E968  2008               	addwfc	?___awdiv+1,w,c
  3451  00E96A  6E10               	movwf	___wmul@multiplier+1,c
  3452  00E96C  0E00               	movlw	0
  3453  00E96E  6E12               	movwf	___wmul@multiplicand+1,c
  3454  00E970  0E03               	movlw	3
  3455  00E972  6E11               	movwf	___wmul@multiplicand,c
  3456  00E974  EC38  F06B         	call	___wmul	;wreg free
  3457  00E978  0EA2               	movlw	low __npowers_
  3458  00E97A  240F               	addwf	?___wmul,w,c
  3459  00E97C  6EF6               	movwf	tblptrl,c
  3460  00E97E  0EFE               	movlw	high __npowers_
  3461  00E980  2010               	addwfc	?___wmul+1,w,c
  3462  00E982  6EF7               	movwf	tblptrh,c
  3463  00E984                     	if	0	;There are less than 3 active tblptr bytes
  3464  00E984                     	endif
  3465  00E984  0009               	tblrd		*+
  3466  00E986  CFF5 F015          	movff	tablat,___ftmul@f1
  3467  00E98A  0009               	tblrd		*+
  3468  00E98C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3469  00E990  000A               	tblrd		*-
  3470  00E992  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3471  00E996  EC5B  F06E         	call	___ftmul	;wreg free
  3472  00E99A  C015  F027         	movff	?___ftmul,_scale$1434
  3473  00E99E  C016  F028         	movff	?___ftmul+1,_scale$1434+1
  3474  00E9A2  C017  F029         	movff	?___ftmul+2,_scale$1434+2
  3475                           
  3476                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3477  00E9A6  C027  F015         	movff	_scale$1434,___ftmul@f1
  3478  00E9AA  C028  F016         	movff	_scale$1434+1,___ftmul@f1+1
  3479  00E9AE  C029  F017         	movff	_scale$1434+2,___ftmul@f1+2
  3480  00E9B2  0E00               	movlw	0
  3481  00E9B4  6E12               	movwf	___wmul@multiplicand+1,c
  3482  00E9B6  0E03               	movlw	3
  3483  00E9B8  6E11               	movwf	___wmul@multiplicand,c
  3484  00E9BA  0E00               	movlw	0
  3485  00E9BC  6E04               	movwf	___awmod@divisor+1,c
  3486  00E9BE  0E0A               	movlw	10
  3487  00E9C0  6E03               	movwf	___awmod@divisor,c
  3488  00E9C2  502A               	movf	scale@scl,w,c
  3489  00E9C4  6E01               	movwf	___awmod@dividend,c
  3490  00E9C6  6A02               	clrf	___awmod@dividend+1,c
  3491  00E9C8  BE01               	btfsc	___awmod@dividend,7,c
  3492  00E9CA  0602               	decf	___awmod@dividend+1,f,c
  3493  00E9CC  EC4F  F06C         	call	___awmod	;wreg free
  3494  00E9D0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3495  00E9D4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3496  00E9D8  EC38  F06B         	call	___wmul	;wreg free
  3497  00E9DC  0EA2               	movlw	low __npowers_
  3498  00E9DE  240F               	addwf	?___wmul,w,c
  3499  00E9E0  6EF6               	movwf	tblptrl,c
  3500  00E9E2  0EFE               	movlw	high __npowers_
  3501  00E9E4  2010               	addwfc	?___wmul+1,w,c
  3502  00E9E6  6EF7               	movwf	tblptrh,c
  3503  00E9E8                     	if	0	;There are less than 3 active tblptr bytes
  3504  00E9E8                     	endif
  3505  00E9E8  0009               	tblrd		*+
  3506  00E9EA  CFF5 F018          	movff	tablat,___ftmul@f2
  3507  00E9EE  0009               	tblrd		*+
  3508  00E9F0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3509  00E9F4  000A               	tblrd		*-
  3510  00E9F6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3511  00E9FA  EC5B  F06E         	call	___ftmul	;wreg free
  3512  00E9FE  C015  F024         	movff	?___ftmul,?_scale
  3513  00EA02  C016  F025         	movff	?___ftmul+1,?_scale+1
  3514  00EA06  C017  F026         	movff	?___ftmul+2,?_scale+2
  3515  00EA0A  0012               	return	
  3516  00EA0C                     l3130:
  3517                           
  3518                           ;doprnt.c: 432: else if(scl > 10)
  3519  00EA0C  502A               	movf	scale@scl,w,c
  3520  00EA0E  0A80               	xorlw	128
  3521  00EA10  0F75               	addlw	-139
  3522  00EA12  A0D8               	btfss	status,0,c
  3523  00EA14  D04D               	goto	l3136
  3524                           
  3525                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3526  00EA16  0E00               	movlw	0
  3527  00EA18  6E0A               	movwf	___awdiv@divisor+1,c
  3528  00EA1A  0E0A               	movlw	10
  3529  00EA1C  6E09               	movwf	___awdiv@divisor,c
  3530  00EA1E  502A               	movf	scale@scl,w,c
  3531  00EA20  6E07               	movwf	___awdiv@dividend,c
  3532  00EA22  6A08               	clrf	___awdiv@dividend+1,c
  3533  00EA24  BE07               	btfsc	___awdiv@dividend,7,c
  3534  00EA26  0608               	decf	___awdiv@dividend+1,f,c
  3535  00EA28  EC07  F06D         	call	___awdiv	;wreg free
  3536  00EA2C  0E09               	movlw	9
  3537  00EA2E  2407               	addwf	?___awdiv,w,c
  3538  00EA30  6E0F               	movwf	___wmul@multiplier,c
  3539  00EA32  0E00               	movlw	0
  3540  00EA34  2008               	addwfc	?___awdiv+1,w,c
  3541  00EA36  6E10               	movwf	___wmul@multiplier+1,c
  3542  00EA38  0E00               	movlw	0
  3543  00EA3A  6E12               	movwf	___wmul@multiplicand+1,c
  3544  00EA3C  0E03               	movlw	3
  3545  00EA3E  6E11               	movwf	___wmul@multiplicand,c
  3546  00EA40  EC38  F06B         	call	___wmul	;wreg free
  3547  00EA44  0EA2               	movlw	low __npowers_
  3548  00EA46  240F               	addwf	?___wmul,w,c
  3549  00EA48  6EF6               	movwf	tblptrl,c
  3550  00EA4A  0EFE               	movlw	high __npowers_
  3551  00EA4C  2010               	addwfc	?___wmul+1,w,c
  3552  00EA4E  6EF7               	movwf	tblptrh,c
  3553  00EA50                     	if	0	;There are less than 3 active tblptr bytes
  3554  00EA50                     	endif
  3555  00EA50  0009               	tblrd		*+
  3556  00EA52  CFF5 F015          	movff	tablat,___ftmul@f1
  3557  00EA56  0009               	tblrd		*+
  3558  00EA58  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3559  00EA5C  000A               	tblrd		*-
  3560  00EA5E  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3561  00EA62  0E00               	movlw	0
  3562  00EA64  6E12               	movwf	___wmul@multiplicand+1,c
  3563  00EA66  0E03               	movlw	3
  3564  00EA68  6E11               	movwf	___wmul@multiplicand,c
  3565  00EA6A  0E00               	movlw	0
  3566  00EA6C  6E04               	movwf	___awmod@divisor+1,c
  3567  00EA6E  0E0A               	movlw	10
  3568  00EA70  6E03               	movwf	___awmod@divisor,c
  3569  00EA72  502A               	movf	scale@scl,w,c
  3570  00EA74  6E01               	movwf	___awmod@dividend,c
  3571  00EA76  6A02               	clrf	___awmod@dividend+1,c
  3572  00EA78  BE01               	btfsc	___awmod@dividend,7,c
  3573  00EA7A  0602               	decf	___awmod@dividend+1,f,c
  3574  00EA7C  EC4F  F06C         	call	___awmod	;wreg free
  3575  00EA80  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3576  00EA84  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3577  00EA88  EC38  F06B         	call	___wmul	;wreg free
  3578  00EA8C  0EA2               	movlw	low __npowers_
  3579  00EA8E  240F               	addwf	?___wmul,w,c
  3580  00EA90  6EF6               	movwf	tblptrl,c
  3581  00EA92  0EFE               	movlw	high __npowers_
  3582  00EA94  2010               	addwfc	?___wmul+1,w,c
  3583  00EA96  6EF7               	movwf	tblptrh,c
  3584  00EA98                     	if	0	;There are less than 3 active tblptr bytes
  3585  00EA98                     	endif
  3586  00EA98  0009               	tblrd		*+
  3587  00EA9A  CFF5 F018          	movff	tablat,___ftmul@f2
  3588  00EA9E  0009               	tblrd		*+
  3589  00EAA0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3590  00EAA4  000A               	tblrd		*-
  3591  00EAA6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3592  00EAAA  EC5B  F06E         	call	___ftmul	;wreg free
  3593  00EAAE  D7A7               	goto	L4
  3594  00EAB0                     l3136:
  3595                           
  3596                           ;doprnt.c: 434: return _npowers_[scl];
  3597  00EAB0  502A               	movf	scale@scl,w,c
  3598  00EAB2  0D03               	mullw	3
  3599  00EAB4  0EA2               	movlw	low __npowers_
  3600  00EAB6  24F3               	addwf	prodl,w,c
  3601  00EAB8  6EF6               	movwf	tblptrl,c
  3602  00EABA  0EFE               	movlw	high __npowers_
  3603  00EABC  20F4               	addwfc	prodh,w,c
  3604  00EABE  6EF7               	movwf	tblptrh,c
  3605  00EAC0                     	if	0	;There are less than 3 active tblptr bytes
  3606  00EAC0                     	endif
  3607  00EAC0  0009               	tblrd		*+
  3608  00EAC2  CFF5 F024          	movff	tablat,?_scale
  3609  00EAC6  0009               	tblrd		*+
  3610  00EAC8  CFF5 F025          	movff	tablat,?_scale+1
  3611  00EACC  000A               	tblrd		*-
  3612  00EACE  CFF5 F026          	movff	tablat,?_scale+2
  3613  00EAD2  0012               	return	
  3614  00EAD4                     l3140:
  3615                           
  3616                           ;doprnt.c: 435: }
  3617                           ;doprnt.c: 436: if(scl>=110)
  3618  00EAD4  502A               	movf	scale@scl,w,c
  3619  00EAD6  0A80               	xorlw	128
  3620  00EAD8  0F12               	addlw	-238
  3621  00EADA  A0D8               	btfss	status,0,c
  3622  00EADC  D091               	goto	l3148
  3623                           
  3624                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3625  00EADE  0E00               	movlw	0
  3626  00EAE0  6E12               	movwf	___wmul@multiplicand+1,c
  3627  00EAE2  0E03               	movlw	3
  3628  00EAE4  6E11               	movwf	___wmul@multiplicand,c
  3629  00EAE6  0E00               	movlw	0
  3630  00EAE8  6E0A               	movwf	___awdiv@divisor+1,c
  3631  00EAEA  0E0A               	movlw	10
  3632  00EAEC  6E09               	movwf	___awdiv@divisor,c
  3633  00EAEE  0E00               	movlw	0
  3634  00EAF0  6E04               	movwf	___awmod@divisor+1,c
  3635  00EAF2  0E64               	movlw	100
  3636  00EAF4  6E03               	movwf	___awmod@divisor,c
  3637  00EAF6  502A               	movf	scale@scl,w,c
  3638  00EAF8  6E01               	movwf	___awmod@dividend,c
  3639  00EAFA  6A02               	clrf	___awmod@dividend+1,c
  3640  00EAFC  BE01               	btfsc	___awmod@dividend,7,c
  3641  00EAFE  0602               	decf	___awmod@dividend+1,f,c
  3642  00EB00  EC4F  F06C         	call	___awmod	;wreg free
  3643  00EB04  C001  F007         	movff	?___awmod,___awdiv@dividend
  3644  00EB08  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3645  00EB0C  EC07  F06D         	call	___awdiv	;wreg free
  3646  00EB10  0E09               	movlw	9
  3647  00EB12  2407               	addwf	?___awdiv,w,c
  3648  00EB14  6E0F               	movwf	___wmul@multiplier,c
  3649  00EB16  0E00               	movlw	0
  3650  00EB18  2008               	addwfc	?___awdiv+1,w,c
  3651  00EB1A  6E10               	movwf	___wmul@multiplier+1,c
  3652  00EB1C  EC38  F06B         	call	___wmul	;wreg free
  3653  00EB20  0E7B               	movlw	low __powers_
  3654  00EB22  240F               	addwf	?___wmul,w,c
  3655  00EB24  6EF6               	movwf	tblptrl,c
  3656  00EB26  0EFE               	movlw	high __powers_
  3657  00EB28  2010               	addwfc	?___wmul+1,w,c
  3658  00EB2A  6EF7               	movwf	tblptrh,c
  3659  00EB2C                     	if	0	;There are less than 3 active tblptr bytes
  3660  00EB2C                     	endif
  3661  00EB2C  0009               	tblrd		*+
  3662  00EB2E  CFF5 F018          	movff	tablat,___ftmul@f2
  3663  00EB32  0009               	tblrd		*+
  3664  00EB34  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3665  00EB38  000A               	tblrd		*-
  3666  00EB3A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3667  00EB3E  0E00               	movlw	0
  3668  00EB40  6E0A               	movwf	___awdiv@divisor+1,c
  3669  00EB42  0E64               	movlw	100
  3670  00EB44  6E09               	movwf	___awdiv@divisor,c
  3671  00EB46  502A               	movf	scale@scl,w,c
  3672  00EB48  6E07               	movwf	___awdiv@dividend,c
  3673  00EB4A  6A08               	clrf	___awdiv@dividend+1,c
  3674  00EB4C  BE07               	btfsc	___awdiv@dividend,7,c
  3675  00EB4E  0608               	decf	___awdiv@dividend+1,f,c
  3676  00EB50  EC07  F06D         	call	___awdiv	;wreg free
  3677  00EB54  0E12               	movlw	18
  3678  00EB56  2407               	addwf	?___awdiv,w,c
  3679  00EB58  6E0F               	movwf	___wmul@multiplier,c
  3680  00EB5A  0E00               	movlw	0
  3681  00EB5C  2008               	addwfc	?___awdiv+1,w,c
  3682  00EB5E  6E10               	movwf	___wmul@multiplier+1,c
  3683  00EB60  0E00               	movlw	0
  3684  00EB62  6E12               	movwf	___wmul@multiplicand+1,c
  3685  00EB64  0E03               	movlw	3
  3686  00EB66  6E11               	movwf	___wmul@multiplicand,c
  3687  00EB68  EC38  F06B         	call	___wmul	;wreg free
  3688  00EB6C  0E7B               	movlw	low __powers_
  3689  00EB6E  240F               	addwf	?___wmul,w,c
  3690  00EB70  6EF6               	movwf	tblptrl,c
  3691  00EB72  0EFE               	movlw	high __powers_
  3692  00EB74  2010               	addwfc	?___wmul+1,w,c
  3693  00EB76  6EF7               	movwf	tblptrh,c
  3694  00EB78                     	if	0	;There are less than 3 active tblptr bytes
  3695  00EB78                     	endif
  3696  00EB78  0009               	tblrd		*+
  3697  00EB7A  CFF5 F015          	movff	tablat,___ftmul@f1
  3698  00EB7E  0009               	tblrd		*+
  3699  00EB80  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3700  00EB84  000A               	tblrd		*-
  3701  00EB86  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3702  00EB8A  EC5B  F06E         	call	___ftmul	;wreg free
  3703  00EB8E  C015  F027         	movff	?___ftmul,_scale$1434
  3704  00EB92  C016  F028         	movff	?___ftmul+1,_scale$1434+1
  3705  00EB96  C017  F029         	movff	?___ftmul+2,_scale$1434+2
  3706                           
  3707                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3708  00EB9A  C027  F015         	movff	_scale$1434,___ftmul@f1
  3709  00EB9E  C028  F016         	movff	_scale$1434+1,___ftmul@f1+1
  3710  00EBA2  C029  F017         	movff	_scale$1434+2,___ftmul@f1+2
  3711  00EBA6  0E00               	movlw	0
  3712  00EBA8  6E12               	movwf	___wmul@multiplicand+1,c
  3713  00EBAA  0E03               	movlw	3
  3714  00EBAC  6E11               	movwf	___wmul@multiplicand,c
  3715  00EBAE  0E00               	movlw	0
  3716  00EBB0  6E04               	movwf	___awmod@divisor+1,c
  3717  00EBB2  0E0A               	movlw	10
  3718  00EBB4  6E03               	movwf	___awmod@divisor,c
  3719  00EBB6  502A               	movf	scale@scl,w,c
  3720  00EBB8  6E01               	movwf	___awmod@dividend,c
  3721  00EBBA  6A02               	clrf	___awmod@dividend+1,c
  3722  00EBBC  BE01               	btfsc	___awmod@dividend,7,c
  3723  00EBBE  0602               	decf	___awmod@dividend+1,f,c
  3724  00EBC0  EC4F  F06C         	call	___awmod	;wreg free
  3725  00EBC4  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3726  00EBC8  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3727  00EBCC  EC38  F06B         	call	___wmul	;wreg free
  3728  00EBD0  0E7B               	movlw	low __powers_
  3729  00EBD2  240F               	addwf	?___wmul,w,c
  3730  00EBD4  6EF6               	movwf	tblptrl,c
  3731  00EBD6  0EFE               	movlw	high __powers_
  3732  00EBD8  2010               	addwfc	?___wmul+1,w,c
  3733  00EBDA  6EF7               	movwf	tblptrh,c
  3734  00EBDC                     	if	0	;There are less than 3 active tblptr bytes
  3735  00EBDC                     	endif
  3736  00EBDC  0009               	tblrd		*+
  3737  00EBDE  CFF5 F018          	movff	tablat,___ftmul@f2
  3738  00EBE2  0009               	tblrd		*+
  3739  00EBE4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3740  00EBE8  000A               	tblrd		*-
  3741  00EBEA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3742  00EBEE  EC5B  F06E         	call	___ftmul	;wreg free
  3743  00EBF2  C015  F024         	movff	?___ftmul,?_scale
  3744  00EBF6  C016  F025         	movff	?___ftmul+1,?_scale+1
  3745  00EBFA  C017  F026         	movff	?___ftmul+2,?_scale+2
  3746  00EBFE  0012               	return	
  3747  00EC00                     l3148:
  3748                           
  3749                           ;doprnt.c: 438: else if(scl > 10)
  3750  00EC00  502A               	movf	scale@scl,w,c
  3751  00EC02  0A80               	xorlw	128
  3752  00EC04  0F75               	addlw	-139
  3753  00EC06  A0D8               	btfss	status,0,c
  3754  00EC08  D04D               	goto	l3154
  3755                           
  3756                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3757  00EC0A  0E00               	movlw	0
  3758  00EC0C  6E0A               	movwf	___awdiv@divisor+1,c
  3759  00EC0E  0E0A               	movlw	10
  3760  00EC10  6E09               	movwf	___awdiv@divisor,c
  3761  00EC12  502A               	movf	scale@scl,w,c
  3762  00EC14  6E07               	movwf	___awdiv@dividend,c
  3763  00EC16  6A08               	clrf	___awdiv@dividend+1,c
  3764  00EC18  BE07               	btfsc	___awdiv@dividend,7,c
  3765  00EC1A  0608               	decf	___awdiv@dividend+1,f,c
  3766  00EC1C  EC07  F06D         	call	___awdiv	;wreg free
  3767  00EC20  0E09               	movlw	9
  3768  00EC22  2407               	addwf	?___awdiv,w,c
  3769  00EC24  6E0F               	movwf	___wmul@multiplier,c
  3770  00EC26  0E00               	movlw	0
  3771  00EC28  2008               	addwfc	?___awdiv+1,w,c
  3772  00EC2A  6E10               	movwf	___wmul@multiplier+1,c
  3773  00EC2C  0E00               	movlw	0
  3774  00EC2E  6E12               	movwf	___wmul@multiplicand+1,c
  3775  00EC30  0E03               	movlw	3
  3776  00EC32  6E11               	movwf	___wmul@multiplicand,c
  3777  00EC34  EC38  F06B         	call	___wmul	;wreg free
  3778  00EC38  0E7B               	movlw	low __powers_
  3779  00EC3A  240F               	addwf	?___wmul,w,c
  3780  00EC3C  6EF6               	movwf	tblptrl,c
  3781  00EC3E  0EFE               	movlw	high __powers_
  3782  00EC40  2010               	addwfc	?___wmul+1,w,c
  3783  00EC42  6EF7               	movwf	tblptrh,c
  3784  00EC44                     	if	0	;There are less than 3 active tblptr bytes
  3785  00EC44                     	endif
  3786  00EC44  0009               	tblrd		*+
  3787  00EC46  CFF5 F015          	movff	tablat,___ftmul@f1
  3788  00EC4A  0009               	tblrd		*+
  3789  00EC4C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3790  00EC50  000A               	tblrd		*-
  3791  00EC52  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3792  00EC56  0E00               	movlw	0
  3793  00EC58  6E12               	movwf	___wmul@multiplicand+1,c
  3794  00EC5A  0E03               	movlw	3
  3795  00EC5C  6E11               	movwf	___wmul@multiplicand,c
  3796  00EC5E  0E00               	movlw	0
  3797  00EC60  6E04               	movwf	___awmod@divisor+1,c
  3798  00EC62  0E0A               	movlw	10
  3799  00EC64  6E03               	movwf	___awmod@divisor,c
  3800  00EC66  502A               	movf	scale@scl,w,c
  3801  00EC68  6E01               	movwf	___awmod@dividend,c
  3802  00EC6A  6A02               	clrf	___awmod@dividend+1,c
  3803  00EC6C  BE01               	btfsc	___awmod@dividend,7,c
  3804  00EC6E  0602               	decf	___awmod@dividend+1,f,c
  3805  00EC70  EC4F  F06C         	call	___awmod	;wreg free
  3806  00EC74  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3807  00EC78  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3808  00EC7C  EC38  F06B         	call	___wmul	;wreg free
  3809  00EC80  0E7B               	movlw	low __powers_
  3810  00EC82  240F               	addwf	?___wmul,w,c
  3811  00EC84  6EF6               	movwf	tblptrl,c
  3812  00EC86  0EFE               	movlw	high __powers_
  3813  00EC88  2010               	addwfc	?___wmul+1,w,c
  3814  00EC8A  6EF7               	movwf	tblptrh,c
  3815  00EC8C                     	if	0	;There are less than 3 active tblptr bytes
  3816  00EC8C                     	endif
  3817  00EC8C  0009               	tblrd		*+
  3818  00EC8E  CFF5 F018          	movff	tablat,___ftmul@f2
  3819  00EC92  0009               	tblrd		*+
  3820  00EC94  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3821  00EC98  000A               	tblrd		*-
  3822  00EC9A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3823  00EC9E  EC5B  F06E         	call	___ftmul	;wreg free
  3824  00ECA2  D7A7               	goto	L5
  3825  00ECA4                     l3154:
  3826                           
  3827                           ;doprnt.c: 440: return _powers_[scl];
  3828  00ECA4  502A               	movf	scale@scl,w,c
  3829  00ECA6  0D03               	mullw	3
  3830  00ECA8  0E7B               	movlw	low __powers_
  3831  00ECAA  24F3               	addwf	prodl,w,c
  3832  00ECAC  6EF6               	movwf	tblptrl,c
  3833  00ECAE  0EFE               	movlw	high __powers_
  3834  00ECB0  20F4               	addwfc	prodh,w,c
  3835  00ECB2  6EF7               	movwf	tblptrh,c
  3836  00ECB4                     	if	0	;There are less than 3 active tblptr bytes
  3837  00ECB4                     	endif
  3838  00ECB4  0009               	tblrd		*+
  3839  00ECB6  CFF5 F024          	movff	tablat,?_scale
  3840  00ECBA  0009               	tblrd		*+
  3841  00ECBC  CFF5 F025          	movff	tablat,?_scale+1
  3842  00ECC0  000A               	tblrd		*-
  3843  00ECC2  CFF5 F026          	movff	tablat,?_scale+2
  3844  00ECC6  0012               	return	
  3845  00ECC8                     __end_of_scale:
  3846                           	opt stack 0
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           prodh	equ	0xFF4
  3852                           prodl	equ	0xFF3
  3853                           postinc0	equ	0xFEE
  3854                           wreg	equ	0xFE8
  3855                           indf2	equ	0xFDF
  3856                           postinc2	equ	0xFDE
  3857                           postdec2	equ	0xFDD
  3858                           fsr2h	equ	0xFDA
  3859                           fsr2l	equ	0xFD9
  3860                           status	equ	0xFD8
  3861                           
  3862 ;; *************** function _putch *****************
  3863 ;; Defined at:
  3864 ;;		line 102 in file "lcd.c"
  3865 ;; Parameters:    Size  Location     Type
  3866 ;;  data            1    wreg     unsigned char 
  3867 ;; Auto vars:     Size  Location     Type
  3868 ;;  data            1    3[COMRAM] unsigned char 
  3869 ;; Return value:  Size  Location     Type
  3870 ;;                  1    wreg      void 
  3871 ;; Registers used:
  3872 ;;		wreg, status,2, status,0, cstack
  3873 ;; Tracked objects:
  3874 ;;		On entry : 0/0
  3875 ;;		On exit  : 0/0
  3876 ;;		Unchanged: 0/0
  3877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;Total ram usage:        1 bytes
  3883 ;; Hardware stack levels used:    1
  3884 ;; Hardware stack levels required when called:    3
  3885 ;; This function calls:
  3886 ;;		_send_byte
  3887 ;; This function is called by:
  3888 ;;		_printf
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           	psect	text3
  3893  00D59C                     __ptext3:
  3894                           	opt stack 0
  3895  00D59C                     _putch:
  3896                           	opt stack 26
  3897                           
  3898                           ;incstack = 0
  3899                           ;putch@data stored from wreg
  3900  00D59C  6E04               	movwf	putch@data,c
  3901                           
  3902                           ;lcd.c: 103: LATDbits.LATD2 = 1;
  3903  00D59E  848C               	bsf	3980,2,c	;volatile
  3904                           
  3905                           ;lcd.c: 104: send_byte((unsigned char)data);
  3906  00D5A0  5004               	movf	putch@data,w,c
  3907  00D5A2  ECD4  F06A         	call	_send_byte
  3908  00D5A6  0012               	return		;funcret
  3909  00D5A8                     __end_of_putch:
  3910                           	opt stack 0
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodh	equ	0xFF4
  3916                           prodl	equ	0xFF3
  3917                           postinc0	equ	0xFEE
  3918                           wreg	equ	0xFE8
  3919                           indf2	equ	0xFDF
  3920                           postinc2	equ	0xFDE
  3921                           postdec2	equ	0xFDD
  3922                           fsr2h	equ	0xFDA
  3923                           fsr2l	equ	0xFD9
  3924                           status	equ	0xFD8
  3925                           
  3926 ;; *************** function _isdigit *****************
  3927 ;; Defined at:
  3928 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\isdigit.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  c               1    wreg     unsigned char 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  c               1    2[COMRAM] unsigned char 
  3933 ;; Return value:  Size  Location     Type
  3934 ;;		None               void
  3935 ;; Registers used:
  3936 ;;		wreg, status,2, status,0
  3937 ;; Tracked objects:
  3938 ;;		On entry : 0/0
  3939 ;;		On exit  : 0/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3945 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3946 ;;Total ram usage:        3 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; This function calls:
  3949 ;;		Nothing
  3950 ;; This function is called by:
  3951 ;;		_printf
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           	psect	text4
  3956  00D5E6                     __ptext4:
  3957                           	opt stack 0
  3958  00D5E6                     _isdigit:
  3959                           	opt stack 29
  3960                           
  3961                           ;incstack = 0
  3962                           ;isdigit@c stored from wreg
  3963  00D5E6  6E03               	movwf	isdigit@c,c
  3964  00D5E8  0E00               	movlw	0
  3965  00D5EA  6E02               	movwf	_isdigit$1058,c
  3966  00D5EC  0E3A               	movlw	58
  3967  00D5EE  6003               	cpfslt	isdigit@c,c
  3968  00D5F0  D005               	goto	l3166
  3969  00D5F2  0E2F               	movlw	47
  3970  00D5F4  6403               	cpfsgt	isdigit@c,c
  3971  00D5F6  D002               	goto	l3166
  3972  00D5F8  0E01               	movlw	1
  3973  00D5FA  6E02               	movwf	_isdigit$1058,c
  3974  00D5FC                     l3166:
  3975  00D5FC  C002  F001         	movff	_isdigit$1058,??_isdigit
  3976  00D600  3001               	rrcf	??_isdigit,w,c
  3977  00D602  0012               	return	
  3978  00D604                     __end_of_isdigit:
  3979                           	opt stack 0
  3980                           tblptru	equ	0xFF8
  3981                           tblptrh	equ	0xFF7
  3982                           tblptrl	equ	0xFF6
  3983                           tablat	equ	0xFF5
  3984                           prodh	equ	0xFF4
  3985                           prodl	equ	0xFF3
  3986                           postinc0	equ	0xFEE
  3987                           wreg	equ	0xFE8
  3988                           indf2	equ	0xFDF
  3989                           postinc2	equ	0xFDE
  3990                           postdec2	equ	0xFDD
  3991                           fsr2h	equ	0xFDA
  3992                           fsr2l	equ	0xFD9
  3993                           status	equ	0xFD8
  3994                           
  3995 ;; *************** function _fround *****************
  3996 ;; Defined at:
  3997 ;;		line 409 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3998 ;; Parameters:    Size  Location     Type
  3999 ;;  prec            1    wreg     unsigned char 
  4000 ;; Auto vars:     Size  Location     Type
  4001 ;;  prec            1   44[COMRAM] unsigned char 
  4002 ;; Return value:  Size  Location     Type
  4003 ;;                  3   35[COMRAM] unsigned char 
  4004 ;; Registers used:
  4005 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4006 ;; Tracked objects:
  4007 ;;		On entry : 0/0
  4008 ;;		On exit  : 0/0
  4009 ;;		Unchanged: 0/0
  4010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4011 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;Total ram usage:       10 bytes
  4016 ;; Hardware stack levels used:    1
  4017 ;; Hardware stack levels required when called:    2
  4018 ;; This function calls:
  4019 ;;		___awdiv
  4020 ;;		___awmod
  4021 ;;		___ftmul
  4022 ;;		___wmul
  4023 ;; This function is called by:
  4024 ;;		_printf
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text5
  4029  00E2A4                     __ptext5:
  4030                           	opt stack 0
  4031  00E2A4                     _fround:
  4032                           	opt stack 27
  4033                           
  4034                           ;incstack = 0
  4035                           ;fround@prec stored from wreg
  4036  00E2A4  6E2D               	movwf	fround@prec,c
  4037                           
  4038                           ;doprnt.c: 413: if(prec>=110)
  4039  00E2A6  0E6D               	movlw	109
  4040  00E2A8  642D               	cpfsgt	fround@prec,c
  4041  00E2AA  D09F               	goto	l3108
  4042                           
  4043                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4044  00E2AC  0E00               	movlw	0
  4045  00E2AE  6E12               	movwf	___wmul@multiplicand+1,c
  4046  00E2B0  0E03               	movlw	3
  4047  00E2B2  6E11               	movwf	___wmul@multiplicand,c
  4048  00E2B4  0E00               	movlw	0
  4049  00E2B6  6E0A               	movwf	___awdiv@divisor+1,c
  4050  00E2B8  0E0A               	movlw	10
  4051  00E2BA  6E09               	movwf	___awdiv@divisor,c
  4052  00E2BC  0E00               	movlw	0
  4053  00E2BE  6E04               	movwf	___awmod@divisor+1,c
  4054  00E2C0  0E64               	movlw	100
  4055  00E2C2  6E03               	movwf	___awmod@divisor,c
  4056  00E2C4  C02D  F001         	movff	fround@prec,___awmod@dividend
  4057  00E2C8  6A02               	clrf	___awmod@dividend+1,c
  4058  00E2CA  EC4F  F06C         	call	___awmod	;wreg free
  4059  00E2CE  C001  F007         	movff	?___awmod,___awdiv@dividend
  4060  00E2D2  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  4061  00E2D6  EC07  F06D         	call	___awdiv	;wreg free
  4062  00E2DA  0E09               	movlw	9
  4063  00E2DC  2407               	addwf	?___awdiv,w,c
  4064  00E2DE  6E0F               	movwf	___wmul@multiplier,c
  4065  00E2E0  0E00               	movlw	0
  4066  00E2E2  2008               	addwfc	?___awdiv+1,w,c
  4067  00E2E4  6E10               	movwf	___wmul@multiplier+1,c
  4068  00E2E6  EC38  F06B         	call	___wmul	;wreg free
  4069  00E2EA  0EA2               	movlw	low __npowers_
  4070  00E2EC  240F               	addwf	?___wmul,w,c
  4071  00E2EE  6EF6               	movwf	tblptrl,c
  4072  00E2F0  0EFE               	movlw	high __npowers_
  4073  00E2F2  2010               	addwfc	?___wmul+1,w,c
  4074  00E2F4  6EF7               	movwf	tblptrh,c
  4075  00E2F6                     	if	0	;There are less than 3 active tblptr bytes
  4076  00E2F6                     	endif
  4077  00E2F6  0009               	tblrd		*+
  4078  00E2F8  CFF5 F018          	movff	tablat,___ftmul@f2
  4079  00E2FC  0009               	tblrd		*+
  4080  00E2FE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4081  00E302  000A               	tblrd		*-
  4082  00E304  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4083  00E308  0E00               	movlw	0
  4084  00E30A  6E0A               	movwf	___awdiv@divisor+1,c
  4085  00E30C  0E64               	movlw	100
  4086  00E30E  6E09               	movwf	___awdiv@divisor,c
  4087  00E310  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4088  00E314  6A08               	clrf	___awdiv@dividend+1,c
  4089  00E316  EC07  F06D         	call	___awdiv	;wreg free
  4090  00E31A  0E12               	movlw	18
  4091  00E31C  2407               	addwf	?___awdiv,w,c
  4092  00E31E  6E0F               	movwf	___wmul@multiplier,c
  4093  00E320  0E00               	movlw	0
  4094  00E322  2008               	addwfc	?___awdiv+1,w,c
  4095  00E324  6E10               	movwf	___wmul@multiplier+1,c
  4096  00E326  0E00               	movlw	0
  4097  00E328  6E12               	movwf	___wmul@multiplicand+1,c
  4098  00E32A  0E03               	movlw	3
  4099  00E32C  6E11               	movwf	___wmul@multiplicand,c
  4100  00E32E  EC38  F06B         	call	___wmul	;wreg free
  4101  00E332  0EA2               	movlw	low __npowers_
  4102  00E334  240F               	addwf	?___wmul,w,c
  4103  00E336  6EF6               	movwf	tblptrl,c
  4104  00E338  0EFE               	movlw	high __npowers_
  4105  00E33A  2010               	addwfc	?___wmul+1,w,c
  4106  00E33C  6EF7               	movwf	tblptrh,c
  4107  00E33E                     	if	0	;There are less than 3 active tblptr bytes
  4108  00E33E                     	endif
  4109  00E33E  0009               	tblrd		*+
  4110  00E340  CFF5 F015          	movff	tablat,___ftmul@f1
  4111  00E344  0009               	tblrd		*+
  4112  00E346  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4113  00E34A  000A               	tblrd		*-
  4114  00E34C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4115  00E350  EC5B  F06E         	call	___ftmul	;wreg free
  4116  00E354  C015  F02A         	movff	?___ftmul,_fround$1432
  4117  00E358  C016  F02B         	movff	?___ftmul+1,_fround$1432+1
  4118  00E35C  C017  F02C         	movff	?___ftmul+2,_fround$1432+2
  4119                           
  4120                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4121  00E360  0E00               	movlw	0
  4122  00E362  6E12               	movwf	___wmul@multiplicand+1,c
  4123  00E364  0E03               	movlw	3
  4124  00E366  6E11               	movwf	___wmul@multiplicand,c
  4125  00E368  0E00               	movlw	0
  4126  00E36A  6E04               	movwf	___awmod@divisor+1,c
  4127  00E36C  0E0A               	movlw	10
  4128  00E36E  6E03               	movwf	___awmod@divisor,c
  4129  00E370  C02D  F001         	movff	fround@prec,___awmod@dividend
  4130  00E374  6A02               	clrf	___awmod@dividend+1,c
  4131  00E376  EC4F  F06C         	call	___awmod	;wreg free
  4132  00E37A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4133  00E37E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4134  00E382  EC38  F06B         	call	___wmul	;wreg free
  4135  00E386  0EA2               	movlw	low __npowers_
  4136  00E388  240F               	addwf	?___wmul,w,c
  4137  00E38A  6EF6               	movwf	tblptrl,c
  4138  00E38C  0EFE               	movlw	high __npowers_
  4139  00E38E  2010               	addwfc	?___wmul+1,w,c
  4140  00E390  6EF7               	movwf	tblptrh,c
  4141  00E392                     	if	0	;There are less than 3 active tblptr bytes
  4142  00E392                     	endif
  4143  00E392  0009               	tblrd		*+
  4144  00E394  CFF5 F018          	movff	tablat,___ftmul@f2
  4145  00E398  0009               	tblrd		*+
  4146  00E39A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4147  00E39E  000A               	tblrd		*-
  4148  00E3A0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4149  00E3A4  C02A  F015         	movff	_fround$1432,___ftmul@f1
  4150  00E3A8  C02B  F016         	movff	_fround$1432+1,___ftmul@f1+1
  4151  00E3AC  C02C  F017         	movff	_fround$1432+2,___ftmul@f1+2
  4152  00E3B0  EC5B  F06E         	call	___ftmul	;wreg free
  4153  00E3B4  C015  F027         	movff	?___ftmul,_fround$1433
  4154  00E3B8  C016  F028         	movff	?___ftmul+1,_fround$1433+1
  4155  00E3BC  C017  F029         	movff	?___ftmul+2,_fround$1433+2
  4156                           
  4157                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4158  00E3C0  C027  F015         	movff	_fround$1433,___ftmul@f1
  4159  00E3C4  C028  F016         	movff	_fround$1433+1,___ftmul@f1+1
  4160  00E3C8  C029  F017         	movff	_fround$1433+2,___ftmul@f1+2
  4161  00E3CC  0E00               	movlw	0
  4162  00E3CE  6E18               	movwf	___ftmul@f2,c
  4163  00E3D0  0E00               	movlw	0
  4164  00E3D2  6E19               	movwf	___ftmul@f2+1,c
  4165  00E3D4  0E3F               	movlw	63
  4166  00E3D6  6E1A               	movwf	___ftmul@f2+2,c
  4167  00E3D8  EC5B  F06E         	call	___ftmul	;wreg free
  4168  00E3DC  C015  F024         	movff	?___ftmul,?_fround
  4169  00E3E0  C016  F025         	movff	?___ftmul+1,?_fround+1
  4170  00E3E4  C017  F026         	movff	?___ftmul+2,?_fround+2
  4171  00E3E8  0012               	return	
  4172  00E3EA                     l3108:
  4173                           
  4174                           ;doprnt.c: 415: else if(prec > 10)
  4175  00E3EA  0E0A               	movlw	10
  4176  00E3EC  642D               	cpfsgt	fround@prec,c
  4177  00E3EE  D05D               	goto	l3116
  4178                           
  4179                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4180  00E3F0  0E00               	movlw	0
  4181  00E3F2  6E12               	movwf	___wmul@multiplicand+1,c
  4182  00E3F4  0E03               	movlw	3
  4183  00E3F6  6E11               	movwf	___wmul@multiplicand,c
  4184  00E3F8  0E00               	movlw	0
  4185  00E3FA  6E04               	movwf	___awmod@divisor+1,c
  4186  00E3FC  0E0A               	movlw	10
  4187  00E3FE  6E03               	movwf	___awmod@divisor,c
  4188  00E400  C02D  F001         	movff	fround@prec,___awmod@dividend
  4189  00E404  6A02               	clrf	___awmod@dividend+1,c
  4190  00E406  EC4F  F06C         	call	___awmod	;wreg free
  4191  00E40A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  4192  00E40E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  4193  00E412  EC38  F06B         	call	___wmul	;wreg free
  4194  00E416  0EA2               	movlw	low __npowers_
  4195  00E418  240F               	addwf	?___wmul,w,c
  4196  00E41A  6EF6               	movwf	tblptrl,c
  4197  00E41C  0EFE               	movlw	high __npowers_
  4198  00E41E  2010               	addwfc	?___wmul+1,w,c
  4199  00E420  6EF7               	movwf	tblptrh,c
  4200  00E422                     	if	0	;There are less than 3 active tblptr bytes
  4201  00E422                     	endif
  4202  00E422  0009               	tblrd		*+
  4203  00E424  CFF5 F018          	movff	tablat,___ftmul@f2
  4204  00E428  0009               	tblrd		*+
  4205  00E42A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  4206  00E42E  000A               	tblrd		*-
  4207  00E430  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  4208  00E434  0E00               	movlw	0
  4209  00E436  6E0A               	movwf	___awdiv@divisor+1,c
  4210  00E438  0E0A               	movlw	10
  4211  00E43A  6E09               	movwf	___awdiv@divisor,c
  4212  00E43C  C02D  F007         	movff	fround@prec,___awdiv@dividend
  4213  00E440  6A08               	clrf	___awdiv@dividend+1,c
  4214  00E442  EC07  F06D         	call	___awdiv	;wreg free
  4215  00E446  0E09               	movlw	9
  4216  00E448  2407               	addwf	?___awdiv,w,c
  4217  00E44A  6E0F               	movwf	___wmul@multiplier,c
  4218  00E44C  0E00               	movlw	0
  4219  00E44E  2008               	addwfc	?___awdiv+1,w,c
  4220  00E450  6E10               	movwf	___wmul@multiplier+1,c
  4221  00E452  0E00               	movlw	0
  4222  00E454  6E12               	movwf	___wmul@multiplicand+1,c
  4223  00E456  0E03               	movlw	3
  4224  00E458  6E11               	movwf	___wmul@multiplicand,c
  4225  00E45A  EC38  F06B         	call	___wmul	;wreg free
  4226  00E45E  0EA2               	movlw	low __npowers_
  4227  00E460  240F               	addwf	?___wmul,w,c
  4228  00E462  6EF6               	movwf	tblptrl,c
  4229  00E464  0EFE               	movlw	high __npowers_
  4230  00E466  2010               	addwfc	?___wmul+1,w,c
  4231  00E468  6EF7               	movwf	tblptrh,c
  4232  00E46A                     	if	0	;There are less than 3 active tblptr bytes
  4233  00E46A                     	endif
  4234  00E46A  0009               	tblrd		*+
  4235  00E46C  CFF5 F015          	movff	tablat,___ftmul@f1
  4236  00E470  0009               	tblrd		*+
  4237  00E472  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4238  00E476  000A               	tblrd		*-
  4239  00E478  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4240  00E47C  EC5B  F06E         	call	___ftmul	;wreg free
  4241  00E480  C015  F02A         	movff	?___ftmul,_fround$1432
  4242  00E484  C016  F02B         	movff	?___ftmul+1,_fround$1432+1
  4243  00E488  C017  F02C         	movff	?___ftmul+2,_fround$1432+2
  4244                           
  4245                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4246  00E48C  C02A  F015         	movff	_fround$1432,___ftmul@f1
  4247  00E490  C02B  F016         	movff	_fround$1432+1,___ftmul@f1+1
  4248  00E494  C02C  F017         	movff	_fround$1432+2,___ftmul@f1+2
  4249  00E498  0E00               	movlw	0
  4250  00E49A  6E18               	movwf	___ftmul@f2,c
  4251  00E49C  0E00               	movlw	0
  4252  00E49E  6E19               	movwf	___ftmul@f2+1,c
  4253  00E4A0  0E3F               	movlw	63
  4254  00E4A2  6E1A               	movwf	___ftmul@f2+2,c
  4255  00E4A4  EC5B  F06E         	call	___ftmul	;wreg free
  4256  00E4A8  D799               	goto	L6
  4257  00E4AA                     l3116:
  4258                           
  4259                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4260  00E4AA  502D               	movf	fround@prec,w,c
  4261  00E4AC  0D03               	mullw	3
  4262  00E4AE  0EA2               	movlw	low __npowers_
  4263  00E4B0  24F3               	addwf	prodl,w,c
  4264  00E4B2  6EF6               	movwf	tblptrl,c
  4265  00E4B4  0EFE               	movlw	high __npowers_
  4266  00E4B6  20F4               	addwfc	prodh,w,c
  4267  00E4B8  6EF7               	movwf	tblptrh,c
  4268  00E4BA                     	if	0	;There are less than 3 active tblptr bytes
  4269  00E4BA                     	endif
  4270  00E4BA  0009               	tblrd		*+
  4271  00E4BC  CFF5 F015          	movff	tablat,___ftmul@f1
  4272  00E4C0  0009               	tblrd		*+
  4273  00E4C2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  4274  00E4C6  000A               	tblrd		*-
  4275  00E4C8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  4276  00E4CC  0E00               	movlw	0
  4277  00E4CE  6E18               	movwf	___ftmul@f2,c
  4278  00E4D0  0E00               	movlw	0
  4279  00E4D2  6E19               	movwf	___ftmul@f2+1,c
  4280  00E4D4  0E3F               	movlw	63
  4281  00E4D6  6E1A               	movwf	___ftmul@f2+2,c
  4282  00E4D8  EC5B  F06E         	call	___ftmul	;wreg free
  4283  00E4DC  C015  F024         	movff	?___ftmul,?_fround
  4284  00E4E0  C016  F025         	movff	?___ftmul+1,?_fround+1
  4285  00E4E4  C017  F026         	movff	?___ftmul+2,?_fround+2
  4286  00E4E8  0012               	return	
  4287  00E4EA                     __end_of_fround:
  4288                           	opt stack 0
  4289                           tblptru	equ	0xFF8
  4290                           tblptrh	equ	0xFF7
  4291                           tblptrl	equ	0xFF6
  4292                           tablat	equ	0xFF5
  4293                           prodh	equ	0xFF4
  4294                           prodl	equ	0xFF3
  4295                           postinc0	equ	0xFEE
  4296                           wreg	equ	0xFE8
  4297                           indf2	equ	0xFDF
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function ___wmul *****************
  4305 ;; Defined at:
  4306 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  multiplier      2   14[COMRAM] unsigned int 
  4309 ;;  multiplicand    2   16[COMRAM] unsigned int 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  product         2   18[COMRAM] unsigned int 
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  2   14[COMRAM] unsigned int 
  4314 ;; Registers used:
  4315 ;;		wreg, status,2, status,0, prodl, prodh
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4321 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;Total ram usage:        6 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; This function calls:
  4328 ;;		Nothing
  4329 ;; This function is called by:
  4330 ;;		_fround
  4331 ;;		_scale
  4332 ;;		_printf
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text6
  4337  00D670                     __ptext6:
  4338                           	opt stack 0
  4339  00D670                     ___wmul:
  4340                           	opt stack 28
  4341                           
  4342                           ;incstack = 0
  4343  00D670  500F               	movf	___wmul@multiplier,w,c
  4344  00D672  0211               	mulwf	___wmul@multiplicand,c
  4345  00D674  CFF3 F013          	movff	prodl,___wmul@product
  4346  00D678  CFF4 F014          	movff	prodh,___wmul@product+1
  4347  00D67C  500F               	movf	___wmul@multiplier,w,c
  4348  00D67E  0212               	mulwf	___wmul@multiplicand+1,c
  4349  00D680  50F3               	movf	prodl,w,c
  4350  00D682  2614               	addwf	___wmul@product+1,f,c
  4351  00D684  5010               	movf	___wmul@multiplier+1,w,c
  4352  00D686  0211               	mulwf	___wmul@multiplicand,c
  4353  00D688  50F3               	movf	prodl,w,c
  4354  00D68A  2614               	addwf	___wmul@product+1,f,c
  4355  00D68C  C013  F00F         	movff	___wmul@product,?___wmul
  4356  00D690  C014  F010         	movff	___wmul@product+1,?___wmul+1
  4357  00D694  0012               	return	
  4358  00D696                     __end_of___wmul:
  4359                           	opt stack 0
  4360                           tblptru	equ	0xFF8
  4361                           tblptrh	equ	0xFF7
  4362                           tblptrl	equ	0xFF6
  4363                           tablat	equ	0xFF5
  4364                           prodh	equ	0xFF4
  4365                           prodl	equ	0xFF3
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           indf2	equ	0xFDF
  4369                           postinc2	equ	0xFDE
  4370                           postdec2	equ	0xFDD
  4371                           fsr2h	equ	0xFDA
  4372                           fsr2l	equ	0xFD9
  4373                           status	equ	0xFD8
  4374                           
  4375 ;; *************** function ___awmod *****************
  4376 ;; Defined at:
  4377 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  4378 ;; Parameters:    Size  Location     Type
  4379 ;;  dividend        2    0[COMRAM] int 
  4380 ;;  divisor         2    2[COMRAM] int 
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;  sign            1    5[COMRAM] unsigned char 
  4383 ;;  counter         1    4[COMRAM] unsigned char 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  2    0[COMRAM] int 
  4386 ;; Registers used:
  4387 ;;		wreg, status,2, status,0
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4393 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;Total ram usage:        6 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_fround
  4403 ;;		_scale
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text7
  4408  00D89E                     __ptext7:
  4409                           	opt stack 0
  4410  00D89E                     ___awmod:
  4411                           	opt stack 28
  4412                           
  4413                           ;incstack = 0
  4414  00D89E  0E00               	movlw	0
  4415  00D8A0  6E06               	movwf	___awmod@sign,c
  4416  00D8A2  AE02               	btfss	___awmod@dividend+1,7,c
  4417  00D8A4  D006               	goto	l3044
  4418  00D8A6  6C01               	negf	___awmod@dividend,c
  4419  00D8A8  1E02               	comf	___awmod@dividend+1,f,c
  4420  00D8AA  B0D8               	btfsc	status,0,c
  4421  00D8AC  2A02               	incf	___awmod@dividend+1,f,c
  4422  00D8AE  0E01               	movlw	1
  4423  00D8B0  6E06               	movwf	___awmod@sign,c
  4424  00D8B2                     l3044:
  4425  00D8B2  AE04               	btfss	___awmod@divisor+1,7,c
  4426  00D8B4  D004               	goto	l3048
  4427  00D8B6  6C03               	negf	___awmod@divisor,c
  4428  00D8B8  1E04               	comf	___awmod@divisor+1,f,c
  4429  00D8BA  B0D8               	btfsc	status,0,c
  4430  00D8BC  2A04               	incf	___awmod@divisor+1,f,c
  4431  00D8BE                     l3048:
  4432  00D8BE  5003               	movf	___awmod@divisor,w,c
  4433  00D8C0  1004               	iorwf	___awmod@divisor+1,w,c
  4434  00D8C2  B4D8               	btfsc	status,2,c
  4435  00D8C4  D018               	goto	l3064
  4436  00D8C6  0E01               	movlw	1
  4437  00D8C8  6E05               	movwf	___awmod@counter,c
  4438  00D8CA  D004               	goto	l3054
  4439  00D8CC                     l3052:
  4440  00D8CC  90D8               	bcf	status,0,c
  4441  00D8CE  3603               	rlcf	___awmod@divisor,f,c
  4442  00D8D0  3604               	rlcf	___awmod@divisor+1,f,c
  4443  00D8D2  2A05               	incf	___awmod@counter,f,c
  4444  00D8D4                     l3054:
  4445  00D8D4  AE04               	btfss	___awmod@divisor+1,7,c
  4446  00D8D6  D7FA               	goto	l3052
  4447  00D8D8                     l3056:
  4448  00D8D8  5003               	movf	___awmod@divisor,w,c
  4449  00D8DA  5C01               	subwf	___awmod@dividend,w,c
  4450  00D8DC  5004               	movf	___awmod@divisor+1,w,c
  4451  00D8DE  5802               	subwfb	___awmod@dividend+1,w,c
  4452  00D8E0  A0D8               	btfss	status,0,c
  4453  00D8E2  D004               	goto	l3060
  4454  00D8E4  5003               	movf	___awmod@divisor,w,c
  4455  00D8E6  5E01               	subwf	___awmod@dividend,f,c
  4456  00D8E8  5004               	movf	___awmod@divisor+1,w,c
  4457  00D8EA  5A02               	subwfb	___awmod@dividend+1,f,c
  4458  00D8EC                     l3060:
  4459  00D8EC  90D8               	bcf	status,0,c
  4460  00D8EE  3204               	rrcf	___awmod@divisor+1,f,c
  4461  00D8F0  3203               	rrcf	___awmod@divisor,f,c
  4462  00D8F2  2E05               	decfsz	___awmod@counter,f,c
  4463  00D8F4  D7F1               	goto	l3056
  4464  00D8F6                     l3064:
  4465  00D8F6  5006               	movf	___awmod@sign,w,c
  4466  00D8F8  B4D8               	btfsc	status,2,c
  4467  00D8FA  D004               	goto	l3068
  4468  00D8FC  6C01               	negf	___awmod@dividend,c
  4469  00D8FE  1E02               	comf	___awmod@dividend+1,f,c
  4470  00D900  B0D8               	btfsc	status,0,c
  4471  00D902  2A02               	incf	___awmod@dividend+1,f,c
  4472  00D904                     l3068:
  4473  00D904  C001  F001         	movff	___awmod@dividend,?___awmod
  4474  00D908  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4475  00D90C  0012               	return	
  4476  00D90E                     __end_of___awmod:
  4477                           	opt stack 0
  4478                           tblptru	equ	0xFF8
  4479                           tblptrh	equ	0xFF7
  4480                           tblptrl	equ	0xFF6
  4481                           tablat	equ	0xFF5
  4482                           prodh	equ	0xFF4
  4483                           prodl	equ	0xFF3
  4484                           postinc0	equ	0xFEE
  4485                           wreg	equ	0xFE8
  4486                           indf2	equ	0xFDF
  4487                           postinc2	equ	0xFDE
  4488                           postdec2	equ	0xFDD
  4489                           fsr2h	equ	0xFDA
  4490                           fsr2l	equ	0xFD9
  4491                           status	equ	0xFD8
  4492                           
  4493 ;; *************** function ___awdiv *****************
  4494 ;; Defined at:
  4495 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;  dividend        2    6[COMRAM] int 
  4498 ;;  divisor         2    8[COMRAM] int 
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;  quotient        2   12[COMRAM] int 
  4501 ;;  sign            1   11[COMRAM] unsigned char 
  4502 ;;  counter         1   10[COMRAM] unsigned char 
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  2    6[COMRAM] int 
  4505 ;; Registers used:
  4506 ;;		wreg, status,2, status,0
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4512 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;Total ram usage:        8 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_fround
  4522 ;;		_scale
  4523 ;;		_printf
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           	psect	text8
  4528  00DA0E                     __ptext8:
  4529                           	opt stack 0
  4530  00DA0E                     ___awdiv:
  4531                           	opt stack 28
  4532                           
  4533                           ;incstack = 0
  4534  00DA0E  0E00               	movlw	0
  4535  00DA10  6E0C               	movwf	___awdiv@sign,c
  4536  00DA12  AE0A               	btfss	___awdiv@divisor+1,7,c
  4537  00DA14  D006               	goto	l3000
  4538  00DA16  6C09               	negf	___awdiv@divisor,c
  4539  00DA18  1E0A               	comf	___awdiv@divisor+1,f,c
  4540  00DA1A  B0D8               	btfsc	status,0,c
  4541  00DA1C  2A0A               	incf	___awdiv@divisor+1,f,c
  4542  00DA1E  0E01               	movlw	1
  4543  00DA20  6E0C               	movwf	___awdiv@sign,c
  4544  00DA22                     l3000:
  4545  00DA22  AE08               	btfss	___awdiv@dividend+1,7,c
  4546  00DA24  D006               	goto	l3006
  4547  00DA26  6C07               	negf	___awdiv@dividend,c
  4548  00DA28  1E08               	comf	___awdiv@dividend+1,f,c
  4549  00DA2A  B0D8               	btfsc	status,0,c
  4550  00DA2C  2A08               	incf	___awdiv@dividend+1,f,c
  4551  00DA2E  0E01               	movlw	1
  4552  00DA30  1A0C               	xorwf	___awdiv@sign,f,c
  4553  00DA32                     l3006:
  4554  00DA32  0E00               	movlw	0
  4555  00DA34  6E0E               	movwf	___awdiv@quotient+1,c
  4556  00DA36  0E00               	movlw	0
  4557  00DA38  6E0D               	movwf	___awdiv@quotient,c
  4558  00DA3A  5009               	movf	___awdiv@divisor,w,c
  4559  00DA3C  100A               	iorwf	___awdiv@divisor+1,w,c
  4560  00DA3E  B4D8               	btfsc	status,2,c
  4561  00DA40  D01C               	goto	l3028
  4562  00DA42  0E01               	movlw	1
  4563  00DA44  6E0B               	movwf	___awdiv@counter,c
  4564  00DA46  D004               	goto	l3014
  4565  00DA48                     l3012:
  4566  00DA48  90D8               	bcf	status,0,c
  4567  00DA4A  3609               	rlcf	___awdiv@divisor,f,c
  4568  00DA4C  360A               	rlcf	___awdiv@divisor+1,f,c
  4569  00DA4E  2A0B               	incf	___awdiv@counter,f,c
  4570  00DA50                     l3014:
  4571  00DA50  AE0A               	btfss	___awdiv@divisor+1,7,c
  4572  00DA52  D7FA               	goto	l3012
  4573  00DA54                     l3016:
  4574  00DA54  90D8               	bcf	status,0,c
  4575  00DA56  360D               	rlcf	___awdiv@quotient,f,c
  4576  00DA58  360E               	rlcf	___awdiv@quotient+1,f,c
  4577  00DA5A  5009               	movf	___awdiv@divisor,w,c
  4578  00DA5C  5C07               	subwf	___awdiv@dividend,w,c
  4579  00DA5E  500A               	movf	___awdiv@divisor+1,w,c
  4580  00DA60  5808               	subwfb	___awdiv@dividend+1,w,c
  4581  00DA62  A0D8               	btfss	status,0,c
  4582  00DA64  D005               	goto	l3024
  4583  00DA66  5009               	movf	___awdiv@divisor,w,c
  4584  00DA68  5E07               	subwf	___awdiv@dividend,f,c
  4585  00DA6A  500A               	movf	___awdiv@divisor+1,w,c
  4586  00DA6C  5A08               	subwfb	___awdiv@dividend+1,f,c
  4587  00DA6E  800D               	bsf	___awdiv@quotient,0,c
  4588  00DA70                     l3024:
  4589  00DA70  90D8               	bcf	status,0,c
  4590  00DA72  320A               	rrcf	___awdiv@divisor+1,f,c
  4591  00DA74  3209               	rrcf	___awdiv@divisor,f,c
  4592  00DA76  2E0B               	decfsz	___awdiv@counter,f,c
  4593  00DA78  D7ED               	goto	l3016
  4594  00DA7A                     l3028:
  4595  00DA7A  500C               	movf	___awdiv@sign,w,c
  4596  00DA7C  B4D8               	btfsc	status,2,c
  4597  00DA7E  D004               	goto	l3032
  4598  00DA80  6C0D               	negf	___awdiv@quotient,c
  4599  00DA82  1E0E               	comf	___awdiv@quotient+1,f,c
  4600  00DA84  B0D8               	btfsc	status,0,c
  4601  00DA86  2A0E               	incf	___awdiv@quotient+1,f,c
  4602  00DA88                     l3032:
  4603  00DA88  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4604  00DA8C  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4605  00DA90  0012               	return	
  4606  00DA92                     __end_of___awdiv:
  4607                           	opt stack 0
  4608                           tblptru	equ	0xFF8
  4609                           tblptrh	equ	0xFF7
  4610                           tblptrl	equ	0xFF6
  4611                           tablat	equ	0xFF5
  4612                           prodh	equ	0xFF4
  4613                           prodl	equ	0xFF3
  4614                           postinc0	equ	0xFEE
  4615                           wreg	equ	0xFE8
  4616                           indf2	equ	0xFDF
  4617                           postinc2	equ	0xFDE
  4618                           postdec2	equ	0xFDD
  4619                           fsr2h	equ	0xFDA
  4620                           fsr2l	equ	0xFD9
  4621                           status	equ	0xFD8
  4622                           
  4623 ;; *************** function __tdiv_to_l_ *****************
  4624 ;; Defined at:
  4625 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdivl.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  f1              3    0[COMRAM] float 
  4628 ;;  f2              3    3[COMRAM] float 
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;  quot            4    9[COMRAM] unsigned long 
  4631 ;;  exp1            1   14[COMRAM] unsigned char 
  4632 ;;  cntr            1   13[COMRAM] unsigned char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  4    0[COMRAM] unsigned long 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4642 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;Total ram usage:       15 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; This function calls:
  4649 ;;		Nothing
  4650 ;; This function is called by:
  4651 ;;		_printf
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text9
  4656  00DFC6                     __ptext9:
  4657                           	opt stack 0
  4658  00DFC6                     __tdiv_to_l_:
  4659                           	opt stack 29
  4660                           
  4661                           ;incstack = 0
  4662  00DFC6  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4663  00DFCA  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4664  00DFCC  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4665  00DFCE  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4666  00DFD0  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4667  00DFD2  E301               	bnc	u2951
  4668  00DFD4  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4669  00DFD6                     u2951:
  4670  00DFD6  5007               	movf	??__tdiv_to_l_,w,c
  4671  00DFD8  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4672  00DFDA  500F               	movf	__tdiv_to_l_@exp1,w,c
  4673  00DFDC  A4D8               	btfss	status,2,c
  4674  00DFDE  D009               	goto	l3176
  4675  00DFE0  0E00               	movlw	0
  4676  00DFE2  6E01               	movwf	?__tdiv_to_l_,c
  4677  00DFE4  0E00               	movlw	0
  4678  00DFE6  6E02               	movwf	?__tdiv_to_l_+1,c
  4679  00DFE8  0E00               	movlw	0
  4680  00DFEA  6E03               	movwf	?__tdiv_to_l_+2,c
  4681  00DFEC  0E00               	movlw	0
  4682  00DFEE  6E04               	movwf	?__tdiv_to_l_+3,c
  4683  00DFF0  0012               	return	
  4684  00DFF2                     l3176:
  4685  00DFF2  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4686  00DFF6  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4687  00DFF8  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4688  00DFFA  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4689  00DFFC  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4690  00DFFE  E301               	bnc	u2971
  4691  00E000  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4692  00E002                     u2971:
  4693  00E002  5007               	movf	??__tdiv_to_l_,w,c
  4694  00E004  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4695  00E006  500E               	movf	__tdiv_to_l_@cntr,w,c
  4696  00E008  A4D8               	btfss	status,2,c
  4697  00E00A  D009               	goto	l3182
  4698  00E00C  0E00               	movlw	0
  4699  00E00E  6E01               	movwf	?__tdiv_to_l_,c
  4700  00E010  0E00               	movlw	0
  4701  00E012  6E02               	movwf	?__tdiv_to_l_+1,c
  4702  00E014  0E00               	movlw	0
  4703  00E016  6E03               	movwf	?__tdiv_to_l_+2,c
  4704  00E018  0E00               	movlw	0
  4705  00E01A  6E04               	movwf	?__tdiv_to_l_+3,c
  4706  00E01C  0012               	return	
  4707  00E01E                     l3182:
  4708  00E01E  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4709  00E020  0EFF               	movlw	255
  4710  00E022  1601               	andwf	__tdiv_to_l_@f1,f,c
  4711  00E024  0EFF               	movlw	255
  4712  00E026  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4713  00E028  0E00               	movlw	0
  4714  00E02A  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4715  00E02C  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4716  00E02E  0EFF               	movlw	255
  4717  00E030  1604               	andwf	__tdiv_to_l_@f2,f,c
  4718  00E032  0EFF               	movlw	255
  4719  00E034  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4720  00E036  0E00               	movlw	0
  4721  00E038  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4722  00E03A  0E00               	movlw	0
  4723  00E03C  6E0A               	movwf	__tdiv_to_l_@quot,c
  4724  00E03E  0E00               	movlw	0
  4725  00E040  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4726  00E042  0E00               	movlw	0
  4727  00E044  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4728  00E046  0E00               	movlw	0
  4729  00E048  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4730  00E04A  0E7F               	movlw	127
  4731  00E04C  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4732  00E04E  500E               	movf	__tdiv_to_l_@cntr,w,c
  4733  00E050  0F98               	addlw	152
  4734  00E052  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4735  00E054  0E18               	movlw	24
  4736  00E056  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4737  00E058                     l814:
  4738  00E058  90D8               	bcf	status,0,c
  4739  00E05A  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4740  00E05C  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4741  00E05E  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4742  00E060  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4743  00E062  5004               	movf	__tdiv_to_l_@f2,w,c
  4744  00E064  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4745  00E066  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4746  00E068  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4747  00E06A  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4748  00E06C  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4749  00E06E  A0D8               	btfss	status,0,c
  4750  00E070  D007               	goto	l815
  4751  00E072  5004               	movf	__tdiv_to_l_@f2,w,c
  4752  00E074  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4753  00E076  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4754  00E078  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4755  00E07A  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4756  00E07C  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4757  00E07E  800A               	bsf	__tdiv_to_l_@quot,0,c
  4758  00E080                     l815:
  4759  00E080  90D8               	bcf	status,0,c
  4760  00E082  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4761  00E084  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4762  00E086  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4763  00E088  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4764  00E08A  D7E6               	goto	l814
  4765  00E08C  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4766  00E08E  D016               	goto	l3216
  4767  00E090  500F               	movf	__tdiv_to_l_@exp1,w,c
  4768  00E092  0A80               	xorlw	128
  4769  00E094  0F97               	addlw	151
  4770  00E096  B0D8               	btfsc	status,0,c
  4771  00E098  D009               	goto	l3212
  4772  00E09A  0E00               	movlw	0
  4773  00E09C  6E01               	movwf	?__tdiv_to_l_,c
  4774  00E09E  0E00               	movlw	0
  4775  00E0A0  6E02               	movwf	?__tdiv_to_l_+1,c
  4776  00E0A2  0E00               	movlw	0
  4777  00E0A4  6E03               	movwf	?__tdiv_to_l_+2,c
  4778  00E0A6  0E00               	movlw	0
  4779  00E0A8  6E04               	movwf	?__tdiv_to_l_+3,c
  4780  00E0AA  0012               	return	
  4781  00E0AC                     l3212:
  4782  00E0AC  90D8               	bcf	status,0,c
  4783  00E0AE  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4784  00E0B0  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4785  00E0B2  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4786  00E0B4  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4787  00E0B6  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4788  00E0B8  D7F9               	goto	l3212
  4789  00E0BA  D015               	goto	l821
  4790  00E0BC                     l3216:
  4791  00E0BC  0E17               	movlw	23
  4792  00E0BE  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4793  00E0C0  D00F               	goto	l3224
  4794  00E0C2  0E00               	movlw	0
  4795  00E0C4  6E01               	movwf	?__tdiv_to_l_,c
  4796  00E0C6  0E00               	movlw	0
  4797  00E0C8  6E02               	movwf	?__tdiv_to_l_+1,c
  4798  00E0CA  0E00               	movlw	0
  4799  00E0CC  6E03               	movwf	?__tdiv_to_l_+2,c
  4800  00E0CE  0E00               	movlw	0
  4801  00E0D0  6E04               	movwf	?__tdiv_to_l_+3,c
  4802  00E0D2  0012               	return	
  4803  00E0D4                     l3222:
  4804  00E0D4  90D8               	bcf	status,0,c
  4805  00E0D6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4806  00E0D8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4807  00E0DA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4808  00E0DC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4809  00E0DE  060F               	decf	__tdiv_to_l_@exp1,f,c
  4810  00E0E0                     l3224:
  4811  00E0E0  500F               	movf	__tdiv_to_l_@exp1,w,c
  4812  00E0E2  A4D8               	btfss	status,2,c
  4813  00E0E4  D7F7               	goto	l3222
  4814  00E0E6                     l821:
  4815  00E0E6  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4816  00E0EA  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4817  00E0EE  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4818  00E0F2  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4819  00E0F6  0012               	return		;funcret
  4820  00E0F8                     __end_of__tdiv_to_l_:
  4821                           	opt stack 0
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           indf2	equ	0xFDF
  4831                           postinc2	equ	0xFDE
  4832                           postdec2	equ	0xFDD
  4833                           fsr2h	equ	0xFDA
  4834                           fsr2l	equ	0xFD9
  4835                           status	equ	0xFD8
  4836                           
  4837 ;; *************** function __div_to_l_ *****************
  4838 ;; Defined at:
  4839 ;;		line 60 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fldivl.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;  f1              3    0[COMRAM] unsigned long 
  4842 ;;  f2              3    3[COMRAM] unsigned long 
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;  quot            4    6[COMRAM] unsigned long 
  4845 ;;  exp1            1   11[COMRAM] unsigned char 
  4846 ;;  cntr            1   10[COMRAM] unsigned char 
  4847 ;; Return value:  Size  Location     Type
  4848 ;;                  4    0[COMRAM] unsigned long 
  4849 ;; Registers used:
  4850 ;;		wreg, status,2, status,0
  4851 ;; Tracked objects:
  4852 ;;		On entry : 0/0
  4853 ;;		On exit  : 0/0
  4854 ;;		Unchanged: 0/0
  4855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4856 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;Total ram usage:       12 bytes
  4861 ;; Hardware stack levels used:    1
  4862 ;; This function calls:
  4863 ;;		Nothing
  4864 ;; This function is called by:
  4865 ;;		_printf
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text10
  4870  00DE9E                     __ptext10:
  4871                           	opt stack 0
  4872  00DE9E                     __div_to_l_:
  4873                           	opt stack 29
  4874                           
  4875                           ;incstack = 0
  4876  00DE9E  3403               	rlcf	__div_to_l_@f1+2,w,c
  4877  00DEA0  3404               	rlcf	__div_to_l_@f1+3,w,c
  4878  00DEA2  6E0C               	movwf	__div_to_l_@exp1,c
  4879  00DEA4  500C               	movf	__div_to_l_@exp1,w,c
  4880  00DEA6  A4D8               	btfss	status,2,c
  4881  00DEA8  D009               	goto	l3232
  4882  00DEAA  0E00               	movlw	0
  4883  00DEAC  6E01               	movwf	?__div_to_l_,c
  4884  00DEAE  0E00               	movlw	0
  4885  00DEB0  6E02               	movwf	?__div_to_l_+1,c
  4886  00DEB2  0E00               	movlw	0
  4887  00DEB4  6E03               	movwf	?__div_to_l_+2,c
  4888  00DEB6  0E00               	movlw	0
  4889  00DEB8  6E04               	movwf	?__div_to_l_+3,c
  4890  00DEBA  0012               	return	
  4891  00DEBC                     l3232:
  4892  00DEBC  3406               	rlcf	__div_to_l_@f2+2,w,c
  4893  00DEBE  3407               	rlcf	__div_to_l_@f2+3,w,c
  4894  00DEC0  6E0B               	movwf	__div_to_l_@cntr,c
  4895  00DEC2  500B               	movf	__div_to_l_@cntr,w,c
  4896  00DEC4  A4D8               	btfss	status,2,c
  4897  00DEC6  D009               	goto	l3238
  4898  00DEC8  0E00               	movlw	0
  4899  00DECA  6E01               	movwf	?__div_to_l_,c
  4900  00DECC  0E00               	movlw	0
  4901  00DECE  6E02               	movwf	?__div_to_l_+1,c
  4902  00DED0  0E00               	movlw	0
  4903  00DED2  6E03               	movwf	?__div_to_l_+2,c
  4904  00DED4  0E00               	movlw	0
  4905  00DED6  6E04               	movwf	?__div_to_l_+3,c
  4906  00DED8  0012               	return	
  4907  00DEDA                     l3238:
  4908  00DEDA  8E03               	bsf	__div_to_l_@f1+2,7,c
  4909  00DEDC  0EFF               	movlw	255
  4910  00DEDE  1601               	andwf	__div_to_l_@f1,f,c
  4911  00DEE0  0EFF               	movlw	255
  4912  00DEE2  1602               	andwf	__div_to_l_@f1+1,f,c
  4913  00DEE4  0EFF               	movlw	255
  4914  00DEE6  1603               	andwf	__div_to_l_@f1+2,f,c
  4915  00DEE8  0E00               	movlw	0
  4916  00DEEA  1604               	andwf	__div_to_l_@f1+3,f,c
  4917  00DEEC  8E06               	bsf	__div_to_l_@f2+2,7,c
  4918  00DEEE  0EFF               	movlw	255
  4919  00DEF0  1604               	andwf	__div_to_l_@f2,f,c
  4920  00DEF2  0EFF               	movlw	255
  4921  00DEF4  1605               	andwf	__div_to_l_@f2+1,f,c
  4922  00DEF6  0EFF               	movlw	255
  4923  00DEF8  1606               	andwf	__div_to_l_@f2+2,f,c
  4924  00DEFA  0E00               	movlw	0
  4925  00DEFC  1607               	andwf	__div_to_l_@f2+3,f,c
  4926  00DEFE  0E00               	movlw	0
  4927  00DF00  6E07               	movwf	__div_to_l_@quot,c
  4928  00DF02  0E00               	movlw	0
  4929  00DF04  6E08               	movwf	__div_to_l_@quot+1,c
  4930  00DF06  0E00               	movlw	0
  4931  00DF08  6E09               	movwf	__div_to_l_@quot+2,c
  4932  00DF0A  0E00               	movlw	0
  4933  00DF0C  6E0A               	movwf	__div_to_l_@quot+3,c
  4934  00DF0E  0E7F               	movlw	127
  4935  00DF10  5E0C               	subwf	__div_to_l_@exp1,f,c
  4936  00DF12  500B               	movf	__div_to_l_@cntr,w,c
  4937  00DF14  0FA0               	addlw	160
  4938  00DF16  5E0C               	subwf	__div_to_l_@exp1,f,c
  4939  00DF18  0E20               	movlw	32
  4940  00DF1A  6E0B               	movwf	__div_to_l_@cntr,c
  4941  00DF1C                     l3252:
  4942  00DF1C  90D8               	bcf	status,0,c
  4943  00DF1E  3607               	rlcf	__div_to_l_@quot,f,c
  4944  00DF20  3608               	rlcf	__div_to_l_@quot+1,f,c
  4945  00DF22  3609               	rlcf	__div_to_l_@quot+2,f,c
  4946  00DF24  360A               	rlcf	__div_to_l_@quot+3,f,c
  4947  00DF26  5004               	movf	__div_to_l_@f2,w,c
  4948  00DF28  5C01               	subwf	__div_to_l_@f1,w,c
  4949  00DF2A  5005               	movf	__div_to_l_@f2+1,w,c
  4950  00DF2C  5802               	subwfb	__div_to_l_@f1+1,w,c
  4951  00DF2E  5006               	movf	__div_to_l_@f2+2,w,c
  4952  00DF30  5803               	subwfb	__div_to_l_@f1+2,w,c
  4953  00DF32  5007               	movf	__div_to_l_@f2+3,w,c
  4954  00DF34  5804               	subwfb	__div_to_l_@f1+3,w,c
  4955  00DF36  A0D8               	btfss	status,0,c
  4956  00DF38  D009               	goto	l3260
  4957  00DF3A  5004               	movf	__div_to_l_@f2,w,c
  4958  00DF3C  5E01               	subwf	__div_to_l_@f1,f,c
  4959  00DF3E  5005               	movf	__div_to_l_@f2+1,w,c
  4960  00DF40  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4961  00DF42  5006               	movf	__div_to_l_@f2+2,w,c
  4962  00DF44  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4963  00DF46  5007               	movf	__div_to_l_@f2+3,w,c
  4964  00DF48  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4965  00DF4A  8007               	bsf	__div_to_l_@quot,0,c
  4966  00DF4C                     l3260:
  4967  00DF4C  90D8               	bcf	status,0,c
  4968  00DF4E  3601               	rlcf	__div_to_l_@f1,f,c
  4969  00DF50  3602               	rlcf	__div_to_l_@f1+1,f,c
  4970  00DF52  3603               	rlcf	__div_to_l_@f1+2,f,c
  4971  00DF54  3604               	rlcf	__div_to_l_@f1+3,f,c
  4972  00DF56  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4973  00DF58  D7E1               	goto	l3252
  4974  00DF5A  AE0C               	btfss	__div_to_l_@exp1,7,c
  4975  00DF5C  D016               	goto	l3276
  4976  00DF5E  500C               	movf	__div_to_l_@exp1,w,c
  4977  00DF60  0A80               	xorlw	128
  4978  00DF62  0F9F               	addlw	159
  4979  00DF64  B0D8               	btfsc	status,0,c
  4980  00DF66  D009               	goto	l3272
  4981  00DF68  0E00               	movlw	0
  4982  00DF6A  6E01               	movwf	?__div_to_l_,c
  4983  00DF6C  0E00               	movlw	0
  4984  00DF6E  6E02               	movwf	?__div_to_l_+1,c
  4985  00DF70  0E00               	movlw	0
  4986  00DF72  6E03               	movwf	?__div_to_l_+2,c
  4987  00DF74  0E00               	movlw	0
  4988  00DF76  6E04               	movwf	?__div_to_l_+3,c
  4989  00DF78  0012               	return	
  4990  00DF7A                     l3272:
  4991  00DF7A  90D8               	bcf	status,0,c
  4992  00DF7C  320A               	rrcf	__div_to_l_@quot+3,f,c
  4993  00DF7E  3209               	rrcf	__div_to_l_@quot+2,f,c
  4994  00DF80  3208               	rrcf	__div_to_l_@quot+1,f,c
  4995  00DF82  3207               	rrcf	__div_to_l_@quot,f,c
  4996  00DF84  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4997  00DF86  D7F9               	goto	l3272
  4998  00DF88  D015               	goto	l717
  4999  00DF8A                     l3276:
  5000  00DF8A  0E1F               	movlw	31
  5001  00DF8C  640C               	cpfsgt	__div_to_l_@exp1,c
  5002  00DF8E  D00F               	goto	l3284
  5003  00DF90  0E00               	movlw	0
  5004  00DF92  6E01               	movwf	?__div_to_l_,c
  5005  00DF94  0E00               	movlw	0
  5006  00DF96  6E02               	movwf	?__div_to_l_+1,c
  5007  00DF98  0E00               	movlw	0
  5008  00DF9A  6E03               	movwf	?__div_to_l_+2,c
  5009  00DF9C  0E00               	movlw	0
  5010  00DF9E  6E04               	movwf	?__div_to_l_+3,c
  5011  00DFA0  0012               	return	
  5012  00DFA2                     l3282:
  5013  00DFA2  90D8               	bcf	status,0,c
  5014  00DFA4  3607               	rlcf	__div_to_l_@quot,f,c
  5015  00DFA6  3608               	rlcf	__div_to_l_@quot+1,f,c
  5016  00DFA8  3609               	rlcf	__div_to_l_@quot+2,f,c
  5017  00DFAA  360A               	rlcf	__div_to_l_@quot+3,f,c
  5018  00DFAC  060C               	decf	__div_to_l_@exp1,f,c
  5019  00DFAE                     l3284:
  5020  00DFAE  500C               	movf	__div_to_l_@exp1,w,c
  5021  00DFB0  A4D8               	btfss	status,2,c
  5022  00DFB2  D7F7               	goto	l3282
  5023  00DFB4                     l717:
  5024  00DFB4  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  5025  00DFB8  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5026  00DFBC  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5027  00DFC0  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5028  00DFC4  0012               	return		;funcret
  5029  00DFC6                     __end_of__div_to_l_:
  5030                           	opt stack 0
  5031                           tblptru	equ	0xFF8
  5032                           tblptrh	equ	0xFF7
  5033                           tblptrl	equ	0xFF6
  5034                           tablat	equ	0xFF5
  5035                           prodh	equ	0xFF4
  5036                           prodl	equ	0xFF3
  5037                           postinc0	equ	0xFEE
  5038                           wreg	equ	0xFE8
  5039                           indf2	equ	0xFDF
  5040                           postinc2	equ	0xFDE
  5041                           postdec2	equ	0xFDD
  5042                           fsr2h	equ	0xFDA
  5043                           fsr2l	equ	0xFD9
  5044                           status	equ	0xFD8
  5045                           
  5046 ;; *************** function ___llmod *****************
  5047 ;; Defined at:
  5048 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  dividend        4   13[COMRAM] unsigned long 
  5051 ;;  divisor         4   17[COMRAM] unsigned long 
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;  counter         1   21[COMRAM] unsigned char 
  5054 ;; Return value:  Size  Location     Type
  5055 ;;                  4   13[COMRAM] unsigned long 
  5056 ;; Registers used:
  5057 ;;		wreg, status,2, status,0
  5058 ;; Tracked objects:
  5059 ;;		On entry : 0/0
  5060 ;;		On exit  : 0/0
  5061 ;;		Unchanged: 0/0
  5062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5063 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;Total ram usage:        9 bytes
  5068 ;; Hardware stack levels used:    1
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_printf
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text11
  5077  00D7CE                     __ptext11:
  5078                           	opt stack 0
  5079  00D7CE                     ___llmod:
  5080                           	opt stack 29
  5081                           
  5082                           ;incstack = 0
  5083  00D7CE  5012               	movf	___llmod@divisor,w,c
  5084  00D7D0  1013               	iorwf	___llmod@divisor+1,w,c
  5085  00D7D2  1014               	iorwf	___llmod@divisor+2,w,c
  5086  00D7D4  1015               	iorwf	___llmod@divisor+3,w,c
  5087  00D7D6  B4D8               	btfsc	status,2,c
  5088  00D7D8  D024               	goto	l906
  5089  00D7DA  0E01               	movlw	1
  5090  00D7DC  6E16               	movwf	___llmod@counter,c
  5091  00D7DE  D006               	goto	l3436
  5092  00D7E0                     l3434:
  5093  00D7E0  90D8               	bcf	status,0,c
  5094  00D7E2  3612               	rlcf	___llmod@divisor,f,c
  5095  00D7E4  3613               	rlcf	___llmod@divisor+1,f,c
  5096  00D7E6  3614               	rlcf	___llmod@divisor+2,f,c
  5097  00D7E8  3615               	rlcf	___llmod@divisor+3,f,c
  5098  00D7EA  2A16               	incf	___llmod@counter,f,c
  5099  00D7EC                     l3436:
  5100  00D7EC  AE15               	btfss	___llmod@divisor+3,7,c
  5101  00D7EE  D7F8               	goto	l3434
  5102  00D7F0                     l3438:
  5103  00D7F0  5012               	movf	___llmod@divisor,w,c
  5104  00D7F2  5C0E               	subwf	___llmod@dividend,w,c
  5105  00D7F4  5013               	movf	___llmod@divisor+1,w,c
  5106  00D7F6  580F               	subwfb	___llmod@dividend+1,w,c
  5107  00D7F8  5014               	movf	___llmod@divisor+2,w,c
  5108  00D7FA  5810               	subwfb	___llmod@dividend+2,w,c
  5109  00D7FC  5015               	movf	___llmod@divisor+3,w,c
  5110  00D7FE  5811               	subwfb	___llmod@dividend+3,w,c
  5111  00D800  A0D8               	btfss	status,0,c
  5112  00D802  D008               	goto	l3442
  5113  00D804  5012               	movf	___llmod@divisor,w,c
  5114  00D806  5E0E               	subwf	___llmod@dividend,f,c
  5115  00D808  5013               	movf	___llmod@divisor+1,w,c
  5116  00D80A  5A0F               	subwfb	___llmod@dividend+1,f,c
  5117  00D80C  5014               	movf	___llmod@divisor+2,w,c
  5118  00D80E  5A10               	subwfb	___llmod@dividend+2,f,c
  5119  00D810  5015               	movf	___llmod@divisor+3,w,c
  5120  00D812  5A11               	subwfb	___llmod@dividend+3,f,c
  5121  00D814                     l3442:
  5122  00D814  90D8               	bcf	status,0,c
  5123  00D816  3215               	rrcf	___llmod@divisor+3,f,c
  5124  00D818  3214               	rrcf	___llmod@divisor+2,f,c
  5125  00D81A  3213               	rrcf	___llmod@divisor+1,f,c
  5126  00D81C  3212               	rrcf	___llmod@divisor,f,c
  5127  00D81E  2E16               	decfsz	___llmod@counter,f,c
  5128  00D820  D7E7               	goto	l3438
  5129  00D822                     l906:
  5130  00D822  C00E  F00E         	movff	___llmod@dividend,?___llmod
  5131  00D826  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  5132  00D82A  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  5133  00D82E  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  5134  00D832  0012               	return		;funcret
  5135  00D834                     __end_of___llmod:
  5136                           	opt stack 0
  5137                           tblptru	equ	0xFF8
  5138                           tblptrh	equ	0xFF7
  5139                           tblptrl	equ	0xFF6
  5140                           tablat	equ	0xFF5
  5141                           prodh	equ	0xFF4
  5142                           prodl	equ	0xFF3
  5143                           postinc0	equ	0xFEE
  5144                           wreg	equ	0xFE8
  5145                           indf2	equ	0xFDF
  5146                           postinc2	equ	0xFDE
  5147                           postdec2	equ	0xFDD
  5148                           fsr2h	equ	0xFDA
  5149                           fsr2l	equ	0xFD9
  5150                           status	equ	0xFD8
  5151                           
  5152 ;; *************** function ___lldiv *****************
  5153 ;; Defined at:
  5154 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  dividend        4    0[COMRAM] unsigned long 
  5157 ;;  divisor         4    4[COMRAM] unsigned long 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  quotient        4    8[COMRAM] unsigned long 
  5160 ;;  counter         1   12[COMRAM] unsigned char 
  5161 ;; Return value:  Size  Location     Type
  5162 ;;                  4    0[COMRAM] unsigned long 
  5163 ;; Registers used:
  5164 ;;		wreg, status,2, status,0
  5165 ;; Tracked objects:
  5166 ;;		On entry : 0/0
  5167 ;;		On exit  : 0/0
  5168 ;;		Unchanged: 0/0
  5169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5170 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5171 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;Total ram usage:       13 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; This function calls:
  5177 ;;		Nothing
  5178 ;; This function is called by:
  5179 ;;		_printf
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text12
  5184  00D98C                     __ptext12:
  5185                           	opt stack 0
  5186  00D98C                     ___lldiv:
  5187                           	opt stack 29
  5188                           
  5189                           ;incstack = 0
  5190  00D98C  0E00               	movlw	0
  5191  00D98E  6E09               	movwf	___lldiv@quotient,c
  5192  00D990  0E00               	movlw	0
  5193  00D992  6E0A               	movwf	___lldiv@quotient+1,c
  5194  00D994  0E00               	movlw	0
  5195  00D996  6E0B               	movwf	___lldiv@quotient+2,c
  5196  00D998  0E00               	movlw	0
  5197  00D99A  6E0C               	movwf	___lldiv@quotient+3,c
  5198  00D99C  5005               	movf	___lldiv@divisor,w,c
  5199  00D99E  1006               	iorwf	___lldiv@divisor+1,w,c
  5200  00D9A0  1007               	iorwf	___lldiv@divisor+2,w,c
  5201  00D9A2  1008               	iorwf	___lldiv@divisor+3,w,c
  5202  00D9A4  B4D8               	btfsc	status,2,c
  5203  00D9A6  D02A               	goto	l896
  5204  00D9A8  0E01               	movlw	1
  5205  00D9AA  6E0D               	movwf	___lldiv@counter,c
  5206  00D9AC  D006               	goto	l3416
  5207  00D9AE                     l3414:
  5208  00D9AE  90D8               	bcf	status,0,c
  5209  00D9B0  3605               	rlcf	___lldiv@divisor,f,c
  5210  00D9B2  3606               	rlcf	___lldiv@divisor+1,f,c
  5211  00D9B4  3607               	rlcf	___lldiv@divisor+2,f,c
  5212  00D9B6  3608               	rlcf	___lldiv@divisor+3,f,c
  5213  00D9B8  2A0D               	incf	___lldiv@counter,f,c
  5214  00D9BA                     l3416:
  5215  00D9BA  AE08               	btfss	___lldiv@divisor+3,7,c
  5216  00D9BC  D7F8               	goto	l3414
  5217  00D9BE                     l3418:
  5218  00D9BE  90D8               	bcf	status,0,c
  5219  00D9C0  3609               	rlcf	___lldiv@quotient,f,c
  5220  00D9C2  360A               	rlcf	___lldiv@quotient+1,f,c
  5221  00D9C4  360B               	rlcf	___lldiv@quotient+2,f,c
  5222  00D9C6  360C               	rlcf	___lldiv@quotient+3,f,c
  5223  00D9C8  5005               	movf	___lldiv@divisor,w,c
  5224  00D9CA  5C01               	subwf	___lldiv@dividend,w,c
  5225  00D9CC  5006               	movf	___lldiv@divisor+1,w,c
  5226  00D9CE  5802               	subwfb	___lldiv@dividend+1,w,c
  5227  00D9D0  5007               	movf	___lldiv@divisor+2,w,c
  5228  00D9D2  5803               	subwfb	___lldiv@dividend+2,w,c
  5229  00D9D4  5008               	movf	___lldiv@divisor+3,w,c
  5230  00D9D6  5804               	subwfb	___lldiv@dividend+3,w,c
  5231  00D9D8  A0D8               	btfss	status,0,c
  5232  00D9DA  D009               	goto	l3426
  5233  00D9DC  5005               	movf	___lldiv@divisor,w,c
  5234  00D9DE  5E01               	subwf	___lldiv@dividend,f,c
  5235  00D9E0  5006               	movf	___lldiv@divisor+1,w,c
  5236  00D9E2  5A02               	subwfb	___lldiv@dividend+1,f,c
  5237  00D9E4  5007               	movf	___lldiv@divisor+2,w,c
  5238  00D9E6  5A03               	subwfb	___lldiv@dividend+2,f,c
  5239  00D9E8  5008               	movf	___lldiv@divisor+3,w,c
  5240  00D9EA  5A04               	subwfb	___lldiv@dividend+3,f,c
  5241  00D9EC  8009               	bsf	___lldiv@quotient,0,c
  5242  00D9EE                     l3426:
  5243  00D9EE  90D8               	bcf	status,0,c
  5244  00D9F0  3208               	rrcf	___lldiv@divisor+3,f,c
  5245  00D9F2  3207               	rrcf	___lldiv@divisor+2,f,c
  5246  00D9F4  3206               	rrcf	___lldiv@divisor+1,f,c
  5247  00D9F6  3205               	rrcf	___lldiv@divisor,f,c
  5248  00D9F8  2E0D               	decfsz	___lldiv@counter,f,c
  5249  00D9FA  D7E1               	goto	l3418
  5250  00D9FC                     l896:
  5251  00D9FC  C009  F001         	movff	___lldiv@quotient,?___lldiv
  5252  00DA00  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  5253  00DA04  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  5254  00DA08  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  5255  00DA0C  0012               	return		;funcret
  5256  00DA0E                     __end_of___lldiv:
  5257                           	opt stack 0
  5258                           tblptru	equ	0xFF8
  5259                           tblptrh	equ	0xFF7
  5260                           tblptrl	equ	0xFF6
  5261                           tablat	equ	0xFF5
  5262                           prodh	equ	0xFF4
  5263                           prodl	equ	0xFF3
  5264                           postinc0	equ	0xFEE
  5265                           wreg	equ	0xFE8
  5266                           indf2	equ	0xFDF
  5267                           postinc2	equ	0xFDE
  5268                           postdec2	equ	0xFDD
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function ___ftsub *****************
  5274 ;; Defined at:
  5275 ;;		line 20 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftsub.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;  f1              3   57[COMRAM] float 
  5278 ;;  f2              3   60[COMRAM] float 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;		None
  5281 ;; Return value:  Size  Location     Type
  5282 ;;                  3   57[COMRAM] float 
  5283 ;; Registers used:
  5284 ;;		wreg, status,2, status,0, cstack
  5285 ;; Tracked objects:
  5286 ;;		On entry : 0/0
  5287 ;;		On exit  : 0/0
  5288 ;;		Unchanged: 0/0
  5289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5290 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;Total ram usage:        6 bytes
  5295 ;; Hardware stack levels used:    1
  5296 ;; Hardware stack levels required when called:    2
  5297 ;; This function calls:
  5298 ;;		___ftadd
  5299 ;; This function is called by:
  5300 ;;		_printf
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text13
  5305  00D732                     __ptext13:
  5306                           	opt stack 0
  5307  00D732                     ___ftsub:
  5308                           	opt stack 27
  5309                           
  5310                           ;incstack = 0
  5311  00D732  503D               	movf	___ftsub@f2,w,c
  5312  00D734  103E               	iorwf	___ftsub@f2+1,w,c
  5313  00D736  103F               	iorwf	___ftsub@f2+2,w,c
  5314  00D738  B4D8               	btfsc	status,2,c
  5315  00D73A  D006               	goto	l3336
  5316  00D73C  0E00               	movlw	0
  5317  00D73E  1A3D               	xorwf	___ftsub@f2,f,c
  5318  00D740  0E00               	movlw	0
  5319  00D742  1A3E               	xorwf	___ftsub@f2+1,f,c
  5320  00D744  0E80               	movlw	128
  5321  00D746  1A3F               	xorwf	___ftsub@f2+2,f,c
  5322  00D748                     l3336:
  5323  00D748  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5324  00D74C  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5325  00D750  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5326  00D754  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5327  00D758  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5328  00D75C  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5329  00D760  EC7C  F070         	call	___ftadd	;wreg free
  5330  00D764  C02E  F03A         	movff	?___ftadd,?___ftsub
  5331  00D768  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5332  00D76C  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5333  00D770  0012               	return	
  5334  00D772                     __end_of___ftsub:
  5335                           	opt stack 0
  5336                           tblptru	equ	0xFF8
  5337                           tblptrh	equ	0xFF7
  5338                           tblptrl	equ	0xFF6
  5339                           tablat	equ	0xFF5
  5340                           prodh	equ	0xFF4
  5341                           prodl	equ	0xFF3
  5342                           postinc0	equ	0xFEE
  5343                           wreg	equ	0xFE8
  5344                           indf2	equ	0xFDF
  5345                           postinc2	equ	0xFDE
  5346                           postdec2	equ	0xFDD
  5347                           fsr2h	equ	0xFDA
  5348                           fsr2l	equ	0xFD9
  5349                           status	equ	0xFD8
  5350                           
  5351 ;; *************** function ___ftadd *****************
  5352 ;; Defined at:
  5353 ;;		line 86 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftadd.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;  f1              3   45[COMRAM] float 
  5356 ;;  f2              3   48[COMRAM] float 
  5357 ;; Auto vars:     Size  Location     Type
  5358 ;;  exp1            1   56[COMRAM] unsigned char 
  5359 ;;  exp2            1   55[COMRAM] unsigned char 
  5360 ;;  sign            1   54[COMRAM] unsigned char 
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  3   45[COMRAM] float 
  5363 ;; Registers used:
  5364 ;;		wreg, status,2, status,0, cstack
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5370 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5371 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5372 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5373 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;Total ram usage:       12 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:    1
  5377 ;; This function calls:
  5378 ;;		___ftpack
  5379 ;; This function is called by:
  5380 ;;		_printf
  5381 ;;		___ftsub
  5382 ;; This function uses a non-reentrant model
  5383 ;;
  5384                           
  5385                           	psect	text14
  5386  00E0F8                     __ptext14:
  5387                           	opt stack 0
  5388  00E0F8                     ___ftadd:
  5389                           	opt stack 27
  5390                           
  5391                           ;incstack = 0
  5392  00E0F8  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5393  00E0FC  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5394  00E0FE  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5395  00E100  342F               	rlcf	___ftadd@f1+1,w,c
  5396  00E102  3634               	rlcf	??___ftadd& (0+255),f,c
  5397  00E104  E301               	bnc	u2471
  5398  00E106  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5399  00E108                     u2471:
  5400  00E108  5034               	movf	??___ftadd,w,c
  5401  00E10A  6E39               	movwf	___ftadd@exp1,c
  5402  00E10C  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5403  00E110  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5404  00E112  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5405  00E114  3432               	rlcf	___ftadd@f2+1,w,c
  5406  00E116  3634               	rlcf	??___ftadd& (0+255),f,c
  5407  00E118  E301               	bnc	u2481
  5408  00E11A  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5409  00E11C                     u2481:
  5410  00E11C  5034               	movf	??___ftadd,w,c
  5411  00E11E  6E38               	movwf	___ftadd@exp2,c
  5412  00E120  5039               	movf	___ftadd@exp1,w,c
  5413  00E122  B4D8               	btfsc	status,2,c
  5414  00E124  D00B               	goto	l772
  5415  00E126  5038               	movf	___ftadd@exp2,w,c
  5416  00E128  5C39               	subwf	___ftadd@exp1,w,c
  5417  00E12A  B0D8               	btfsc	status,0,c
  5418  00E12C  D00E               	goto	l2882
  5419  00E12E  5039               	movf	___ftadd@exp1,w,c
  5420  00E130  0800               	sublw	0
  5421  00E132  2438               	addwf	___ftadd@exp2,w,c
  5422  00E134  6E34               	movwf	??___ftadd& (0+255),c
  5423  00E136  0E18               	movlw	24
  5424  00E138  6434               	cpfsgt	??___ftadd,c
  5425  00E13A  D007               	goto	l2882
  5426  00E13C                     l772:
  5427  00E13C  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5428  00E140  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5429  00E144  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5430  00E148  0012               	return	
  5431  00E14A                     l2882:
  5432  00E14A  5038               	movf	___ftadd@exp2,w,c
  5433  00E14C  B4D8               	btfsc	status,2,c
  5434  00E14E  D00B               	goto	l776
  5435  00E150  5039               	movf	___ftadd@exp1,w,c
  5436  00E152  5C38               	subwf	___ftadd@exp2,w,c
  5437  00E154  B0D8               	btfsc	status,0,c
  5438  00E156  D00E               	goto	l2888
  5439  00E158  5038               	movf	___ftadd@exp2,w,c
  5440  00E15A  0800               	sublw	0
  5441  00E15C  2439               	addwf	___ftadd@exp1,w,c
  5442  00E15E  6E34               	movwf	??___ftadd& (0+255),c
  5443  00E160  0E18               	movlw	24
  5444  00E162  6434               	cpfsgt	??___ftadd,c
  5445  00E164  D007               	goto	l2888
  5446  00E166                     l776:
  5447  00E166  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5448  00E16A  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5449  00E16E  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5450  00E172  0012               	return	
  5451  00E174                     l2888:
  5452  00E174  0E06               	movlw	6
  5453  00E176  6E37               	movwf	___ftadd@sign,c
  5454  00E178  BE30               	btfsc	___ftadd@f1+2,7,c
  5455  00E17A  8E37               	bsf	___ftadd@sign,7,c
  5456  00E17C  BE33               	btfsc	___ftadd@f2+2,7,c
  5457  00E17E  8C37               	bsf	___ftadd@sign,6,c
  5458  00E180  8E2F               	bsf	___ftadd@f1+1,7,c
  5459  00E182  0EFF               	movlw	255
  5460  00E184  162E               	andwf	___ftadd@f1,f,c
  5461  00E186  0EFF               	movlw	255
  5462  00E188  162F               	andwf	___ftadd@f1+1,f,c
  5463  00E18A  0E00               	movlw	0
  5464  00E18C  1630               	andwf	___ftadd@f1+2,f,c
  5465  00E18E  8E32               	bsf	___ftadd@f2+1,7,c
  5466  00E190  0EFF               	movlw	255
  5467  00E192  1631               	andwf	___ftadd@f2,f,c
  5468  00E194  0EFF               	movlw	255
  5469  00E196  1632               	andwf	___ftadd@f2+1,f,c
  5470  00E198  0E00               	movlw	0
  5471  00E19A  1633               	andwf	___ftadd@f2+2,f,c
  5472  00E19C  5038               	movf	___ftadd@exp2,w,c
  5473  00E19E  5C39               	subwf	___ftadd@exp1,w,c
  5474  00E1A0  B0D8               	btfsc	status,0,c
  5475  00E1A2  D01B               	goto	l2914
  5476  00E1A4                     l2904:
  5477  00E1A4  90D8               	bcf	status,0,c
  5478  00E1A6  3631               	rlcf	___ftadd@f2,f,c
  5479  00E1A8  3632               	rlcf	___ftadd@f2+1,f,c
  5480  00E1AA  3633               	rlcf	___ftadd@f2+2,f,c
  5481  00E1AC  0638               	decf	___ftadd@exp2,f,c
  5482  00E1AE  5039               	movf	___ftadd@exp1,w,c
  5483  00E1B0  1838               	xorwf	___ftadd@exp2,w,c
  5484  00E1B2  B4D8               	btfsc	status,2,c
  5485  00E1B4  D00D               	goto	l2912
  5486  00E1B6  0637               	decf	___ftadd@sign,f,c
  5487  00E1B8  C037  F034         	movff	___ftadd@sign,??___ftadd
  5488  00E1BC  0E07               	movlw	7
  5489  00E1BE  1634               	andwf	??___ftadd,f,c
  5490  00E1C0  B4D8               	btfsc	status,2,c
  5491  00E1C2  D006               	goto	l2912
  5492  00E1C4  D7EF               	goto	l2904
  5493  00E1C6                     l2910:
  5494  00E1C6  90D8               	bcf	status,0,c
  5495  00E1C8  3230               	rrcf	___ftadd@f1+2,f,c
  5496  00E1CA  322F               	rrcf	___ftadd@f1+1,f,c
  5497  00E1CC  322E               	rrcf	___ftadd@f1,f,c
  5498  00E1CE  2A39               	incf	___ftadd@exp1,f,c
  5499  00E1D0                     l2912:
  5500  00E1D0  5038               	movf	___ftadd@exp2,w,c
  5501  00E1D2  1839               	xorwf	___ftadd@exp1,w,c
  5502  00E1D4  B4D8               	btfsc	status,2,c
  5503  00E1D6  D01F               	goto	l787
  5504  00E1D8  D7F6               	goto	l2910
  5505  00E1DA                     l2914:
  5506  00E1DA  5039               	movf	___ftadd@exp1,w,c
  5507  00E1DC  5C38               	subwf	___ftadd@exp2,w,c
  5508  00E1DE  B0D8               	btfsc	status,0,c
  5509  00E1E0  D01A               	goto	l787
  5510  00E1E2                     l2916:
  5511  00E1E2  90D8               	bcf	status,0,c
  5512  00E1E4  362E               	rlcf	___ftadd@f1,f,c
  5513  00E1E6  362F               	rlcf	___ftadd@f1+1,f,c
  5514  00E1E8  3630               	rlcf	___ftadd@f1+2,f,c
  5515  00E1EA  0639               	decf	___ftadd@exp1,f,c
  5516  00E1EC  5039               	movf	___ftadd@exp1,w,c
  5517  00E1EE  1838               	xorwf	___ftadd@exp2,w,c
  5518  00E1F0  B4D8               	btfsc	status,2,c
  5519  00E1F2  D00D               	goto	l2924
  5520  00E1F4  0637               	decf	___ftadd@sign,f,c
  5521  00E1F6  C037  F034         	movff	___ftadd@sign,??___ftadd
  5522  00E1FA  0E07               	movlw	7
  5523  00E1FC  1634               	andwf	??___ftadd,f,c
  5524  00E1FE  B4D8               	btfsc	status,2,c
  5525  00E200  D006               	goto	l2924
  5526  00E202  D7EF               	goto	l2916
  5527  00E204                     l2922:
  5528  00E204  90D8               	bcf	status,0,c
  5529  00E206  3233               	rrcf	___ftadd@f2+2,f,c
  5530  00E208  3232               	rrcf	___ftadd@f2+1,f,c
  5531  00E20A  3231               	rrcf	___ftadd@f2,f,c
  5532  00E20C  2A38               	incf	___ftadd@exp2,f,c
  5533  00E20E                     l2924:
  5534  00E20E  5038               	movf	___ftadd@exp2,w,c
  5535  00E210  1839               	xorwf	___ftadd@exp1,w,c
  5536  00E212  A4D8               	btfss	status,2,c
  5537  00E214  D7F7               	goto	l2922
  5538  00E216                     l787:
  5539  00E216  AE37               	btfss	___ftadd@sign,7,c
  5540  00E218  D00C               	goto	l796
  5541  00E21A  0EFF               	movlw	255
  5542  00E21C  1A2E               	xorwf	___ftadd@f1,f,c
  5543  00E21E  0EFF               	movlw	255
  5544  00E220  1A2F               	xorwf	___ftadd@f1+1,f,c
  5545  00E222  0EFF               	movlw	255
  5546  00E224  1A30               	xorwf	___ftadd@f1+2,f,c
  5547  00E226  0E01               	movlw	1
  5548  00E228  262E               	addwf	___ftadd@f1,f,c
  5549  00E22A  0E00               	movlw	0
  5550  00E22C  222F               	addwfc	___ftadd@f1+1,f,c
  5551  00E22E  0E00               	movlw	0
  5552  00E230  2230               	addwfc	___ftadd@f1+2,f,c
  5553  00E232                     l796:
  5554  00E232  AC37               	btfss	___ftadd@sign,6,c
  5555  00E234  D00C               	goto	l2930
  5556  00E236  0EFF               	movlw	255
  5557  00E238  1A31               	xorwf	___ftadd@f2,f,c
  5558  00E23A  0EFF               	movlw	255
  5559  00E23C  1A32               	xorwf	___ftadd@f2+1,f,c
  5560  00E23E  0EFF               	movlw	255
  5561  00E240  1A33               	xorwf	___ftadd@f2+2,f,c
  5562  00E242  0E01               	movlw	1
  5563  00E244  2631               	addwf	___ftadd@f2,f,c
  5564  00E246  0E00               	movlw	0
  5565  00E248  2232               	addwfc	___ftadd@f2+1,f,c
  5566  00E24A  0E00               	movlw	0
  5567  00E24C  2233               	addwfc	___ftadd@f2+2,f,c
  5568  00E24E                     l2930:
  5569  00E24E  0E00               	movlw	0
  5570  00E250  6E37               	movwf	___ftadd@sign,c
  5571  00E252  502E               	movf	___ftadd@f1,w,c
  5572  00E254  2631               	addwf	___ftadd@f2,f,c
  5573  00E256  502F               	movf	___ftadd@f1+1,w,c
  5574  00E258  2232               	addwfc	___ftadd@f2+1,f,c
  5575  00E25A  5030               	movf	___ftadd@f1+2,w,c
  5576  00E25C  2233               	addwfc	___ftadd@f2+2,f,c
  5577  00E25E  AE33               	btfss	___ftadd@f2+2,7,c
  5578  00E260  D00E               	goto	l2940
  5579  00E262  0EFF               	movlw	255
  5580  00E264  1A31               	xorwf	___ftadd@f2,f,c
  5581  00E266  0EFF               	movlw	255
  5582  00E268  1A32               	xorwf	___ftadd@f2+1,f,c
  5583  00E26A  0EFF               	movlw	255
  5584  00E26C  1A33               	xorwf	___ftadd@f2+2,f,c
  5585  00E26E  0E01               	movlw	1
  5586  00E270  2631               	addwf	___ftadd@f2,f,c
  5587  00E272  0E00               	movlw	0
  5588  00E274  2232               	addwfc	___ftadd@f2+1,f,c
  5589  00E276  0E00               	movlw	0
  5590  00E278  2233               	addwfc	___ftadd@f2+2,f,c
  5591  00E27A  0E01               	movlw	1
  5592  00E27C  6E37               	movwf	___ftadd@sign,c
  5593  00E27E                     l2940:
  5594  00E27E  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5595  00E282  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5596  00E286  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5597  00E28A  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5598  00E28E  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5599  00E292  EC91  F06D         	call	___ftpack	;wreg free
  5600  00E296  C001  F02E         	movff	?___ftpack,?___ftadd
  5601  00E29A  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5602  00E29E  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5603  00E2A2  0012               	return	
  5604  00E2A4                     __end_of___ftadd:
  5605                           	opt stack 0
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           postinc0	equ	0xFEE
  5613                           wreg	equ	0xFE8
  5614                           indf2	equ	0xFDF
  5615                           postinc2	equ	0xFDE
  5616                           postdec2	equ	0xFDD
  5617                           fsr2h	equ	0xFDA
  5618                           fsr2l	equ	0xFD9
  5619                           status	equ	0xFD8
  5620                           
  5621 ;; *************** function ___ftneg *****************
  5622 ;; Defined at:
  5623 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftneg.c"
  5624 ;; Parameters:    Size  Location     Type
  5625 ;;  f1              3    0[COMRAM] float 
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;		None
  5628 ;; Return value:  Size  Location     Type
  5629 ;;                  3    0[COMRAM] float 
  5630 ;; Registers used:
  5631 ;;		wreg, status,2, status,0
  5632 ;; Tracked objects:
  5633 ;;		On entry : 0/0
  5634 ;;		On exit  : 0/0
  5635 ;;		Unchanged: 0/0
  5636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5637 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5641 ;;Total ram usage:        3 bytes
  5642 ;; Hardware stack levels used:    1
  5643 ;; This function calls:
  5644 ;;		Nothing
  5645 ;; This function is called by:
  5646 ;;		_printf
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           	psect	text15
  5651  00D64C                     __ptext15:
  5652                           	opt stack 0
  5653  00D64C                     ___ftneg:
  5654                           	opt stack 29
  5655                           
  5656                           ;incstack = 0
  5657  00D64C  5001               	movf	___ftneg@f1,w,c
  5658  00D64E  1002               	iorwf	___ftneg@f1+1,w,c
  5659  00D650  1003               	iorwf	___ftneg@f1+2,w,c
  5660  00D652  B4D8               	btfsc	status,2,c
  5661  00D654  D006               	goto	l846
  5662  00D656  0E00               	movlw	0
  5663  00D658  1A01               	xorwf	___ftneg@f1,f,c
  5664  00D65A  0E00               	movlw	0
  5665  00D65C  1A02               	xorwf	___ftneg@f1+1,f,c
  5666  00D65E  0E80               	movlw	128
  5667  00D660  1A03               	xorwf	___ftneg@f1+2,f,c
  5668  00D662                     l846:
  5669  00D662  C001  F001         	movff	___ftneg@f1,?___ftneg
  5670  00D666  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5671  00D66A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5672  00D66E  0012               	return		;funcret
  5673  00D670                     __end_of___ftneg:
  5674                           	opt stack 0
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           prodh	equ	0xFF4
  5680                           prodl	equ	0xFF3
  5681                           postinc0	equ	0xFEE
  5682                           wreg	equ	0xFE8
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           postdec2	equ	0xFDD
  5686                           fsr2h	equ	0xFDA
  5687                           fsr2l	equ	0xFD9
  5688                           status	equ	0xFD8
  5689                           
  5690 ;; *************** function ___ftge *****************
  5691 ;; Defined at:
  5692 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftge.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  ff1             3    0[COMRAM] float 
  5695 ;;  ff2             3    3[COMRAM] float 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;		None
  5698 ;; Return value:  Size  Location     Type
  5699 ;;		None               void
  5700 ;; Registers used:
  5701 ;;		wreg, status,2, status,0
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5707 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5710 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5711 ;;Total ram usage:        9 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; This function calls:
  5714 ;;		Nothing
  5715 ;; This function is called by:
  5716 ;;		_printf
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           	psect	text16
  5721  00DA92                     __ptext16:
  5722                           	opt stack 0
  5723  00DA92                     ___ftge:
  5724                           	opt stack 29
  5725                           
  5726                           ;incstack = 0
  5727  00DA92  AE03               	btfss	___ftge@ff1+2,7,c
  5728  00DA94  D016               	goto	l3344
  5729  00DA96  C001  F007         	movff	___ftge@ff1,??___ftge
  5730  00DA9A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5731  00DA9E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5732  00DAA2  1E07               	comf	??___ftge,f,c
  5733  00DAA4  1E08               	comf	??___ftge+1,f,c
  5734  00DAA6  1E09               	comf	??___ftge+2,f,c
  5735  00DAA8  2A07               	incf	??___ftge,f,c
  5736  00DAAA  0E00               	movlw	0
  5737  00DAAC  2208               	addwfc	??___ftge+1,f,c
  5738  00DAAE  2209               	addwfc	??___ftge+2,f,c
  5739  00DAB0  0E00               	movlw	0
  5740  00DAB2  2407               	addwf	??___ftge,w,c
  5741  00DAB4  6E01               	movwf	___ftge@ff1,c
  5742  00DAB6  0E00               	movlw	0
  5743  00DAB8  2008               	addwfc	??___ftge+1,w,c
  5744  00DABA  6E02               	movwf	___ftge@ff1+1,c
  5745  00DABC  0E80               	movlw	128
  5746  00DABE  2009               	addwfc	??___ftge+2,w,c
  5747  00DAC0  6E03               	movwf	___ftge@ff1+2,c
  5748  00DAC2                     l3344:
  5749  00DAC2  AE06               	btfss	___ftge@ff2+2,7,c
  5750  00DAC4  D016               	goto	l3348
  5751  00DAC6  C004  F007         	movff	___ftge@ff2,??___ftge
  5752  00DACA  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5753  00DACE  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5754  00DAD2  1E07               	comf	??___ftge,f,c
  5755  00DAD4  1E08               	comf	??___ftge+1,f,c
  5756  00DAD6  1E09               	comf	??___ftge+2,f,c
  5757  00DAD8  2A07               	incf	??___ftge,f,c
  5758  00DADA  0E00               	movlw	0
  5759  00DADC  2208               	addwfc	??___ftge+1,f,c
  5760  00DADE  2209               	addwfc	??___ftge+2,f,c
  5761  00DAE0  0E00               	movlw	0
  5762  00DAE2  2407               	addwf	??___ftge,w,c
  5763  00DAE4  6E04               	movwf	___ftge@ff2,c
  5764  00DAE6  0E00               	movlw	0
  5765  00DAE8  2008               	addwfc	??___ftge+1,w,c
  5766  00DAEA  6E05               	movwf	___ftge@ff2+1,c
  5767  00DAEC  0E80               	movlw	128
  5768  00DAEE  2009               	addwfc	??___ftge+2,w,c
  5769  00DAF0  6E06               	movwf	___ftge@ff2+2,c
  5770  00DAF2                     l3348:
  5771  00DAF2  0E00               	movlw	0
  5772  00DAF4  1A01               	xorwf	___ftge@ff1,f,c
  5773  00DAF6  0E00               	movlw	0
  5774  00DAF8  1A02               	xorwf	___ftge@ff1+1,f,c
  5775  00DAFA  0E80               	movlw	128
  5776  00DAFC  1A03               	xorwf	___ftge@ff1+2,f,c
  5777  00DAFE  0E00               	movlw	0
  5778  00DB00  1A04               	xorwf	___ftge@ff2,f,c
  5779  00DB02  0E00               	movlw	0
  5780  00DB04  1A05               	xorwf	___ftge@ff2+1,f,c
  5781  00DB06  0E80               	movlw	128
  5782  00DB08  1A06               	xorwf	___ftge@ff2+2,f,c
  5783  00DB0A  5004               	movf	___ftge@ff2,w,c
  5784  00DB0C  5C01               	subwf	___ftge@ff1,w,c
  5785  00DB0E  5005               	movf	___ftge@ff2+1,w,c
  5786  00DB10  5802               	subwfb	___ftge@ff1+1,w,c
  5787  00DB12  5006               	movf	___ftge@ff2+2,w,c
  5788  00DB14  5803               	subwfb	___ftge@ff1+2,w,c
  5789  00DB16  B0D8               	btfsc	status,0,c
  5790  00DB18  D002               	goto	l3354
  5791  00DB1A  90D8               	bcf	status,0,c
  5792  00DB1C  0012               	return	
  5793  00DB1E                     l3354:
  5794  00DB1E  80D8               	bsf	status,0,c
  5795  00DB20  0012               	return	
  5796  00DB22                     __end_of___ftge:
  5797                           	opt stack 0
  5798                           tblptru	equ	0xFF8
  5799                           tblptrh	equ	0xFF7
  5800                           tblptrl	equ	0xFF6
  5801                           tablat	equ	0xFF5
  5802                           prodh	equ	0xFF4
  5803                           prodl	equ	0xFF3
  5804                           postinc0	equ	0xFEE
  5805                           wreg	equ	0xFE8
  5806                           indf2	equ	0xFDF
  5807                           postinc2	equ	0xFDE
  5808                           postdec2	equ	0xFDD
  5809                           fsr2h	equ	0xFDA
  5810                           fsr2l	equ	0xFD9
  5811                           status	equ	0xFD8
  5812                           
  5813 ;; *************** function _initSD *****************
  5814 ;; Defined at:
  5815 ;;		line 374 in file "SD_PIC.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;		None
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  i               1   93[COMRAM] unsigned char 
  5820 ;;  i               1   91[COMRAM] unsigned char 
  5821 ;;  i               1   92[COMRAM] unsigned char 
  5822 ;;  i               1   95[COMRAM] unsigned char 
  5823 ;;  tempSize        4   96[COMRAM] unsigned long 
  5824 ;;  tempSize        4   70[COMRAM] unsigned long 
  5825 ;;  i               1   94[COMRAM] unsigned char 
  5826 ;;  i               1   90[COMRAM] unsigned char 
  5827 ;;  arr_response   16   74[COMRAM] unsigned char [16]
  5828 ;;  argument        4   64[COMRAM] unsigned long 
  5829 ;;  response        1  100[COMRAM] unsigned char 
  5830 ;;  last_OSCTUNE    1   69[COMRAM] const unsigned char 
  5831 ;;  last_OSCCON     1   68[COMRAM] const unsigned char 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  1    wreg      void 
  5834 ;; Registers used:
  5835 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Locals:        37       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Totals:        44       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;Total ram usage:       44 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    4
  5848 ;; This function calls:
  5849 ;;		_SD_ACMD
  5850 ;;		_SD_Command
  5851 ;;		___ftdiv
  5852 ;;		___ftmul
  5853 ;;		___fttol
  5854 ;;		___lltoft
  5855 ;;		___lwtoft
  5856 ;;		_spiInit
  5857 ;;		_spiReceive
  5858 ;;		_spiSend
  5859 ;; This function is called by:
  5860 ;;		_main
  5861 ;; This function uses a non-reentrant model
  5862 ;;
  5863                           
  5864                           	psect	text17
  5865  00ECC8                     __ptext17:
  5866                           	opt stack 0
  5867  00ECC8                     _initSD:
  5868                           	opt stack 26
  5869                           
  5870                           ;SD_PIC.c: 375: const unsigned char last_OSCCON = OSCCON;
  5871                           
  5872                           ;incstack = 0
  5873  00ECC8  CFD3 F045          	movff	4051,initSD@last_OSCCON	;volatile
  5874                           
  5875                           ;SD_PIC.c: 376: const unsigned char last_OSCTUNE = OSCTUNE;
  5876  00ECCC  CF9B F046          	movff	3995,initSD@last_OSCTUNE	;volatile
  5877                           
  5878                           ;SD_PIC.c: 377: unsigned char response;
  5879                           ;SD_PIC.c: 378: unsigned char arr_response[16] = {0};
  5880  00ECD0  EE20  F0AE         	lfsr	2,initSD@F3023
  5881  00ECD4  EE10  F04B         	lfsr	1,initSD@arr_response
  5882  00ECD8  0E0F               	movlw	15
  5883  00ECDA                     u3361:
  5884  00ECDA  CFDB FFE3          	movff	plusw2,plusw1
  5885  00ECDE  06E8               	decf	wreg,f,c
  5886  00ECE0  E2FC               	bc	u3361
  5887                           
  5888                           ;SD_PIC.c: 382: OSCTUNEbits.TUN = 0b000000;
  5889  00ECE2  909B               	bcf	3995,0,c	;volatile
  5890  00ECE4  929B               	bcf	3995,1,c	;volatile
  5891  00ECE6  949B               	bcf	3995,2,c	;volatile
  5892  00ECE8  969B               	bcf	3995,3,c	;volatile
  5893  00ECEA  989B               	bcf	3995,4,c	;volatile
  5894                           
  5895                           ;SD_PIC.c: 383: OSCCONbits.IRCF = 0b110;
  5896  00ECEC  50D3               	movf	4051,w,c	;volatile
  5897  00ECEE  0B8F               	andlw	-113
  5898  00ECF0  0960               	iorlw	96
  5899  00ECF2  6ED3               	movwf	4051,c	;volatile
  5900                           
  5901                           ;SD_PIC.c: 384: OSCCONbits.SCS = 0b11;
  5902  00ECF4  0E03               	movlw	3
  5903  00ECF6  12D3               	iorwf	4051,f,c	;volatile
  5904                           
  5905                           ;SD_PIC.c: 387: while(!OSCCONbits.IOFS){
  5906  00ECF8  D004               	goto	l3492
  5907  00ECFA                     l3490:
  5908                           
  5909                           ;SD_PIC.c: 388: _delay((unsigned long)((20)*(10000000/4000000.0)));
  5910  00ECFA  0E10               	movlw	16
  5911  00ECFC                     u4757:
  5912  00ECFC  2EE8               	decfsz	wreg,f,c
  5913  00ECFE  D7FE               	bra	u4757
  5914  00ED00  D000               	nop2	
  5915  00ED02                     l3492:
  5916  00ED02  A4D3               	btfss	4051,2,c	;volatile
  5917  00ED04  D7FA               	goto	l3490
  5918                           
  5919                           ;SD_PIC.c: 389: }
  5920                           ;SD_PIC.c: 391: spiInit(16);
  5921  00ED06  0E10               	movlw	16
  5922  00ED08  EC60  F06B         	call	_spiInit
  5923                           
  5924                           ;SD_PIC.c: 395: _delay((unsigned long)((20)*(10000000/4000.0)));
  5925  00ED0C  0E41               	movlw	65
  5926  00ED0E  6E3A               	movwf	??_initSD& (0+255),c
  5927  00ED10  0EEE               	movlw	238
  5928  00ED12                     u4767:
  5929  00ED12  2EE8               	decfsz	wreg,f,c
  5930  00ED14  D7FE               	bra	u4767
  5931  00ED16  2E3A               	decfsz	??_initSD& (0+255),f,c
  5932  00ED18  D7FC               	bra	u4767
  5933  00ED1A  D000               	nop2	
  5934                           
  5935                           ;SD_PIC.c: 398: LATEbits.LATE2 = 1;
  5936  00ED1C  848D               	bsf	3981,2,c	;volatile
  5937                           
  5938                           ;SD_PIC.c: 399: TRISEbits.TRISE2 = 0;
  5939  00ED1E  9496               	bcf	3990,2,c	;volatile
  5940                           
  5941                           ;SD_PIC.c: 402: for(unsigned char i = 0; i < 10; i++){
  5942  00ED20  0E00               	movlw	0
  5943  00ED22  6E5B               	movwf	initSD@i,c
  5944  00ED24                     l3504:
  5945  00ED24  0E09               	movlw	9
  5946  00ED26  645B               	cpfsgt	initSD@i,c
  5947  00ED28  D001               	goto	l3508
  5948  00ED2A  D005               	goto	l239
  5949  00ED2C                     l3508:
  5950                           
  5951                           ;SD_PIC.c: 403: spiSend(0xFF);
  5952  00ED2C  0EFF               	movlw	255
  5953  00ED2E  ECC3  F06A         	call	_spiSend
  5954  00ED32  2A5B               	incf	initSD@i,f,c
  5955  00ED34  D7F7               	goto	l3504
  5956  00ED36                     l239:
  5957                           
  5958                           ;SD_PIC.c: 404: }
  5959                           ;SD_PIC.c: 406: LATEbits.LATE2 = 0;
  5960  00ED36  948D               	bcf	3981,2,c	;volatile
  5961  00ED38                     l3514:
  5962  00ED38  0E00               	movlw	0
  5963  00ED3A  6E04               	movwf	SD_Command@arg,c
  5964  00ED3C  0E00               	movlw	0
  5965  00ED3E  6E05               	movwf	SD_Command@arg+1,c
  5966  00ED40  0E00               	movlw	0
  5967  00ED42  6E06               	movwf	SD_Command@arg+2,c
  5968  00ED44  0E00               	movlw	0
  5969  00ED46  6E07               	movwf	SD_Command@arg+3,c
  5970  00ED48  0E09               	movlw	low _CMD0
  5971  00ED4A  6EF6               	movwf	tblptrl,c
  5972  00ED4C                     	if	1	;There is more than 1 active tblptr byte
  5973  00ED4C  0EFF               	movlw	high _CMD0
  5974  00ED4E  6EF7               	movwf	tblptrh,c
  5975  00ED50                     	endif
  5976  00ED50                     	if	0	;There are less than 3 active tblptr bytes
  5977  00ED50                     	endif
  5978  00ED50  0008               	tblrd		*
  5979  00ED52  50F5               	movf	tablat,w,c
  5980  00ED54  EC87  F06C         	call	_SD_Command
  5981  00ED58  6E3A               	movwf	??_initSD& (0+255),c
  5982  00ED5A  0EF2               	movlw	low _R1_IDLE_STATE
  5983  00ED5C  6EF6               	movwf	tblptrl,c
  5984  00ED5E                     	if	1	;There is more than 1 active tblptr byte
  5985  00ED5E  0EFE               	movlw	high _R1_IDLE_STATE
  5986  00ED60  6EF7               	movwf	tblptrh,c
  5987  00ED62                     	endif
  5988  00ED62                     	if	0	;There are less than 3 active tblptr bytes
  5989  00ED62                     	endif
  5990  00ED62  0008               	tblrd		*
  5991  00ED64  50F5               	movf	tablat,w,c
  5992  00ED66  183A               	xorwf	??_initSD,w,c
  5993  00ED68  A4D8               	btfss	status,2,c
  5994  00ED6A  D7E6               	goto	l3514
  5995  00ED6C                     l3516:
  5996                           
  5997                           ;SD_PIC.c: 421: response = SD_Command(CMD8, 0x01AA);
  5998  00ED6C  0EAA               	movlw	170
  5999  00ED6E  6E04               	movwf	SD_Command@arg,c
  6000  00ED70  0E01               	movlw	1
  6001  00ED72  6E05               	movwf	SD_Command@arg+1,c
  6002  00ED74  0E00               	movlw	0
  6003  00ED76  6E06               	movwf	SD_Command@arg+2,c
  6004  00ED78  0E00               	movlw	0
  6005  00ED7A  6E07               	movwf	SD_Command@arg+3,c
  6006  00ED7C  0E06               	movlw	low _CMD8
  6007  00ED7E  6EF6               	movwf	tblptrl,c
  6008  00ED80                     	if	1	;There is more than 1 active tblptr byte
  6009  00ED80  0EFF               	movlw	high _CMD8
  6010  00ED82  6EF7               	movwf	tblptrh,c
  6011  00ED84                     	endif
  6012  00ED84                     	if	0	;There are less than 3 active tblptr bytes
  6013  00ED84                     	endif
  6014  00ED84  0008               	tblrd		*
  6015  00ED86  50F5               	movf	tablat,w,c
  6016  00ED88  EC87  F06C         	call	_SD_Command
  6017  00ED8C  6E65               	movwf	initSD@response,c
  6018                           
  6019                           ;SD_PIC.c: 424: LATEbits.LATE2 = 0;
  6020  00ED8E  948D               	bcf	3981,2,c	;volatile
  6021                           
  6022                           ;SD_PIC.c: 425: for(unsigned char i = 0; i < 4; i++){
  6023  00ED90  0E00               	movlw	0
  6024  00ED92  6E5D               	movwf	initSD@i_411,c
  6025  00ED94                     l3522:
  6026  00ED94  0E03               	movlw	3
  6027  00ED96  645D               	cpfsgt	initSD@i_411,c
  6028  00ED98  D001               	goto	l3526
  6029  00ED9A  D00D               	goto	l245
  6030  00ED9C                     l3526:
  6031                           
  6032                           ;SD_PIC.c: 426: arr_response[i] = spiReceive();
  6033  00ED9C  505D               	movf	initSD@i_411,w,c
  6034  00ED9E  0D01               	mullw	1
  6035  00EDA0  0E4B               	movlw	low initSD@arr_response
  6036  00EDA2  24F3               	addwf	prodl,w,c
  6037  00EDA4  6ED9               	movwf	fsr2l,c
  6038  00EDA6  0E00               	movlw	high initSD@arr_response
  6039  00EDA8  20F4               	addwfc	prodh,w,c
  6040  00EDAA  6EDA               	movwf	fsr2h,c
  6041  00EDAC  ECBF  F06A         	call	_spiReceive	;wreg free
  6042  00EDB0  6EDF               	movwf	indf2,c
  6043  00EDB2  2A5D               	incf	initSD@i_411,f,c
  6044  00EDB4  D7EF               	goto	l3522
  6045  00EDB6                     l245:
  6046                           
  6047                           ;SD_PIC.c: 427: }
  6048                           ;SD_PIC.c: 428: LATEbits.LATE2 = 1;
  6049  00EDB6  848D               	bsf	3981,2,c	;volatile
  6050                           
  6051                           ;SD_PIC.c: 430: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  6052  00EDB8  0EF1               	movlw	low _R1_ILLEGAL_COMMAND
  6053  00EDBA  6EF6               	movwf	tblptrl,c
  6054  00EDBC                     	if	1	;There is more than 1 active tblptr byte
  6055  00EDBC  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6056  00EDBE  6EF7               	movwf	tblptrh,c
  6057  00EDC0                     	endif
  6058  00EDC0                     	if	0	;There are less than 3 active tblptr bytes
  6059  00EDC0                     	endif
  6060  00EDC0  0008               	tblrd		*
  6061  00EDC2  CFF5 F03A          	movff	tablat,??_initSD
  6062  00EDC6  5065               	movf	initSD@response,w,c
  6063  00EDC8  143A               	andwf	??_initSD,w,c
  6064  00EDCA  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6065  00EDCC  0EF1               	movlw	low _R1_ILLEGAL_COMMAND
  6066  00EDCE  6EF6               	movwf	tblptrl,c
  6067  00EDD0                     	if	1	;There is more than 1 active tblptr byte
  6068  00EDD0  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6069  00EDD2  6EF7               	movwf	tblptrh,c
  6070  00EDD4                     	endif
  6071  00EDD4                     	if	0	;There are less than 3 active tblptr bytes
  6072  00EDD4                     	endif
  6073  00EDD4  0008               	tblrd		*
  6074  00EDD6  50F5               	movf	tablat,w,c
  6075  00EDD8  183B               	xorwf	??_initSD+1,w,c
  6076  00EDDA  A4D8               	btfss	status,2,c
  6077  00EDDC  D02C               	goto	l3558
  6078                           
  6079                           ;SD_PIC.c: 433: SDCard.SDversion = 1;
  6080  00EDDE  0E01               	movlw	1
  6081  00EDE0  0100               	movlb	0	; () banked
  6082  00EDE2  6F80               	movwf	_SDCard& (0+255),b
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;SD_PIC.c: 436: SD_Command(CMD58, 0);
  6086  00EDE4  0E00               	movlw	0
  6087  00EDE6  6E04               	movwf	SD_Command@arg,c
  6088  00EDE8  0E00               	movlw	0
  6089  00EDEA  6E05               	movwf	SD_Command@arg+1,c
  6090  00EDEC  0E00               	movlw	0
  6091  00EDEE  6E06               	movwf	SD_Command@arg+2,c
  6092  00EDF0  0E00               	movlw	0
  6093  00EDF2  6E07               	movwf	SD_Command@arg+3,c
  6094  00EDF4  0EF7               	movlw	low _CMD58
  6095  00EDF6  6EF6               	movwf	tblptrl,c
  6096  00EDF8                     	if	1	;There is more than 1 active tblptr byte
  6097  00EDF8  0EFE               	movlw	high _CMD58
  6098  00EDFA  6EF7               	movwf	tblptrh,c
  6099  00EDFC                     	endif
  6100  00EDFC                     	if	0	;There are less than 3 active tblptr bytes
  6101  00EDFC                     	endif
  6102  00EDFC  0008               	tblrd		*
  6103  00EDFE  50F5               	movf	tablat,w,c
  6104  00EE00  EC87  F06C         	call	_SD_Command
  6105                           
  6106                           ;SD_PIC.c: 437: LATEbits.LATE2 = 0;
  6107  00EE04  948D               	bcf	3981,2,c	;volatile
  6108                           
  6109                           ;SD_PIC.c: 438: for(unsigned char i = 0; i < 4; i++){
  6110  00EE06  0E00               	movlw	0
  6111  00EE08  6E5E               	movwf	initSD@i_412,c
  6112  00EE0A                     l3542:
  6113  00EE0A  0E03               	movlw	3
  6114  00EE0C  645E               	cpfsgt	initSD@i_412,c
  6115  00EE0E  D001               	goto	l3546
  6116  00EE10  D00D               	goto	l248
  6117  00EE12                     l3546:
  6118                           
  6119                           ;SD_PIC.c: 439: arr_response[i] = spiReceive();
  6120  00EE12  505E               	movf	initSD@i_412,w,c
  6121  00EE14  0D01               	mullw	1
  6122  00EE16  0E4B               	movlw	low initSD@arr_response
  6123  00EE18  24F3               	addwf	prodl,w,c
  6124  00EE1A  6ED9               	movwf	fsr2l,c
  6125  00EE1C  0E00               	movlw	high initSD@arr_response
  6126  00EE1E  20F4               	addwfc	prodh,w,c
  6127  00EE20  6EDA               	movwf	fsr2h,c
  6128  00EE22  ECBF  F06A         	call	_spiReceive	;wreg free
  6129  00EE26  6EDF               	movwf	indf2,c
  6130  00EE28  2A5E               	incf	initSD@i_412,f,c
  6131  00EE2A  D7EF               	goto	l3542
  6132  00EE2C                     l248:
  6133                           
  6134                           ;SD_PIC.c: 440: }
  6135                           ;SD_PIC.c: 441: LATEbits.LATE2 = 1;
  6136  00EE2C  848D               	bsf	3981,2,c	;volatile
  6137                           
  6138                           ;SD_PIC.c: 443: if(arr_response[2] != 0x01){
  6139  00EE2E  044D               	decf	initSD@arr_response+2,w,c
  6140  00EE30  A4D8               	btfss	status,2,c
  6141  00EE32  0012               	return	
  6142  00EE34  D012               	goto	l3568
  6143  00EE36                     l3558:
  6144                           
  6145                           ;SD_PIC.c: 449: else if(response == R1_IDLE_STATE){
  6146  00EE36  0EF2               	movlw	low _R1_IDLE_STATE
  6147  00EE38  6EF6               	movwf	tblptrl,c
  6148  00EE3A                     	if	1	;There is more than 1 active tblptr byte
  6149  00EE3A  0EFE               	movlw	high _R1_IDLE_STATE
  6150  00EE3C  6EF7               	movwf	tblptrh,c
  6151  00EE3E                     	endif
  6152  00EE3E                     	if	0	;There are less than 3 active tblptr bytes
  6153  00EE3E                     	endif
  6154  00EE3E  0008               	tblrd		*
  6155  00EE40  50F5               	movf	tablat,w,c
  6156  00EE42  6265               	cpfseq	initSD@response,c
  6157  00EE44  D793               	goto	l3516
  6158                           
  6159                           ;SD_PIC.c: 450: if((arr_response[2] == 0x01) && (arr_response[3] == 0xAA)){
  6160  00EE46  044D               	decf	initSD@arr_response+2,w,c
  6161  00EE48  A4D8               	btfss	status,2,c
  6162  00EE4A  0012               	return	
  6163  00EE4C  0EAA               	movlw	170
  6164  00EE4E  184E               	xorwf	initSD@arr_response+3,w,c
  6165  00EE50  A4D8               	btfss	status,2,c
  6166  00EE52  0012               	return	
  6167                           
  6168                           ;SD_PIC.c: 453: SDCard.SDversion = 2;
  6169  00EE54  0E02               	movlw	2
  6170  00EE56  0100               	movlb	0	; () banked
  6171  00EE58  6F80               	movwf	_SDCard& (0+255),b
  6172  00EE5A                     l3568:
  6173                           
  6174                           ;SD_PIC.c: 459: }
  6175                           ;SD_PIC.c: 460: }
  6176                           ;SD_PIC.c: 461: }
  6177                           ;SD_PIC.c: 469: unsigned long argument = (SDCard.SDversion == 1) ? 0 : 0x40000000;
  6178  00EE5A  0100               	movlb	0	; () banked
  6179  00EE5C  0580               	decf	_SDCard& (0+255),w,b
  6180  00EE5E  B4D8               	btfsc	status,2,c
  6181  00EE60  D008               	goto	l3572
  6182                           
  6183                           ; BSR set to: 0
  6184  00EE62  0E00               	movlw	0
  6185  00EE64  6E41               	movwf	initSD@argument,c
  6186  00EE66  0E00               	movlw	0
  6187  00EE68  6E42               	movwf	initSD@argument+1,c
  6188  00EE6A  0E00               	movlw	0
  6189  00EE6C  6E43               	movwf	initSD@argument+2,c
  6190  00EE6E  0E40               	movlw	64
  6191  00EE70  D007               	goto	L7
  6192  00EE72                     l3572:
  6193                           
  6194                           ; BSR set to: 0
  6195  00EE72  0E00               	movlw	0
  6196  00EE74  6E41               	movwf	initSD@argument,c
  6197  00EE76  0E00               	movlw	0
  6198  00EE78  6E42               	movwf	initSD@argument+1,c
  6199  00EE7A  0E00               	movlw	0
  6200  00EE7C  6E43               	movwf	initSD@argument+2,c
  6201  00EE7E  0E00               	movlw	0
  6202  00EE80                     L7:
  6203  00EE80  6E44               	movwf	initSD@argument+3,c
  6204  00EE82                     l3574:
  6205                           
  6206                           ;SD_PIC.c: 472: response = SD_ACMD(ACMD41, argument);
  6207  00EE82  C041  F00B         	movff	initSD@argument,SD_ACMD@arg
  6208  00EE86  C042  F00C         	movff	initSD@argument+1,SD_ACMD@arg+1
  6209  00EE8A  C043  F00D         	movff	initSD@argument+2,SD_ACMD@arg+2
  6210  00EE8E  C044  F00E         	movff	initSD@argument+3,SD_ACMD@arg+3
  6211  00EE92  0EF4               	movlw	low _ACMD41
  6212  00EE94  6EF6               	movwf	tblptrl,c
  6213  00EE96                     	if	1	;There is more than 1 active tblptr byte
  6214  00EE96  0EFE               	movlw	high _ACMD41
  6215  00EE98  6EF7               	movwf	tblptrh,c
  6216  00EE9A                     	endif
  6217  00EE9A                     	if	0	;There are less than 3 active tblptr bytes
  6218  00EE9A                     	endif
  6219  00EE9A  0008               	tblrd		*
  6220  00EE9C  50F5               	movf	tablat,w,c
  6221  00EE9E  EC7C  F06B         	call	_SD_ACMD
  6222  00EEA2  6E65               	movwf	initSD@response,c
  6223                           
  6224                           ;SD_PIC.c: 473: }while(
  6225                           ;SD_PIC.c: 474: (response != R1_READY_STATE) &&
  6226                           ;SD_PIC.c: 475: ((response & R1_ILLEGAL_COMMAND) != R1_ILLEGAL_COMMAND)
  6227                           ;SD_PIC.c: 476: );
  6228  00EEA4  0EF3               	movlw	low _R1_READY_STATE
  6229  00EEA6  6EF6               	movwf	tblptrl,c
  6230  00EEA8                     	if	1	;There is more than 1 active tblptr byte
  6231  00EEA8  0EFE               	movlw	high _R1_READY_STATE
  6232  00EEAA  6EF7               	movwf	tblptrh,c
  6233  00EEAC                     	endif
  6234  00EEAC                     	if	0	;There are less than 3 active tblptr bytes
  6235  00EEAC                     	endif
  6236  00EEAC  0008               	tblrd		*
  6237  00EEAE  50F5               	movf	tablat,w,c
  6238  00EEB0  1865               	xorwf	initSD@response,w,c
  6239  00EEB2  B4D8               	btfsc	status,2,c
  6240  00EEB4  D013               	goto	l3580
  6241  00EEB6  0EF1               	movlw	low _R1_ILLEGAL_COMMAND
  6242  00EEB8  6EF6               	movwf	tblptrl,c
  6243  00EEBA                     	if	1	;There is more than 1 active tblptr byte
  6244  00EEBA  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6245  00EEBC  6EF7               	movwf	tblptrh,c
  6246  00EEBE                     	endif
  6247  00EEBE                     	if	0	;There are less than 3 active tblptr bytes
  6248  00EEBE                     	endif
  6249  00EEBE  0008               	tblrd		*
  6250  00EEC0  CFF5 F03A          	movff	tablat,??_initSD
  6251  00EEC4  5065               	movf	initSD@response,w,c
  6252  00EEC6  143A               	andwf	??_initSD,w,c
  6253  00EEC8  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6254  00EECA  0EF1               	movlw	low _R1_ILLEGAL_COMMAND
  6255  00EECC  6EF6               	movwf	tblptrl,c
  6256  00EECE                     	if	1	;There is more than 1 active tblptr byte
  6257  00EECE  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6258  00EED0  6EF7               	movwf	tblptrh,c
  6259  00EED2                     	endif
  6260  00EED2                     	if	0	;There are less than 3 active tblptr bytes
  6261  00EED2                     	endif
  6262  00EED2  0008               	tblrd		*
  6263  00EED4  50F5               	movf	tablat,w,c
  6264  00EED6  183B               	xorwf	??_initSD+1,w,c
  6265  00EED8  A4D8               	btfss	status,2,c
  6266  00EEDA  D7D3               	goto	l3574
  6267  00EEDC                     l3580:
  6268                           
  6269                           ;SD_PIC.c: 480: if((response & R1_ILLEGAL_COMMAND) == R1_ILLEGAL_COMMAND){
  6270  00EEDC  0EF1               	movlw	low _R1_ILLEGAL_COMMAND
  6271  00EEDE  6EF6               	movwf	tblptrl,c
  6272  00EEE0                     	if	1	;There is more than 1 active tblptr byte
  6273  00EEE0  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6274  00EEE2  6EF7               	movwf	tblptrh,c
  6275  00EEE4                     	endif
  6276  00EEE4                     	if	0	;There are less than 3 active tblptr bytes
  6277  00EEE4                     	endif
  6278  00EEE4  0008               	tblrd		*
  6279  00EEE6  CFF5 F03A          	movff	tablat,??_initSD
  6280  00EEEA  5065               	movf	initSD@response,w,c
  6281  00EEEC  143A               	andwf	??_initSD,w,c
  6282  00EEEE  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6283  00EEF0  0EF1               	movlw	low _R1_ILLEGAL_COMMAND
  6284  00EEF2  6EF6               	movwf	tblptrl,c
  6285  00EEF4                     	if	1	;There is more than 1 active tblptr byte
  6286  00EEF4  0EFE               	movlw	high _R1_ILLEGAL_COMMAND
  6287  00EEF6  6EF7               	movwf	tblptrh,c
  6288  00EEF8                     	endif
  6289  00EEF8                     	if	0	;There are less than 3 active tblptr bytes
  6290  00EEF8                     	endif
  6291  00EEF8  0008               	tblrd		*
  6292  00EEFA  50F5               	movf	tablat,w,c
  6293  00EEFC  183B               	xorwf	??_initSD+1,w,c
  6294  00EEFE  A4D8               	btfss	status,2,c
  6295  00EF00  D01C               	goto	l3592
  6296                           
  6297                           ;SD_PIC.c: 481: if(SDCard.SDversion == 1){
  6298  00EF02  0100               	movlb	0	; () banked
  6299  00EF04  0580               	decf	_SDCard& (0+255),w,b
  6300  00EF06  A4D8               	btfss	status,2,c
  6301  00EF08  D014               	goto	l3588
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;SD_PIC.c: 483: SDCard.Type = TYPE_MMC;
  6305  00EF0A  0E02               	movlw	2
  6306  00EF0C  0100               	movlb	0	; () banked
  6307  00EF0E  6F81               	movwf	(_SDCard+1)& (0+255),b
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;SD_PIC.c: 484: SD_Command(CMD1, 0);
  6311  00EF10  0E00               	movlw	0
  6312  00EF12  6E04               	movwf	SD_Command@arg,c
  6313  00EF14  0E00               	movlw	0
  6314  00EF16  6E05               	movwf	SD_Command@arg+1,c
  6315  00EF18  0E00               	movlw	0
  6316  00EF1A  6E06               	movwf	SD_Command@arg+2,c
  6317  00EF1C  0E00               	movlw	0
  6318  00EF1E  6E07               	movwf	SD_Command@arg+3,c
  6319  00EF20  0E07               	movlw	low _CMD1
  6320  00EF22  6EF6               	movwf	tblptrl,c
  6321  00EF24                     	if	1	;There is more than 1 active tblptr byte
  6322  00EF24  0EFF               	movlw	high _CMD1
  6323  00EF26  6EF7               	movwf	tblptrh,c
  6324  00EF28                     	endif
  6325  00EF28                     	if	0	;There are less than 3 active tblptr bytes
  6326  00EF28                     	endif
  6327  00EF28  0008               	tblrd		*
  6328  00EF2A  50F5               	movf	tablat,w,c
  6329  00EF2C  EC87  F06C         	call	_SD_Command
  6330                           
  6331                           ;SD_PIC.c: 485: }
  6332  00EF30  D004               	goto	l3592
  6333  00EF32                     l3588:
  6334                           
  6335                           ;SD_PIC.c: 486: else{
  6336                           ;SD_PIC.c: 488: SDCard.init = 0;
  6337  00EF32  0E00               	movlw	0
  6338  00EF34  0100               	movlb	0	; () banked
  6339  00EF36  6F9B               	movwf	(_SDCard+27)& (0+255),b
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;SD_PIC.c: 489: return;
  6343  00EF38  0012               	return	
  6344  00EF3A                     l3592:
  6345                           
  6346                           ;SD_PIC.c: 490: }
  6347                           ;SD_PIC.c: 491: }
  6348                           ;SD_PIC.c: 493: if(SDCard.Type != TYPE_MMC){
  6349  00EF3A  0E02               	movlw	2
  6350  00EF3C  0100               	movlb	0	; () banked
  6351  00EF3E  1981               	xorwf	(_SDCard+1)& (0+255),w,b
  6352  00EF40  B4D8               	btfsc	status,2,c
  6353  00EF42  D027               	goto	l3614
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;SD_PIC.c: 496: SD_Command(CMD58, 0);
  6357  00EF44  0E00               	movlw	0
  6358  00EF46  6E04               	movwf	SD_Command@arg,c
  6359  00EF48  0E00               	movlw	0
  6360  00EF4A  6E05               	movwf	SD_Command@arg+1,c
  6361  00EF4C  0E00               	movlw	0
  6362  00EF4E  6E06               	movwf	SD_Command@arg+2,c
  6363  00EF50  0E00               	movlw	0
  6364  00EF52  6E07               	movwf	SD_Command@arg+3,c
  6365  00EF54  0EF7               	movlw	low _CMD58
  6366  00EF56  6EF6               	movwf	tblptrl,c
  6367  00EF58                     	if	1	;There is more than 1 active tblptr byte
  6368  00EF58  0EFE               	movlw	high _CMD58
  6369  00EF5A  6EF7               	movwf	tblptrh,c
  6370  00EF5C                     	endif
  6371  00EF5C                     	if	0	;There are less than 3 active tblptr bytes
  6372  00EF5C                     	endif
  6373  00EF5C  0008               	tblrd		*
  6374  00EF5E  50F5               	movf	tablat,w,c
  6375  00EF60  EC87  F06C         	call	_SD_Command
  6376                           
  6377                           ;SD_PIC.c: 499: LATEbits.LATE2 = 0;
  6378  00EF64  948D               	bcf	3981,2,c	;volatile
  6379                           
  6380                           ;SD_PIC.c: 500: if((spiReceive() & 0xC0) == 0xC0){
  6381  00EF66  ECBF  F06A         	call	_spiReceive	;wreg free
  6382  00EF6A  0BC0               	andlw	192
  6383  00EF6C  0AC0               	xorlw	192
  6384  00EF6E  A4D8               	btfss	status,2,c
  6385  00EF70  D002               	goto	l3602
  6386                           
  6387                           ;SD_PIC.c: 501: SDCard.Type = TYPE_SDHC_SDXC;
  6388  00EF72  0E01               	movlw	1
  6389  00EF74  D001               	goto	L8
  6390  00EF76                     l3602:
  6391                           
  6392                           ;SD_PIC.c: 503: else{
  6393                           ;SD_PIC.c: 504: SDCard.Type = TYPE_SDSC;
  6394  00EF76  0E00               	movlw	0
  6395  00EF78                     L8:
  6396  00EF78  0100               	movlb	0	; () banked
  6397  00EF7A  6F81               	movwf	(_SDCard+1)& (0+255),b
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;SD_PIC.c: 505: }
  6401                           ;SD_PIC.c: 509: for(unsigned char i = 0; i < 3; i++){
  6402  00EF7C  0E00               	movlw	0
  6403  00EF7E  6E5C               	movwf	initSD@i_414,c
  6404  00EF80                     l3604:
  6405                           
  6406                           ; BSR set to: 0
  6407  00EF80  0E02               	movlw	2
  6408  00EF82  645C               	cpfsgt	initSD@i_414,c
  6409  00EF84  D001               	goto	l3608
  6410  00EF86  D004               	goto	l272
  6411  00EF88                     l3608:
  6412                           
  6413                           ;SD_PIC.c: 510: spiReceive();
  6414  00EF88  ECBF  F06A         	call	_spiReceive	;wreg free
  6415  00EF8C  2A5C               	incf	initSD@i_414,f,c
  6416  00EF8E  D7F8               	goto	l3604
  6417  00EF90                     l272:
  6418                           
  6419                           ;SD_PIC.c: 511: }
  6420                           ;SD_PIC.c: 512: LATEbits.LATE2 = 1;
  6421  00EF90  848D               	bsf	3981,2,c	;volatile
  6422  00EF92                     l3614:
  6423  00EF92  0E00               	movlw	0
  6424  00EF94  6E04               	movwf	SD_Command@arg,c
  6425  00EF96  0E02               	movlw	2
  6426  00EF98  6E05               	movwf	SD_Command@arg+1,c
  6427  00EF9A  0E00               	movlw	0
  6428  00EF9C  6E06               	movwf	SD_Command@arg+2,c
  6429  00EF9E  0E00               	movlw	0
  6430  00EFA0  6E07               	movwf	SD_Command@arg+3,c
  6431  00EFA2  0E00               	movlw	low _CMD16
  6432  00EFA4  6EF6               	movwf	tblptrl,c
  6433  00EFA6                     	if	1	;There is more than 1 active tblptr byte
  6434  00EFA6  0EFF               	movlw	high _CMD16
  6435  00EFA8  6EF7               	movwf	tblptrh,c
  6436  00EFAA                     	endif
  6437  00EFAA                     	if	0	;There are less than 3 active tblptr bytes
  6438  00EFAA                     	endif
  6439  00EFAA  0008               	tblrd		*
  6440  00EFAC  50F5               	movf	tablat,w,c
  6441  00EFAE  EC87  F06C         	call	_SD_Command
  6442  00EFB2  6E3A               	movwf	??_initSD& (0+255),c
  6443  00EFB4  0EF3               	movlw	low _R1_READY_STATE
  6444  00EFB6  6EF6               	movwf	tblptrl,c
  6445  00EFB8                     	if	1	;There is more than 1 active tblptr byte
  6446  00EFB8  0EFE               	movlw	high _R1_READY_STATE
  6447  00EFBA  6EF7               	movwf	tblptrh,c
  6448  00EFBC                     	endif
  6449  00EFBC                     	if	0	;There are less than 3 active tblptr bytes
  6450  00EFBC                     	endif
  6451  00EFBC  0008               	tblrd		*
  6452  00EFBE  50F5               	movf	tablat,w,c
  6453  00EFC0  183A               	xorwf	??_initSD,w,c
  6454  00EFC2  A4D8               	btfss	status,2,c
  6455  00EFC4  D7E6               	goto	l3614
  6456                           
  6457                           ;SD_PIC.c: 517: SDCard.blockSize = 512;
  6458  00EFC6  0E02               	movlw	2
  6459  00EFC8  0100               	movlb	0	; () banked
  6460  00EFCA  6F93               	movwf	(_SDCard+19)& (0+255),b
  6461  00EFCC  0E00               	movlw	0
  6462  00EFCE  6F92               	movwf	(_SDCard+18)& (0+255),b
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;SD_PIC.c: 520: SD_Command(CMD9, 0);
  6466  00EFD0  0E00               	movlw	0
  6467  00EFD2  6E04               	movwf	SD_Command@arg,c
  6468  00EFD4  0E00               	movlw	0
  6469  00EFD6  6E05               	movwf	SD_Command@arg+1,c
  6470  00EFD8  0E00               	movlw	0
  6471  00EFDA  6E06               	movwf	SD_Command@arg+2,c
  6472  00EFDC  0E00               	movlw	0
  6473  00EFDE  6E07               	movwf	SD_Command@arg+3,c
  6474  00EFE0  0E04               	movlw	low _CMD9
  6475  00EFE2  6EF6               	movwf	tblptrl,c
  6476  00EFE4                     	if	1	;There is more than 1 active tblptr byte
  6477  00EFE4  0EFF               	movlw	high _CMD9
  6478  00EFE6  6EF7               	movwf	tblptrh,c
  6479  00EFE8                     	endif
  6480  00EFE8                     	if	0	;There are less than 3 active tblptr bytes
  6481  00EFE8                     	endif
  6482  00EFE8  0008               	tblrd		*
  6483  00EFEA  50F5               	movf	tablat,w,c
  6484  00EFEC  EC87  F06C         	call	_SD_Command
  6485                           
  6486                           ;SD_PIC.c: 521: LATEbits.LATE2 = 0;
  6487  00EFF0  948D               	bcf	3981,2,c	;volatile
  6488  00EFF2                     l3622:
  6489  00EFF2  ECBF  F06A         	call	_spiReceive	;wreg free
  6490  00EFF6  6E3A               	movwf	??_initSD& (0+255),c
  6491  00EFF8  0EF0               	movlw	low _START_BLOCK
  6492  00EFFA  6EF6               	movwf	tblptrl,c
  6493  00EFFC                     	if	1	;There is more than 1 active tblptr byte
  6494  00EFFC  0EFE               	movlw	high _START_BLOCK
  6495  00EFFE  6EF7               	movwf	tblptrh,c
  6496  00F000                     	endif
  6497  00F000                     	if	0	;There are less than 3 active tblptr bytes
  6498  00F000                     	endif
  6499  00F000  0008               	tblrd		*
  6500  00F002  50F5               	movf	tablat,w,c
  6501  00F004  183A               	xorwf	??_initSD,w,c
  6502  00F006  A4D8               	btfss	status,2,c
  6503  00F008  D7F4               	goto	l3622
  6504                           
  6505                           ;SD_PIC.c: 523: for(unsigned char i = 0; i < 16; i++){
  6506  00F00A  0E00               	movlw	0
  6507  00F00C  6E5F               	movwf	initSD@i_415,c
  6508  00F00E                     l3626:
  6509  00F00E  0E0F               	movlw	15
  6510  00F010  645F               	cpfsgt	initSD@i_415,c
  6511  00F012  D001               	goto	l3630
  6512  00F014  D00D               	goto	l3636
  6513  00F016                     l3630:
  6514                           
  6515                           ;SD_PIC.c: 524: arr_response[i] = spiReceive();
  6516  00F016  505F               	movf	initSD@i_415,w,c
  6517  00F018  0D01               	mullw	1
  6518  00F01A  0E4B               	movlw	low initSD@arr_response
  6519  00F01C  24F3               	addwf	prodl,w,c
  6520  00F01E  6ED9               	movwf	fsr2l,c
  6521  00F020  0E00               	movlw	high initSD@arr_response
  6522  00F022  20F4               	addwfc	prodh,w,c
  6523  00F024  6EDA               	movwf	fsr2h,c
  6524  00F026  ECBF  F06A         	call	_spiReceive	;wreg free
  6525  00F02A  6EDF               	movwf	indf2,c
  6526  00F02C  2A5F               	incf	initSD@i_415,f,c
  6527  00F02E  D7EF               	goto	l3626
  6528  00F030                     l3636:
  6529                           
  6530                           ;SD_PIC.c: 525: }
  6531                           ;SD_PIC.c: 526: spiReceive();
  6532  00F030  ECBF  F06A         	call	_spiReceive	;wreg free
  6533                           
  6534                           ;SD_PIC.c: 527: spiReceive();
  6535  00F034  ECBF  F06A         	call	_spiReceive	;wreg free
  6536                           
  6537                           ;SD_PIC.c: 528: LATEbits.LATE2 = 1;
  6538  00F038  848D               	bsf	3981,2,c	;volatile
  6539                           
  6540                           ;SD_PIC.c: 530: if(SDCard.SDversion == 2){
  6541  00F03A  0E02               	movlw	2
  6542  00F03C  0100               	movlb	0	; () banked
  6543  00F03E  1980               	xorwf	_SDCard& (0+255),w,b
  6544  00F040  A4D8               	btfss	status,2,c
  6545  00F042  D06C               	goto	l3648
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;SD_PIC.c: 535: unsigned long tempSize = arr_response[9] + 1UL;
  6549  00F044  0E01               	movlw	1
  6550  00F046  2454               	addwf	initSD@arr_response+9,w,c
  6551  00F048  6E47               	movwf	initSD@tempSize,c
  6552  00F04A  6A48               	clrf	initSD@tempSize+1,c
  6553  00F04C  0E00               	movlw	0
  6554  00F04E  2248               	addwfc	initSD@tempSize+1,f,c
  6555  00F050  6A49               	clrf	initSD@tempSize+2,c
  6556  00F052  0E00               	movlw	0
  6557  00F054  2249               	addwfc	initSD@tempSize+2,f,c
  6558  00F056  6A4A               	clrf	initSD@tempSize+3,c
  6559  00F058  0E00               	movlw	0
  6560  00F05A  224A               	addwfc	initSD@tempSize+3,f,c
  6561                           
  6562                           ;SD_PIC.c: 536: tempSize |= (unsigned long)(arr_response[8] << 8);
  6563  00F05C  5053               	movf	initSD@arr_response+8,w,c
  6564  00F05E  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6565  00F060  6A3A               	clrf	??_initSD& (0+255),c
  6566  00F062  C03A  F03C         	movff	??_initSD,??_initSD+2
  6567  00F066  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6568  00F06A  0E00               	movlw	0
  6569  00F06C  BE3D               	btfsc	(??_initSD+3)& (0+255),7,c
  6570  00F06E  0EFF               	movlw	255
  6571  00F070  6E3E               	movwf	(??_initSD+4)& (0+255),c
  6572  00F072  6E3F               	movwf	(??_initSD+5)& (0+255),c
  6573  00F074  503C               	movf	??_initSD+2,w,c
  6574  00F076  1247               	iorwf	initSD@tempSize,f,c
  6575  00F078  503D               	movf	??_initSD+3,w,c
  6576  00F07A  1248               	iorwf	initSD@tempSize+1,f,c
  6577  00F07C  503E               	movf	??_initSD+4,w,c
  6578  00F07E  1249               	iorwf	initSD@tempSize+2,f,c
  6579  00F080  503F               	movf	??_initSD+5,w,c
  6580  00F082  124A               	iorwf	initSD@tempSize+3,f,c
  6581                           
  6582                           ;SD_PIC.c: 537: tempSize |= (unsigned long)(arr_response[7] & 0x3F) << 16;
  6583  00F084  C052  F03A         	movff	initSD@arr_response+7,??_initSD
  6584  00F088  0E3F               	movlw	63
  6585  00F08A  163A               	andwf	??_initSD,f,c
  6586  00F08C  C03A  F03B         	movff	??_initSD,??_initSD+1
  6587  00F090  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6588  00F092  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6589  00F094  6A3E               	clrf	(??_initSD+4)& (0+255),c
  6590  00F096  C03C  F03E         	movff	??_initSD+2,??_initSD+4
  6591  00F09A  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6592  00F09E  6A3C               	clrf	??_initSD+2,c
  6593  00F0A0  6A3B               	clrf	??_initSD+1,c
  6594  00F0A2  503B               	movf	??_initSD+1,w,c
  6595  00F0A4  1247               	iorwf	initSD@tempSize,f,c
  6596  00F0A6  503C               	movf	??_initSD+2,w,c
  6597  00F0A8  1248               	iorwf	initSD@tempSize+1,f,c
  6598  00F0AA  503D               	movf	??_initSD+3,w,c
  6599  00F0AC  1249               	iorwf	initSD@tempSize+2,f,c
  6600  00F0AE  503E               	movf	??_initSD+4,w,c
  6601  00F0B0  124A               	iorwf	initSD@tempSize+3,f,c
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;SD_PIC.c: 538: SDCard.size = tempSize * 0.524288;
  6605  00F0B2  C047  F009         	movff	initSD@tempSize,___lltoft@c
  6606  00F0B6  C048  F00A         	movff	initSD@tempSize+1,___lltoft@c+1
  6607  00F0BA  C049  F00B         	movff	initSD@tempSize+2,___lltoft@c+2
  6608  00F0BE  C04A  F00C         	movff	initSD@tempSize+3,___lltoft@c+3
  6609  00F0C2  ECB9  F06B         	call	___lltoft	;wreg free
  6610  00F0C6  C009  F015         	movff	?___lltoft,___ftmul@f1
  6611  00F0CA  C00A  F016         	movff	?___lltoft+1,___ftmul@f1+1
  6612  00F0CE  C00B  F017         	movff	?___lltoft+2,___ftmul@f1+2
  6613  00F0D2  0E38               	movlw	56
  6614  00F0D4  6E18               	movwf	___ftmul@f2,c
  6615  00F0D6  0E06               	movlw	6
  6616  00F0D8  6E19               	movwf	___ftmul@f2+1,c
  6617  00F0DA  0E3F               	movlw	63
  6618  00F0DC  6E1A               	movwf	___ftmul@f2+2,c
  6619  00F0DE  EC5B  F06E         	call	___ftmul	;wreg free
  6620  00F0E2  C015  F098         	movff	?___ftmul,_SDCard+24
  6621  00F0E6  C016  F099         	movff	?___ftmul+1,_SDCard+25
  6622  00F0EA  C017  F09A         	movff	?___ftmul+2,_SDCard+26
  6623                           
  6624                           ;SD_PIC.c: 539: SDCard.numBlocks = (unsigned long)(SDCard.size * 2048);
  6625  00F0EE  0E00               	movlw	0
  6626  00F0F0  6E18               	movwf	___ftmul@f2,c
  6627  00F0F2  0E00               	movlw	0
  6628  00F0F4  6E19               	movwf	___ftmul@f2+1,c
  6629  00F0F6  0E45               	movlw	69
  6630  00F0F8  6E1A               	movwf	___ftmul@f2+2,c
  6631  00F0FA  C098  F015         	movff	_SDCard+24,___ftmul@f1
  6632  00F0FE  C099  F016         	movff	_SDCard+25,___ftmul@f1+1
  6633  00F102  C09A  F017         	movff	_SDCard+26,___ftmul@f1+2
  6634  00F106  EC5B  F06E         	call	___ftmul	;wreg free
  6635  00F10A  C015  F02B         	movff	?___ftmul,___fttol@f1
  6636  00F10E  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  6637  00F112  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  6638  00F116  ECD5  F06E         	call	___fttol	;wreg free
  6639  00F11A  D0BE               	goto	L9
  6640  00F11C                     l3648:
  6641                           
  6642                           ;SD_PIC.c: 541: else{
  6643                           ;SD_PIC.c: 548: unsigned long tempSize = (unsigned long)(arr_response[6] & 0x03) << 4;
  6644  00F11C  C051  F03A         	movff	initSD@arr_response+6,??_initSD
  6645  00F120  0E03               	movlw	3
  6646  00F122  163A               	andwf	??_initSD,f,c
  6647  00F124  C03A  F03B         	movff	??_initSD,??_initSD+1
  6648  00F128  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6649  00F12A  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6650  00F12C  6A3E               	clrf	(??_initSD+4)& (0+255),c
  6651  00F12E  0E04               	movlw	4
  6652  00F130                     u3645:
  6653  00F130  90D8               	bcf	status,0,c
  6654  00F132  363B               	rlcf	??_initSD+1,f,c
  6655  00F134  363C               	rlcf	??_initSD+2,f,c
  6656  00F136  363D               	rlcf	??_initSD+3,f,c
  6657  00F138  363E               	rlcf	??_initSD+4,f,c
  6658  00F13A  2EE8               	decfsz	wreg,f,c
  6659  00F13C  D7F9               	goto	u3645
  6660  00F13E  C03B  F061         	movff	??_initSD+1,initSD@tempSize_417
  6661  00F142  C03C  F062         	movff	??_initSD+2,initSD@tempSize_417+1
  6662  00F146  C03D  F063         	movff	??_initSD+3,initSD@tempSize_417+2
  6663  00F14A  C03E  F064         	movff	??_initSD+4,initSD@tempSize_417+3
  6664                           
  6665                           ;SD_PIC.c: 549: tempSize |= (unsigned long)(arr_response[7] << 2);
  6666  00F14E  5052               	movf	initSD@arr_response+7,w,c
  6667  00F150  6E3A               	movwf	??_initSD& (0+255),c
  6668  00F152  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6669  00F154  90D8               	bcf	status,0,c
  6670  00F156  363A               	rlcf	??_initSD,f,c
  6671  00F158  363B               	rlcf	??_initSD+1,f,c
  6672  00F15A  90D8               	bcf	status,0,c
  6673  00F15C  363A               	rlcf	??_initSD,f,c
  6674  00F15E  363B               	rlcf	??_initSD+1,f,c
  6675  00F160  C03A  F03C         	movff	??_initSD,??_initSD+2
  6676  00F164  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6677  00F168  0E00               	movlw	0
  6678  00F16A  BE3D               	btfsc	(??_initSD+3)& (0+255),7,c
  6679  00F16C  0EFF               	movlw	255
  6680  00F16E  6E3E               	movwf	(??_initSD+4)& (0+255),c
  6681  00F170  6E3F               	movwf	(??_initSD+5)& (0+255),c
  6682  00F172  503C               	movf	??_initSD+2,w,c
  6683  00F174  1261               	iorwf	initSD@tempSize_417,f,c
  6684  00F176  503D               	movf	??_initSD+3,w,c
  6685  00F178  1262               	iorwf	initSD@tempSize_417+1,f,c
  6686  00F17A  503E               	movf	??_initSD+4,w,c
  6687  00F17C  1263               	iorwf	initSD@tempSize_417+2,f,c
  6688  00F17E  503F               	movf	??_initSD+5,w,c
  6689  00F180  1264               	iorwf	initSD@tempSize_417+3,f,c
  6690                           
  6691                           ;SD_PIC.c: 550: tempSize |= (unsigned long)((arr_response[8] & 0xC0) >> 2) + 1;
  6692  00F182  C053  F03A         	movff	initSD@arr_response+8,??_initSD
  6693  00F186  90D8               	bcf	status,0,c
  6694  00F188  323A               	rrcf	??_initSD,f,c
  6695  00F18A  90D8               	bcf	status,0,c
  6696  00F18C  323A               	rrcf	??_initSD,f,c
  6697  00F18E  0E30               	movlw	48
  6698  00F190  163A               	andwf	??_initSD,f,c
  6699  00F192  0E01               	movlw	1
  6700  00F194  243A               	addwf	??_initSD,w,c
  6701  00F196  6E3B               	movwf	(??_initSD+1)& (0+255),c
  6702  00F198  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6703  00F19A  0E00               	movlw	0
  6704  00F19C  223C               	addwfc	(??_initSD+2)& (0+255),f,c
  6705  00F19E  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6706  00F1A0  0E00               	movlw	0
  6707  00F1A2  223D               	addwfc	(??_initSD+3)& (0+255),f,c
  6708  00F1A4  6A3E               	clrf	(??_initSD+4)& (0+255),c
  6709  00F1A6  0E00               	movlw	0
  6710  00F1A8  223E               	addwfc	(??_initSD+4)& (0+255),f,c
  6711  00F1AA  503B               	movf	??_initSD+1,w,c
  6712  00F1AC  1261               	iorwf	initSD@tempSize_417,f,c
  6713  00F1AE  503C               	movf	??_initSD+2,w,c
  6714  00F1B0  1262               	iorwf	initSD@tempSize_417+1,f,c
  6715  00F1B2  503D               	movf	??_initSD+3,w,c
  6716  00F1B4  1263               	iorwf	initSD@tempSize_417+2,f,c
  6717  00F1B6  503E               	movf	??_initSD+4,w,c
  6718  00F1B8  1264               	iorwf	initSD@tempSize_417+3,f,c
  6719                           
  6720                           ;SD_PIC.c: 551: tempSize = tempSize << (((unsigned long)
  6721                           ;SD_PIC.c: 552: ((arr_response[9] & 0x03) << 1) |
  6722                           ;SD_PIC.c: 553: (unsigned long)((arr_response[10] & 0x80) >> 7)) + 2);
  6723  00F1BA  C054  F03A         	movff	initSD@arr_response+9,??_initSD
  6724  00F1BE  0E03               	movlw	3
  6725  00F1C0  163A               	andwf	??_initSD,f,c
  6726  00F1C2  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6727  00F1C4  AE55               	btfss	initSD@arr_response+10,7,c
  6728  00F1C6  D001               	bra	u3655
  6729  00F1C8  2A3B               	incf	(??_initSD+1)& (0+255),f,c
  6730  00F1CA                     u3655:
  6731  00F1CA  303B               	rrcf	??_initSD+1,w,c
  6732  00F1CC  343A               	rlcf	??_initSD,w,c
  6733  00F1CE  6E3C               	movwf	(??_initSD+2)& (0+255),c
  6734  00F1D0  0E02               	movlw	2
  6735  00F1D2  263C               	addwf	??_initSD+2,f,c
  6736  00F1D4  C061  F03D         	movff	initSD@tempSize_417,??_initSD+3
  6737  00F1D8  C062  F03E         	movff	initSD@tempSize_417+1,??_initSD+4
  6738  00F1DC  C063  F03F         	movff	initSD@tempSize_417+2,??_initSD+5
  6739  00F1E0  C064  F040         	movff	initSD@tempSize_417+3,??_initSD+6
  6740  00F1E4  2A3C               	incf	??_initSD+2,f,c
  6741  00F1E6  D005               	goto	u3660
  6742  00F1E8                     u3665:
  6743  00F1E8  90D8               	bcf	status,0,c
  6744  00F1EA  363D               	rlcf	??_initSD+3,f,c
  6745  00F1EC  363E               	rlcf	??_initSD+4,f,c
  6746  00F1EE  363F               	rlcf	??_initSD+5,f,c
  6747  00F1F0  3640               	rlcf	??_initSD+6,f,c
  6748  00F1F2                     u3660:
  6749  00F1F2  2E3C               	decfsz	??_initSD+2,f,c
  6750  00F1F4  D7F9               	goto	u3665
  6751  00F1F6  C03D  F061         	movff	??_initSD+3,initSD@tempSize_417
  6752  00F1FA  C03E  F062         	movff	??_initSD+4,initSD@tempSize_417+1
  6753  00F1FE  C03F  F063         	movff	??_initSD+5,initSD@tempSize_417+2
  6754  00F202  C040  F064         	movff	??_initSD+6,initSD@tempSize_417+3
  6755                           
  6756                           ;SD_PIC.c: 554: tempSize = tempSize << (unsigned long)(arr_response[5] & 0x0F);
  6757  00F206  C050  F03A         	movff	initSD@arr_response+5,??_initSD
  6758  00F20A  0E0F               	movlw	15
  6759  00F20C  163A               	andwf	??_initSD,f,c
  6760  00F20E  C061  F03B         	movff	initSD@tempSize_417,??_initSD+1
  6761  00F212  C062  F03C         	movff	initSD@tempSize_417+1,??_initSD+2
  6762  00F216  C063  F03D         	movff	initSD@tempSize_417+2,??_initSD+3
  6763  00F21A  C064  F03E         	movff	initSD@tempSize_417+3,??_initSD+4
  6764  00F21E  2A3A               	incf	??_initSD,f,c
  6765  00F220  D005               	goto	u3670
  6766  00F222                     u3675:
  6767  00F222  90D8               	bcf	status,0,c
  6768  00F224  363B               	rlcf	??_initSD+1,f,c
  6769  00F226  363C               	rlcf	??_initSD+2,f,c
  6770  00F228  363D               	rlcf	??_initSD+3,f,c
  6771  00F22A  363E               	rlcf	??_initSD+4,f,c
  6772  00F22C                     u3670:
  6773  00F22C  2E3A               	decfsz	??_initSD,f,c
  6774  00F22E  D7F9               	goto	u3675
  6775  00F230  C03B  F061         	movff	??_initSD+1,initSD@tempSize_417
  6776  00F234  C03C  F062         	movff	??_initSD+2,initSD@tempSize_417+1
  6777  00F238  C03D  F063         	movff	??_initSD+3,initSD@tempSize_417+2
  6778  00F23C  C03E  F064         	movff	??_initSD+4,initSD@tempSize_417+3
  6779                           
  6780                           ;SD_PIC.c: 555: SDCard.size = (unsigned long)tempSize;
  6781  00F240  C061  F009         	movff	initSD@tempSize_417,___lltoft@c
  6782  00F244  C062  F00A         	movff	initSD@tempSize_417+1,___lltoft@c+1
  6783  00F248  C063  F00B         	movff	initSD@tempSize_417+2,___lltoft@c+2
  6784  00F24C  C064  F00C         	movff	initSD@tempSize_417+3,___lltoft@c+3
  6785  00F250  ECB9  F06B         	call	___lltoft	;wreg free
  6786  00F254  C009  F098         	movff	?___lltoft,_SDCard+24
  6787  00F258  C00A  F099         	movff	?___lltoft+1,_SDCard+25
  6788  00F25C  C00B  F09A         	movff	?___lltoft+2,_SDCard+26
  6789                           
  6790                           ;SD_PIC.c: 556: SDCard.numBlocks = (unsigned long)(SDCard.size / SDCard.blockSize);
  6791  00F260  C092  F009         	movff	_SDCard+18,___lwtoft@c
  6792  00F264  C093  F00A         	movff	_SDCard+19,___lwtoft@c+1
  6793  00F268  EC14  F06B         	call	___lwtoft	;wreg free
  6794  00F26C  C009  F00F         	movff	?___lwtoft,___ftdiv@f2
  6795  00F270  C00A  F010         	movff	?___lwtoft+1,___ftdiv@f2+1
  6796  00F274  C00B  F011         	movff	?___lwtoft+2,___ftdiv@f2+2
  6797  00F278  C098  F00C         	movff	_SDCard+24,___ftdiv@f1
  6798  00F27C  C099  F00D         	movff	_SDCard+25,___ftdiv@f1+1
  6799  00F280  C09A  F00E         	movff	_SDCard+26,___ftdiv@f1+2
  6800  00F284  ECE8  F06D         	call	___ftdiv	;wreg free
  6801  00F288  C00C  F02B         	movff	?___ftdiv,___fttol@f1
  6802  00F28C  C00D  F02C         	movff	?___ftdiv+1,___fttol@f1+1
  6803  00F290  C00E  F02D         	movff	?___ftdiv+2,___fttol@f1+2
  6804  00F294  ECD5  F06E         	call	___fttol	;wreg free
  6805  00F298                     L9:
  6806  00F298  C02B  F094         	movff	?___fttol,_SDCard+20
  6807  00F29C  C02C  F095         	movff	?___fttol+1,_SDCard+21
  6808  00F2A0  C02D  F096         	movff	?___fttol+2,_SDCard+22
  6809  00F2A4  C02E  F097         	movff	?___fttol+3,_SDCard+23
  6810                           
  6811                           ;SD_PIC.c: 557: }
  6812                           ;SD_PIC.c: 560: SD_Command(CMD10, 0);
  6813  00F2A8  0E00               	movlw	0
  6814  00F2AA  6E04               	movwf	SD_Command@arg,c
  6815  00F2AC  0E00               	movlw	0
  6816  00F2AE  6E05               	movwf	SD_Command@arg+1,c
  6817  00F2B0  0E00               	movlw	0
  6818  00F2B2  6E06               	movwf	SD_Command@arg+2,c
  6819  00F2B4  0E00               	movlw	0
  6820  00F2B6  6E07               	movwf	SD_Command@arg+3,c
  6821  00F2B8  0E03               	movlw	low _CMD10
  6822  00F2BA  6EF6               	movwf	tblptrl,c
  6823  00F2BC                     	if	1	;There is more than 1 active tblptr byte
  6824  00F2BC  0EFF               	movlw	high _CMD10
  6825  00F2BE  6EF7               	movwf	tblptrh,c
  6826  00F2C0                     	endif
  6827  00F2C0                     	if	0	;There are less than 3 active tblptr bytes
  6828  00F2C0                     	endif
  6829  00F2C0  0008               	tblrd		*
  6830  00F2C2  50F5               	movf	tablat,w,c
  6831  00F2C4  EC87  F06C         	call	_SD_Command
  6832                           
  6833                           ;SD_PIC.c: 562: LATEbits.LATE2 = 0;
  6834  00F2C8  948D               	bcf	3981,2,c	;volatile
  6835  00F2CA                     l3658:
  6836                           
  6837                           ;SD_PIC.c: 566: response = spiReceive();
  6838  00F2CA  ECBF  F06A         	call	_spiReceive	;wreg free
  6839  00F2CE  6E65               	movwf	initSD@response,c
  6840                           
  6841                           ;SD_PIC.c: 567: }while(response != START_BLOCK);
  6842  00F2D0  0EF0               	movlw	low _START_BLOCK
  6843  00F2D2  6EF6               	movwf	tblptrl,c
  6844  00F2D4                     	if	1	;There is more than 1 active tblptr byte
  6845  00F2D4  0EFE               	movlw	high _START_BLOCK
  6846  00F2D6  6EF7               	movwf	tblptrh,c
  6847  00F2D8                     	endif
  6848  00F2D8                     	if	0	;There are less than 3 active tblptr bytes
  6849  00F2D8                     	endif
  6850  00F2D8  0008               	tblrd		*
  6851  00F2DA  50F5               	movf	tablat,w,c
  6852  00F2DC  6265               	cpfseq	initSD@response,c
  6853  00F2DE  D7F5               	goto	l3658
  6854                           
  6855                           ;SD_PIC.c: 569: for(unsigned char i = 0; i < 16; i++){
  6856  00F2E0  0E00               	movlw	0
  6857  00F2E2  6E60               	movwf	initSD@i_418,c
  6858  00F2E4                     l3664:
  6859  00F2E4  0E0F               	movlw	15
  6860  00F2E6  6460               	cpfsgt	initSD@i_418,c
  6861  00F2E8  D001               	goto	l3668
  6862  00F2EA  D00D               	goto	l3674
  6863  00F2EC                     l3668:
  6864                           
  6865                           ;SD_PIC.c: 570: arr_response[i] = spiReceive();
  6866  00F2EC  5060               	movf	initSD@i_418,w,c
  6867  00F2EE  0D01               	mullw	1
  6868  00F2F0  0E4B               	movlw	low initSD@arr_response
  6869  00F2F2  24F3               	addwf	prodl,w,c
  6870  00F2F4  6ED9               	movwf	fsr2l,c
  6871  00F2F6  0E00               	movlw	high initSD@arr_response
  6872  00F2F8  20F4               	addwfc	prodh,w,c
  6873  00F2FA  6EDA               	movwf	fsr2h,c
  6874  00F2FC  ECBF  F06A         	call	_spiReceive	;wreg free
  6875  00F300  6EDF               	movwf	indf2,c
  6876  00F302  2A60               	incf	initSD@i_418,f,c
  6877  00F304  D7EF               	goto	l3664
  6878  00F306                     l3674:
  6879                           
  6880                           ;SD_PIC.c: 571: }
  6881                           ;SD_PIC.c: 572: spiReceive();
  6882  00F306  ECBF  F06A         	call	_spiReceive	;wreg free
  6883                           
  6884                           ;SD_PIC.c: 573: spiReceive();
  6885  00F30A  ECBF  F06A         	call	_spiReceive	;wreg free
  6886                           
  6887                           ;SD_PIC.c: 574: LATEbits.LATE2 = 1;
  6888  00F30E  848D               	bsf	3981,2,c	;volatile
  6889                           
  6890                           ;SD_PIC.c: 576: SDCard.MID = arr_response[0];
  6891  00F310  C04B  F082         	movff	initSD@arr_response,_SDCard+2
  6892                           
  6893                           ;SD_PIC.c: 577: SDCard.OID = (unsigned short)(arr_response[1] << 8U) | arr_response[2];
  6894  00F314  504C               	movf	initSD@arr_response+1,w,c
  6895  00F316  6E3A               	movwf	??_initSD& (0+255),c
  6896  00F318  504D               	movf	initSD@arr_response+2,w,c
  6897  00F31A  0100               	movlb	0	; () banked
  6898  00F31C  6F83               	movwf	(_SDCard+3)& (0+255),b
  6899  00F31E  C03A  F084         	movff	??_initSD,_SDCard+4
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;SD_PIC.c: 578: SDCard.PHMH = arr_response[3];
  6903  00F322  C04E  F089         	movff	initSD@arr_response+3,_SDCard+9
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;SD_PIC.c: 582: SDCard.PHML = (unsigned long)arr_response[4] << 24U;
  6907  00F326  C04F  F03A         	movff	initSD@arr_response+4,??_initSD
  6908  00F32A  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6909  00F32C  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6910  00F32E  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6911  00F330  C03A  F03D         	movff	??_initSD,??_initSD+3
  6912  00F334  6A3C               	clrf	??_initSD+2,c
  6913  00F336  6A3B               	clrf	??_initSD+1,c
  6914  00F338  6A3A               	clrf	??_initSD,c
  6915  00F33A  C03A  F085         	movff	??_initSD,_SDCard+5
  6916  00F33E  C03B  F086         	movff	??_initSD+1,_SDCard+6
  6917  00F342  C03C  F087         	movff	??_initSD+2,_SDCard+7
  6918  00F346  C03D  F088         	movff	??_initSD+3,_SDCard+8
  6919                           
  6920                           ; BSR set to: 0
  6921                           ;SD_PIC.c: 583: SDCard.PHML |= (unsigned long)arr_response[5] << 16U;
  6922  00F34A  C050  F03A         	movff	initSD@arr_response+5,??_initSD
  6923  00F34E  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6924  00F350  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6925  00F352  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6926  00F354  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6927  00F358  C03A  F03C         	movff	??_initSD,??_initSD+2
  6928  00F35C  6A3B               	clrf	??_initSD+1,c
  6929  00F35E  6A3A               	clrf	??_initSD,c
  6930  00F360  503A               	movf	??_initSD,w,c
  6931  00F362  0100               	movlb	0	; () banked
  6932  00F364  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  6933  00F366  503B               	movf	??_initSD+1,w,c
  6934  00F368  0100               	movlb	0	; () banked
  6935  00F36A  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  6936  00F36C  503C               	movf	??_initSD+2,w,c
  6937  00F36E  0100               	movlb	0	; () banked
  6938  00F370  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  6939  00F372  503D               	movf	??_initSD+3,w,c
  6940  00F374  0100               	movlb	0	; () banked
  6941  00F376  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;SD_PIC.c: 584: SDCard.PHML |= (unsigned long)arr_response[6] << 8U;
  6945  00F378  C051  F03A         	movff	initSD@arr_response+6,??_initSD
  6946  00F37C  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6947  00F37E  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6948  00F380  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6949  00F382  C03C  F03D         	movff	??_initSD+2,??_initSD+3
  6950  00F386  C03B  F03C         	movff	??_initSD+1,??_initSD+2
  6951  00F38A  C03A  F03B         	movff	??_initSD,??_initSD+1
  6952  00F38E  6A3A               	clrf	??_initSD,c
  6953  00F390  503A               	movf	??_initSD,w,c
  6954  00F392  0100               	movlb	0	; () banked
  6955  00F394  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  6956  00F396  503B               	movf	??_initSD+1,w,c
  6957  00F398  0100               	movlb	0	; () banked
  6958  00F39A  1386               	iorwf	(_SDCard+6)& (0+255),f,b
  6959  00F39C  503C               	movf	??_initSD+2,w,c
  6960  00F39E  0100               	movlb	0	; () banked
  6961  00F3A0  1387               	iorwf	(_SDCard+7)& (0+255),f,b
  6962  00F3A2  503D               	movf	??_initSD+3,w,c
  6963  00F3A4  0100               	movlb	0	; () banked
  6964  00F3A6  1388               	iorwf	(_SDCard+8)& (0+255),f,b
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;SD_PIC.c: 585: SDCard.PHML |= (unsigned long)arr_response[7];
  6968  00F3A8  5052               	movf	initSD@arr_response+7,w,c
  6969  00F3AA  0100               	movlb	0	; () banked
  6970  00F3AC  1385               	iorwf	(_SDCard+5)& (0+255),f,b
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;SD_PIC.c: 587: SDCard.PRV = arr_response[8];
  6974  00F3AE  C053  F08A         	movff	initSD@arr_response+8,_SDCard+10
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;SD_PIC.c: 591: SDCard.PSN = (unsigned long)arr_response[9] << 24U;
  6978  00F3B2  C054  F03A         	movff	initSD@arr_response+9,??_initSD
  6979  00F3B6  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6980  00F3B8  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6981  00F3BA  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6982  00F3BC  C03A  F03D         	movff	??_initSD,??_initSD+3
  6983  00F3C0  6A3C               	clrf	??_initSD+2,c
  6984  00F3C2  6A3B               	clrf	??_initSD+1,c
  6985  00F3C4  6A3A               	clrf	??_initSD,c
  6986  00F3C6  C03A  F08B         	movff	??_initSD,_SDCard+11
  6987  00F3CA  C03B  F08C         	movff	??_initSD+1,_SDCard+12
  6988  00F3CE  C03C  F08D         	movff	??_initSD+2,_SDCard+13
  6989  00F3D2  C03D  F08E         	movff	??_initSD+3,_SDCard+14
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;SD_PIC.c: 592: SDCard.PSN |= (unsigned long)arr_response[10] << 16U;
  6993  00F3D6  C055  F03A         	movff	initSD@arr_response+10,??_initSD
  6994  00F3DA  6A3B               	clrf	(??_initSD+1)& (0+255),c
  6995  00F3DC  6A3C               	clrf	(??_initSD+2)& (0+255),c
  6996  00F3DE  6A3D               	clrf	(??_initSD+3)& (0+255),c
  6997  00F3E0  C03B  F03D         	movff	??_initSD+1,??_initSD+3
  6998  00F3E4  C03A  F03C         	movff	??_initSD,??_initSD+2
  6999  00F3E8  6A3B               	clrf	??_initSD+1,c
  7000  00F3EA  6A3A               	clrf	??_initSD,c
  7001  00F3EC  503A               	movf	??_initSD,w,c
  7002  00F3EE  0100               	movlb	0	; () banked
  7003  00F3F0  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  7004  00F3F2  503B               	movf	??_initSD+1,w,c
  7005  00F3F4  0100               	movlb	0	; () banked
  7006  00F3F6  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  7007  00F3F8  503C               	movf	??_initSD+2,w,c
  7008  00F3FA  0100               	movlb	0	; () banked
  7009  00F3FC  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  7010  00F3FE  503D               	movf	??_initSD+3,w,c
  7011  00F400  0100               	movlb	0	; () banked
  7012  00F402  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;SD_PIC.c: 593: SDCard.PSN |= (unsigned long)arr_response[11] << 8U;
  7016  00F404  C056  F03A         	movff	initSD@arr_response+11,??_initSD
  7017  00F408  6A3B               	clrf	(??_initSD+1)& (0+255),c
  7018  00F40A  6A3C               	clrf	(??_initSD+2)& (0+255),c
  7019  00F40C  6A3D               	clrf	(??_initSD+3)& (0+255),c
  7020  00F40E  C03C  F03D         	movff	??_initSD+2,??_initSD+3
  7021  00F412  C03B  F03C         	movff	??_initSD+1,??_initSD+2
  7022  00F416  C03A  F03B         	movff	??_initSD,??_initSD+1
  7023  00F41A  6A3A               	clrf	??_initSD,c
  7024  00F41C  503A               	movf	??_initSD,w,c
  7025  00F41E  0100               	movlb	0	; () banked
  7026  00F420  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  7027  00F422  503B               	movf	??_initSD+1,w,c
  7028  00F424  0100               	movlb	0	; () banked
  7029  00F426  138C               	iorwf	(_SDCard+12)& (0+255),f,b
  7030  00F428  503C               	movf	??_initSD+2,w,c
  7031  00F42A  0100               	movlb	0	; () banked
  7032  00F42C  138D               	iorwf	(_SDCard+13)& (0+255),f,b
  7033  00F42E  503D               	movf	??_initSD+3,w,c
  7034  00F430  0100               	movlb	0	; () banked
  7035  00F432  138E               	iorwf	(_SDCard+14)& (0+255),f,b
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;SD_PIC.c: 594: SDCard.PSN |= (unsigned long)arr_response[12];
  7039  00F434  5057               	movf	initSD@arr_response+12,w,c
  7040  00F436  0100               	movlb	0	; () banked
  7041  00F438  138B               	iorwf	(_SDCard+11)& (0+255),f,b
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;SD_PIC.c: 596: SDCard.MDT = (unsigned short)(((arr_response[13] & 0x0F) << 8U)) |
  7045                           ;SD_PIC.c: 597: (arr_response[14]);
  7046  00F43A  5058               	movf	initSD@arr_response+13,w,c
  7047  00F43C  0B0F               	andlw	15
  7048  00F43E  6E3A               	movwf	??_initSD& (0+255),c
  7049  00F440  5059               	movf	initSD@arr_response+14,w,c
  7050  00F442  0100               	movlb	0	; () banked
  7051  00F444  6F8F               	movwf	(_SDCard+15)& (0+255),b
  7052  00F446  C03A  F090         	movff	??_initSD,_SDCard+16
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;SD_PIC.c: 598: SDCard.CRC = arr_response[15] & 0xFE;
  7056  00F44A  505A               	movf	initSD@arr_response+15,w,c
  7057  00F44C  0BFE               	andlw	254
  7058  00F44E  0100               	movlb	0	; () banked
  7059  00F450  6F91               	movwf	(_SDCard+17)& (0+255),b
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;SD_PIC.c: 601: { LATEbits.LATE2 = 1; SSPCON1bits.SSPEN = 0;};
  7063  00F452  848D               	bsf	3981,2,c	;volatile
  7064                           
  7065                           ; BSR set to: 0
  7066  00F454  9AC6               	bcf	4038,5,c	;volatile
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;SD_PIC.c: 602: OSCCON = last_OSCCON;
  7070  00F456  C045  FFD3         	movff	initSD@last_OSCCON,4051	;volatile
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;SD_PIC.c: 603: OSCTUNE = last_OSCTUNE;
  7074  00F45A  C046  FF9B         	movff	initSD@last_OSCTUNE,3995	;volatile
  7075                           
  7076                           ;SD_PIC.c: 606: while(!OSCCONbits.IOFS){ _delay((unsigned long)((20)*(10000000/4000000.0
      +                          ))); }
  7077  00F45E  D004               	goto	l3716
  7078  00F460                     l3714:
  7079  00F460  0E10               	movlw	16
  7080  00F462                     u4777:
  7081  00F462  2EE8               	decfsz	wreg,f,c
  7082  00F464  D7FE               	bra	u4777
  7083  00F466  D000               	nop2	
  7084  00F468                     l3716:
  7085  00F468  A4D3               	btfss	4051,2,c	;volatile
  7086  00F46A  D7FA               	goto	l3714
  7087                           
  7088                           ;SD_PIC.c: 609: spiInit(16);
  7089  00F46C  0E10               	movlw	16
  7090  00F46E  EC60  F06B         	call	_spiInit
  7091                           
  7092                           ;SD_PIC.c: 612: SDCard.write.MBW_flag_first = 1;
  7093  00F472  0E01               	movlw	1
  7094  00F474  0100               	movlb	0	; () banked
  7095  00F476  6FA4               	movwf	(_SDCard+36)& (0+255),b
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;SD_PIC.c: 613: SDCard.write.MBW_startBlock = 0;
  7099  00F478  0E00               	movlw	0
  7100  00F47A  0100               	movlb	0	; () banked
  7101  00F47C  6FA0               	movwf	(_SDCard+32)& (0+255),b
  7102  00F47E  0E00               	movlw	0
  7103  00F480  6FA1               	movwf	(_SDCard+33)& (0+255),b
  7104  00F482  0E00               	movlw	0
  7105  00F484  6FA2               	movwf	(_SDCard+34)& (0+255),b
  7106  00F486  0E00               	movlw	0
  7107  00F488  6FA3               	movwf	(_SDCard+35)& (0+255),b
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;SD_PIC.c: 614: SDCard.write.lastBlockWritten = 0;
  7111  00F48A  0E00               	movlw	0
  7112  00F48C  0100               	movlb	0	; () banked
  7113  00F48E  6F9C               	movwf	(_SDCard+28)& (0+255),b
  7114  00F490  0E00               	movlw	0
  7115  00F492  6F9D               	movwf	(_SDCard+29)& (0+255),b
  7116  00F494  0E00               	movlw	0
  7117  00F496  6F9E               	movwf	(_SDCard+30)& (0+255),b
  7118  00F498  0E00               	movlw	0
  7119  00F49A  6F9F               	movwf	(_SDCard+31)& (0+255),b
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;SD_PIC.c: 615: SDCard.read.MBR_flag_first = 1;
  7123  00F49C  0E01               	movlw	1
  7124  00F49E  0100               	movlb	0	; () banked
  7125  00F4A0  6FAD               	movwf	(_SDCard+45)& (0+255),b
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;SD_PIC.c: 616: SDCard.read.MBR_startBlock = 0;
  7129  00F4A2  0E00               	movlw	0
  7130  00F4A4  0100               	movlb	0	; () banked
  7131  00F4A6  6FA9               	movwf	(_SDCard+41)& (0+255),b
  7132  00F4A8  0E00               	movlw	0
  7133  00F4AA  6FAA               	movwf	(_SDCard+42)& (0+255),b
  7134  00F4AC  0E00               	movlw	0
  7135  00F4AE  6FAB               	movwf	(_SDCard+43)& (0+255),b
  7136  00F4B0  0E00               	movlw	0
  7137  00F4B2  6FAC               	movwf	(_SDCard+44)& (0+255),b
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;SD_PIC.c: 617: SDCard.read.lastBlockRead = 0;
  7141  00F4B4  0E00               	movlw	0
  7142  00F4B6  0100               	movlb	0	; () banked
  7143  00F4B8  6FA5               	movwf	(_SDCard+37)& (0+255),b
  7144  00F4BA  0E00               	movlw	0
  7145  00F4BC  6FA6               	movwf	(_SDCard+38)& (0+255),b
  7146  00F4BE  0E00               	movlw	0
  7147  00F4C0  6FA7               	movwf	(_SDCard+39)& (0+255),b
  7148  00F4C2  0E00               	movlw	0
  7149  00F4C4  6FA8               	movwf	(_SDCard+40)& (0+255),b
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;SD_PIC.c: 620: SDCard.init = 1;
  7153  00F4C6  0E01               	movlw	1
  7154  00F4C8  0100               	movlb	0	; () banked
  7155  00F4CA  6F9B               	movwf	(_SDCard+27)& (0+255),b
  7156  00F4CC  0012               	return		;funcret
  7157  00F4CE                     __end_of_initSD:
  7158                           	opt stack 0
  7159                           tblptru	equ	0xFF8
  7160                           tblptrh	equ	0xFF7
  7161                           tblptrl	equ	0xFF6
  7162                           tablat	equ	0xFF5
  7163                           prodh	equ	0xFF4
  7164                           prodl	equ	0xFF3
  7165                           postinc0	equ	0xFEE
  7166                           wreg	equ	0xFE8
  7167                           plusw1	equ	0xFE3
  7168                           indf2	equ	0xFDF
  7169                           postinc2	equ	0xFDE
  7170                           postdec2	equ	0xFDD
  7171                           plusw2	equ	0xFDB
  7172                           fsr2h	equ	0xFDA
  7173                           fsr2l	equ	0xFD9
  7174                           status	equ	0xFD8
  7175                           
  7176 ;; *************** function _spiInit *****************
  7177 ;; Defined at:
  7178 ;;		line 37 in file "SPI_PIC.c"
  7179 ;; Parameters:    Size  Location     Type
  7180 ;;  divider         1    wreg     unsigned char 
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;  divider         1    0[COMRAM] unsigned char 
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      void 
  7185 ;; Registers used:
  7186 ;;		wreg, status,2, status,0
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7195 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7196 ;;Total ram usage:        1 bytes
  7197 ;; Hardware stack levels used:    1
  7198 ;; This function calls:
  7199 ;;		Nothing
  7200 ;; This function is called by:
  7201 ;;		_initSD
  7202 ;; This function uses a non-reentrant model
  7203 ;;
  7204                           
  7205                           	psect	text18
  7206  00D6C0                     __ptext18:
  7207                           	opt stack 0
  7208  00D6C0                     _spiInit:
  7209                           	opt stack 29
  7210                           
  7211                           ;incstack = 0
  7212                           ;spiInit@divider stored from wreg
  7213  00D6C0  6E01               	movwf	spiInit@divider,c
  7214                           
  7215                           ;SPI_PIC.c: 38: SSPCON1bits.SSPEN = 0;
  7216  00D6C2  9AC6               	bcf	4038,5,c	;volatile
  7217                           
  7218                           ;SPI_PIC.c: 39: SSPSTAT = 0x00;
  7219  00D6C4  0E00               	movlw	0
  7220  00D6C6  6EC7               	movwf	4039,c	;volatile
  7221                           
  7222                           ;SPI_PIC.c: 44: switch(divider){
  7223  00D6C8  D007               	goto	l3092
  7224  00D6CA                     l3084:
  7225                           
  7226                           ;SPI_PIC.c: 46: SSPCON1 = 0b00010000;
  7227  00D6CA  0E10               	movlw	16
  7228  00D6CC  D003               	goto	L12
  7229  00D6CE                     l3088:
  7230                           
  7231                           ;SPI_PIC.c: 52: SSPCON1 = 0b00010010;
  7232  00D6CE  0E12               	movlw	18
  7233  00D6D0  D001               	goto	L12
  7234  00D6D2                     l3090:
  7235                           
  7236                           ;SPI_PIC.c: 55: SSPCON1 = 0b00010001;
  7237  00D6D2  0E11               	movlw	17
  7238  00D6D4                     L12:
  7239  00D6D4  6EC6               	movwf	4038,c	;volatile
  7240                           
  7241                           ;SPI_PIC.c: 56: }
  7242  00D6D6  D00B               	goto	l320
  7243  00D6D8                     l3092:
  7244  00D6D8  5001               	movf	spiInit@divider,w,c
  7245                           
  7246                           ; Switch size 1, requested type "space"
  7247                           ; Number of cases is 3, Range of values is 4 to 64
  7248                           ; switch strategies available:
  7249                           ; Name         Instructions Cycles
  7250                           ; simple_byte           10     6 (average)
  7251                           ;	Chosen strategy is simple_byte
  7252  00D6DA  0A04               	xorlw	4	; case 4
  7253  00D6DC  B4D8               	btfsc	status,2,c
  7254  00D6DE  D7F5               	goto	l3084
  7255  00D6E0  0A14               	xorlw	20	; case 16
  7256  00D6E2  B4D8               	btfsc	status,2,c
  7257  00D6E4  D7F6               	goto	l3090
  7258  00D6E6  0A50               	xorlw	80	; case 64
  7259  00D6E8  B4D8               	btfsc	status,2,c
  7260  00D6EA  D7F1               	goto	l3088
  7261  00D6EC  D7F2               	goto	l3090
  7262  00D6EE                     l320:
  7263                           
  7264                           ;SPI_PIC.c: 59: TRISCbits.TRISC5 = 0;
  7265  00D6EE  9A94               	bcf	3988,5,c	;volatile
  7266                           
  7267                           ;SPI_PIC.c: 60: TRISCbits.TRISC4 = 1;
  7268  00D6F0  8894               	bsf	3988,4,c	;volatile
  7269                           
  7270                           ;SPI_PIC.c: 61: TRISCbits.TRISC3 = 0;
  7271  00D6F2  9694               	bcf	3988,3,c	;volatile
  7272                           
  7273                           ;SPI_PIC.c: 63: SSPCON1bits.SSPEN = 1;
  7274  00D6F4  8AC6               	bsf	4038,5,c	;volatile
  7275  00D6F6  0012               	return		;funcret
  7276  00D6F8                     __end_of_spiInit:
  7277                           	opt stack 0
  7278                           tblptru	equ	0xFF8
  7279                           tblptrh	equ	0xFF7
  7280                           tblptrl	equ	0xFF6
  7281                           tablat	equ	0xFF5
  7282                           prodh	equ	0xFF4
  7283                           prodl	equ	0xFF3
  7284                           postinc0	equ	0xFEE
  7285                           wreg	equ	0xFE8
  7286                           plusw1	equ	0xFE3
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           plusw2	equ	0xFDB
  7291                           fsr2h	equ	0xFDA
  7292                           fsr2l	equ	0xFD9
  7293                           status	equ	0xFD8
  7294                           
  7295 ;; *************** function ___lwtoft *****************
  7296 ;; Defined at:
  7297 ;;		line 28 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;  c               2    8[COMRAM] unsigned int 
  7300 ;; Auto vars:     Size  Location     Type
  7301 ;;		None
  7302 ;; Return value:  Size  Location     Type
  7303 ;;                  3    8[COMRAM] float 
  7304 ;; Registers used:
  7305 ;;		wreg, status,2, status,0, cstack
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7311 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;Total ram usage:        3 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:    1
  7318 ;; This function calls:
  7319 ;;		___ftpack
  7320 ;; This function is called by:
  7321 ;;		_initSD
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text19
  7326  00D628                     __ptext19:
  7327                           	opt stack 0
  7328  00D628                     ___lwtoft:
  7329                           	opt stack 28
  7330                           
  7331                           ;incstack = 0
  7332  00D628  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  7333  00D62C  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  7334  00D630  6A03               	clrf	___ftpack@arg+2,c
  7335  00D632  0E8E               	movlw	142
  7336  00D634  6E04               	movwf	___ftpack@exp,c
  7337  00D636  0E00               	movlw	0
  7338  00D638  6E05               	movwf	___ftpack@sign,c
  7339  00D63A  EC91  F06D         	call	___ftpack	;wreg free
  7340  00D63E  C001  F009         	movff	?___ftpack,?___lwtoft
  7341  00D642  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  7342  00D646  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  7343  00D64A  0012               	return	
  7344  00D64C                     __end_of___lwtoft:
  7345                           	opt stack 0
  7346                           tblptru	equ	0xFF8
  7347                           tblptrh	equ	0xFF7
  7348                           tblptrl	equ	0xFF6
  7349                           tablat	equ	0xFF5
  7350                           prodh	equ	0xFF4
  7351                           prodl	equ	0xFF3
  7352                           postinc0	equ	0xFEE
  7353                           wreg	equ	0xFE8
  7354                           plusw1	equ	0xFE3
  7355                           indf2	equ	0xFDF
  7356                           postinc2	equ	0xFDE
  7357                           postdec2	equ	0xFDD
  7358                           plusw2	equ	0xFDB
  7359                           fsr2h	equ	0xFDA
  7360                           fsr2l	equ	0xFD9
  7361                           status	equ	0xFD8
  7362                           
  7363 ;; *************** function ___lltoft *****************
  7364 ;; Defined at:
  7365 ;;		line 35 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lltoft.c"
  7366 ;; Parameters:    Size  Location     Type
  7367 ;;  c               4    8[COMRAM] unsigned long 
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;  exp             1   16[COMRAM] unsigned char 
  7370 ;; Return value:  Size  Location     Type
  7371 ;;                  3    8[COMRAM] float 
  7372 ;; Registers used:
  7373 ;;		wreg, status,2, status,0, cstack
  7374 ;; Tracked objects:
  7375 ;;		On entry : 0/0
  7376 ;;		On exit  : 0/0
  7377 ;;		Unchanged: 0/0
  7378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7379 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7380 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7381 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7383 ;;Total ram usage:        9 bytes
  7384 ;; Hardware stack levels used:    1
  7385 ;; Hardware stack levels required when called:    1
  7386 ;; This function calls:
  7387 ;;		___ftpack
  7388 ;; This function is called by:
  7389 ;;		_initSD
  7390 ;;		_printf
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           	psect	text20
  7395  00D772                     __ptext20:
  7396                           	opt stack 0
  7397  00D772                     ___lltoft:
  7398                           	opt stack 28
  7399                           
  7400                           ;incstack = 0
  7401  00D772  0E8E               	movlw	142
  7402  00D774  6E11               	movwf	___lltoft@exp,c
  7403  00D776  D006               	goto	l3450
  7404  00D778                     l3448:
  7405  00D778  90D8               	bcf	status,0,c
  7406  00D77A  320C               	rrcf	___lltoft@c+3,f,c
  7407  00D77C  320B               	rrcf	___lltoft@c+2,f,c
  7408  00D77E  320A               	rrcf	___lltoft@c+1,f,c
  7409  00D780  3209               	rrcf	___lltoft@c,f,c
  7410  00D782  2A11               	incf	___lltoft@exp,f,c
  7411  00D784                     l3450:
  7412  00D784  0E00               	movlw	0
  7413  00D786  1409               	andwf	___lltoft@c,w,c
  7414  00D788  6E0D               	movwf	??___lltoft& (0+255),c
  7415  00D78A  0E00               	movlw	0
  7416  00D78C  140A               	andwf	___lltoft@c+1,w,c
  7417  00D78E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  7418  00D790  0E00               	movlw	0
  7419  00D792  140B               	andwf	___lltoft@c+2,w,c
  7420  00D794  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  7421  00D796  0EFF               	movlw	255
  7422  00D798  140C               	andwf	___lltoft@c+3,w,c
  7423  00D79A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  7424  00D79C  500D               	movf	??___lltoft,w,c
  7425  00D79E  100E               	iorwf	??___lltoft+1,w,c
  7426  00D7A0  100F               	iorwf	??___lltoft+2,w,c
  7427  00D7A2  1010               	iorwf	??___lltoft+3,w,c
  7428  00D7A4  A4D8               	btfss	status,2,c
  7429  00D7A6  D7E8               	goto	l3448
  7430  00D7A8  C009  F001         	movff	___lltoft@c,___ftpack@arg
  7431  00D7AC  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  7432  00D7B0  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  7433  00D7B4  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  7434  00D7B8  0E00               	movlw	0
  7435  00D7BA  6E05               	movwf	___ftpack@sign,c
  7436  00D7BC  EC91  F06D         	call	___ftpack	;wreg free
  7437  00D7C0  C001  F009         	movff	?___ftpack,?___lltoft
  7438  00D7C4  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  7439  00D7C8  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  7440  00D7CC  0012               	return	
  7441  00D7CE                     __end_of___lltoft:
  7442                           	opt stack 0
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           plusw1	equ	0xFE3
  7452                           indf2	equ	0xFDF
  7453                           postinc2	equ	0xFDE
  7454                           postdec2	equ	0xFDD
  7455                           plusw2	equ	0xFDB
  7456                           fsr2h	equ	0xFDA
  7457                           fsr2l	equ	0xFD9
  7458                           status	equ	0xFD8
  7459                           
  7460 ;; *************** function ___fttol *****************
  7461 ;; Defined at:
  7462 ;;		line 44 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  7463 ;; Parameters:    Size  Location     Type
  7464 ;;  f1              3   42[COMRAM] float 
  7465 ;; Auto vars:     Size  Location     Type
  7466 ;;  lval            4   52[COMRAM] unsigned long 
  7467 ;;  exp1            1   56[COMRAM] unsigned char 
  7468 ;;  sign1           1   51[COMRAM] unsigned char 
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  4   42[COMRAM] long 
  7471 ;; Registers used:
  7472 ;;		wreg, status,2, status,0
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7478 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;Total ram usage:       15 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; This function calls:
  7485 ;;		Nothing
  7486 ;; This function is called by:
  7487 ;;		_initSD
  7488 ;;		_printf
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           	psect	text21
  7493  00DDAA                     __ptext21:
  7494                           	opt stack 0
  7495  00DDAA                     ___fttol:
  7496                           	opt stack 29
  7497                           
  7498                           ;incstack = 0
  7499  00DDAA  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  7500  00DDAE  6A30               	clrf	(??___fttol+1)& (0+255),c
  7501  00DDB0  6A31               	clrf	(??___fttol+2)& (0+255),c
  7502  00DDB2  342C               	rlcf	___fttol@f1+1,w,c
  7503  00DDB4  362F               	rlcf	??___fttol& (0+255),f,c
  7504  00DDB6  E301               	bnc	u3211
  7505  00DDB8  8030               	bsf	(??___fttol+1)& (0+255),0,c
  7506  00DDBA                     u3211:
  7507  00DDBA  502F               	movf	??___fttol,w,c
  7508  00DDBC  6E39               	movwf	___fttol@exp1,c
  7509  00DDBE  5039               	movf	___fttol@exp1,w,c
  7510  00DDC0  A4D8               	btfss	status,2,c
  7511  00DDC2  D009               	goto	l3368
  7512  00DDC4  0E00               	movlw	0
  7513  00DDC6  6E2B               	movwf	?___fttol,c
  7514  00DDC8  0E00               	movlw	0
  7515  00DDCA  6E2C               	movwf	?___fttol+1,c
  7516  00DDCC  0E00               	movlw	0
  7517  00DDCE  6E2D               	movwf	?___fttol+2,c
  7518  00DDD0  0E00               	movlw	0
  7519  00DDD2  6E2E               	movwf	?___fttol+3,c
  7520  00DDD4  0012               	return	
  7521  00DDD6                     l3368:
  7522  00DDD6  0E17               	movlw	23
  7523  00DDD8  6E2F               	movwf	??___fttol& (0+255),c
  7524  00DDDA  C02B  F030         	movff	___fttol@f1,??___fttol+1
  7525  00DDDE  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  7526  00DDE2  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  7527  00DDE6  282F               	incf	??___fttol,w,c
  7528  00DDE8  6E33               	movwf	(??___fttol+4)& (0+255),c
  7529  00DDEA  D004               	goto	u3230
  7530  00DDEC                     u3235:
  7531  00DDEC  90D8               	bcf	status,0,c
  7532  00DDEE  3232               	rrcf	??___fttol+3,f,c
  7533  00DDF0  3231               	rrcf	??___fttol+2,f,c
  7534  00DDF2  3230               	rrcf	??___fttol+1,f,c
  7535  00DDF4                     u3230:
  7536  00DDF4  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  7537  00DDF6  D7FA               	goto	u3235
  7538  00DDF8  5030               	movf	??___fttol+1,w,c
  7539  00DDFA  6E34               	movwf	___fttol@sign1,c
  7540  00DDFC  8E2C               	bsf	___fttol@f1+1,7,c
  7541  00DDFE  0EFF               	movlw	255
  7542  00DE00  162B               	andwf	___fttol@f1,f,c
  7543  00DE02  0EFF               	movlw	255
  7544  00DE04  162C               	andwf	___fttol@f1+1,f,c
  7545  00DE06  0E00               	movlw	0
  7546  00DE08  162D               	andwf	___fttol@f1+2,f,c
  7547  00DE0A  502B               	movf	___fttol@f1,w,c
  7548  00DE0C  6E35               	movwf	___fttol@lval,c
  7549  00DE0E  502C               	movf	___fttol@f1+1,w,c
  7550  00DE10  6E36               	movwf	___fttol@lval+1,c
  7551  00DE12  502D               	movf	___fttol@f1+2,w,c
  7552  00DE14  6E37               	movwf	___fttol@lval+2,c
  7553  00DE16  6A38               	clrf	___fttol@lval+3,c
  7554  00DE18  0E8E               	movlw	142
  7555  00DE1A  5E39               	subwf	___fttol@exp1,f,c
  7556  00DE1C  AE39               	btfss	___fttol@exp1,7,c
  7557  00DE1E  D016               	goto	l3390
  7558  00DE20  5039               	movf	___fttol@exp1,w,c
  7559  00DE22  0A80               	xorlw	128
  7560  00DE24  0F8F               	addlw	143
  7561  00DE26  B0D8               	btfsc	status,0,c
  7562  00DE28  D009               	goto	l3386
  7563  00DE2A  0E00               	movlw	0
  7564  00DE2C  6E2B               	movwf	?___fttol,c
  7565  00DE2E  0E00               	movlw	0
  7566  00DE30  6E2C               	movwf	?___fttol+1,c
  7567  00DE32  0E00               	movlw	0
  7568  00DE34  6E2D               	movwf	?___fttol+2,c
  7569  00DE36  0E00               	movlw	0
  7570  00DE38  6E2E               	movwf	?___fttol+3,c
  7571  00DE3A  0012               	return	
  7572  00DE3C                     l3386:
  7573  00DE3C  90D8               	bcf	status,0,c
  7574  00DE3E  3238               	rrcf	___fttol@lval+3,f,c
  7575  00DE40  3237               	rrcf	___fttol@lval+2,f,c
  7576  00DE42  3236               	rrcf	___fttol@lval+1,f,c
  7577  00DE44  3235               	rrcf	___fttol@lval,f,c
  7578  00DE46  3E39               	incfsz	___fttol@exp1,f,c
  7579  00DE48  D7F9               	goto	l3386
  7580  00DE4A  D015               	goto	l3400
  7581  00DE4C                     l3390:
  7582  00DE4C  0E17               	movlw	23
  7583  00DE4E  6439               	cpfsgt	___fttol@exp1,c
  7584  00DE50  D00F               	goto	l3398
  7585  00DE52  0E00               	movlw	0
  7586  00DE54  6E2B               	movwf	?___fttol,c
  7587  00DE56  0E00               	movlw	0
  7588  00DE58  6E2C               	movwf	?___fttol+1,c
  7589  00DE5A  0E00               	movlw	0
  7590  00DE5C  6E2D               	movwf	?___fttol+2,c
  7591  00DE5E  0E00               	movlw	0
  7592  00DE60  6E2E               	movwf	?___fttol+3,c
  7593  00DE62  0012               	return	
  7594  00DE64                     l3396:
  7595  00DE64  90D8               	bcf	status,0,c
  7596  00DE66  3635               	rlcf	___fttol@lval,f,c
  7597  00DE68  3636               	rlcf	___fttol@lval+1,f,c
  7598  00DE6A  3637               	rlcf	___fttol@lval+2,f,c
  7599  00DE6C  3638               	rlcf	___fttol@lval+3,f,c
  7600  00DE6E  0639               	decf	___fttol@exp1,f,c
  7601  00DE70                     l3398:
  7602  00DE70  5039               	movf	___fttol@exp1,w,c
  7603  00DE72  A4D8               	btfss	status,2,c
  7604  00DE74  D7F7               	goto	l3396
  7605  00DE76                     l3400:
  7606  00DE76  5034               	movf	___fttol@sign1,w,c
  7607  00DE78  B4D8               	btfsc	status,2,c
  7608  00DE7A  D008               	goto	l3404
  7609  00DE7C  1E38               	comf	___fttol@lval+3,f,c
  7610  00DE7E  1E37               	comf	___fttol@lval+2,f,c
  7611  00DE80  1E36               	comf	___fttol@lval+1,f,c
  7612  00DE82  6C35               	negf	___fttol@lval,c
  7613  00DE84  0E00               	movlw	0
  7614  00DE86  2236               	addwfc	___fttol@lval+1,f,c
  7615  00DE88  2237               	addwfc	___fttol@lval+2,f,c
  7616  00DE8A  2238               	addwfc	___fttol@lval+3,f,c
  7617  00DE8C                     l3404:
  7618  00DE8C  C035  F02B         	movff	___fttol@lval,?___fttol
  7619  00DE90  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  7620  00DE94  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  7621  00DE98  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  7622  00DE9C  0012               	return	
  7623  00DE9E                     __end_of___fttol:
  7624                           	opt stack 0
  7625                           tblptru	equ	0xFF8
  7626                           tblptrh	equ	0xFF7
  7627                           tblptrl	equ	0xFF6
  7628                           tablat	equ	0xFF5
  7629                           prodh	equ	0xFF4
  7630                           prodl	equ	0xFF3
  7631                           postinc0	equ	0xFEE
  7632                           wreg	equ	0xFE8
  7633                           plusw1	equ	0xFE3
  7634                           indf2	equ	0xFDF
  7635                           postinc2	equ	0xFDE
  7636                           postdec2	equ	0xFDD
  7637                           plusw2	equ	0xFDB
  7638                           fsr2h	equ	0xFDA
  7639                           fsr2l	equ	0xFD9
  7640                           status	equ	0xFD8
  7641                           
  7642 ;; *************** function ___ftmul *****************
  7643 ;; Defined at:
  7644 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  7645 ;; Parameters:    Size  Location     Type
  7646 ;;  f1              3   20[COMRAM] float 
  7647 ;;  f2              3   23[COMRAM] float 
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  7650 ;;  sign            1   34[COMRAM] unsigned char 
  7651 ;;  cntr            1   33[COMRAM] unsigned char 
  7652 ;;  exp             1   29[COMRAM] unsigned char 
  7653 ;; Return value:  Size  Location     Type
  7654 ;;                  3   20[COMRAM] float 
  7655 ;; Registers used:
  7656 ;;		wreg, status,2, status,0, cstack
  7657 ;; Tracked objects:
  7658 ;;		On entry : 0/0
  7659 ;;		On exit  : 0/0
  7660 ;;		Unchanged: 0/0
  7661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7662 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7663 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7664 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7665 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;Total ram usage:       15 bytes
  7667 ;; Hardware stack levels used:    1
  7668 ;; Hardware stack levels required when called:    1
  7669 ;; This function calls:
  7670 ;;		___ftpack
  7671 ;; This function is called by:
  7672 ;;		_initSD
  7673 ;;		_fround
  7674 ;;		_scale
  7675 ;;		_printf
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           	psect	text22
  7680  00DCB6                     __ptext22:
  7681                           	opt stack 0
  7682  00DCB6                     ___ftmul:
  7683                           	opt stack 27
  7684                           
  7685                           ;incstack = 0
  7686  00DCB6  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  7687  00DCBA  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7688  00DCBC  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7689  00DCBE  3416               	rlcf	___ftmul@f1+1,w,c
  7690  00DCC0  361B               	rlcf	??___ftmul& (0+255),f,c
  7691  00DCC2  E301               	bnc	u2681
  7692  00DCC4  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7693  00DCC6                     u2681:
  7694  00DCC6  501B               	movf	??___ftmul,w,c
  7695  00DCC8  6E1E               	movwf	___ftmul@exp,c
  7696  00DCCA  501E               	movf	___ftmul@exp,w,c
  7697  00DCCC  A4D8               	btfss	status,2,c
  7698  00DCCE  D007               	goto	l2950
  7699  00DCD0  0E00               	movlw	0
  7700  00DCD2  6E15               	movwf	?___ftmul,c
  7701  00DCD4  0E00               	movlw	0
  7702  00DCD6  6E16               	movwf	?___ftmul+1,c
  7703  00DCD8  0E00               	movlw	0
  7704  00DCDA  6E17               	movwf	?___ftmul+2,c
  7705  00DCDC  0012               	return	
  7706  00DCDE                     l2950:
  7707  00DCDE  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  7708  00DCE2  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  7709  00DCE4  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  7710  00DCE6  3419               	rlcf	___ftmul@f2+1,w,c
  7711  00DCE8  361B               	rlcf	??___ftmul& (0+255),f,c
  7712  00DCEA  E301               	bnc	u2701
  7713  00DCEC  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  7714  00DCEE                     u2701:
  7715  00DCEE  501B               	movf	??___ftmul,w,c
  7716  00DCF0  6E23               	movwf	___ftmul@sign,c
  7717  00DCF2  5023               	movf	___ftmul@sign,w,c
  7718  00DCF4  A4D8               	btfss	status,2,c
  7719  00DCF6  D007               	goto	l2956
  7720  00DCF8  0E00               	movlw	0
  7721  00DCFA  6E15               	movwf	?___ftmul,c
  7722  00DCFC  0E00               	movlw	0
  7723  00DCFE  6E16               	movwf	?___ftmul+1,c
  7724  00DD00  0E00               	movlw	0
  7725  00DD02  6E17               	movwf	?___ftmul+2,c
  7726  00DD04  0012               	return	
  7727  00DD06                     l2956:
  7728  00DD06  5023               	movf	___ftmul@sign,w,c
  7729  00DD08  0F7B               	addlw	123
  7730  00DD0A  261E               	addwf	___ftmul@exp,f,c
  7731  00DD0C  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  7732  00DD10  501A               	movf	___ftmul@f2+2,w,c
  7733  00DD12  1A23               	xorwf	___ftmul@sign,f,c
  7734  00DD14  0E80               	movlw	128
  7735  00DD16  1623               	andwf	___ftmul@sign,f,c
  7736  00DD18  8E16               	bsf	___ftmul@f1+1,7,c
  7737  00DD1A  8E19               	bsf	___ftmul@f2+1,7,c
  7738  00DD1C  0EFF               	movlw	255
  7739  00DD1E  1618               	andwf	___ftmul@f2,f,c
  7740  00DD20  0EFF               	movlw	255
  7741  00DD22  1619               	andwf	___ftmul@f2+1,f,c
  7742  00DD24  0E00               	movlw	0
  7743  00DD26  161A               	andwf	___ftmul@f2+2,f,c
  7744  00DD28  0E00               	movlw	0
  7745  00DD2A  6E1F               	movwf	___ftmul@f3_as_product,c
  7746  00DD2C  0E00               	movlw	0
  7747  00DD2E  6E20               	movwf	___ftmul@f3_as_product+1,c
  7748  00DD30  0E00               	movlw	0
  7749  00DD32  6E21               	movwf	___ftmul@f3_as_product+2,c
  7750  00DD34  0E07               	movlw	7
  7751  00DD36  6E22               	movwf	___ftmul@cntr,c
  7752  00DD38                     l2970:
  7753  00DD38  A015               	btfss	___ftmul@f1,0,c
  7754  00DD3A  D006               	goto	l2974
  7755  00DD3C  5018               	movf	___ftmul@f2,w,c
  7756  00DD3E  261F               	addwf	___ftmul@f3_as_product,f,c
  7757  00DD40  5019               	movf	___ftmul@f2+1,w,c
  7758  00DD42  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7759  00DD44  501A               	movf	___ftmul@f2+2,w,c
  7760  00DD46  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7761  00DD48                     l2974:
  7762  00DD48  90D8               	bcf	status,0,c
  7763  00DD4A  3217               	rrcf	___ftmul@f1+2,f,c
  7764  00DD4C  3216               	rrcf	___ftmul@f1+1,f,c
  7765  00DD4E  3215               	rrcf	___ftmul@f1,f,c
  7766  00DD50  90D8               	bcf	status,0,c
  7767  00DD52  3618               	rlcf	___ftmul@f2,f,c
  7768  00DD54  3619               	rlcf	___ftmul@f2+1,f,c
  7769  00DD56  361A               	rlcf	___ftmul@f2+2,f,c
  7770  00DD58  2E22               	decfsz	___ftmul@cntr,f,c
  7771  00DD5A  D7EE               	goto	l2970
  7772  00DD5C  0E09               	movlw	9
  7773  00DD5E  6E22               	movwf	___ftmul@cntr,c
  7774  00DD60                     l2980:
  7775  00DD60  A015               	btfss	___ftmul@f1,0,c
  7776  00DD62  D006               	goto	l2984
  7777  00DD64  5018               	movf	___ftmul@f2,w,c
  7778  00DD66  261F               	addwf	___ftmul@f3_as_product,f,c
  7779  00DD68  5019               	movf	___ftmul@f2+1,w,c
  7780  00DD6A  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  7781  00DD6C  501A               	movf	___ftmul@f2+2,w,c
  7782  00DD6E  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  7783  00DD70                     l2984:
  7784  00DD70  90D8               	bcf	status,0,c
  7785  00DD72  3217               	rrcf	___ftmul@f1+2,f,c
  7786  00DD74  3216               	rrcf	___ftmul@f1+1,f,c
  7787  00DD76  3215               	rrcf	___ftmul@f1,f,c
  7788  00DD78  90D8               	bcf	status,0,c
  7789  00DD7A  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  7790  00DD7C  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  7791  00DD7E  321F               	rrcf	___ftmul@f3_as_product,f,c
  7792  00DD80  2E22               	decfsz	___ftmul@cntr,f,c
  7793  00DD82  D7EE               	goto	l2980
  7794  00DD84  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7795  00DD88  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7796  00DD8C  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7797  00DD90  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  7798  00DD94  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  7799  00DD98  EC91  F06D         	call	___ftpack	;wreg free
  7800  00DD9C  C001  F015         	movff	?___ftpack,?___ftmul
  7801  00DDA0  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  7802  00DDA4  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  7803  00DDA8  0012               	return	
  7804  00DDAA                     __end_of___ftmul:
  7805                           	opt stack 0
  7806                           tblptru	equ	0xFF8
  7807                           tblptrh	equ	0xFF7
  7808                           tblptrl	equ	0xFF6
  7809                           tablat	equ	0xFF5
  7810                           prodh	equ	0xFF4
  7811                           prodl	equ	0xFF3
  7812                           postinc0	equ	0xFEE
  7813                           wreg	equ	0xFE8
  7814                           plusw1	equ	0xFE3
  7815                           indf2	equ	0xFDF
  7816                           postinc2	equ	0xFDE
  7817                           postdec2	equ	0xFDD
  7818                           plusw2	equ	0xFDB
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function ___ftdiv *****************
  7824 ;; Defined at:
  7825 ;;		line 54 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  f1              3   11[COMRAM] float 
  7828 ;;  f2              3   14[COMRAM] float 
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;  f3              3   21[COMRAM] float 
  7831 ;;  sign            1   25[COMRAM] unsigned char 
  7832 ;;  exp             1   24[COMRAM] unsigned char 
  7833 ;;  cntr            1   20[COMRAM] unsigned char 
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  3   11[COMRAM] float 
  7836 ;; Registers used:
  7837 ;;		wreg, status,2, status,0, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7843 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7844 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7845 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7846 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7847 ;;Total ram usage:       15 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:    1
  7850 ;; This function calls:
  7851 ;;		___ftpack
  7852 ;; This function is called by:
  7853 ;;		_initSD
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	text23
  7858  00DBD0                     __ptext23:
  7859                           	opt stack 0
  7860  00DBD0                     ___ftdiv:
  7861                           	opt stack 28
  7862                           
  7863                           ;incstack = 0
  7864  00DBD0  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  7865  00DBD4  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  7866  00DBD6  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  7867  00DBD8  340D               	rlcf	___ftdiv@f1+1,w,c
  7868  00DBDA  3612               	rlcf	??___ftdiv& (0+255),f,c
  7869  00DBDC  E301               	bnc	u3111
  7870  00DBDE  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  7871  00DBE0                     u3111:
  7872  00DBE0  5012               	movf	??___ftdiv,w,c
  7873  00DBE2  6E19               	movwf	___ftdiv@exp,c
  7874  00DBE4  5019               	movf	___ftdiv@exp,w,c
  7875  00DBE6  A4D8               	btfss	status,2,c
  7876  00DBE8  D007               	goto	l3292
  7877  00DBEA  0E00               	movlw	0
  7878  00DBEC  6E0C               	movwf	?___ftdiv,c
  7879  00DBEE  0E00               	movlw	0
  7880  00DBF0  6E0D               	movwf	?___ftdiv+1,c
  7881  00DBF2  0E00               	movlw	0
  7882  00DBF4  6E0E               	movwf	?___ftdiv+2,c
  7883  00DBF6  0012               	return	
  7884  00DBF8                     l3292:
  7885  00DBF8  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  7886  00DBFC  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  7887  00DBFE  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  7888  00DC00  3410               	rlcf	___ftdiv@f2+1,w,c
  7889  00DC02  3612               	rlcf	??___ftdiv& (0+255),f,c
  7890  00DC04  E301               	bnc	u3131
  7891  00DC06  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  7892  00DC08                     u3131:
  7893  00DC08  5012               	movf	??___ftdiv,w,c
  7894  00DC0A  6E1A               	movwf	___ftdiv@sign,c
  7895  00DC0C  501A               	movf	___ftdiv@sign,w,c
  7896  00DC0E  A4D8               	btfss	status,2,c
  7897  00DC10  D007               	goto	l3298
  7898  00DC12  0E00               	movlw	0
  7899  00DC14  6E0C               	movwf	?___ftdiv,c
  7900  00DC16  0E00               	movlw	0
  7901  00DC18  6E0D               	movwf	?___ftdiv+1,c
  7902  00DC1A  0E00               	movlw	0
  7903  00DC1C  6E0E               	movwf	?___ftdiv+2,c
  7904  00DC1E  0012               	return	
  7905  00DC20                     l3298:
  7906  00DC20  0E00               	movlw	0
  7907  00DC22  6E16               	movwf	___ftdiv@f3,c
  7908  00DC24  0E00               	movlw	0
  7909  00DC26  6E17               	movwf	___ftdiv@f3+1,c
  7910  00DC28  0E00               	movlw	0
  7911  00DC2A  6E18               	movwf	___ftdiv@f3+2,c
  7912  00DC2C  501A               	movf	___ftdiv@sign,w,c
  7913  00DC2E  0F89               	addlw	137
  7914  00DC30  5E19               	subwf	___ftdiv@exp,f,c
  7915  00DC32  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
  7916  00DC36  5011               	movf	___ftdiv@f2+2,w,c
  7917  00DC38  1A1A               	xorwf	___ftdiv@sign,f,c
  7918  00DC3A  0E80               	movlw	128
  7919  00DC3C  161A               	andwf	___ftdiv@sign,f,c
  7920  00DC3E  8E0D               	bsf	___ftdiv@f1+1,7,c
  7921  00DC40  0EFF               	movlw	255
  7922  00DC42  160C               	andwf	___ftdiv@f1,f,c
  7923  00DC44  0EFF               	movlw	255
  7924  00DC46  160D               	andwf	___ftdiv@f1+1,f,c
  7925  00DC48  0E00               	movlw	0
  7926  00DC4A  160E               	andwf	___ftdiv@f1+2,f,c
  7927  00DC4C  8E10               	bsf	___ftdiv@f2+1,7,c
  7928  00DC4E  0EFF               	movlw	255
  7929  00DC50  160F               	andwf	___ftdiv@f2,f,c
  7930  00DC52  0EFF               	movlw	255
  7931  00DC54  1610               	andwf	___ftdiv@f2+1,f,c
  7932  00DC56  0E00               	movlw	0
  7933  00DC58  1611               	andwf	___ftdiv@f2+2,f,c
  7934  00DC5A  0E18               	movlw	24
  7935  00DC5C  6E15               	movwf	___ftdiv@cntr,c
  7936  00DC5E                     l3318:
  7937  00DC5E  90D8               	bcf	status,0,c
  7938  00DC60  3616               	rlcf	___ftdiv@f3,f,c
  7939  00DC62  3617               	rlcf	___ftdiv@f3+1,f,c
  7940  00DC64  3618               	rlcf	___ftdiv@f3+2,f,c
  7941  00DC66  500F               	movf	___ftdiv@f2,w,c
  7942  00DC68  5C0C               	subwf	___ftdiv@f1,w,c
  7943  00DC6A  5010               	movf	___ftdiv@f2+1,w,c
  7944  00DC6C  580D               	subwfb	___ftdiv@f1+1,w,c
  7945  00DC6E  5011               	movf	___ftdiv@f2+2,w,c
  7946  00DC70  580E               	subwfb	___ftdiv@f1+2,w,c
  7947  00DC72  A0D8               	btfss	status,0,c
  7948  00DC74  D007               	goto	l807
  7949  00DC76  500F               	movf	___ftdiv@f2,w,c
  7950  00DC78  5E0C               	subwf	___ftdiv@f1,f,c
  7951  00DC7A  5010               	movf	___ftdiv@f2+1,w,c
  7952  00DC7C  5A0D               	subwfb	___ftdiv@f1+1,f,c
  7953  00DC7E  5011               	movf	___ftdiv@f2+2,w,c
  7954  00DC80  5A0E               	subwfb	___ftdiv@f1+2,f,c
  7955  00DC82  8016               	bsf	___ftdiv@f3,0,c
  7956  00DC84                     l807:
  7957  00DC84  90D8               	bcf	status,0,c
  7958  00DC86  360C               	rlcf	___ftdiv@f1,f,c
  7959  00DC88  360D               	rlcf	___ftdiv@f1+1,f,c
  7960  00DC8A  360E               	rlcf	___ftdiv@f1+2,f,c
  7961  00DC8C  2E15               	decfsz	___ftdiv@cntr,f,c
  7962  00DC8E  D7E7               	goto	l3318
  7963  00DC90  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
  7964  00DC94  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7965  00DC98  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7966  00DC9C  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
  7967  00DCA0  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
  7968  00DCA4  EC91  F06D         	call	___ftpack	;wreg free
  7969  00DCA8  C001  F00C         	movff	?___ftpack,?___ftdiv
  7970  00DCAC  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
  7971  00DCB0  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
  7972  00DCB4  0012               	return	
  7973  00DCB6                     __end_of___ftdiv:
  7974                           	opt stack 0
  7975                           tblptru	equ	0xFF8
  7976                           tblptrh	equ	0xFF7
  7977                           tblptrl	equ	0xFF6
  7978                           tablat	equ	0xFF5
  7979                           prodh	equ	0xFF4
  7980                           prodl	equ	0xFF3
  7981                           postinc0	equ	0xFEE
  7982                           wreg	equ	0xFE8
  7983                           plusw1	equ	0xFE3
  7984                           indf2	equ	0xFDF
  7985                           postinc2	equ	0xFDE
  7986                           postdec2	equ	0xFDD
  7987                           plusw2	equ	0xFDB
  7988                           fsr2h	equ	0xFDA
  7989                           fsr2l	equ	0xFD9
  7990                           status	equ	0xFD8
  7991                           
  7992 ;; *************** function ___ftpack *****************
  7993 ;; Defined at:
  7994 ;;		line 62 in file "D:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  7995 ;; Parameters:    Size  Location     Type
  7996 ;;  arg             3    0[COMRAM] unsigned um
  7997 ;;  exp             1    3[COMRAM] unsigned char 
  7998 ;;  sign            1    4[COMRAM] unsigned char 
  7999 ;; Auto vars:     Size  Location     Type
  8000 ;;		None
  8001 ;; Return value:  Size  Location     Type
  8002 ;;                  3    0[COMRAM] float 
  8003 ;; Registers used:
  8004 ;;		wreg, status,2, status,0
  8005 ;; Tracked objects:
  8006 ;;		On entry : 0/0
  8007 ;;		On exit  : 0/0
  8008 ;;		Unchanged: 0/0
  8009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8010 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;Total ram usage:        8 bytes
  8015 ;; Hardware stack levels used:    1
  8016 ;; This function calls:
  8017 ;;		Nothing
  8018 ;; This function is called by:
  8019 ;;		___ftadd
  8020 ;;		___ftdiv
  8021 ;;		___ftmul
  8022 ;;		___lltoft
  8023 ;;		___lwtoft
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027                           	psect	text24
  8028  00DB22                     __ptext24:
  8029                           	opt stack 0
  8030  00DB22                     ___ftpack:
  8031                           	opt stack 27
  8032                           
  8033                           ;incstack = 0
  8034  00DB22  5004               	movf	___ftpack@exp,w,c
  8035  00DB24  B4D8               	btfsc	status,2,c
  8036  00DB26  D005               	goto	l2800
  8037  00DB28  5001               	movf	___ftpack@arg,w,c
  8038  00DB2A  1002               	iorwf	___ftpack@arg+1,w,c
  8039  00DB2C  1003               	iorwf	___ftpack@arg+2,w,c
  8040  00DB2E  A4D8               	btfss	status,2,c
  8041  00DB30  D00C               	goto	l2806
  8042  00DB32                     l2800:
  8043  00DB32  0E00               	movlw	0
  8044  00DB34  6E01               	movwf	?___ftpack,c
  8045  00DB36  0E00               	movlw	0
  8046  00DB38  6E02               	movwf	?___ftpack+1,c
  8047  00DB3A  0E00               	movlw	0
  8048  00DB3C  6E03               	movwf	?___ftpack+2,c
  8049  00DB3E  0012               	return	
  8050  00DB40                     l2804:
  8051  00DB40  2A04               	incf	___ftpack@exp,f,c
  8052  00DB42  90D8               	bcf	status,0,c
  8053  00DB44  3203               	rrcf	___ftpack@arg+2,f,c
  8054  00DB46  3202               	rrcf	___ftpack@arg+1,f,c
  8055  00DB48  3201               	rrcf	___ftpack@arg,f,c
  8056  00DB4A                     l2806:
  8057  00DB4A  0E00               	movlw	0
  8058  00DB4C  1401               	andwf	___ftpack@arg,w,c
  8059  00DB4E  6E06               	movwf	??___ftpack& (0+255),c
  8060  00DB50  0E00               	movlw	0
  8061  00DB52  1402               	andwf	___ftpack@arg+1,w,c
  8062  00DB54  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8063  00DB56  0EFE               	movlw	254
  8064  00DB58  1403               	andwf	___ftpack@arg+2,w,c
  8065  00DB5A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8066  00DB5C  5006               	movf	??___ftpack,w,c
  8067  00DB5E  1007               	iorwf	??___ftpack+1,w,c
  8068  00DB60  1008               	iorwf	??___ftpack+2,w,c
  8069  00DB62  B4D8               	btfsc	status,2,c
  8070  00DB64  D00C               	goto	l2812
  8071  00DB66  D7EC               	goto	l2804
  8072  00DB68                     l2808:
  8073  00DB68  2A04               	incf	___ftpack@exp,f,c
  8074  00DB6A  0E01               	movlw	1
  8075  00DB6C  2601               	addwf	___ftpack@arg,f,c
  8076  00DB6E  0E00               	movlw	0
  8077  00DB70  2202               	addwfc	___ftpack@arg+1,f,c
  8078  00DB72  0E00               	movlw	0
  8079  00DB74  2203               	addwfc	___ftpack@arg+2,f,c
  8080  00DB76  90D8               	bcf	status,0,c
  8081  00DB78  3203               	rrcf	___ftpack@arg+2,f,c
  8082  00DB7A  3202               	rrcf	___ftpack@arg+1,f,c
  8083  00DB7C  3201               	rrcf	___ftpack@arg,f,c
  8084  00DB7E                     l2812:
  8085  00DB7E  0E00               	movlw	0
  8086  00DB80  1401               	andwf	___ftpack@arg,w,c
  8087  00DB82  6E06               	movwf	??___ftpack& (0+255),c
  8088  00DB84  0E00               	movlw	0
  8089  00DB86  1402               	andwf	___ftpack@arg+1,w,c
  8090  00DB88  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8091  00DB8A  0EFF               	movlw	255
  8092  00DB8C  1403               	andwf	___ftpack@arg+2,w,c
  8093  00DB8E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8094  00DB90  5006               	movf	??___ftpack,w,c
  8095  00DB92  1007               	iorwf	??___ftpack+1,w,c
  8096  00DB94  1008               	iorwf	??___ftpack+2,w,c
  8097  00DB96  B4D8               	btfsc	status,2,c
  8098  00DB98  D006               	goto	l2816
  8099  00DB9A  D7E6               	goto	l2808
  8100  00DB9C                     l2814:
  8101  00DB9C  0604               	decf	___ftpack@exp,f,c
  8102  00DB9E  90D8               	bcf	status,0,c
  8103  00DBA0  3601               	rlcf	___ftpack@arg,f,c
  8104  00DBA2  3602               	rlcf	___ftpack@arg+1,f,c
  8105  00DBA4  3603               	rlcf	___ftpack@arg+2,f,c
  8106  00DBA6                     l2816:
  8107  00DBA6  BE02               	btfsc	___ftpack@arg+1,7,c
  8108  00DBA8  D003               	goto	l749
  8109  00DBAA  0E02               	movlw	2
  8110  00DBAC  6004               	cpfslt	___ftpack@exp,c
  8111  00DBAE  D7F6               	goto	l2814
  8112  00DBB0                     l749:
  8113  00DBB0  A004               	btfss	___ftpack@exp,0,c
  8114  00DBB2  9E02               	bcf	___ftpack@arg+1,7,c
  8115  00DBB4  90D8               	bcf	status,0,c
  8116  00DBB6  3204               	rrcf	___ftpack@exp,f,c
  8117  00DBB8  5004               	movf	___ftpack@exp,w,c
  8118  00DBBA  1203               	iorwf	___ftpack@arg+2,f,c
  8119  00DBBC  5005               	movf	___ftpack@sign,w,c
  8120  00DBBE  A4D8               	btfss	status,2,c
  8121  00DBC0  8E03               	bsf	___ftpack@arg+2,7,c
  8122  00DBC2  C001  F001         	movff	___ftpack@arg,?___ftpack
  8123  00DBC6  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8124  00DBCA  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8125  00DBCE  0012               	return	
  8126  00DBD0                     __end_of___ftpack:
  8127                           	opt stack 0
  8128                           tblptru	equ	0xFF8
  8129                           tblptrh	equ	0xFF7
  8130                           tblptrl	equ	0xFF6
  8131                           tablat	equ	0xFF5
  8132                           prodh	equ	0xFF4
  8133                           prodl	equ	0xFF3
  8134                           postinc0	equ	0xFEE
  8135                           wreg	equ	0xFE8
  8136                           plusw1	equ	0xFE3
  8137                           indf2	equ	0xFDF
  8138                           postinc2	equ	0xFDE
  8139                           postdec2	equ	0xFDD
  8140                           plusw2	equ	0xFDB
  8141                           fsr2h	equ	0xFDA
  8142                           fsr2l	equ	0xFD9
  8143                           status	equ	0xFD8
  8144                           
  8145 ;; *************** function _SD_ACMD *****************
  8146 ;; Defined at:
  8147 ;;		line 97 in file "SD_PIC.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;  cmd             1    wreg     unsigned char 
  8150 ;;  arg             4   10[COMRAM] unsigned long 
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;  cmd             1   14[COMRAM] unsigned char 
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  1    wreg      unsigned char 
  8155 ;; Registers used:
  8156 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8162 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8163 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8165 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8166 ;;Total ram usage:        5 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:    3
  8169 ;; This function calls:
  8170 ;;		_SD_Command
  8171 ;; This function is called by:
  8172 ;;		_initSD
  8173 ;;		_SD_MBW_Start
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           	psect	text25
  8178  00D6F8                     __ptext25:
  8179                           	opt stack 0
  8180  00D6F8                     _SD_ACMD:
  8181                           	opt stack 26
  8182                           
  8183                           ;incstack = 0
  8184                           ;SD_ACMD@cmd stored from wreg
  8185  00D6F8  6E0F               	movwf	SD_ACMD@cmd,c
  8186                           
  8187                           ;SD_PIC.c: 100: SD_Command(CMD55, 0);
  8188  00D6FA  0E00               	movlw	0
  8189  00D6FC  6E04               	movwf	SD_Command@arg,c
  8190  00D6FE  0E00               	movlw	0
  8191  00D700  6E05               	movwf	SD_Command@arg+1,c
  8192  00D702  0E00               	movlw	0
  8193  00D704  6E06               	movwf	SD_Command@arg+2,c
  8194  00D706  0E00               	movlw	0
  8195  00D708  6E07               	movwf	SD_Command@arg+3,c
  8196  00D70A  0EF8               	movlw	low _CMD55
  8197  00D70C  6EF6               	movwf	tblptrl,c
  8198  00D70E                     	if	1	;There is more than 1 active tblptr byte
  8199  00D70E  0EFE               	movlw	high _CMD55
  8200  00D710  6EF7               	movwf	tblptrh,c
  8201  00D712                     	endif
  8202  00D712                     	if	0	;There are less than 3 active tblptr bytes
  8203  00D712                     	endif
  8204  00D712  0008               	tblrd		*
  8205  00D714  50F5               	movf	tablat,w,c
  8206  00D716  EC87  F06C         	call	_SD_Command
  8207                           
  8208                           ;SD_PIC.c: 101: return SD_Command(cmd, arg);
  8209  00D71A  C00B  F004         	movff	SD_ACMD@arg,SD_Command@arg
  8210  00D71E  C00C  F005         	movff	SD_ACMD@arg+1,SD_Command@arg+1
  8211  00D722  C00D  F006         	movff	SD_ACMD@arg+2,SD_Command@arg+2
  8212  00D726  C00E  F007         	movff	SD_ACMD@arg+3,SD_Command@arg+3
  8213  00D72A  500F               	movf	SD_ACMD@cmd,w,c
  8214  00D72C  EC87  F06C         	call	_SD_Command
  8215  00D730  0012               	return	
  8216  00D732                     __end_of_SD_ACMD:
  8217                           	opt stack 0
  8218                           tblptru	equ	0xFF8
  8219                           tblptrh	equ	0xFF7
  8220                           tblptrl	equ	0xFF6
  8221                           tablat	equ	0xFF5
  8222                           prodh	equ	0xFF4
  8223                           prodl	equ	0xFF3
  8224                           postinc0	equ	0xFEE
  8225                           wreg	equ	0xFE8
  8226                           plusw1	equ	0xFE3
  8227                           indf2	equ	0xFDF
  8228                           postinc2	equ	0xFDE
  8229                           postdec2	equ	0xFDD
  8230                           plusw2	equ	0xFDB
  8231                           fsr2h	equ	0xFDA
  8232                           fsr2l	equ	0xFD9
  8233                           status	equ	0xFD8
  8234                           
  8235 ;; *************** function _SD_Command *****************
  8236 ;; Defined at:
  8237 ;;		line 55 in file "SD_PIC.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;  cmd             1    wreg     unsigned char 
  8240 ;;  arg             4    3[COMRAM] unsigned long 
  8241 ;; Auto vars:     Size  Location     Type
  8242 ;;  cmd             1    8[COMRAM] unsigned char 
  8243 ;;  response        1    9[COMRAM] unsigned char 
  8244 ;;  n               1    7[COMRAM] unsigned char 
  8245 ;; Return value:  Size  Location     Type
  8246 ;;                  1    wreg      unsigned char 
  8247 ;; Registers used:
  8248 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8254 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8258 ;;Total ram usage:        7 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; Hardware stack levels required when called:    2
  8261 ;; This function calls:
  8262 ;;		_spiReceive
  8263 ;;		_spiSend
  8264 ;; This function is called by:
  8265 ;;		_SD_ACMD
  8266 ;;		_initSD
  8267 ;;		_SD_SingleBlockWrite
  8268 ;;		_SD_MBW_Start
  8269 ;;		_SD_MBW_Send
  8270 ;;		_SD_SingleBlockRead
  8271 ;;		_SD_MBR_Start
  8272 ;;		_SD_MBR_Stop
  8273 ;;		_SD_EraseBlocks
  8274 ;; This function uses a non-reentrant model
  8275 ;;
  8276                           
  8277                           	psect	text26
  8278  00D90E                     __ptext26:
  8279                           	opt stack 0
  8280  00D90E                     _SD_Command:
  8281                           	opt stack 27
  8282                           
  8283                           ;incstack = 0
  8284                           ;SD_Command@cmd stored from wreg
  8285  00D90E  6E09               	movwf	SD_Command@cmd,c
  8286                           
  8287                           ;SD_PIC.c: 56: LATEbits.LATE2 = 0;
  8288  00D910  948D               	bcf	3981,2,c	;volatile
  8289  00D912                     l2834:
  8290  00D912  ECBF  F06A         	call	_spiReceive	;wreg free
  8291  00D916  0AFF               	xorlw	255
  8292  00D918  A4D8               	btfss	status,2,c
  8293  00D91A  D7FB               	goto	l2834
  8294                           
  8295                           ;SD_PIC.c: 63: }
  8296                           ;SD_PIC.c: 66: spiSend(cmd | 0x40U);
  8297  00D91C  5009               	movf	SD_Command@cmd,w,c
  8298  00D91E  0940               	iorlw	64
  8299  00D920  ECC3  F06A         	call	_spiSend
  8300                           
  8301                           ;SD_PIC.c: 69: spiSend(arg >> 24);
  8302  00D924  5007               	movf	SD_Command@arg+3,w,c
  8303  00D926  ECC3  F06A         	call	_spiSend
  8304                           
  8305                           ;SD_PIC.c: 70: spiSend((arg >> 16) & 0xFF);
  8306  00D92A  5006               	movf	SD_Command@arg+2,w,c
  8307  00D92C  ECC3  F06A         	call	_spiSend
  8308                           
  8309                           ;SD_PIC.c: 71: spiSend((arg >> 8) & 0xFF);
  8310  00D930  5005               	movf	SD_Command@arg+1,w,c
  8311  00D932  ECC3  F06A         	call	_spiSend
  8312                           
  8313                           ;SD_PIC.c: 72: spiSend(arg & 0xFF);
  8314  00D936  5004               	movf	SD_Command@arg,w,c
  8315  00D938  ECC3  F06A         	call	_spiSend
  8316                           
  8317                           ;SD_PIC.c: 77: if(cmd == CMD8){
  8318  00D93C  0E06               	movlw	low _CMD8
  8319  00D93E  6EF6               	movwf	tblptrl,c
  8320  00D940                     	if	1	;There is more than 1 active tblptr byte
  8321  00D940  0EFF               	movlw	high _CMD8
  8322  00D942  6EF7               	movwf	tblptrh,c
  8323  00D944                     	endif
  8324  00D944                     	if	0	;There are less than 3 active tblptr bytes
  8325  00D944                     	endif
  8326  00D944  0008               	tblrd		*
  8327  00D946  50F5               	movf	tablat,w,c
  8328  00D948  6209               	cpfseq	SD_Command@cmd,c
  8329  00D94A  D009               	goto	l2850
  8330                           
  8331                           ;SD_PIC.c: 78: spiSend(CMD8CRC);
  8332  00D94C  0E05               	movlw	low _CMD8CRC
  8333  00D94E  6EF6               	movwf	tblptrl,c
  8334  00D950                     	if	1	;There is more than 1 active tblptr byte
  8335  00D950  0EFF               	movlw	high _CMD8CRC
  8336  00D952  6EF7               	movwf	tblptrh,c
  8337  00D954                     	endif
  8338  00D954                     	if	0	;There are less than 3 active tblptr bytes
  8339  00D954                     	endif
  8340  00D954  0008               	tblrd		*
  8341  00D956  50F5               	movf	tablat,w,c
  8342  00D958  ECC3  F06A         	call	_spiSend
  8343                           
  8344                           ;SD_PIC.c: 79: }
  8345  00D95C  D008               	goto	l2852
  8346  00D95E                     l2850:
  8347                           
  8348                           ;SD_PIC.c: 80: else{
  8349                           ;SD_PIC.c: 81: spiSend(CMD0CRC);
  8350  00D95E  0E08               	movlw	low _CMD0CRC
  8351  00D960  6EF6               	movwf	tblptrl,c
  8352  00D962                     	if	1	;There is more than 1 active tblptr byte
  8353  00D962  0EFF               	movlw	high _CMD0CRC
  8354  00D964  6EF7               	movwf	tblptrh,c
  8355  00D966                     	endif
  8356  00D966                     	if	0	;There are less than 3 active tblptr bytes
  8357  00D966                     	endif
  8358  00D966  0008               	tblrd		*
  8359  00D968  50F5               	movf	tablat,w,c
  8360  00D96A  ECC3  F06A         	call	_spiSend
  8361  00D96E                     l2852:
  8362                           
  8363                           ;SD_PIC.c: 82: }
  8364                           ;SD_PIC.c: 85: unsigned char n = 0;
  8365  00D96E  0E00               	movlw	0
  8366  00D970  6E08               	movwf	SD_Command@n,c
  8367  00D972                     l2854:
  8368                           
  8369                           ;SD_PIC.c: 88: response = spiReceive();
  8370  00D972  ECBF  F06A         	call	_spiReceive	;wreg free
  8371  00D976  6E0A               	movwf	SD_Command@response,c
  8372                           
  8373                           ;SD_PIC.c: 89: n++;
  8374  00D978  2A08               	incf	SD_Command@n,f,c
  8375                           
  8376                           ;SD_PIC.c: 90: }while((n < 8) && (response == 0xFF));
  8377  00D97A  0E08               	movlw	8
  8378  00D97C  6008               	cpfslt	SD_Command@n,c
  8379  00D97E  D003               	goto	l136
  8380  00D980  280A               	incf	SD_Command@response,w,c
  8381  00D982  B4D8               	btfsc	status,2,c
  8382  00D984  D7F6               	goto	l2854
  8383  00D986                     l136:
  8384                           
  8385                           ;SD_PIC.c: 92: LATEbits.LATE2 = 1;
  8386  00D986  848D               	bsf	3981,2,c	;volatile
  8387                           
  8388                           ;SD_PIC.c: 94: return response;
  8389  00D988  500A               	movf	SD_Command@response,w,c
  8390  00D98A  0012               	return	
  8391  00D98C                     __end_of_SD_Command:
  8392                           	opt stack 0
  8393                           tblptru	equ	0xFF8
  8394                           tblptrh	equ	0xFF7
  8395                           tblptrl	equ	0xFF6
  8396                           tablat	equ	0xFF5
  8397                           prodh	equ	0xFF4
  8398                           prodl	equ	0xFF3
  8399                           postinc0	equ	0xFEE
  8400                           wreg	equ	0xFE8
  8401                           plusw1	equ	0xFE3
  8402                           indf2	equ	0xFDF
  8403                           postinc2	equ	0xFDE
  8404                           postdec2	equ	0xFDD
  8405                           plusw2	equ	0xFDB
  8406                           fsr2h	equ	0xFDA
  8407                           fsr2l	equ	0xFD9
  8408                           status	equ	0xFD8
  8409                           
  8410 ;; *************** function _spiSend *****************
  8411 ;; Defined at:
  8412 ;;		line 29 in file "SPI_PIC.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  val             1    wreg     unsigned char 
  8415 ;; Auto vars:     Size  Location     Type
  8416 ;;  val             1    2[COMRAM] unsigned char 
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  1    wreg      void 
  8419 ;; Registers used:
  8420 ;;		wreg, status,2, cstack
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8429 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8430 ;;Total ram usage:        1 bytes
  8431 ;; Hardware stack levels used:    1
  8432 ;; Hardware stack levels required when called:    1
  8433 ;; This function calls:
  8434 ;;		_spiTransfer
  8435 ;; This function is called by:
  8436 ;;		_SD_Command
  8437 ;;		_initSD
  8438 ;;		_SD_SendDummyBytes
  8439 ;;		_SD_SingleBlockWrite
  8440 ;;		_SD_MBW_Send
  8441 ;;		_SD_MBW_Stop
  8442 ;;		_SD_SingleBlockRead
  8443 ;;		_SD_MBR_Receive
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           	psect	text27
  8448  00D586                     __ptext27:
  8449                           	opt stack 0
  8450  00D586                     _spiSend:
  8451                           	opt stack 28
  8452                           
  8453                           ;incstack = 0
  8454                           ;spiSend@val stored from wreg
  8455  00D586  6E03               	movwf	spiSend@val,c
  8456                           
  8457                           ;SPI_PIC.c: 30: spiTransfer(val);
  8458  00D588  5003               	movf	spiSend@val,w,c
  8459  00D58A  EC02  F06B         	call	_spiTransfer
  8460  00D58E  0012               	return		;funcret
  8461  00D590                     __end_of_spiSend:
  8462                           	opt stack 0
  8463                           tblptru	equ	0xFF8
  8464                           tblptrh	equ	0xFF7
  8465                           tblptrl	equ	0xFF6
  8466                           tablat	equ	0xFF5
  8467                           prodh	equ	0xFF4
  8468                           prodl	equ	0xFF3
  8469                           postinc0	equ	0xFEE
  8470                           wreg	equ	0xFE8
  8471                           plusw1	equ	0xFE3
  8472                           indf2	equ	0xFDF
  8473                           postinc2	equ	0xFDE
  8474                           postdec2	equ	0xFDD
  8475                           plusw2	equ	0xFDB
  8476                           fsr2h	equ	0xFDA
  8477                           fsr2l	equ	0xFD9
  8478                           status	equ	0xFD8
  8479                           
  8480 ;; *************** function _spiReceive *****************
  8481 ;; Defined at:
  8482 ;;		line 33 in file "SPI_PIC.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;		None
  8485 ;; Auto vars:     Size  Location     Type
  8486 ;;		None
  8487 ;; Return value:  Size  Location     Type
  8488 ;;                  1    wreg      unsigned char 
  8489 ;; Registers used:
  8490 ;;		wreg, status,2, cstack
  8491 ;; Tracked objects:
  8492 ;;		On entry : 0/0
  8493 ;;		On exit  : 0/0
  8494 ;;		Unchanged: 0/0
  8495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;Total ram usage:        0 bytes
  8501 ;; Hardware stack levels used:    1
  8502 ;; Hardware stack levels required when called:    1
  8503 ;; This function calls:
  8504 ;;		_spiTransfer
  8505 ;; This function is called by:
  8506 ;;		_SD_Command
  8507 ;;		_initSD
  8508 ;;		_SD_SingleBlockWrite
  8509 ;;		_SD_MBW_Send
  8510 ;;		_SD_MBW_Stop
  8511 ;;		_SD_SingleBlockRead
  8512 ;;		_SD_MBR_Receive
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           	psect	text28
  8517  00D57E                     __ptext28:
  8518                           	opt stack 0
  8519  00D57E                     _spiReceive:
  8520                           	opt stack 28
  8521                           
  8522                           ;SPI_PIC.c: 34: return spiTransfer(0xFF);
  8523                           
  8524                           ;incstack = 0
  8525  00D57E  0EFF               	movlw	255
  8526  00D580  EC02  F06B         	call	_spiTransfer
  8527  00D584  0012               	return	
  8528  00D586                     __end_of_spiReceive:
  8529                           	opt stack 0
  8530                           tblptru	equ	0xFF8
  8531                           tblptrh	equ	0xFF7
  8532                           tblptrl	equ	0xFF6
  8533                           tablat	equ	0xFF5
  8534                           prodh	equ	0xFF4
  8535                           prodl	equ	0xFF3
  8536                           postinc0	equ	0xFEE
  8537                           wreg	equ	0xFE8
  8538                           plusw1	equ	0xFE3
  8539                           indf2	equ	0xFDF
  8540                           postinc2	equ	0xFDE
  8541                           postdec2	equ	0xFDD
  8542                           plusw2	equ	0xFDB
  8543                           fsr2h	equ	0xFDA
  8544                           fsr2l	equ	0xFD9
  8545                           status	equ	0xFD8
  8546                           
  8547 ;; *************** function _spiTransfer *****************
  8548 ;; Defined at:
  8549 ;;		line 14 in file "SPI_PIC.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;  byteToTransf    1    wreg     unsigned char 
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;  byteToTransf    1    1[COMRAM] unsigned char 
  8554 ;; Return value:  Size  Location     Type
  8555 ;;                  1    wreg      unsigned char 
  8556 ;; Registers used:
  8557 ;;		wreg, status,2
  8558 ;; Tracked objects:
  8559 ;;		On entry : 0/0
  8560 ;;		On exit  : 0/0
  8561 ;;		Unchanged: 0/0
  8562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8564 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8566 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8567 ;;Total ram usage:        2 bytes
  8568 ;; Hardware stack levels used:    1
  8569 ;; This function calls:
  8570 ;;		Nothing
  8571 ;; This function is called by:
  8572 ;;		_spiSend
  8573 ;;		_spiReceive
  8574 ;;		_SD_SingleBlockWrite
  8575 ;;		_SD_MBW_Send
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           	psect	text29
  8580  00D604                     __ptext29:
  8581                           	opt stack 0
  8582  00D604                     _spiTransfer:
  8583                           	opt stack 28
  8584                           
  8585                           ;incstack = 0
  8586                           ;spiTransfer@byteToTransfer stored from wreg
  8587  00D604  6E02               	movwf	spiTransfer@byteToTransfer,c
  8588                           
  8589                           ;SPI_PIC.c: 18: SSPBUF = byteToTransfer;
  8590  00D606  C002  FFC9         	movff	spiTransfer@byteToTransfer,4041	;volatile
  8591  00D60A                     l2770:
  8592  00D60A  B69E               	btfsc	3998,3,c	;volatile
  8593  00D60C  D002               	goto	u2320
  8594  00D60E  0E01               	movlw	1
  8595  00D610  D001               	goto	u2322
  8596  00D612                     u2320:
  8597  00D612  0E00               	movlw	0
  8598  00D614                     u2322:
  8599  00D614  6E01               	movwf	??_spiTransfer& (0+255),c
  8600  00D616  B0C7               	btfsc	4039,0,c	;volatile
  8601  00D618  D002               	goto	u2330
  8602  00D61A  0E01               	movlw	1
  8603  00D61C  D001               	goto	u2332
  8604  00D61E                     u2330:
  8605  00D61E  0E00               	movlw	0
  8606  00D620                     u2332:
  8607  00D620  1001               	iorwf	??_spiTransfer,w,c
  8608  00D622  E1F3               	bnz	l2770
  8609                           
  8610                           ;SPI_PIC.c: 24: }
  8611                           ;SPI_PIC.c: 26: return SSPBUF;
  8612  00D624  50C9               	movf	4041,w,c	;volatile
  8613  00D626  0012               	return	
  8614  00D628                     __end_of_spiTransfer:
  8615                           	opt stack 0
  8616                           tblptru	equ	0xFF8
  8617                           tblptrh	equ	0xFF7
  8618                           tblptrl	equ	0xFF6
  8619                           tablat	equ	0xFF5
  8620                           prodh	equ	0xFF4
  8621                           prodl	equ	0xFF3
  8622                           postinc0	equ	0xFEE
  8623                           wreg	equ	0xFE8
  8624                           plusw1	equ	0xFE3
  8625                           indf2	equ	0xFDF
  8626                           postinc2	equ	0xFDE
  8627                           postdec2	equ	0xFDD
  8628                           plusw2	equ	0xFDB
  8629                           fsr2h	equ	0xFDA
  8630                           fsr2l	equ	0xFD9
  8631                           status	equ	0xFD8
  8632                           
  8633 ;; *************** function _initLCD *****************
  8634 ;; Defined at:
  8635 ;;		line 69 in file "lcd.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;		None
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;		None
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  1    wreg      void 
  8642 ;; Registers used:
  8643 ;;		wreg, status,2, status,0, cstack
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8652 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;Total ram usage:        1 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    4
  8656 ;; This function calls:
  8657 ;;		_lcdInst
  8658 ;;		_send_byte
  8659 ;;		_send_nibble
  8660 ;; This function is called by:
  8661 ;;		_main
  8662 ;; This function uses a non-reentrant model
  8663 ;;
  8664                           
  8665                           	psect	text30
  8666  00D834                     __ptext30:
  8667                           	opt stack 0
  8668  00D834                     _initLCD:
  8669                           	opt stack 26
  8670                           
  8671                           ;lcd.c: 70: _delay((unsigned long)((15)*(10000000/4000.0)));
  8672                           
  8673                           ;incstack = 0
  8674  00D834  0E31               	movlw	49
  8675  00D836  6E05               	movwf	??_initLCD& (0+255),c
  8676  00D838  0EB2               	movlw	178
  8677  00D83A                     u4787:
  8678  00D83A  2EE8               	decfsz	wreg,f,c
  8679  00D83C  D7FE               	bra	u4787
  8680  00D83E  2E05               	decfsz	??_initLCD& (0+255),f,c
  8681  00D840  D7FC               	bra	u4787
  8682  00D842  D000               	nop2	
  8683                           
  8684                           ;lcd.c: 72: LATDbits.LATD2 = 0;
  8685  00D844  948C               	bcf	3980,2,c	;volatile
  8686                           
  8687                           ;lcd.c: 74: send_nibble(0b0011);
  8688  00D846  0E03               	movlw	3
  8689  00D848  ECDD  F06A         	call	_send_nibble
  8690                           
  8691                           ;lcd.c: 75: _delay((unsigned long)((5)*(10000000/4000.0)));
  8692  00D84C  0E11               	movlw	17
  8693  00D84E  6E05               	movwf	??_initLCD& (0+255),c
  8694  00D850  0E3A               	movlw	58
  8695  00D852                     u4797:
  8696  00D852  2EE8               	decfsz	wreg,f,c
  8697  00D854  D7FE               	bra	u4797
  8698  00D856  2E05               	decfsz	??_initLCD& (0+255),f,c
  8699  00D858  D7FC               	bra	u4797
  8700  00D85A  D000               	nop2	
  8701                           
  8702                           ;lcd.c: 76: send_nibble(0b0011);
  8703  00D85C  0E03               	movlw	3
  8704  00D85E  ECDD  F06A         	call	_send_nibble
  8705                           
  8706                           ;lcd.c: 77: _delay((unsigned long)((150)*(10000000/4000000.0)));
  8707  00D862  0E7D               	movlw	125
  8708  00D864                     u4807:
  8709  00D864  2EE8               	decfsz	wreg,f,c
  8710  00D866  D7FE               	bra	u4807
  8711                           
  8712                           ;lcd.c: 78: send_byte(0b00110010);
  8713  00D868  0E32               	movlw	50
  8714  00D86A  ECD4  F06A         	call	_send_byte
  8715                           
  8716                           ;lcd.c: 80: send_byte(0b00101000);
  8717  00D86E  0E28               	movlw	40
  8718  00D870  ECD4  F06A         	call	_send_byte
  8719                           
  8720                           ;lcd.c: 81: send_byte(0b00001000);
  8721  00D874  0E08               	movlw	8
  8722  00D876  ECD4  F06A         	call	_send_byte
  8723                           
  8724                           ;lcd.c: 82: send_byte(0b00000001);
  8725  00D87A  0E01               	movlw	1
  8726  00D87C  ECD4  F06A         	call	_send_byte
  8727                           
  8728                           ;lcd.c: 83: _delay((unsigned long)((5)*(10000000/4000.0)));
  8729  00D880  0E11               	movlw	17
  8730  00D882  6E05               	movwf	??_initLCD& (0+255),c
  8731  00D884  0E3A               	movlw	58
  8732  00D886                     u4817:
  8733  00D886  2EE8               	decfsz	wreg,f,c
  8734  00D888  D7FE               	bra	u4817
  8735  00D88A  2E05               	decfsz	??_initLCD& (0+255),f,c
  8736  00D88C  D7FC               	bra	u4817
  8737  00D88E  D000               	nop2	
  8738                           
  8739                           ;lcd.c: 84: send_byte(0b00000110);
  8740  00D890  0E06               	movlw	6
  8741  00D892  ECD4  F06A         	call	_send_byte
  8742                           
  8743                           ;lcd.c: 87: { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  8744  00D896  0E0F               	movlw	15
  8745  00D898  ECC8  F06A         	call	_lcdInst
  8746  00D89C  0012               	return		;funcret
  8747  00D89E                     __end_of_initLCD:
  8748                           	opt stack 0
  8749                           tblptru	equ	0xFF8
  8750                           tblptrh	equ	0xFF7
  8751                           tblptrl	equ	0xFF6
  8752                           tablat	equ	0xFF5
  8753                           prodh	equ	0xFF4
  8754                           prodl	equ	0xFF3
  8755                           postinc0	equ	0xFEE
  8756                           wreg	equ	0xFE8
  8757                           plusw1	equ	0xFE3
  8758                           indf2	equ	0xFDF
  8759                           postinc2	equ	0xFDE
  8760                           postdec2	equ	0xFDD
  8761                           plusw2	equ	0xFDB
  8762                           fsr2h	equ	0xFDA
  8763                           fsr2l	equ	0xFD9
  8764                           status	equ	0xFD8
  8765                           
  8766 ;; *************** function _lcdInst *****************
  8767 ;; Defined at:
  8768 ;;		line 64 in file "lcd.c"
  8769 ;; Parameters:    Size  Location     Type
  8770 ;;  data            1    wreg     unsigned char 
  8771 ;; Auto vars:     Size  Location     Type
  8772 ;;  data            1    3[COMRAM] unsigned char 
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  1    wreg      void 
  8775 ;; Registers used:
  8776 ;;		wreg, status,2, status,0, cstack
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8783 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8785 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8786 ;;Total ram usage:        1 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:    3
  8789 ;; This function calls:
  8790 ;;		_send_byte
  8791 ;; This function is called by:
  8792 ;;		_main
  8793 ;;		_initLCD
  8794 ;;		_lcd_shift_cursor
  8795 ;;		_lcd_shift_display
  8796 ;; This function uses a non-reentrant model
  8797 ;;
  8798                           
  8799                           	psect	text31
  8800  00D590                     __ptext31:
  8801                           	opt stack 0
  8802  00D590                     _lcdInst:
  8803                           	opt stack 27
  8804                           
  8805                           ;incstack = 0
  8806                           ;lcdInst@data stored from wreg
  8807  00D590  6E04               	movwf	lcdInst@data,c
  8808                           
  8809                           ;lcd.c: 65: LATDbits.LATD2 = 0;
  8810  00D592  948C               	bcf	3980,2,c	;volatile
  8811                           
  8812                           ;lcd.c: 66: send_byte(data);
  8813  00D594  5004               	movf	lcdInst@data,w,c
  8814  00D596  ECD4  F06A         	call	_send_byte
  8815  00D59A  0012               	return		;funcret
  8816  00D59C                     __end_of_lcdInst:
  8817                           	opt stack 0
  8818                           tblptru	equ	0xFF8
  8819                           tblptrh	equ	0xFF7
  8820                           tblptrl	equ	0xFF6
  8821                           tablat	equ	0xFF5
  8822                           prodh	equ	0xFF4
  8823                           prodl	equ	0xFF3
  8824                           postinc0	equ	0xFEE
  8825                           wreg	equ	0xFE8
  8826                           plusw1	equ	0xFE3
  8827                           indf2	equ	0xFDF
  8828                           postinc2	equ	0xFDE
  8829                           postdec2	equ	0xFDD
  8830                           plusw2	equ	0xFDB
  8831                           fsr2h	equ	0xFDA
  8832                           fsr2l	equ	0xFD9
  8833                           status	equ	0xFD8
  8834                           
  8835 ;; *************** function _send_byte *****************
  8836 ;; Defined at:
  8837 ;;		line 55 in file "lcd.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;  data            1    wreg     unsigned char 
  8840 ;; Auto vars:     Size  Location     Type
  8841 ;;  data            1    2[COMRAM] unsigned char 
  8842 ;; Return value:  Size  Location     Type
  8843 ;;                  1    wreg      void 
  8844 ;; Registers used:
  8845 ;;		wreg, status,2, status,0, cstack
  8846 ;; Tracked objects:
  8847 ;;		On entry : 0/0
  8848 ;;		On exit  : 0/0
  8849 ;;		Unchanged: 0/0
  8850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;Total ram usage:        1 bytes
  8856 ;; Hardware stack levels used:    1
  8857 ;; Hardware stack levels required when called:    2
  8858 ;; This function calls:
  8859 ;;		_send_nibble
  8860 ;; This function is called by:
  8861 ;;		_lcdInst
  8862 ;;		_initLCD
  8863 ;;		_putch
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           	psect	text32
  8868  00D5A8                     __ptext32:
  8869                           	opt stack 0
  8870  00D5A8                     _send_byte:
  8871                           	opt stack 26
  8872                           
  8873                           ;incstack = 0
  8874                           ;send_byte@data stored from wreg
  8875  00D5A8  6E03               	movwf	send_byte@data,c
  8876                           
  8877                           ;lcd.c: 57: send_nibble(data >> 4);
  8878  00D5AA  3803               	swapf	send_byte@data,w,c
  8879  00D5AC  0B0F               	andlw	15
  8880  00D5AE  ECDD  F06A         	call	_send_nibble
  8881                           
  8882                           ;lcd.c: 60: send_nibble(data);
  8883  00D5B2  5003               	movf	send_byte@data,w,c
  8884  00D5B4  ECDD  F06A         	call	_send_nibble
  8885  00D5B8  0012               	return		;funcret
  8886  00D5BA                     __end_of_send_byte:
  8887                           	opt stack 0
  8888                           tblptru	equ	0xFF8
  8889                           tblptrh	equ	0xFF7
  8890                           tblptrl	equ	0xFF6
  8891                           tablat	equ	0xFF5
  8892                           prodh	equ	0xFF4
  8893                           prodl	equ	0xFF3
  8894                           postinc0	equ	0xFEE
  8895                           wreg	equ	0xFE8
  8896                           plusw1	equ	0xFE3
  8897                           indf2	equ	0xFDF
  8898                           postinc2	equ	0xFDE
  8899                           postdec2	equ	0xFDD
  8900                           plusw2	equ	0xFDB
  8901                           fsr2h	equ	0xFDA
  8902                           fsr2l	equ	0xFD9
  8903                           status	equ	0xFD8
  8904                           
  8905 ;; *************** function _send_nibble *****************
  8906 ;; Defined at:
  8907 ;;		line 44 in file "lcd.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  data            1    wreg     unsigned char 
  8910 ;; Auto vars:     Size  Location     Type
  8911 ;;  data            1    1[COMRAM] unsigned char 
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  1    wreg      void 
  8914 ;; Registers used:
  8915 ;;		wreg, status,2, status,0, cstack
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8924 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8925 ;;Total ram usage:        1 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    1
  8928 ;; This function calls:
  8929 ;;		_pulse_e
  8930 ;; This function is called by:
  8931 ;;		_send_byte
  8932 ;;		_initLCD
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           	psect	text33
  8937  00D5BA                     __ptext33:
  8938                           	opt stack 0
  8939  00D5BA                     _send_nibble:
  8940                           	opt stack 26
  8941                           
  8942                           ;incstack = 0
  8943                           ;send_nibble@data stored from wreg
  8944  00D5BA  6E02               	movwf	send_nibble@data,c
  8945                           
  8946                           ;lcd.c: 46: LATD = (unsigned char)(LATD & 0x0F);
  8947  00D5BC  508C               	movf	3980,w,c	;volatile
  8948  00D5BE  0B0F               	andlw	15
  8949  00D5C0  6E8C               	movwf	3980,c	;volatile
  8950                           
  8951                           ;lcd.c: 47: LATD = (unsigned char)((data << 4) | LATD);
  8952  00D5C2  3802               	swapf	send_nibble@data,w,c
  8953  00D5C4  0BF0               	andlw	240
  8954  00D5C6  108C               	iorwf	3980,w,c	;volatile
  8955  00D5C8  6E8C               	movwf	3980,c	;volatile
  8956                           
  8957                           ;lcd.c: 48: pulse_e();
  8958  00D5CA  EC4B  F06B         	call	_pulse_e	;wreg free
  8959  00D5CE  0012               	return		;funcret
  8960  00D5D0                     __end_of_send_nibble:
  8961                           	opt stack 0
  8962                           tblptru	equ	0xFF8
  8963                           tblptrh	equ	0xFF7
  8964                           tblptrl	equ	0xFF6
  8965                           tablat	equ	0xFF5
  8966                           prodh	equ	0xFF4
  8967                           prodl	equ	0xFF3
  8968                           postinc0	equ	0xFEE
  8969                           wreg	equ	0xFE8
  8970                           plusw1	equ	0xFE3
  8971                           indf2	equ	0xFDF
  8972                           postinc2	equ	0xFDE
  8973                           postdec2	equ	0xFDD
  8974                           plusw2	equ	0xFDB
  8975                           fsr2h	equ	0xFDA
  8976                           fsr2l	equ	0xFD9
  8977                           status	equ	0xFD8
  8978                           
  8979 ;; *************** function _pulse_e *****************
  8980 ;; Defined at:
  8981 ;;		line 28 in file "lcd.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;		None
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;  interruptSta    1    0[COMRAM] unsigned char 
  8986 ;; Return value:  Size  Location     Type
  8987 ;;                  1    wreg      void 
  8988 ;; Registers used:
  8989 ;;		wreg
  8990 ;; Tracked objects:
  8991 ;;		On entry : 0/0
  8992 ;;		On exit  : 0/0
  8993 ;;		Unchanged: 0/0
  8994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8999 ;;Total ram usage:        1 bytes
  9000 ;; Hardware stack levels used:    1
  9001 ;; This function calls:
  9002 ;;		Nothing
  9003 ;; This function is called by:
  9004 ;;		_send_nibble
  9005 ;; This function uses a non-reentrant model
  9006 ;;
  9007                           
  9008                           	psect	text34
  9009  00D696                     __ptext34:
  9010                           	opt stack 0
  9011  00D696                     _pulse_e:
  9012                           	opt stack 26
  9013                           
  9014                           ;lcd.c: 29: unsigned char interruptState = INTCONbits.GIE;
  9015                           
  9016                           ;incstack = 0
  9017  00D696  0E00               	movlw	0
  9018  00D698  BEF2               	btfsc	intcon,7,c	;volatile
  9019  00D69A  0E01               	movlw	1
  9020  00D69C  6E01               	movwf	pulse_e@interruptState,c
  9021                           
  9022                           ;lcd.c: 30: (INTCONbits.GIE = 0);
  9023  00D69E  9EF2               	bcf	intcon,7,c	;volatile
  9024                           
  9025                           ;lcd.c: 31: LATDbits.LATD3 = 1;
  9026  00D6A0  868C               	bsf	3980,3,c	;volatile
  9027                           
  9028                           ;lcd.c: 34: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9029  00D6A2  0E14               	movlw	20
  9030  00D6A4                     u4827:
  9031  00D6A4  2EE8               	decfsz	wreg,f,c
  9032  00D6A6  D7FE               	bra	u4827
  9033  00D6A8  D000               	nop2	
  9034                           
  9035                           ;lcd.c: 35: LATDbits.LATD3 = 0;
  9036  00D6AA  968C               	bcf	3980,3,c	;volatile
  9037                           
  9038                           ;lcd.c: 36: _delay((unsigned long)((100)*(10000000/4000000.0)));
  9039  00D6AC  0E53               	movlw	83
  9040  00D6AE                     u4837:
  9041  00D6AE  2EE8               	decfsz	wreg,f,c
  9042  00D6B0  D7FE               	bra	u4837
  9043  00D6B2  F000               	nop	
  9044                           
  9045                           ;lcd.c: 37: INTCONbits.GIE = interruptState;
  9046  00D6B4  B001               	btfsc	pulse_e@interruptState,0,c
  9047  00D6B6  D002               	bra	u2345
  9048  00D6B8  9EF2               	bcf	intcon,7,c	;volatile
  9049  00D6BA  D001               	bra	u2346
  9050  00D6BC                     u2345:
  9051  00D6BC  8EF2               	bsf	intcon,7,c	;volatile
  9052  00D6BE                     u2346:
  9053  00D6BE  0012               	return		;funcret
  9054  00D6C0                     __end_of_pulse_e:
  9055                           	opt stack 0
  9056                           tblptru	equ	0xFF8
  9057                           tblptrh	equ	0xFF7
  9058                           tblptrl	equ	0xFF6
  9059                           tablat	equ	0xFF5
  9060                           prodh	equ	0xFF4
  9061                           prodl	equ	0xFF3
  9062                           intcon	equ	0xFF2
  9063                           postinc0	equ	0xFEE
  9064                           wreg	equ	0xFE8
  9065                           plusw1	equ	0xFE3
  9066                           indf2	equ	0xFDF
  9067                           postinc2	equ	0xFDE
  9068                           postdec2	equ	0xFDD
  9069                           plusw2	equ	0xFDB
  9070                           fsr2h	equ	0xFDA
  9071                           fsr2l	equ	0xFD9
  9072                           status	equ	0xFD8
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           intcon	equ	0xFF2
  9080                           postinc0	equ	0xFEE
  9081                           wreg	equ	0xFE8
  9082                           plusw1	equ	0xFE3
  9083                           indf2	equ	0xFDF
  9084                           postinc2	equ	0xFDE
  9085                           postdec2	equ	0xFDD
  9086                           plusw2	equ	0xFDB
  9087                           fsr2h	equ	0xFDA
  9088                           fsr2l	equ	0xFD9
  9089                           status	equ	0xFD8
  9090                           
  9091                           	psect	rparam
  9092  0000                     tblptru	equ	0xFF8
  9093                           tblptrh	equ	0xFF7
  9094                           tblptrl	equ	0xFF6
  9095                           tablat	equ	0xFF5
  9096                           prodh	equ	0xFF4
  9097                           prodl	equ	0xFF3
  9098                           intcon	equ	0xFF2
  9099                           postinc0	equ	0xFEE
  9100                           wreg	equ	0xFE8
  9101                           plusw1	equ	0xFE3
  9102                           indf2	equ	0xFDF
  9103                           postinc2	equ	0xFDE
  9104                           postdec2	equ	0xFDD
  9105                           plusw2	equ	0xFDB
  9106                           fsr2h	equ	0xFDA
  9107                           fsr2l	equ	0xFD9
  9108                           status	equ	0xFD8


Data Sizes:
    Strings     244
    Constant    184
    Data        0
    BSS         62
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    122     122
    BANK0           128      0      62
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(COMRAM[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_19(CODE[16]), STR_18(CODE[6]), STR_17(CODE[14]), STR_16(CODE[9]), 
		 -> STR_15(CODE[11]), STR_14(CODE[3]), STR_13(CODE[10]), STR_12(CODE[11]), 
		 -> STR_11(CODE[16]), STR_10(CODE[13]), STR_9(CODE[13]), STR_8(CODE[15]), 
		 -> STR_7(CODE[11]), STR_6(CODE[14]), STR_5(CODE[14]), STR_4(CODE[10]), 
		 -> STR_3(CODE[11]), STR_2(CODE[16]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_send_byte
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___llmod->___lldiv
    ___ftsub->___ftadd
    ___ftadd->_fround
    _initSD->___fttol
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftmul->___wmul
    ___ftdiv->___lwtoft
    _SD_ACMD->_SD_Command
    _SD_Command->_spiSend
    _spiSend->_spiTransfer
    _spiReceive->_spiTransfer
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   73042
                                            109 COMRAM    13    13      0
                            _initLCD
                             _initSD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              49    37     12   52677
                                             63 COMRAM    46    34     12
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   12105
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   11907
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     767
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     770
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _initSD                                              44    44      0   19752
                                             57 COMRAM    44    44      0
                            _SD_ACMD
                         _SD_Command
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lltoft
                           ___lwtoft
                            _spiInit
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2603
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2802
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     632
                                             42 COMRAM    15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5389
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3063
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _SD_ACMD                                              5     1      4    1983
                                             10 COMRAM     5     1      4
                         _SD_Command
 ---------------------------------------------------------------------------------
 (2) _SD_Command                                           7     3      4    1787
                                              3 COMRAM     7     3      4
                         _spiReceive
                            _spiSend
 ---------------------------------------------------------------------------------
 (2) _spiSend                                              1     1      0      44
                                              2 COMRAM     1     1      0
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (2) _spiReceive                                           0     0      0      22
                        _spiTransfer
 ---------------------------------------------------------------------------------
 (3) _spiTransfer                                          2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     245
                                              4 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     111
                                              3 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (3) _send_byte                                            1     1      0      89
                                              2 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (4) _send_nibble                                          1     1      0      45
                                              1 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (5) _pulse_e                                              1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _initSD
     _SD_ACMD
       _SD_Command
         _spiReceive
           _spiTransfer
         _spiSend
           _spiTransfer
     _SD_Command
       _spiReceive
         _spiTransfer
       _spiSend
         _spiTransfer
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lltoft
       ___ftpack
     ___lwtoft
       ___ftpack
     _spiInit
     _spiReceive
       _spiTransfer
     _spiSend
       _spiTransfer
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___lwtoft (ARG)
         ___ftpack
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _send_byte
         _send_nibble
           _pulse_e
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      3E       5       48.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     7A      7A       1       96.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B8      34        0.0%
DATA                 0      0      B8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Dec 11 01:18:46 2018

    __end_of_R1_READY_STATE FEF4                 _SSPSTATbits 000FC7                          l32 E8D6  
               __CFG_CPD$ON 000000          initSD@arr_response 004B                ___awdiv@sign 000C  
       ___wmul@multiplicand 0011                 __CFG_BORV$3 000000                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
               __CFG_OSC$HS 000000                ___ftadd@exp1 0039                ___ftadd@exp2 0038  
              ___ftadd@sign 0037                         l136 D986                         l320 D6EE  
                       l245 EDB6                         l239 ED36                         l272 EF90  
                       l248 EE2C                         l466 FA14                         l475 FBE4  
                       l717 DFB4                         l821 E0E6                         l814 E058  
                       l807 DC84                         l815 E080                         l906 D822  
                       l772 E13C                         l749 DBB0                         l846 D662  
                       l776 E166                         l787 E216                         l796 E232  
                       l896 D9FC                __CFG_CPB$OFF 000000             __end_of_CMD0CRC FF09  
           __end_of_CMD8CRC FF06                ___awmod@sign 0006                         prod 000FF3  
                       wreg 000FE8               SD_Command@cmd 0009               SD_Command@arg 0004  
              __CFG_LVP$OFF 000000                ___ftdiv@cntr 0015                ___ftdiv@sign 001A  
              __CFG_WDT$OFF 000000                        l3000 DA22                        l3012 DA48  
                      l3014 DA50                        l3006 DA32                        l3032 DA88  
                      l3024 DA70                        l3016 DA54                        l4000 FD28  
                      l3130 EA0C                        l4002 FDA0                        l4010 FE20  
                      l3212 E0AC                        l3028 DA7A                        l3060 D8EC  
                      l3052 D8CC                        l3044 D8B2                        l3116 E4AA  
                      l3108 E3EA                        l3140 EAD4                        l4012 FE26  
                      l3222 E0D4                        l3054 D8D4                        l4014 FE36  
                      l3400 DE76                        l3232 DEBC                        l3224 E0E0  
                      l3216 E0BC                        l3056 D8D8                        l3064 D8F6  
                      l3048 D8BE                        l3136 EAB0                        l4008 FE0A  
                      l4032 E500                        l3090 D6D2                        l3154 ECA4  
                      l4042 E53E                        l3404 DE8C                        l3084 D6CA  
                      l3092 D6D8                        l3260 DF4C                        l3252 DF1C  
                      l3068 D904                        l3148 EC00                        l4044 E54C  
                      l4052 E576                        l4140 E8CA                        l3318 DC5E  
                      l3414 D9AE                        l3238 DEDA                        l3182 E01E  
                      l3166 D5FC                        l4046 E55A                        l4054 E58E  
                      l2800 DB32                        l3088 D6CE                        l3504 ED24  
                      l3344 DAC2                        l3336 D748                        l3416 D9BA  
                      l3272 DF7A                        l3176 DFF2                        l4048 E568  
                      l3450 D784                        l3602 EF76                        l3522 ED94  
                      l3514 ED38                        l3354 DB1E                        l3426 D9EE  
                      l3418 D9BE                        l3442 D814                        l3434 D7E0  
                      l3282 DFA2                        l2812 DB7E                        l2804 DB40  
                      l3292 DBF8                        l3604 EF80                        l3516 ED6C  
                      l3508 ED2C                        l3348 DAF2                        l3436 D7EC  
                      l3284 DFAE                        l3276 DF8A                        l2814 DB9C  
                      l2806 DB4A                        l3390 DE4C                        l3630 F016  
                      l3622 EFF2                        l3614 EF92                        l3542 EE0A  
                      l3526 ED9C                        l2910 E1C6                        l3438 D7F0  
                      l2816 DBA6                        l2808 DB68                        l3368 DDD6  
                      l3448 D778                        l3608 EF88                        l2912 E1D0  
                      l2904 E1A4                        l2770 D60A                        l2850 D95E  
                      l2834 D912                        l3298 DC20                        l3386 DE3C  
                      l3714 F460                        l3626 F00E                        l3546 EE12  
                      l3490 ECFA                        l2930 E24E                        l2922 E204  
                      l2914 E1DA                        l2852 D96E                        l3396 DE64  
                      l3716 F468                        l3636 F030                        l3580 EEDC  
                      l3572 EE72                        l3492 ED02                        l2940 E27E  
                      l2924 E20E                        l2916 E1E2                        l3900 FA18  
                      l3740 F4EC                        l2854 D972                        l2950 DCDE  
                      l3398 DE70                        l3574 EE82                        l3558 EE36  
                      l3910 FA80                        l3830 F778                        l3822 F714  
                      l3806 F684                        l3664 F2E4                        l3648 F11C  
                      l3592 EF3A                        l3568 EE5A                        l3840 F7EA  
                      l3760 F572                        l3752 F54C                        l3736 F4DA  
                      l2970 DD38                        l3674 F306                        l3658 F2CA  
                      l2882 E14A                        l3922 FB6A                        l3906 FA30  
                      l3850 F842                        l3834 F79C                        l3770 F598  
                      l3762 F576                        l3754 F562                        l2980 DD60  
                      l2956 DD06                        l3668 F2EC                        l3588 EF32  
                      l3932 FBA8                        l3916 FB54                        l3860 F896  
                      l3836 F7AC                        l3924 FB74                        l3780 F5D2  
                      l3764 F57A                        l3748 F516                        l2974 DD48  
                      l3950 FC28                        l3918 FB5E                        l3846 F81E  
                      l3838 F7DA                        l3774 F5AA                        l3790 F630  
                      l3758 F56E                        l2984 DD70                        l2888 E174  
                      l3864 F8FA                        l3784 F5E4                        l3776 F5BE  
                      l3970 FC7E                        l3946 FC04                        l3890 F9E4  
                      l3882 F952                        l3866 F8FE                        l3972 FC82  
                      l3956 FC42                        l3796 F644                        l3788 F5EA  
                      l3958 FC46                        l3894 F9F0                        l3878 F936  
                      l3992 FCEC                        l3896 F9FE                        l3888 F9DA  
                      l3986 FCBA                        l3996 FD0C                        l3988 FCD0  
                      _CMD0 FF09                        _CMD1 FF07                        _CMD8 FF06  
                      _CMD9 FF04                        STR_1 FF1C                        STR_2 FF3D  
                      STR_3 FFB0                        STR_4 FFDC                        STR_5 FF88  
                      STR_6 FF7A                        STR_7 FFD1                        STR_8 FF5D  
                      STR_9 FFA3                        u3111 DBE0                        u2320 D612  
                      _LATD 000F8C                        u2330 D61E                        u2322 D614  
                      u3131 DC08                        u3211 DDBA                        u2332 D620  
                      u3230 DDF4                        u2345 D6BC                        u2346 D6BE  
                      u3235 DDEC                        u2701 DCEE                        u2471 E108  
                      u4215 E7F0                        u3361 ECDA                        u2481 E11C  
              printf@tmpval 0060                        u2681 DCC6                        u3660 F1F2  
                      u3820 F6BC                        u3645 F130                        u3670 F22C  
                      u3655 F1CA                        u2951 DFD6                        u3665 F1E8  
                      u3825 F6B2                        u4617 E514                        u3675 F222  
                      u2971 E002                        u4707 E7B4                        u4627 E598  
                      u4717 E7CE                        u4637 E5B2                        u4807 D864  
                      u4727 E856                        u4647 E608                        u4817 D886  
                      u4737 E870                        u4657 E622                        u4827 D6A4  
                      u4747 E8BA                        u4667 E66C                        u3980 FA0E  
                      u4837 D6AE                        u4757 ECFC                        u4677 E686  
                      u4767 ED12                        u4687 E706                        u4777 F462  
                      u4697 E720                        u4787 D83A                        u4797 D852  
           __end_of_SD_ACMD D732                        _main E4EA                ___ftpack@arg 0001  
              ___ftpack@exp 0004                        fsr2h 000FDA                        indf2 000FDF  
                      fsr2l 000FD9                        prodh 000FF4                        prodl 000FF3  
                      start 0000               __CFG_IESO$OFF 000000              initSD@argument 0041  
             __CFG_MCLRE$ON 000000                ___ftmul@cntr 0022                ___param_bank 000000  
              ___ftmul@sign 0023                ___fttol@exp1 0039                ___fttol@lval 0035  
                     ?_main 0001                       _CMD10 FF03                       _CMD12 FF02  
                     _CMD13 FF01                       _CMD16 FF00                       _CMD24 FEFD  
                     _CMD32 FEFB                       _CMD17 FEFF                       _CMD25 FEFC  
                     _CMD33 FEFA                       _CMD18 FEFE                       _CMD38 FEF9  
                     _CMD55 FEF8                       _CMD58 FEF7             __end_of___awdiv DA92  
           __end_of___ftadd E2A4                       STR_10 FF96                       STR_11 FF4D  
                     STR_12 FFBB                       STR_20 FF0B                       STR_13 FFE6  
                     STR_14 FFAD                       STR_15 FFC6                       STR_16 FFF0  
                     STR_17 FF6C                       STR_18 FFF9                       STR_19 FF2D  
           __end_of___awmod D90E              initSD@tempSize 0047             __end_of___ftdiv DCB6  
           __end_of___ftneg D670             __end_of___lldiv DA0E             __end_of___ftmul DDAA  
           ___awdiv@divisor 0009             __end_of___llmod D834             __end_of___ftsub D772  
           __end_of___fttol DE9E              initSD@response 0065             ___awdiv@counter 000B  
                     _TRISD 000F95                       _SSPIF 007CF3          initSD@last_OSCTUNE 0046  
             __CFG_PWRT$OFF 000000               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000                ___lltoft@exp 0011  
           __end_of_lcdInst D59C              __CFG_EBTR0$OFF 000000              __CFG_FCMEN$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000              __CFG_EBTR3$OFF 000000  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
           __end_of_initLCD D89E              __CFG_EBTRB$OFF 000000             __end_of_dpowers FE7B  
                     _scale E8D8             __end_of_isdigit D604               ___ftpack@sign 0005  
                     _putch D59C                 initSD@F3023 00AE             __end_of_spiInit D6F8  
                     tablat 000FF5             __end_of_spiSend D590             send_nibble@data 0002  
                     plusw1 000FE3                       plusw2 000FDB             __end_of_pulse_e D6C0  
               ?_SD_Command 0004                       status 000FD8                 initSD@i_411 005D  
               initSD@i_412 005E                 initSD@i_414 005C                 initSD@i_415 005F  
               initSD@i_418 0060              __CFG_PBADEN$ON 000000                __end_of_CMD0 FF0A  
              __end_of_CMD1 FF08                __end_of_CMD8 FF07                __end_of_CMD9 FF05  
           __initialization D5D0                __end_of_main E8D8                      ??_main 006E  
             ___fttol@sign1 0034               __activetblptr 000002        __size_of__tdiv_to_l_ 0132  
        SD_Command@response 000A                   ??_SD_ACMD 000F                      _ACMD22 FEF6  
                    _ACMD23 FEF5                      _ACMD41 FEF4                ?_send_nibble 0001  
          ___llmod@dividend 000E                      ?_scale 0024            ___awdiv@dividend 0007  
                    ?_putch 0001            __end_of___ftpack DBD0            __end_of___lltoft D7CE  
          __end_of___lwtoft D64C                      _OSCCON 000FD3                      _SDCard 0080  
                    _SSPBUF 000FC9              __CFG_XINST$OFF 000000            __end_of__powers_ FEA2  
                    ___ftge DA92                      ___wmul D670                   ??___awdiv 000B  
                 ??___ftadd 0034              __CFG_STVREN$ON 000000                   ??___awmod 0005  
                 ??___ftdiv 0012                   ??___ftneg 0004                   ??___lldiv 0009  
                 ??___ftmul 001B                   ??___llmod 0016                   ??___ftsub 0040  
                 ??___fttol 002F                      _initSD ECC8                      _fround E2A4  
                    clear_0 D5D6            ___awdiv@quotient 000D             ___awmod@divisor 0003  
           ___awmod@counter 0005                   ??_lcdInst 0004                      _printf F4CE  
     ___ftmul@f3_as_product 001F                   ??_initLCD 0005         __size_of_SD_Command 007E  
         __end_of_STOP_TRAN FEEF                   ??_isdigit 0001                ?_spiTransfer 0001  
              __mediumconst FE52                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                   ??_spiInit 0001                   ??_spiSend 0003  
                 ??_pulse_e 0001       pulse_e@interruptState 0001                  __accesstop 0080  
   __end_of__initialization D5DC                  ___ftadd@f1 002E                  ___ftadd@f2 0031  
                ___ftge@ff1 0001                  ___ftge@ff2 0004               __end_of_CMD10 FF04  
             __end_of_CMD12 FF03               __end_of_CMD13 FF02               __end_of_CMD16 FF01  
             __end_of_CMD24 FEFE               __end_of_CMD32 FEFC               __end_of_CMD17 FF00  
             __end_of_CMD25 FEFD               __end_of_CMD33 FEFB               __end_of_CMD18 FEFF  
             __end_of_CMD38 FEFA               __end_of_CMD55 FEF9               __end_of_CMD58 FEF8  
             ___rparam_used 000001                  ___ftdiv@f1 000C                  ___ftdiv@f2 000F  
                ___ftdiv@f3 0016                  ___ftneg@f1 0001                  ___ftmul@f1 0015  
                ___ftmul@f2 0018                  ___ftsub@f1 003A                  ___ftsub@f2 003D  
                ___fttol@f1 002B              __pcstackCOMRAM 0001                  ___lltoft@c 0009  
             __end_of_scale ECC8               __end_of_putch D5A8           _START_BLOCK_TOKEN FEEF  
                ___lwtoft@c 0009                  __div_to_l_ DE9E             __div_to_l_@exp1 000C  
           __div_to_l_@cntr 000B                     ??_scale 0027             __div_to_l_@quot 0007  
                   ??_putch 0004                  __pbssBANK0 0080               __div_to_l_@f1 0001  
             __div_to_l_@f2 0004                     ?___ftge 0001                     ?___wmul 000F  
 __end_of_START_BLOCK_TOKEN FEF0                     ?_initSD 0001          __size_of_send_byte 0012  
                   _CMD0CRC FF08                     ?_fround 0024                     _CMD8CRC FF05  
                 ?___ftpack 0001                     ?_printf 0040                   ?___lltoft 0009  
                 ?___lwtoft 0009                     _SD_ACMD D6F8                     _OSCTUNE 000F9B  
 spiTransfer@byteToTransfer 0002                     _SSPCON1 000FC6                     _SSPSTAT 000FC7  
      __size_of_send_nibble 0016                ??_SD_Command 0008          initSD@tempSize_417 0061  
         __end_of__npowers_ FEC9                     __Hparam 0000                  _scale$1434 0027  
                   __Lparam 0000             __size_of___ftge 0090                     ___awdiv DA0E  
                   ___ftadd E0F8                     ___awmod D89E                     ___ftdiv DBD0  
                   ___ftneg D64C                     ___lldiv D98C             __size_of___wmul 0026  
                   ___ftmul DCB6                     ___llmod D7CE                     ___ftsub D732  
                   ___fttol DDAA             __size_of_initSD 0806                     __pcinit D5D0  
                ??___ftpack 0006             __size_of_fround 0246                     __ramtop 1000  
                   _lcdInst D590                  ??___lltoft 000D                     __ptext0 E4EA  
                   __ptext1 F4CE                     __ptext2 E8D8                     __ptext3 D59C  
                   __ptext4 D5E6                     __ptext5 E2A4                     __ptext6 D670  
                   __ptext7 D89E                     __ptext8 DA0E                     __ptext9 DFC6  
           __size_of_printf 0984                  ??___lwtoft 000C                     _initLCD D834  
         __end_of_hexpowers FEE9                 ?__div_to_l_ 0001                     _dpowers FE53  
        __end_of_SD_Command D98C                     _isdigit D5E6            ___awmod@dividend 0001  
                   _spiInit D6C0                     _spiSend D586                     main@PNM 0076  
      __size_of_spiTransfer 0024                     _pulse_e D696        end_of_initialization D5DC  
                   initSD@i 005B       __end_of_R1_IDLE_STATE FEF3       __end_of_LCD_SIZE_HORZ FEEE  
         __end_of_send_byte D5BA       __end_of_LCD_SIZE_VERT FEED               __Lmediumconst FE52  
           ___lldiv@divisor 0005             ___lldiv@counter 000D                     printf@c 006D  
                   printf@f 0040                  _spiReceive D57E                     postdec2 000FDD  
                   postinc0 000FEE                     postinc2 000FDE              __tdiv_to_l_@f1 0001  
            __tdiv_to_l_@f2 0004               ??__tdiv_to_l_ 0007              spiInit@divider 0001  
                 _TRISCbits 000F94                   _TRISEbits 000F96                   _STOP_TRAN FEEE  
               SD_Command@n 0008              __end_of_ACMD22 FEF7              __end_of_ACMD23 FEF6  
            __end_of_ACMD41 FEF5                 ___ftdiv@exp 0019               send_byte@data 0003  
       __size_of__div_to_l_ 0128                 ___ftmul@exp 001E              __end_of___ftge DB22  
            __end_of___wmul D696           initSD@last_OSCCON 0045              __end_of_initSD F4CE  
            __end_of_fround E4EA              __end_of_printf FE52         start_initialization D5D0  
       __end_of__tdiv_to_l_ E0F8  __end_of_R1_ILLEGAL_COMMAND FEF2             ___llmod@divisor 0012  
           ___llmod@counter 0016                    ??___ftge 0007                 ?_spiReceive 0001  
                  ??___wmul 0013            __CFG_LPT1OSC$OFF 000000                    ??_initSD 003A  
                  ??_fround 0027                    ??_printf 004C                  fround@prec 002D  
         __size_of___ftpack 00AE           __size_of___lltoft 005C           __size_of___lwtoft 0024  
                  ?_SD_ACMD 000B                _isdigit$1058 0002           __CFG_CCP2MX$PORTC 000000  
             __pmediumconst FE52                  SD_ACMD@cmd 000F                  SD_ACMD@arg 000B  
                  ?___awdiv 0007                    ?___ftadd 002E                    ?___awmod 0001  
                  ?___ftdiv 000C                    ?___ftneg 0001                    ?___lldiv 0001  
                  ?___ftmul 0015                    ?___llmod 000E                    ?___ftsub 003A  
                 __npowers_ FEA2                    ?___fttol 002B                    ?_lcdInst 0001  
               __tdiv_to_l_ DFC6                ??__div_to_l_ 0007                    ?_initLCD 0001  
                  ?_isdigit 0001                    ?_spiInit 0001                    ?_spiSend 0001  
                 _hexpowers FEC9               ??_send_nibble 0002                    ?_pulse_e 0001  
            __size_of_scale 03F0         __size_of_spiReceive 0008              __size_of_putch 000C  
            ___wmul@product 0013                    _LATDbits 000F8C                    _LATEbits 000F8D  
                 _send_byte D5A8              _LCD_LINE1_ADDR FEEB              _LCD_LINE2_ADDR FF0A  
                spiSend@val 0003              _LCD_LINE3_ADDR FEEA              _LCD_LINE4_ADDR FEE9  
        __end_of__div_to_l_ DFC6            __CFG_WDTPS$32768 000000           ___wmul@multiplier 000F  
                printf@flag 005E                  printf@fval 0068               ??_spiTransfer 0001  
                printf@prec 006B                   main@month 0075            __size_of_SD_ACMD 003A  
    __end_of_LCD_LINE1_ADDR FEEC      __end_of_LCD_LINE2_ADDR FF0B      __end_of_LCD_LINE3_ADDR FEEB  
    __end_of_LCD_LINE4_ADDR FEEA         __end_of_send_nibble D5D0                  ?_send_byte 0001  
                  __Hrparam 0000                    __Lrparam 0000          __CFG_BOREN$SBORDIS 000000  
          __size_of___awdiv 0084            __size_of___ftadd 01AC            __size_of___awmod 0070  
          __size_of___ftdiv 00E6            __size_of___ftneg 0024            __size_of___lldiv 0082  
          __size_of___ftmul 00F4            __size_of___llmod 0066            __size_of___ftsub 0040  
          __size_of___fttol 00F4                    ___ftpack DB22                 _fround$1432 002A  
               _fround$1433 0027                    ___lltoft D772                    ___lwtoft D628  
          __size_of_lcdInst 000C            __size_of_initLCD 006A            __size_of_isdigit 001E  
                  __ptext10 DE9E                    __ptext11 D7CE                    __ptext20 D772  
                  __ptext12 D98C                    __ptext21 DDAA                    __ptext13 D732  
                  __ptext30 D834                    __ptext22 DCB6                    __ptext14 E0F8  
                  __ptext31 D590                    __ptext23 DBD0                    __ptext15 D64C  
                  __ptext32 D5A8                    __ptext24 DB22                    __ptext16 DA92  
                  __ptext33 D5BA                    __ptext25 D6F8                    __ptext17 ECC8  
                  __ptext34 D696                    __ptext26 D90E                    __ptext18 D6C0  
                  __ptext27 D586                    __ptext19 D628                    __ptext28 D57E  
                  __ptext29 D604            __size_of_spiInit 0038            __size_of_spiSend 000A  
                  __powers_ FE7B         __end_of_START_BLOCK FEF1            __size_of_pulse_e 002A  
       __end_of_spiTransfer D628               __size_of_main 03EE          _R1_ILLEGAL_COMMAND FEF1  
              ??_spiReceive 0003                   printf@idx 0057                   printf@len 0058  
                 printf@exp 005C                   printf@val 0064                    main@year 0073  
                 putch@data 0004                 _OSCTUNEbits 000F9B                  _INTCONbits 000FF2  
                  isdigit@c 0003                    scale@scl 002A                 _send_nibble D5BA  
        __end_of_spiReceive D586            __tdiv_to_l_@exp1 000F            __tdiv_to_l_@cntr 000E  
          __tdiv_to_l_@quot 000A               _R1_IDLE_STATE FEF2               _LCD_SIZE_HORZ FEED  
             _LCD_SIZE_VERT FEEC            ___lldiv@dividend 0001                 ??_send_byte 0003  
                _OSCCONbits 000FD3                    printf@ap 005A                    printf@cp 0055  
            _R1_READY_STATE FEF3                 lcdInst@data 0004                ?__tdiv_to_l_ 0001  
               _printf$1435 0052                 _START_BLOCK FEF0            ___lldiv@quotient 0009  
               _spiTransfer D604                 _SSPCON1bits 000FC6                  _SD_Command D90E  
